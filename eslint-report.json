[{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/contexts/AuthModalContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":11,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":11,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AuthModalContext - Compatibility Layer\n *\n * Re-exports the AuthModal context from the features directory\n * for backward compatibility with existing import paths.\n */\n\nexport {\n  AuthModalContext,\n  AuthModalProvider,\n  useAuthModal,\n  type AuthModalContextType,\n  type ModalType,\n  type PostAuthRedirect,\n} from '../../features/phase1/authentication/hooks/useAuthModal';\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/contexts/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/AuthLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/BuyerLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/LayoutSplit.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/LogoOnlyLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/SellerLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/layouts/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/buyer/BuyerOnboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/buyer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/seller/SellerOnboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/seller/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/signUpComplete/SignUpComplete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/onboarding/signUpComplete/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/passwordReset/ForgotPasswordPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/passwordReset/ResetPasswordPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/passwordReset/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/users/UserBilling.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/users/UserNotifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/users/UserProfile.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserData'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserData]","fix":{"range":[987,989],"text":"[loadUserData]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":45,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":65,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { authService } from '@/shared/services/auth';\nimport { Avatar, Card, CardBody, CardHeader, Input } from '@heroui/react';\nimport { Building2, Calendar, Edit, Mail, MapPin, Phone, Save, User, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UrlGenerator } from '../../../../shared/services/urls/urlGenerator';\nimport { User as UserType } from '../../../../shared/types';\n\nconst UserProfile: React.FC = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<UserType | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [profileData, setProfileData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    location: '',\n    company: '',\n    bio: '',\n  });\n\n  useEffect(() => {\n    loadUserData();\n  }, []);\n\n  const loadUserData = async () => {\n    try {\n      const authResult = await authService.checkAuth();\n      if (authResult.isAuthenticated && authResult.user) {\n        setUser(authResult.user);\n        setProfileData({\n          name: authResult.user.name || '',\n          email: authResult.user.email || '',\n          phone: authResult.user.phone || '',\n          location: authResult.user.location || '',\n          company: authResult.user.company || '',\n          bio: authResult.user.bio || '',\n        });\n      } else {\n        navigate(UrlGenerator.login());\n      }\n    } catch (_error) {\n      // logger.error('Failed to load user data:', error);\n      navigate(UrlGenerator.login());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n    try {\n      // TODO: Implement profile update API call\n      // await AuthenticationService.updateProfile(profileData);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      setEditing(false);\n      // Show success message\n      // logger.info('Profile updated successfully');\n    } catch (_error) {\n      // logger.error('Failed to update profile:', error);\n      // Show error message\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    if (user) {\n      setProfileData({\n        name: user.name || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        location: user.location || '',\n        company: user.company || '',\n        bio: user.bio || '',\n      });\n    }\n    setEditing(false);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Please log in to view your profile.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">User Profile</h1>\n          <p className=\"text-gray-600 mt-2\">Manage your personal information and preferences</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Profile Overview */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"border border-gray-200 shadow-sm\">\n              <CardBody className=\"p-6 text-center\">\n                <Avatar\n                  src={user.avatar || undefined}\n                  name={user.name || user.email}\n                  className=\"w-24 h-24 mx-auto mb-4 text-2xl\"\n                />\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">{user.name || 'User'}</h2>\n                <p className=\"text-gray-600 mb-4\">{user.email}</p>\n\n                <div className=\"space-y-2 text-sm text-gray-600\">\n                  {user.role && (\n                    <div className=\"flex items-center justify-center\">\n                      <Building2 className=\"w-4 h-4 mr-2\" />\n                      <span className=\"capitalize\">{user.role}</span>\n                    </div>\n                  )}\n                  {user.created_at && (\n                    <div className=\"flex items-center justify-center\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      <span>Member since {new Date(user.created_at).getFullYear()}</span>\n                    </div>\n                  )}\n                </div>\n\n                <Button\n                  className=\"w-full mt-6\"\n                  variant=\"primary\"\n                  onPress={() => setEditing(true)}\n                  startContent={<Edit className=\"w-4 h-4\" />}\n                >\n                  Edit Profile\n                </Button>\n              </CardBody>\n            </Card>\n          </div>\n\n          {/* Profile Details */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border border-gray-200 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between w-full\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Profile Information</h3>\n                    <p className=\"text-gray-600 text-sm\">Update your personal details</p>\n                  </div>\n                  {editing && (\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"tertiary\"\n                        onPress={handleCancel}\n                        startContent={<X className=\"w-4 h-4\" />}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"primary\"\n                        onPress={handleSave}\n                        isLoading={saving}\n                        startContent={!saving && <Save className=\"w-4 h-4\" />}\n                      >\n                        {saving ? 'Saving...' : 'Save Changes'}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                <div className=\"space-y-6\">\n                  {/* Name */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Full Name\n                    </label>\n                    {editing ? (\n                      <Input\n                        value={profileData.name}\n                        onChange={e => handleInputChange('name', e.target.value)}\n                        placeholder=\"Enter your full name\"\n                        startContent={<User className=\"w-4 h-4 text-gray-400\" />}\n                      />\n                    ) : (\n                      <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n                        <User className=\"w-4 h-4 text-gray-400 mr-3\" />\n                        <span className=\"text-gray-900\">{profileData.name || 'Not provided'}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Email */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Email Address\n                    </label>\n                    <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n                      <Mail className=\"w-4 h-4 text-gray-400 mr-3\" />\n                      <span className=\"text-gray-900\">{profileData.email}</span>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">Email cannot be changed</p>\n                  </div>\n\n                  {/* Phone */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Phone Number\n                    </label>\n                    {editing ? (\n                      <Input\n                        value={profileData.phone}\n                        onChange={e => handleInputChange('phone', e.target.value)}\n                        placeholder=\"Enter your phone number\"\n                        startContent={<Phone className=\"w-4 h-4 text-gray-400\" />}\n                      />\n                    ) : (\n                      <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n                        <Phone className=\"w-4 h-4 text-gray-400 mr-3\" />\n                        <span className=\"text-gray-900\">{profileData.phone || 'Not provided'}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Location */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Location</label>\n                    {editing ? (\n                      <Input\n                        value={profileData.location}\n                        onChange={e => handleInputChange('location', e.target.value)}\n                        placeholder=\"Enter your location\"\n                        startContent={<MapPin className=\"w-4 h-4 text-gray-400\" />}\n                      />\n                    ) : (\n                      <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n                        <MapPin className=\"w-4 h-4 text-gray-400 mr-3\" />\n                        <span className=\"text-gray-900\">\n                          {profileData.location || 'Not provided'}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Company */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Company</label>\n                    {editing ? (\n                      <Input\n                        value={profileData.company}\n                        onChange={e => handleInputChange('company', e.target.value)}\n                        placeholder=\"Enter your company name\"\n                        startContent={<Building2 className=\"w-4 h-4 text-gray-400\" />}\n                      />\n                    ) : (\n                      <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n                        <Building2 className=\"w-4 h-4 text-gray-400 mr-3\" />\n                        <span className=\"text-gray-900\">\n                          {profileData.company || 'Not provided'}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Bio */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bio</label>\n                    {editing ? (\n                      <textarea\n                        value={profileData.bio}\n                        onChange={e => handleInputChange('bio', e.target.value)}\n                        placeholder=\"Tell us about yourself...\"\n                        rows={4}\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\n                      />\n                    ) : (\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\n                        <span className=\"text-gray-900\">\n                          {profileData.bio || 'No bio provided'}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/users/UserProfileNew.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/users/UserSettings.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3524,3576],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4149,4201],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport {\n  CustomDropdown,\n  CustomInputField,\n  CustomPasswordInputField,\n} from '@/shared/components/forms';\nimport { AuthenticationService } from '@/shared/services/auth';\nimport { Card, CardBody, CardHeader, Divider, Switch } from '@heroui/react';\nimport {\n  Bell,\n  Building2,\n  Camera,\n  CheckCircle,\n  Edit3,\n  Globe,\n  Save,\n  Settings,\n  Shield,\n  User,\n} from 'lucide-react';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UrlGenerator } from '../../../../shared/services/urls/urlGenerator';\nimport { User as UserType } from '../../../../shared/types';\n\nconst UserSettings: React.FC = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<UserType | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('about');\n  const [settings, setSettings] = useState({\n    about: {\n      name: '',\n      location: '',\n      age: '',\n      languages: ['English', 'Nederlands'],\n      bio: '',\n      company: '',\n      position: '',\n    },\n    notifications: {\n      emailNotifications: true,\n      pushNotifications: true,\n      smsNotifications: false,\n      marketingEmails: false,\n      listingUpdates: true,\n      messageNotifications: true,\n      priceAlerts: true,\n    },\n    privacy: {\n      profileVisibility: 'public',\n      showEmail: false,\n      showPhone: false,\n      allowMessages: true,\n      dataSharing: false,\n    },\n    security: {\n      twoFactorAuth: false,\n      loginAlerts: true,\n      sessionTimeout: '30',\n    },\n    preferences: {\n      theme: 'light',\n      language: 'en',\n      timezone: 'Europe/Brussels',\n      currency: 'EUR',\n    },\n  });\n\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n\n  // const [showPasswords, setShowPasswords] = useState({\n  //   current: false,\n  //   new: false,\n  //   confirm: false,\n  // });\n\n  // Mock businesses owned data\n  const [businessesOwned] = useState([\n    { id: 1, name: 'Tech Solutions BV', industry: 'Technology', status: 'Active' },\n    { id: 2, name: 'Green Energy Co', industry: 'Renewable Energy', status: 'Sold' },\n  ]);\n\n  const loadUserData = useCallback(async () => {\n    try {\n      const authService = new AuthenticationService();\n      const authResult = await authService.checkAuth();\n      if (authResult.isAuthenticated && authResult.user) {\n        setUser(authResult.user);\n        // Pre-populate about section with user data\n        setSettings(prev => ({\n          ...prev,\n          about: {\n            ...prev.about,\n            name: authResult.user.name || '',\n            location: 'Neerpelt, België', // Mock location\n            age: '32', // Mock age\n            company: authResult.user.company_name || '',\n          },\n        }));\n      } else {\n        navigate(UrlGenerator.login());\n      }\n    } catch {\n      navigate(UrlGenerator.login());\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    loadUserData();\n  }, [loadUserData]);\n\n  const handleSaveSettings = async () => {\n    setSaving(true);\n    try {\n      // TODO: Implement settings save API call\n      // await AuthenticationService.updateUserSettings(settings);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.error('Error saving user settings:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handlePasswordChange = async () => {\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      return;\n    }\n\n    setSaving(true);\n    try {\n      // TODO: Implement password change API call\n      // await AuthenticationService.changePassword(passwordData);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      setPasswordData({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n      });\n    } catch (error) {\n      console.error('Error saving user settings:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updateSetting = (category: string, key: string, value: unknown) => {\n    setSettings(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category as keyof typeof prev],\n        [key]: value,\n      },\n    }));\n  };\n\n  // const togglePasswordVisibility = (field: keyof typeof showPasswords) => {\n  //   setShowPasswords(prev => ({\n  //     ...prev,\n  //     [field]: !prev[field],\n  //   }));\n  // };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Please log in to view your settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'about', label: 'About me', icon: User },\n    { id: 'notifications', label: 'Notifications', icon: Bell },\n    { id: 'privacy', label: 'Privacy', icon: Shield },\n    { id: 'security', label: 'Security', icon: Shield },\n    { id: 'preferences', label: 'Preferences', icon: Settings },\n  ];\n\n  const renderAboutSection = () => (\n    <div className=\"space-y-6\">\n      {/* Profile Image Section */}\n      <div className=\"flex items-center gap-6\">\n        <div className=\"relative\">\n          <div className=\"w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden\">\n            {user?.avatar ? (\n              <img src={user.avatar} alt=\"Profile\" className=\"w-full h-full object-cover\" />\n            ) : (\n              <User className=\"w-12 h-12 text-gray-400\" />\n            )}\n          </div>\n          <Button\n            isIconOnly\n            size=\"sm\"\n            variant=\"primary\"\n            className=\"absolute bottom-0 right-0 w-8 h-8\"\n          >\n            <Camera className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Profile Photo</h3>\n          <p className=\"text-sm text-gray-600\">Upload a photo to personalize your profile</p>\n        </div>\n      </div>\n\n      <Divider />\n\n      {/* Basic Information */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Basic Information</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <CustomInputField\n              label=\"Full Name\"\n              type=\"text\"\n              placeholder=\"Enter your full name\"\n              value={settings.about.name}\n              onChange={e => updateSetting('about', 'name', e.target.value)}\n              onBlur={() => {}}\n              name=\"name\"\n            />\n          </div>\n          <div>\n            <CustomInputField\n              label=\"Location\"\n              type=\"text\"\n              placeholder=\"Enter your location\"\n              value={settings.about.location}\n              onChange={e => updateSetting('about', 'location', e.target.value)}\n              onBlur={() => {}}\n              name=\"location\"\n            />\n          </div>\n          <div>\n            <CustomInputField\n              label=\"Age\"\n              type=\"number\"\n              placeholder=\"Enter your age\"\n              value={settings.about.age}\n              onChange={e => updateSetting('about', 'age', e.target.value)}\n              onBlur={() => {}}\n              name=\"age\"\n            />\n          </div>\n          <div>\n            <CustomInputField\n              label=\"Company\"\n              type=\"text\"\n              placeholder=\"Enter your company\"\n              value={settings.about.company}\n              onChange={e => updateSetting('about', 'company', e.target.value)}\n              onBlur={() => {}}\n              name=\"company\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <Divider />\n\n      {/* Languages */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Languages</h3>\n        <div className=\"space-y-2\">\n          {settings.about.languages.map((language, index) => (\n            <div key={index} className=\"flex items-center gap-2\">\n              <Globe className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-700\">{language}</span>\n            </div>\n          ))}\n          <Button\n            variant=\"tertiary\"\n            size=\"sm\"\n            startContent={<Edit3 className=\"w-4 h-4\" />}\n            className=\"mt-2\"\n          >\n            Edit Languages\n          </Button>\n        </div>\n      </div>\n\n      <Divider />\n\n      {/* Identity Verification */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Identity Verification</h3>\n        <div className=\"flex items-center gap-3 p-4 bg-green-50 rounded-lg border border-green-200\">\n          <CheckCircle className=\"w-6 h-6 text-green-600\" />\n          <div>\n            <p className=\"font-medium text-green-900\">Identity Verified</p>\n            <p className=\"text-sm text-green-700\">Your identity has been verified</p>\n          </div>\n        </div>\n      </div>\n\n      <Divider />\n\n      {/* Businesses Owned */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Businesses Owned</h3>\n        <div className=\"space-y-3\">\n          {businessesOwned.map(business => (\n            <div key={business.id} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n              <Building2 className=\"w-5 h-5 text-gray-400\" />\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-gray-900\">{business.name}</p>\n                <p className=\"text-sm text-gray-600\">{business.industry}</p>\n              </div>\n              <span\n                className={`px-2 py-1 text-xs rounded-full ${\n                  business.status === 'Active'\n                    ? 'bg-green-100 text-green-800'\n                    : 'bg-gray-100 text-gray-800'\n                }`}\n              >\n                {business.status}\n              </span>\n            </div>\n          ))}\n          <Button\n            variant=\"tertiary\"\n            size=\"sm\"\n            startContent={<Edit3 className=\"w-4 h-4\" />}\n            className=\"mt-2\"\n          >\n            Manage Businesses\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderNotificationsSettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Email Notifications</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Email Notifications</p>\n              <p className=\"text-sm text-gray-600\">Receive notifications via email</p>\n            </div>\n            <Switch\n              isSelected={settings.notifications.emailNotifications}\n              onValueChange={value => updateSetting('notifications', 'emailNotifications', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Listing Updates</p>\n              <p className=\"text-sm text-gray-600\">Get notified about your listing performance</p>\n            </div>\n            <Switch\n              isSelected={settings.notifications.listingUpdates}\n              onValueChange={value => updateSetting('notifications', 'listingUpdates', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Message Notifications</p>\n              <p className=\"text-sm text-gray-600\">Get notified about new messages</p>\n            </div>\n            <Switch\n              isSelected={settings.notifications.messageNotifications}\n              onValueChange={value => updateSetting('notifications', 'messageNotifications', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Price Alerts</p>\n              <p className=\"text-sm text-gray-600\">Get notified about price changes</p>\n            </div>\n            <Switch\n              isSelected={settings.notifications.priceAlerts}\n              onValueChange={value => updateSetting('notifications', 'priceAlerts', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Marketing Emails</p>\n              <p className=\"text-sm text-gray-600\">Receive promotional content and updates</p>\n            </div>\n            <Switch\n              isSelected={settings.notifications.marketingEmails}\n              onValueChange={value => updateSetting('notifications', 'marketingEmails', value)}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPrivacySettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Profile Visibility</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <CustomDropdown\n              label=\"Profile Visibility\"\n              placeholder=\"Select visibility\"\n              options={[\n                { value: 'public', label: 'Public' },\n                { value: 'private', label: 'Private' },\n                { value: 'contacts', label: 'Contacts Only' },\n              ]}\n              value={settings.privacy.profileVisibility}\n              onChange={value => updateSetting('privacy', 'profileVisibility', value)}\n              name=\"profileVisibility\"\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Show Email</p>\n              <p className=\"text-sm text-gray-600\">Display email on your profile</p>\n            </div>\n            <Switch\n              isSelected={settings.privacy.showEmail}\n              onValueChange={value => updateSetting('privacy', 'showEmail', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Show Phone</p>\n              <p className=\"text-sm text-gray-600\">Display phone number on your profile</p>\n            </div>\n            <Switch\n              isSelected={settings.privacy.showPhone}\n              onValueChange={value => updateSetting('privacy', 'showPhone', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Allow Messages</p>\n              <p className=\"text-sm text-gray-600\">Allow other users to message you</p>\n            </div>\n            <Switch\n              isSelected={settings.privacy.allowMessages}\n              onValueChange={value => updateSetting('privacy', 'allowMessages', value)}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderSecuritySettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Password</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <CustomPasswordInputField\n              label=\"Current Password\"\n              placeholder=\"Enter current password\"\n              value={passwordData.currentPassword}\n              onChange={e =>\n                setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))\n              }\n              onBlur={() => {}}\n              name=\"currentPassword\"\n            />\n          </div>\n          <div>\n            <CustomPasswordInputField\n              label=\"New Password\"\n              placeholder=\"Enter new password\"\n              value={passwordData.newPassword}\n              onChange={e => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}\n              onBlur={() => {}}\n              name=\"newPassword\"\n              showPasswordStrength\n            />\n          </div>\n          <div>\n            <CustomPasswordInputField\n              label=\"Confirm New Password\"\n              placeholder=\"Confirm new password\"\n              value={passwordData.confirmPassword}\n              onChange={e =>\n                setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))\n              }\n              onBlur={() => {}}\n              name=\"confirmPassword\"\n            />\n          </div>\n          <Button\n            variant=\"primary\"\n            onPress={handlePasswordChange}\n            isLoading={saving}\n            startContent={!saving && <Save className=\"w-4 h-4\" />}\n          >\n            {saving ? 'Changing Password...' : 'Change Password'}\n          </Button>\n        </div>\n      </div>\n      <Divider />\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Security Features</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Two-Factor Authentication</p>\n              <p className=\"text-sm text-gray-600\">Add an extra layer of security</p>\n            </div>\n            <Switch\n              isSelected={settings.security.twoFactorAuth}\n              onValueChange={value => updateSetting('security', 'twoFactorAuth', value)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-gray-900\">Login Alerts</p>\n              <p className=\"text-sm text-gray-600\">Get notified of new login attempts</p>\n            </div>\n            <Switch\n              isSelected={settings.security.loginAlerts}\n              onValueChange={value => updateSetting('security', 'loginAlerts', value)}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPreferencesSettings = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Appearance</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <CustomDropdown\n              label=\"Theme\"\n              placeholder=\"Select theme\"\n              options={[\n                { value: 'light', label: 'Light' },\n                { value: 'dark', label: 'Dark' },\n                { value: 'system', label: 'System' },\n              ]}\n              value={settings.preferences.theme}\n              onChange={value => updateSetting('preferences', 'theme', value)}\n              name=\"theme\"\n            />\n          </div>\n        </div>\n      </div>\n      <Divider />\n      <div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Localization</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <CustomDropdown\n              label=\"Language\"\n              placeholder=\"Select language\"\n              options={[\n                { value: 'en', label: 'English' },\n                { value: 'nl', label: 'Nederlands' },\n                { value: 'fr', label: 'Français' },\n                { value: 'de', label: 'Deutsch' },\n              ]}\n              value={settings.preferences.language}\n              onChange={value => updateSetting('preferences', 'language', value)}\n              name=\"language\"\n            />\n          </div>\n          <div>\n            <CustomDropdown\n              label=\"Timezone\"\n              placeholder=\"Select timezone\"\n              options={[\n                { value: 'Europe/Brussels', label: 'Europe/Brussels' },\n                { value: 'Europe/Amsterdam', label: 'Europe/Amsterdam' },\n                { value: 'Europe/Paris', label: 'Europe/Paris' },\n                { value: 'Europe/Berlin', label: 'Europe/Berlin' },\n              ]}\n              value={settings.preferences.timezone}\n              onChange={value => updateSetting('preferences', 'timezone', value)}\n              name=\"timezone\"\n            />\n          </div>\n          <div>\n            <CustomDropdown\n              label=\"Currency\"\n              placeholder=\"Select currency\"\n              options={[\n                { value: 'EUR', label: 'EUR (€)' },\n                { value: 'USD', label: 'USD ($)' },\n                { value: 'GBP', label: 'GBP (£)' },\n              ]}\n              value={settings.preferences.currency}\n              onChange={value => updateSetting('preferences', 'currency', value)}\n              name=\"currency\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">User Settings</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Manage your account preferences and security settings\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Settings Navigation */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"border border-gray-200 shadow-sm\">\n              <CardBody className=\"p-4\">\n                <nav className=\"space-y-2\">\n                  {tabs.map(tab => {\n                    const Icon = tab.icon;\n                    return (\n                      <button\n                        key={tab.id}\n                        onClick={() => setActiveTab(tab.id)}\n                        className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                          activeTab === tab.id\n                            ? 'bg-blue-100 text-blue-700'\n                            : 'text-gray-600 hover:bg-gray-100'\n                        }`}\n                      >\n                        <Icon className=\"w-4 h-4 mr-3\" />\n                        {tab.label}\n                      </button>\n                    );\n                  })}\n                </nav>\n              </CardBody>\n            </Card>\n          </div>\n\n          {/* Settings Content */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"border border-gray-200 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between w-full\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      {tabs.find(tab => tab.id === activeTab)?.label}\n                    </h3>\n                    <p className=\"text-gray-600 text-sm\">Configure your preferences</p>\n                  </div>\n                  <Button\n                    variant=\"primary\"\n                    onPress={handleSaveSettings}\n                    isLoading={saving}\n                    startContent={!saving && <Save className=\"w-4 h-4\" />}\n                  >\n                    {saving ? 'Saving...' : 'Save Changes'}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                {activeTab === 'about' && renderAboutSection()}\n                {activeTab === 'notifications' && renderNotificationsSettings()}\n                {activeTab === 'privacy' && renderPrivacySettings()}\n                {activeTab === 'security' && renderSecuritySettings()}\n                {activeTab === 'preferences' && renderPreferencesSettings()}\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserSettings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/account/users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/data-room/DocumentVault.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2507,2556],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6453,6503],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { authService } from '@/shared/services/auth';\nimport { User as UserType } from '@/shared/types';\nimport { Card, CardBody } from '@heroui/react';\nimport { Download, Eye, FolderOpen, Lock, Plus, Trash2, Upload } from 'lucide-react';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Navigation and sidebar are provided by DashboardLayout\n\ninterface DocumentFile {\n  id: string;\n  name: string;\n  size: number;\n  category: 'financial' | 'legal' | 'operations' | 'marketing' | 'other';\n  uploadDate: Date;\n  lastModified: Date;\n  type: string;\n  description?: string;\n  tags: string[];\n  isEncrypted: boolean;\n  version: number;\n  status: 'active' | 'archived' | 'draft';\n}\n\nconst DocumentVault = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<UserType | null>(null);\n  // Loading states removed for smooth UX\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Document management\n  const [documents, setDocuments] = useState<DocumentFile[]>([]);\n\n  // Categories configuration\n  const documentCategories = {\n    financial: {\n      name: 'Financial',\n      description: 'Financial statements, tax returns, bank statements',\n      color: 'bg-green-100 text-green-800',\n      icon: '💰',\n    },\n    legal: {\n      name: 'Legal',\n      description: 'Contracts, licenses, incorporation docs, leases',\n      color: 'bg-blue-100 text-blue-800',\n      icon: '⚖️',\n    },\n    operations: {\n      name: 'Operations',\n      description: 'Processes, SOPs, employee handbook, policies',\n      color: 'bg-purple-100 text-purple-800',\n      icon: '⚙️',\n    },\n    marketing: {\n      name: 'Marketing',\n      description: 'Brand assets, marketing materials, customer data',\n      color: 'bg-pink-100 text-pink-800',\n      icon: '📈',\n    },\n    other: {\n      name: 'Other',\n      description: 'Insurance, certifications, miscellaneous',\n      color: 'bg-gray-100 text-gray-800',\n      icon: '📁',\n    },\n  };\n\n  useEffect(() => {\n    const initializePage = async () => {\n      // Instant data loading - no loading state\n      try {\n        const authResult = await authService.checkAuthentication();\n        if (authResult.isAuthenticated && authResult.user) {\n          setUser(authResult.user);\n\n          // Load mock documents for demo\n          loadMockDocuments();\n        } else {\n          navigate('/');\n        }\n      } catch (error) {\n        console.error('Error loading documents:', error);\n        navigate('/');\n      } finally {\n        // No loading state to manage\n      }\n    };\n\n    initializePage();\n  }, [navigate]);\n\n  const loadMockDocuments = () => {\n    const mockDocs: DocumentFile[] = [\n      {\n        id: '1',\n        name: 'Financial_Statements_2023.pdf',\n        size: 2.4 * 1024 * 1024, // 2.4MB\n        category: 'financial',\n        uploadDate: new Date('2024-01-15'),\n        lastModified: new Date('2024-01-15'),\n        type: 'application/pdf',\n        description: 'Annual financial statements for 2023',\n        tags: ['2023', 'annual', 'statements'],\n        isEncrypted: true,\n        version: 1,\n        status: 'active',\n      },\n      {\n        id: '2',\n        name: 'Business_License.pdf',\n        size: 890 * 1024, // 890KB\n        category: 'legal',\n        uploadDate: new Date('2024-01-10'),\n        lastModified: new Date('2024-01-10'),\n        type: 'application/pdf',\n        description: 'Food service business license - expires 2025',\n        tags: ['license', 'legal', '2025'],\n        isEncrypted: true,\n        version: 2,\n        status: 'active',\n      },\n      {\n        id: '3',\n        name: 'Employee_Handbook_v2.docx',\n        size: 1.1 * 1024 * 1024, // 1.1MB\n        category: 'operations',\n        uploadDate: new Date('2024-01-08'),\n        lastModified: new Date('2024-01-12'),\n        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        description: 'Updated employee handbook with new policies',\n        tags: ['employees', 'policies', 'handbook'],\n        isEncrypted: false,\n        version: 2,\n        status: 'active',\n      },\n      {\n        id: '4',\n        name: 'Lease_Agreement_2024.pdf',\n        size: 3.2 * 1024 * 1024, // 3.2MB\n        category: 'legal',\n        uploadDate: new Date('2024-01-05'),\n        lastModified: new Date('2024-01-05'),\n        type: 'application/pdf',\n        description: '5-year lease renewal agreement',\n        tags: ['lease', 'real-estate', '2024-2029'],\n        isEncrypted: true,\n        version: 1,\n        status: 'active',\n      },\n      {\n        id: '5',\n        name: 'Tax_Returns_2022.pdf',\n        size: 1.8 * 1024 * 1024, // 1.8MB\n        category: 'financial',\n        uploadDate: new Date('2023-12-20'),\n        lastModified: new Date('2023-12-20'),\n        type: 'application/pdf',\n        description: 'Corporate tax returns for 2022',\n        tags: ['taxes', '2022', 'corporate'],\n        isEncrypted: true,\n        version: 1,\n        status: 'archived',\n      },\n      {\n        id: '6',\n        name: 'Brand_Guidelines.pdf',\n        size: 4.5 * 1024 * 1024, // 4.5MB\n        category: 'marketing',\n        uploadDate: new Date('2023-11-15'),\n        lastModified: new Date('2023-11-15'),\n        type: 'application/pdf',\n        description: 'Logo usage, colors, fonts, and brand standards',\n        tags: ['brand', 'design', 'guidelines'],\n        isEncrypted: false,\n        version: 1,\n        status: 'active',\n      },\n    ];\n\n    setDocuments(mockDocs);\n  };\n\n  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    setIsUploading(true);\n\n    try {\n      // Simulate upload process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const newDocuments: DocumentFile[] = Array.from(files).map(file => ({\n        id: `${Date.now()}-${Math.random()}`,\n        name: file.name,\n        size: file.size,\n        category: 'other', // Default category\n        uploadDate: new Date(),\n        lastModified: new Date(file.lastModified),\n        type: file.type,\n        description: `Uploaded ${file.name}`,\n        tags: [],\n        isEncrypted: true,\n        version: 1,\n        status: 'active' as const,\n      }));\n\n      setDocuments(prev => [...newDocuments, ...prev]);\n    } catch (error) {\n      console.error('Error uploading document:', error);\n    } finally {\n      setIsUploading(false);\n      // Reset the input\n      event.target.value = '';\n    }\n  }, []);\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (type: string, category: string) => {\n    if (type.includes('pdf')) return '📄';\n    if (type.includes('word') || type.includes('document')) return '📝';\n    if (type.includes('excel') || type.includes('spreadsheet')) return '📊';\n    if (type.includes('image')) return '🖼️';\n    return documentCategories[category as keyof typeof documentCategories]?.icon || '📁';\n  };\n\n  // Loading screens removed for smooth UX\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">Please log in to access your document vault.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex-1 px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-semibold text-gray-900 mb-2\">Document Vault</h1>\n              <p className=\"text-lg text-gray-600\">\n                Store and organize your important business documents securely\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"file\"\n                multiple\n                onChange={handleFileUpload}\n                className=\"hidden\"\n                id=\"file-upload\"\n                accept=\".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg\"\n              />\n              <Button\n                variant=\"primary\"\n                startContent={<Upload className=\"w-4 h-4\" />}\n                onPress={() => document.getElementById('file-upload')?.click()}\n                isLoading={isUploading}\n              >\n                {isUploading ? 'Uploading...' : 'Upload Documents'}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Documents List */}\n        {documents.length === 0 ? (\n          <Card className=\"border border-gray-200 shadow-sm\">\n            <CardBody className=\"text-center py-16\">\n              <FolderOpen className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Documents Yet</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Upload your first document to get started with your secure vault\n              </p>\n              <Button\n                variant=\"primary\"\n                startContent={<Plus className=\"w-4 h-4\" />}\n                onPress={() => document.getElementById('file-upload')?.click()}\n              >\n                Upload First Document\n              </Button>\n            </CardBody>\n          </Card>\n        ) : (\n          <div className=\"space-y-2\">\n            {documents.map(doc => (\n              <div\n                key={doc.id}\n                className=\"border border-gray-200 rounded-lg hover:shadow-sm hover:border-gray-300 transition-all cursor-pointer p-4\"\n              >\n                {/* List View */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                    <div className=\"text-2xl\">{getFileIcon(doc.type, doc.category)}</div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-medium text-gray-900 truncate\">{doc.name}</h3>\n                        {doc.isEncrypted && <Lock className=\"w-4 h-4 text-gray-500\" />}\n                        {doc.version > 1 && (\n                          <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                            v{doc.version}\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-500 truncate\">{doc.description}</p>\n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <span className=\"text-xs text-gray-500\">\n                          {documentCategories[doc.category].name}\n                        </span>\n                        <span className=\"text-xs text-gray-500\">{formatFileSize(doc.size)}</span>\n                        <span className=\"text-xs text-gray-500\">\n                          {doc.uploadDate.toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-1 ml-4\">\n                    <Button\n                      variant=\"tertiary\"\n                      isIconOnly\n                      size=\"sm\"\n                      className=\"text-gray-500 hover:text-gray-700\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"tertiary\"\n                      isIconOnly\n                      size=\"sm\"\n                      className=\"text-gray-500 hover:text-gray-700\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"tertiary\"\n                      isIconOnly\n                      size=\"sm\"\n                      className=\"text-gray-500 hover:text-red-600\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentVault;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/data-room/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/management/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/overview/BusinessOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/overview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/reports/BusinessValuation.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'authService' object construction makes the dependencies of useEffect Hook (at line 125) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'authService' in its own useMemo() Hook.","line":14,"column":9,"nodeType":"VariableDeclarator","endLine":14,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ValuationDashboard, type ValuationReport } from '@/features/phase1/business/valuation';\nimport ListingNudgeModal from '@/shared/components/modals/domains/business/ListingNudgeModal';\nimport ValuationModal from '@/shared/components/modals/ValuationModal';\nimport { AuthenticationService } from '@/shared/services/auth';\nimport { User } from '@/shared/types';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Navigation and sidebar are provided by DashboardLayout\n\n// Types are now imported from business-dashboard features\n\nconst BusinessValuation = () => {\n  const navigate = useNavigate();\n  const authService = new AuthenticationService();\n  const [user, setUser] = useState<User | null>(null);\n  const [businessValuation, setBusinessValuation] = useState<ValuationReport | null>(null);\n  const [historicalValuations, setHistoricalValuations] = useState<ValuationReport[]>([]);\n  const [isValuationModalOpen, setIsValuationModalOpen] = useState<boolean>(false);\n  const [isListingNudgeModalOpen, setIsListingNudgeModalOpen] = useState<boolean>(false);\n  // const [currentValuationData, setCurrentValuationData] = useState<any>(null);\n  const [currentBusinessValue, setCurrentBusinessValue] = useState<number>(0);\n\n  // Use business valuation hook\n  // const {\n  //   inputs,\n  //   results,\n  //   isLoading: valuationLoading,\n  //   calculateValuation,\n  //   updateInputs,\n  //   saveValuation,\n  //   exportValuation,\n  // } = useBusinessValuation();\n  // Loading states removed for smooth UX\n\n  useEffect(() => {\n    const initializePage = async () => {\n      // Instant data loading - no loading state\n      try {\n        // Get authenticated user\n        const authResult = await authService.checkAuthentication();\n        if (authResult.isAuthenticated && authResult.user) {\n          setUser(authResult.user);\n\n          // TODO: Replace with actual API calls once backend is fully implemented\n          // Mock valuation data (completed valuation)\n          setBusinessValuation({\n            id: 'valuation-1',\n            estimated_value: 850000,\n            currency: 'EUR',\n            valuation_date: '2024-01-10',\n            confidence_level: 'high',\n            methodology: 'Comparable Sales & DCF Analysis',\n            status: 'completed',\n            last_updated: '2024-01-15',\n            revenue_multiple: 3.2,\n            ebitda_multiple: 8.5,\n            industry_average: 7.2,\n            market_conditions: 'favorable',\n            key_drivers: [\n              'Strong recurring revenue base',\n              'Prime location with long-term lease',\n              'Experienced management team',\n              'Growing market demand',\n              'Proprietary business processes',\n            ],\n            risk_factors: [\n              'Key person dependency',\n              'Market competition increasing',\n              'Economic uncertainty',\n              'Regulatory changes possible',\n              'Customer concentration risk',\n            ],\n            next_review_date: '2024-07-10',\n          });\n\n          // Mock historical valuations data\n          setHistoricalValuations([\n            {\n              id: 'valuation-hist-1',\n              estimated_value: 780000,\n              currency: 'EUR',\n              valuation_date: '2023-07-10',\n              confidence_level: 'medium',\n              methodology: 'Comparable Sales Analysis',\n              status: 'completed',\n              last_updated: '2023-07-15',\n              revenue_multiple: 3.0,\n              ebitda_multiple: 7.8,\n              industry_average: 7.2,\n              market_conditions: 'stable',\n              key_drivers: ['Steady revenue growth', 'Good location', 'Established customer base'],\n              risk_factors: ['Market competition', 'Economic uncertainty'],\n              next_review_date: '2024-01-10',\n            },\n            {\n              id: 'valuation-hist-2',\n              estimated_value: 720000,\n              currency: 'EUR',\n              valuation_date: '2023-01-10',\n              confidence_level: 'low',\n              methodology: 'Asset-Based Valuation',\n              status: 'completed',\n              last_updated: '2023-01-15',\n              revenue_multiple: 2.8,\n              ebitda_multiple: 7.2,\n              industry_average: 7.2,\n              market_conditions: 'challenging',\n              key_drivers: ['Asset value', 'Basic operations'],\n              risk_factors: ['Market volatility', 'Limited growth prospects'],\n              next_review_date: '2023-07-10',\n            },\n          ]);\n        } else {\n          // Redirect to login if not authenticated\n          navigate('/');\n        }\n      } catch {\n        navigate('/');\n      } finally {\n        // No loading state to manage\n      }\n    };\n\n    initializePage();\n  }, [navigate, authService]);\n\n  // Handler functions for Caregiver nudge system\n  const handleCreateValuation = () => {\n    setIsValuationModalOpen(true);\n  };\n\n  const handleListingNudge = (valuationData: unknown, businessValue: number) => {\n    // setCurrentValuationData(valuationData);\n    setCurrentBusinessValue(businessValue);\n    setIsListingNudgeModalOpen(true);\n  };\n\n  const handleCreateListingFromNudge = () => {\n    setIsListingNudgeModalOpen(false);\n    navigate('/my-business');\n  };\n\n  // Loading screens removed for smooth UX\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">Please log in to access your valuation.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex-1 px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Business Valuation</h1>\n          <p className=\"mt-2 text-gray-600\">\n            Get professional business valuations and track your business value over time.\n          </p>\n        </div>\n\n        {/* Valuation Dashboard */}\n        <ValuationDashboard\n          currentValuation={businessValuation}\n          historicalValuations={historicalValuations}\n          onCreateValuation={handleCreateValuation}\n          onCreateListing={() => handleListingNudge(null, businessValuation?.estimated_value || 0)}\n          onUpdateValuation={() => {\n            // TODO: Navigate to valuation update wizard\n          }}\n        />\n\n        {/* Valuation Modal */}\n        <ValuationModal\n          isOpen={isValuationModalOpen}\n          onClose={() => setIsValuationModalOpen(false)}\n          onSignupPrompt={() => {}} // Not used for authenticated users\n          onComplete={() => {}} // Fallback\n        />\n\n        {/* Listing Nudge Modal */}\n        <ListingNudgeModal\n          isOpen={isListingNudgeModalOpen}\n          onClose={() => setIsListingNudgeModalOpen(false)}\n          onCreateListing={handleCreateListingFromNudge}\n          businessValue={currentBusinessValue}\n          businessName={user?.company_name || 'Your Business'}\n          industry={user?.industry || 'your industry'}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessValuation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/reports/GetFreeValuation.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'handleCreateListing' is assigned a value but never used.","line":122,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCreateListing' is assigned a value but never used.","line":122,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { authService } from '@/shared/services/auth';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Navigation and sidebar are provided by DashboardLayout\n\ninterface BusinessValuation {\n  id: string;\n  estimated_value: number;\n  currency: string;\n  valuation_date: string;\n  confidence_level: 'high' | 'medium' | 'low';\n  methodology: string;\n  status: 'completed' | 'in_progress' | 'draft' | 'expired';\n  last_updated?: string;\n  revenue_multiple?: number;\n  ebitda_multiple?: number;\n  industry_average?: number;\n  market_conditions?: string;\n  key_drivers?: string[];\n  risk_factors?: string[];\n  next_review_date?: string;\n}\n\nconst GetFreeValuation = () => {\n  const navigate = useNavigate();\n  // const [user, setUser] = useState<UserType | null>(null);\n  const [businessValuation, setBusinessValuation] = useState<BusinessValuation | null>(null);\n  // const [historicalValuations, setHistoricalValuations] = useState<BusinessValuation[]>([]);\n  // Loading states removed for smooth UX\n\n  useEffect(() => {\n    const initializePage = async () => {\n      // Instant data loading - no loading state\n      try {\n        const authResult = await authService.checkAuthentication();\n        if (authResult.isAuthenticated && authResult.user) {\n          // setUser(authResult.user);\n\n          // Mock valuation data\n          setBusinessValuation({\n            id: 'valuation-1',\n            estimated_value: 850000,\n            currency: 'EUR',\n            valuation_date: '2024-01-10',\n            confidence_level: 'high',\n            methodology: 'Comparable Sales & DCF Analysis',\n            status: 'completed',\n            last_updated: '2024-01-15',\n            revenue_multiple: 3.2,\n            ebitda_multiple: 8.5,\n            industry_average: 7.2,\n            market_conditions: 'favorable',\n            key_drivers: [\n              'Strong recurring revenue base',\n              'Prime location with long-term lease',\n              'Experienced management team',\n              'Growing market demand',\n              'Proprietary business processes',\n            ],\n            risk_factors: [\n              'Key person dependency',\n              'Market competition increasing',\n              'Economic uncertainty',\n              'Regulatory changes possible',\n              'Customer concentration risk',\n            ],\n            next_review_date: '2024-07-10',\n          });\n\n          // Mock historical valuations\n          // setHistoricalValuations([\n          //   {\n          //     id: 'valuation-2',\n          //     estimated_value: 780000,\n          //     currency: 'EUR',\n          //     valuation_date: '2023-10-10',\n          //     confidence_level: 'high',\n          //     methodology: 'Comparable Sales Analysis',\n          //     status: 'completed',\n          //     last_updated: '2023-10-15',\n          //     revenue_multiple: 2.8,\n          //     ebitda_multiple: 7.8,\n          //     industry_average: 7.0,\n          //     market_conditions: 'stable',\n          //   },\n          //   {\n          //     id: 'valuation-3',\n          //     estimated_value: 720000,\n          //     currency: 'EUR',\n          //     valuation_date: '2023-07-10',\n          //     confidence_level: 'medium',\n          //     methodology: 'Asset-Based Valuation',\n          //     status: 'completed',\n          //     last_updated: '2023-07-15',\n          //     revenue_multiple: 2.6,\n          //     ebitda_multiple: 7.2,\n          //     industry_average: 6.8,\n          //     market_conditions: 'challenging',\n          //   },\n          // ]);\n        } else {\n          navigate('/');\n        }\n      } catch {\n        navigate('/');\n      } finally {\n        // No loading state to manage\n      }\n    };\n\n    initializePage();\n  }, [navigate]);\n\n  // const handleCreateValuation = () => {\n  //   // TODO: Navigate to valuation wizard or open modal\n  // };\n\n  // const handleUpdateValuation = () => {\n  //   // TODO: Navigate to valuation update wizard\n  // };\n\n  const handleCreateListing = () => {\n    navigate('/my-business/listings');\n  };\n\n  // Loading screens removed for smooth user experience\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation and sidebar provided by DashboardLayout */}\n      <div className=\"max-w-7xl mx-auto px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Get Free Valuation</h1>\n          <p className=\"text-gray-600\">\n            Discover your business value with our professional valuation tools\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {businessValuation ? (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Current Valuation</h3>\n              <p className=\"text-2xl font-bold text-green-600\">\n                €{businessValuation.estimated_value.toLocaleString()}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                Last updated: {new Date(businessValuation.valuation_date).toLocaleDateString()}\n              </p>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500\">No valuation available yet.</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GetFreeValuation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/reports/ValuationTool.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💰 Business Valuation Tool - Dashboard Version\n * Location: src/app/pages/business/reports/ValuationTool.tsx\n * Purpose: Professional business valuation tool for authenticated users\n *\n * Features:\n * - Empty state with valuation modal integration\n * - Display existing valuation reports with dates\n * - Professional reporting\n * - Data persistence\n */\n\nimport { ValuationCard } from '@/shared/components/business';\nimport { Button } from '@/shared/components/buttons';\nimport ValuationModal from '@/shared/components/modals/ValuationModal';\nimport { Card, CardBody } from '@heroui/react';\nimport { Calculator, TrendingUp } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../providers/auth-provider';\n\ninterface ValuationReport {\n  id: string;\n  date: string;\n  businessValue: number;\n  method: string;\n  confidence: 'high' | 'medium' | 'low';\n  lowRange: number;\n  highRange: number;\n  revenueMultiple: number;\n  ebitdaMultiple: number;\n  industryAverage: number;\n  monthsValid: number;\n  inputs: {\n    businessType: string;\n    sharesForSale: number;\n    revenue2025: number;\n    revenue2024: number;\n    revenue2023: number;\n    ebitda2025: number;\n    ebitda2024: number;\n    ebitda2023: number;\n    marketMultiplier: number;\n  };\n}\n\nconst ValuationTool: React.FC = () => {\n  const { isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const [isValuationModalOpen, setIsValuationModalOpen] = useState(false);\n  const [valuationReports, setValuationReports] = useState<ValuationReport[]>([]);\n\n  // Check authentication\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate('/');\n    }\n  }, [isAuthenticated, navigate]);\n\n  // Load existing valuation reports (empty by default)\n  useEffect(() => {\n    // In a real app, this would load from the backend\n    // For now, start with empty state\n    setValuationReports([]);\n  }, []);\n\n  const handleOpenValuationModal = () => {\n    setIsValuationModalOpen(true);\n  };\n\n  const handleCloseValuationModal = () => {\n    setIsValuationModalOpen(false);\n  };\n\n  const handleValuationComplete = (valuationData: any) => {\n    // In a real app, this would save to the backend\n    const newReport: ValuationReport = {\n      id: Date.now().toString(),\n      date: new Date().toISOString().split('T')[0],\n      businessValue: 1250000, // This would come from the actual calculation\n      method: 'Combined Analysis',\n      confidence: 'high',\n      lowRange: 1000000,\n      highRange: 1500000,\n      revenueMultiple: 3.2,\n      ebitdaMultiple: 8.5,\n      industryAverage: 7.2,\n      monthsValid: 6,\n      inputs: valuationData,\n    };\n\n    setValuationReports(prev => [newReport, ...prev]);\n    setIsValuationModalOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header - Updated to remove tabs */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Business Valuation Reports</h1>\n              <p className=\"text-lg text-gray-600\">\n                Track your business value over time with professional valuations\n              </p>\n            </div>\n            <Button\n              variant=\"primary\"\n              startContent={<Calculator className=\"w-4 h-4\" />}\n              onPress={handleOpenValuationModal}\n            >\n              New Valuation\n            </Button>\n          </div>\n        </div>\n\n        {/* Content */}\n        {valuationReports.length === 0 ? (\n          // Empty State\n          <Card className=\"border border-gray-200 shadow-sm\">\n            <CardBody className=\"p-12 text-center\">\n              <div className=\"max-w-md mx-auto\">\n                <div className=\"w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <TrendingUp className=\"w-8 h-8 text-primary-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                  No Valuation Reports Yet\n                </h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Get your first professional business valuation to track your company's value over\n                  time.\n                </p>\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  startContent={<Calculator className=\"w-5 h-5\" />}\n                  onPress={handleOpenValuationModal}\n                  className=\"px-8\"\n                >\n                  Get My First Valuation\n                </Button>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          // Valuation Reports List\n          <div className=\"space-y-4\">\n            {valuationReports.map(report => (\n              <ValuationCard\n                key={report.id}\n                id={report.id}\n                date={report.date}\n                businessValue={report.businessValue}\n                method={report.method}\n                confidence={report.confidence}\n                lowRange={report.lowRange}\n                highRange={report.highRange}\n                revenueMultiple={report.revenueMultiple}\n                ebitdaMultiple={report.ebitdaMultiple}\n                industryAverage={report.industryAverage}\n                monthsValid={report.monthsValid}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Valuation Modal */}\n        <ValuationModal\n          isOpen={isValuationModalOpen}\n          onClose={handleCloseValuationModal}\n          onSignupPrompt={handleValuationComplete}\n          onComplete={handleValuationComplete}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ValuationTool;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/business/reports/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/CheckoutCancel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/CheckoutFailed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/CheckoutPending.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/CheckoutProcessing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/PricingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/checkout.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'selectedPlan' is defined but never used.","line":56,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedPlan' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'billing' is defined but never used.","line":58,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'billing' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":64,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":64,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { CustomDropdown, CustomInputField } from '@/shared/components/forms';\nimport Container from '@/shared/components/layout/container/Container';\nimport { Card, CardBody, CardHeader } from '@heroui/react';\nimport { AlertCircle, ArrowLeft, Check, CreditCard, Lock, Shield, TrendingUp } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { createCheckoutSessionAPI } from '../../../shared/services/payments';\n\nconst planDetails = {\n  starter: {\n    name: 'Starter',\n    description: 'Perfect for individual business owners',\n    features: [\n      'List 1 business for sale',\n      'Basic business valuation',\n      'Email support',\n      'Standard listing visibility',\n      'Basic analytics',\n      'Document upload (up to 10MB)',\n    ],\n  },\n  professional: {\n    name: 'Professional',\n    description: 'Ideal for growing businesses',\n    features: [\n      'List up to 3 businesses',\n      'Advanced business valuation',\n      'Priority support',\n      'Enhanced listing visibility',\n      'Advanced analytics & insights',\n      'Document upload (up to 100MB)',\n      'Lead management tools',\n      'Custom listing templates',\n    ],\n  },\n  enterprise: {\n    name: 'Enterprise',\n    description: 'For large businesses and brokers',\n    features: [\n      'Unlimited business listings',\n      'Premium business valuation',\n      'Dedicated account manager',\n      'Maximum listing visibility',\n      'Advanced analytics & reporting',\n      'Unlimited document upload',\n      'Advanced lead management',\n      'White-label options',\n      'API access',\n      'Custom integrations',\n    ],\n  },\n};\n\nconst CheckoutForm = ({\n  selectedPlan,\n  priceId,\n  billing,\n}: {\n  selectedPlan: string;\n  priceId: string;\n  billing: string;\n}) => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [customerInfo, setCustomerInfo] = useState({\n    email: '',\n    name: '',\n    company: '',\n    country: 'US',\n  });\n\n  // Form validation\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!customerInfo.email.trim()) {\n      errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(customerInfo.email)) {\n      errors.email = 'Please enter a valid email address';\n    }\n\n    if (!customerInfo.name.trim()) {\n      errors.name = 'Full name is required';\n    }\n\n    if (!customerInfo.country) {\n      errors.country = 'Country is required';\n    }\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // Create checkout session\n      const result = await createCheckoutSessionAPI(priceId);\n\n      if (!result.sessionId || !result.url) {\n        setError('Failed to create checkout session');\n        setLoading(false);\n        return;\n      }\n\n      // The Stripe service should handle the redirect\n      // If we reach here, something went wrong\n      setError('Failed to redirect to payment. Please try again.');\n      setLoading(false);\n    } catch (err: unknown) {\n      setError((err as Error).message || 'An unexpected error occurred');\n      setLoading(false);\n    }\n  };\n\n  const countries = [\n    { key: 'US', label: 'United States' },\n    { key: 'CA', label: 'Canada' },\n    { key: 'GB', label: 'United Kingdom' },\n    { key: 'AU', label: 'Australia' },\n    { key: 'DE', label: 'Germany' },\n    { key: 'FR', label: 'France' },\n    { key: 'ES', label: 'Spain' },\n    { key: 'IT', label: 'Italy' },\n    { key: 'NL', label: 'Netherlands' },\n    { key: 'SE', label: 'Sweden' },\n    { key: 'NO', label: 'Norway' },\n    { key: 'DK', label: 'Denmark' },\n    { key: 'FI', label: 'Finland' },\n    { key: 'CH', label: 'Switzerland' },\n    { key: 'AT', label: 'Austria' },\n    { key: 'BE', label: 'Belgium' },\n    { key: 'IE', label: 'Ireland' },\n    { key: 'PT', label: 'Portugal' },\n    { key: 'LU', label: 'Luxembourg' },\n  ];\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Customer Information */}\n      <Card className=\"bg-zinc-900/80 border-zinc-700/40\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <CreditCard className=\"w-5 h-5 text-blue-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Contact Information</h3>\n          </div>\n        </CardHeader>\n        <CardBody className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <CustomInputField\n                label=\"Full Name\"\n                type=\"text\"\n                placeholder=\"John Doe\"\n                value={customerInfo.name}\n                onChange={e => setCustomerInfo({ ...customerInfo, name: e.target.value })}\n                onBlur={() => {}}\n                name=\"name\"\n                required\n                error={validationErrors.name}\n                className=\"[&_input]:bg-zinc-800 [&_input]:text-white [&_label]:text-zinc-400 [&_.error]:text-red-400\"\n              />\n            </div>\n            <div>\n              <CustomInputField\n                label=\"Work Email\"\n                type=\"email\"\n                placeholder=\"john@agency.com\"\n                value={customerInfo.email}\n                onChange={e => setCustomerInfo({ ...customerInfo, email: e.target.value })}\n                onBlur={() => {}}\n                name=\"email\"\n                required\n                error={validationErrors.email}\n                className=\"[&_input]:bg-zinc-800 [&_input]:text-white [&_label]:text-zinc-400 [&_.error]:text-red-400\"\n              />\n            </div>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <CustomInputField\n                label=\"Company Name\"\n                type=\"text\"\n                placeholder=\"Your Agency\"\n                value={customerInfo.company}\n                onChange={e => setCustomerInfo({ ...customerInfo, company: e.target.value })}\n                onBlur={() => {}}\n                name=\"company\"\n                className=\"[&_input]:bg-zinc-800 [&_input]:text-white [&_label]:text-zinc-400\"\n              />\n            </div>\n            <div>\n              <CustomDropdown\n                label=\"Country\"\n                placeholder=\"Select your country\"\n                options={countries.map(country => ({\n                  value: country.key,\n                  label: country.label,\n                }))}\n                value={customerInfo.country}\n                onChange={value => setCustomerInfo({ ...customerInfo, country: value })}\n                error={validationErrors.country}\n                touched={!!validationErrors.country}\n                required={true}\n                name=\"country\"\n              />\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Payment Information */}\n      <Card className=\"bg-zinc-900/80 border-zinc-700/40\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Shield className=\"w-5 h-5 text-green-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Payment & Security</h3>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <div className=\"bg-blue-900/20 p-4 rounded-lg border border-blue-700/30\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 bg-blue-600/20 rounded-lg\">\n                  <Shield className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <h4 className=\"text-blue-200 font-medium mb-1\">Secure Stripe Checkout</h4>\n                  <p className=\"text-blue-300 text-sm leading-relaxed\">\n                    You&apos;ll be redirected to Stripe&apos;s secure payment page to complete your\n                    purchase. Your payment information is encrypted and never stored on our servers.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n              <div className=\"text-center p-3 bg-zinc-800/50 rounded-lg\">\n                <div className=\"text-xs text-zinc-400 mb-1\">Accepted Cards</div>\n                <div className=\"text-sm text-white font-medium\">Visa, Mastercard</div>\n              </div>\n              <div className=\"text-center p-3 bg-zinc-800/50 rounded-lg\">\n                <div className=\"text-xs text-zinc-400 mb-1\">Security</div>\n                <div className=\"text-sm text-white font-medium\">256-bit SSL</div>\n              </div>\n              <div className=\"text-center p-3 bg-zinc-800/50 rounded-lg\">\n                <div className=\"text-xs text-zinc-400 mb-1\">Free Trial</div>\n                <div className=\"text-sm text-white font-medium\">14 Days</div>\n              </div>\n              <div className=\"text-center p-3 bg-zinc-800/50 rounded-lg\">\n                <div className=\"text-xs text-zinc-400 mb-1\">Cancel</div>\n                <div className=\"text-sm text-white font-medium\">Anytime</div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Error Display */}\n      {error && (\n        <Card className=\"bg-red-900/40 border-red-700/40\">\n          <CardBody>\n            <div className=\"flex items-center gap-3\">\n              <AlertCircle className=\"w-5 h-5 text-red-400\" />\n              <div>\n                <p className=\"text-red-200 font-medium\">Payment Error</p>\n                <p className=\"text-red-300 text-sm\">{error}</p>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Submit Button */}\n      <Button\n        type=\"submit\"\n        variant=\"primary\"\n        size=\"lg\"\n        disabled={!validateForm() || loading}\n        className=\"w-full\"\n      >\n        {loading ? 'Processing...' : 'Complete Purchase'}\n      </Button>\n\n      {/* Terms and Security Notice */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-center space-x-2 text-sm text-zinc-400\">\n          <Lock className=\"h-4 w-4\" />\n          <span>Secured by 256-bit SSL encryption</span>\n        </div>\n        <p className=\"text-xs text-zinc-500 text-center leading-relaxed\">\n          By clicking &quot;Complete Purchase&quot;, you agree to our{' '}\n          <a href=\"/terms\" className=\"text-purple-400 hover:text-purple-300 underline\">\n            Terms of Service\n          </a>{' '}\n          and{' '}\n          <a href=\"/privacy\" className=\"text-purple-400 hover:text-purple-300 underline\">\n            Privacy Policy\n          </a>\n          . You can cancel your subscription at any time.\n        </p>\n      </div>\n    </form>\n  );\n};\n\nconst Checkout = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const searchParams = new URLSearchParams(location.search);\n\n  const selectedPlan = searchParams.get('plan') || 'pro';\n  const billing = searchParams.get('billing') || 'monthly';\n\n  // Price mapping for demo\n  const priceMapping = {\n    starter: {\n      monthly: 'price_starter_monthly',\n      yearly: 'price_starter_yearly',\n    },\n    pro: {\n      monthly: 'price_pro_monthly',\n      yearly: 'price_pro_yearly',\n    },\n    enterprise: {\n      monthly: 'price_enterprise_monthly',\n      yearly: 'price_enterprise_yearly',\n    },\n  };\n\n  const priceId =\n    priceMapping[selectedPlan as keyof typeof priceMapping]?.[billing as 'monthly' | 'yearly'] ||\n    priceMapping.pro.monthly;\n\n  const planConfig =\n    planDetails[selectedPlan as keyof typeof planDetails] || planDetails.professional;\n\n  // Price calculation for display\n  const basePrices = {\n    starter: 99,\n    pro: 499,\n    enterprise: 2000,\n  };\n\n  const basePrice = basePrices[selectedPlan as keyof typeof basePrices] || 499;\n  const monthlyPrice = basePrice;\n  const yearlyPrice = Math.floor(basePrice * 10); // 10 months price for yearly\n  const currentPrice = billing === 'yearly' ? yearlyPrice : monthlyPrice;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-900\">\n      <Container>\n        <div className=\"py-12\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <Button\n              variant=\"tertiary\"\n              startContent={<ArrowLeft className=\"h-4 w-4\" />}\n              onClick={() => navigate('/pricing')}\n              className=\"mb-6 text-zinc-400 hover:text-white\"\n            >\n              Back to Pricing\n            </Button>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">Complete Your Order</h1>\n            <p className=\"text-zinc-400 text-lg max-w-2xl mx-auto\">\n              Start your 14-day free trial with the {planConfig.name} plan\n            </p>\n          </div>\n\n          <div className=\"max-w-6xl mx-auto grid lg:grid-cols-2 gap-8\">\n            {/* Order Summary */}\n            <div className=\"space-y-6\">\n              <Card className=\"bg-zinc-900/80 border-zinc-700/40 overflow-hidden\">\n                <CardHeader className=\"px-6 pt-6 pb-4\">\n                  <h2 className=\"text-xl font-semibold text-white\">Order Summary</h2>\n                </CardHeader>\n                <CardBody className=\"px-6 pb-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <div className=\"p-2 bg-blue-600/20 rounded-lg flex-shrink-0\">\n                            <TrendingUp className=\"w-4 h-4 text-blue-400\" />\n                          </div>\n                          <div className=\"min-w-0\">\n                            <h3 className=\"font-semibold text-white truncate\">\n                              {planConfig.name} Plan\n                            </h3>\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-zinc-400 leading-relaxed\">\n                          {planConfig.description}\n                        </p>\n                        <p className=\"text-xs text-zinc-500 mt-1\">\n                          Billed {billing === 'yearly' ? 'annually' : 'monthly'}\n                        </p>\n                      </div>\n                      <div className=\"text-right flex-shrink-0\">\n                        <p className=\"text-2xl font-bold text-white\">\n                          $\n                          {billing === 'yearly'\n                            ? yearlyPrice.toLocaleString()\n                            : monthlyPrice.toLocaleString()}\n                        </p>\n                        <p className=\"text-sm text-zinc-400\">\n                          per {billing === 'yearly' ? 'year' : 'month'}\n                        </p>\n                        {billing === 'yearly' && (\n                          <p className=\"text-xs text-green-400 font-medium\">Save 2 months!</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"border-t border-zinc-700 pt-4 space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-zinc-400\">Subtotal</span>\n                        <span className=\"text-white font-medium\">\n                          ${currentPrice.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-zinc-400\">14-day free trial</span>\n                        <span className=\"text-green-400 font-medium\">\n                          -${currentPrice.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between text-lg font-semibold border-t border-zinc-700 pt-3\">\n                        <span className=\"text-white\">Due today</span>\n                        <span className=\"text-white\">$0</span>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-zinc-800/50 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-white mb-3\">What&apos;s included:</h4>\n                      <ul className=\"space-y-2\">\n                        {planConfig.features.map((feature, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <div className=\"flex-shrink-0 mt-0.5\">\n                              <Check className=\"h-3 w-3 text-green-400\" />\n                            </div>\n                            <span className=\"text-xs text-zinc-300 leading-relaxed\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n            </div>\n\n            {/* Checkout Form */}\n            <div>\n              <CheckoutForm selectedPlan={selectedPlan} priceId={priceId} billing={billing} />\n            </div>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default Checkout;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/subscription/SubscriptionPlans.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/success/CheckoutSuccess.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'handleGoToDashboard' is assigned a value but never used.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleGoToDashboard' is assigned a value but never used.","line":25,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'handleGoToSettings' is assigned a value but never used.","line":29,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleGoToSettings' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { Card, CardBody } from '@heroui/react';\nimport { ArrowRight, Check, Crown, Sparkles } from 'lucide-react';\nimport { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst CheckoutSuccess = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  // Loading states removed for smooth UX\n\n  const sessionId = searchParams.get('session_id');\n  const planName = searchParams.get('plan') || 'Business Pro';\n  const isDemo = searchParams.get('demo') === 'true';\n\n  useEffect(() => {\n    // Simulate verification delay\n    const timer = setTimeout(() => {\n      // No loading state to manage\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleGoToDashboard = () => {\n    navigate('/my-business');\n  };\n\n  const handleGoToSettings = () => {\n    navigate('/users/profile?tab=subscription');\n  };\n\n  const handleGoToReports = () => {\n    navigate('/reports/new');\n  };\n\n  const handleManageBilling = () => {\n    navigate('/account/settings');\n  };\n\n  useEffect(() => {\n    // Auto-redirect after 3 seconds\n    const timer = setTimeout(() => {\n      navigate('/reports/new');\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, [navigate]);\n\n  // Loading state removed for smooth UX\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-zinc-900 via-zinc-900 to-zinc-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full\">\n        <Card className=\"bg-gradient-to-br from-zinc-900 to-zinc-800 border border-green-500/30 shadow-2xl\">\n          <CardBody className=\"p-8 md:p-12 text-center\">\n            <div className=\"space-y-8\">\n              {/* Success Icon */}\n              <div className=\"flex justify-center\">\n                <div className=\"relative\">\n                  <div className=\"p-6 bg-green-600/20 rounded-full border-2 border-green-500/30\">\n                    <Check className=\"w-12 h-12 text-green-400\" />\n                  </div>\n                  <div className=\"absolute -top-2 -right-2\">\n                    <div className=\"p-2 bg-purple-600/20 rounded-full border border-purple-500/30\">\n                      <Crown className=\"w-6 h-6 text-purple-400\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Success Message */}\n              <div>\n                <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n                  Welcome to {planName}!\n                </h1>\n                <p className=\"text-zinc-300 text-lg leading-relaxed\">\n                  {isDemo\n                    ? 'Your demo subscription has been activated. You now have full access to our AI-powered market intelligence platform.'\n                    : 'Your subscription has been successfully activated! Your 30-day free trial has started, and you now have full access to our AI-powered market intelligence platform.'}\n                </p>\n              </div>\n\n              {/* Features Highlight */}\n              <div className=\"bg-zinc-900/60 rounded-xl p-6 border border-zinc-700/30\">\n                <div className=\"flex items-center gap-2 justify-center mb-4\">\n                  <Sparkles className=\"w-5 h-5 text-purple-400\" />\n                  <span className=\"text-white font-semibold\">What you get:</span>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-3 text-left\">\n                  {[\n                    'Real-time cultural trend monitoring',\n                    'Multi-platform analytics dashboard',\n                    'Content performance tracking',\n                    'Basic sentiment analysis',\n                    'Campaign reports',\n                    'Email support',\n                  ].map((feature, index) => (\n                    <div key={index} className=\"flex items-center gap-2\">\n                      <Check className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                      <span className=\"text-zinc-300 text-sm\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Next Steps */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-semibold text-white\">Ready to get started?</h3>\n\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Button\n                    onClick={handleGoToReports}\n                    className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 text-lg font-semibold flex items-center gap-2\"\n                    size=\"lg\"\n                  >\n                    Start Exploring\n                    <ArrowRight className=\"w-5 h-5\" />\n                  </Button>\n\n                  <Button\n                    onClick={handleManageBilling}\n                    variant=\"tertiary\"\n                    className=\"border-zinc-600 hover:border-purple-500 text-zinc-300 hover:text-white px-6 py-3\"\n                    size=\"lg\"\n                  >\n                    Manage Subscription\n                  </Button>\n                </div>\n              </div>\n\n              {/* Trial Info */}\n              {!isDemo && (\n                <div className=\"bg-yellow-600/10 border border-yellow-600/30 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 justify-center text-yellow-400 text-sm\">\n                    <Crown className=\"w-4 h-4\" />\n                    <span className=\"font-medium\">\n                      Your 30-day free trial is now active • No charges until{' '}\n                      {new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              )}\n\n              {/* Session Info for Debug */}\n              {sessionId && (\n                <div className=\"text-xs text-zinc-500 border-t border-zinc-700/30 pt-4\">\n                  Session ID: {sessionId}\n                </div>\n              )}\n            </div>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutSuccess;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/checkout/transaction/TransactionFlow.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[872,875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[872,875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[912,915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[912,915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleStageComplete' is assigned a value but never used.","line":151,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleStageComplete' is assigned a value but never used.","line":151,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport Container from '@/shared/components/layout/container/Container';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport {\n  DueDiligencePlatform,\n  OfferManagement,\n  SuccessFeeCollection,\n} from '@/shared/components/transaction';\nimport { seoData } from '@/shared/utils/seo/seoData';\nimport { Badge, Card, CardBody, Chip, Progress, Tab, Tabs } from '@heroui/react';\nimport {\n  AlertTriangle,\n  CheckCircle,\n  DollarSign,\n  FileText,\n  Search,\n  Shield,\n  TrendingUp,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\ninterface TransactionStage {\n  id: string;\n  name: string;\n  description: string;\n  status: 'completed' | 'in_progress' | 'pending' | 'blocked';\n  completedAt?: string;\n  icon: React.ComponentType<any>;\n  component?: React.ComponentType<any>;\n}\n\ninterface Transaction {\n  id: string;\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n  listingTitle: string;\n  transactionAmount: number;\n  currency: string;\n  currentStage: string;\n  stages: TransactionStage[];\n  createdAt: string;\n  estimatedCompletion: string;\n  successFee: number;\n  status: 'active' | 'completed' | 'cancelled';\n}\n\nconst TransactionFlow: React.FC = () => {\n  const { transactionId } = useParams<{ transactionId: string }>();\n  const navigate = useNavigate();\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n  const [activeStage, setActiveStage] = useState('overview');\n  const [loading, setLoading] = useState(true);\n\n  // Mock transaction data\n  useEffect(() => {\n    const mockTransaction: Transaction = {\n      id: transactionId || 'txn_001',\n      listingId: 'listing_001',\n      buyerId: 'buyer_001',\n      sellerId: 'seller_001',\n      listingTitle: 'Profitable Technology Business - €2.5M Revenue',\n      transactionAmount: 2500000,\n      currency: 'EUR',\n      currentStage: 'due_diligence',\n      stages: [\n        {\n          id: 'search',\n          name: 'Search & Discovery',\n          description: 'Buyer discovers and evaluates the business opportunity',\n          status: 'completed',\n          completedAt: '2024-01-01T10:00:00Z',\n          icon: Search,\n        },\n        {\n          id: 'inquiry',\n          name: 'Initial Inquiry',\n          description: 'Buyer submits inquiry and signs NDA',\n          status: 'completed',\n          completedAt: '2024-01-05T14:30:00Z',\n          icon: FileText,\n        },\n        {\n          id: 'due_diligence',\n          name: 'Due Diligence',\n          description: 'Comprehensive business and financial review',\n          status: 'in_progress',\n          icon: Shield,\n        },\n        {\n          id: 'offer_management',\n          name: 'Offer & Negotiation',\n          description: 'Offer submission, negotiation, and acceptance',\n          status: 'pending',\n          icon: DollarSign,\n        },\n        {\n          id: 'closing',\n          name: 'Transaction Closing',\n          description: 'Final documentation and fund transfer',\n          status: 'pending',\n          icon: CheckCircle,\n        },\n        {\n          id: 'success_fee',\n          name: 'Success Fee Collection',\n          description: 'Platform fee collection and revenue generation',\n          status: 'pending',\n          icon: TrendingUp,\n        },\n      ],\n      createdAt: '2024-01-01T10:00:00Z',\n      estimatedCompletion: '2024-06-15',\n      successFee: 12500,\n      status: 'active',\n    };\n\n    setTransaction(mockTransaction);\n    setLoading(false);\n  }, [transactionId]);\n\n  const getStageStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'primary';\n      case 'pending':\n        return 'default';\n      case 'blocked':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getProgressPercentage = () => {\n    if (!transaction) return 0;\n    const completedStages = transaction.stages.filter(stage => stage.status === 'completed').length;\n    return Math.round((completedStages / transaction.stages.length) * 100);\n  };\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const handleStageComplete = (stageId: string) => {\n    if (!transaction) return;\n\n    setTransaction(prev => {\n      if (!prev) return prev;\n\n      const updatedStages = prev.stages.map(stage =>\n        stage.id === stageId\n          ? { ...stage, status: 'completed' as const, completedAt: new Date().toISOString() }\n          : stage\n      );\n\n      // Find next stage to activate\n      const currentStageIndex = updatedStages.findIndex(stage => stage.id === stageId);\n      const nextStage = updatedStages[currentStageIndex + 1];\n\n      if (nextStage) {\n        updatedStages[currentStageIndex + 1] = { ...nextStage, status: 'in_progress' as const };\n      }\n\n      return {\n        ...prev,\n        stages: updatedStages,\n        currentStage: nextStage?.id || stageId,\n      };\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-primary-500 border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-neutral-600\">Loading transaction...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-neutral-900 mb-2\">Transaction Not Found</h2>\n          <p className=\"text-neutral-600 mb-4\">The requested transaction could not be found.</p>\n          <Button variant=\"primary\" onPress={() => navigate('/listings')}>\n            Back to Listings\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <SEOHead\n        {...seoData.transactionFlow}\n        title={`Transaction ${transaction.id} | UpSwitch`}\n        description={`Track the progress of transaction ${transaction.id} for ${transaction.listingTitle}`}\n      />\n\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Container>\n          <div className=\"max-w-7xl mx-auto py-8\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-neutral-900\">Transaction Flow</h1>\n                  <p className=\"text-lg text-neutral-600\">\n                    Complete transaction management from start to finish\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <Chip variant=\"solid\" color=\"primary\">\n                    <Shield className=\"w-4 h-4 mr-1\" />\n                    Secure Transaction\n                  </Chip>\n                  <Badge\n                    content={transaction.status}\n                    color={transaction.status === 'active' ? 'success' : 'default'}\n                  >\n                    <Button variant=\"tertiary\" size=\"sm\">\n                      {transaction.id}\n                    </Button>\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Transaction Overview */}\n              <Card className=\"border border-neutral-200 mb-6\">\n                <CardBody className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                    <div>\n                      <h3 className=\"font-medium text-neutral-700 mb-2\">Business</h3>\n                      <p className=\"text-lg font-semibold text-neutral-900\">\n                        {transaction.listingTitle}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium text-neutral-700 mb-2\">Transaction Value</h3>\n                      <p className=\"text-lg font-semibold text-neutral-900\">\n                        {formatCurrency(transaction.transactionAmount, transaction.currency)}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium text-neutral-700 mb-2\">Success Fee</h3>\n                      <p className=\"text-lg font-semibold text-primary-600\">\n                        {formatCurrency(transaction.successFee, transaction.currency)}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium text-neutral-700 mb-2\">Estimated Completion</h3>\n                      <p className=\"text-lg font-semibold text-neutral-900\">\n                        {new Date(transaction.estimatedCompletion).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n\n              {/* Progress Bar */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-neutral-700\">Transaction Progress</span>\n                  <span className=\"text-sm text-neutral-600\">\n                    {getProgressPercentage()}% Complete\n                  </span>\n                </div>\n                <Progress\n                  value={getProgressPercentage()}\n                  color=\"primary\"\n                  className=\"w-full\"\n                  showValueLabel\n                />\n              </div>\n            </div>\n\n            {/* Transaction Stages */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n              {/* Stage Timeline */}\n              <div className=\"lg:col-span-1\">\n                <Card className=\"border border-neutral-200 sticky top-8\">\n                  <CardBody className=\"p-6\">\n                    <h2 className=\"text-lg font-semibold text-neutral-900 mb-4\">\n                      Transaction Stages\n                    </h2>\n                    <div className=\"space-y-4\">\n                      {transaction.stages.map((stage, index) => {\n                        const Icon = stage.icon;\n                        return (\n                          <div key={stage.id} className=\"relative\">\n                            <div className=\"flex items-center gap-3\">\n                              <div\n                                className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                                  stage.status === 'completed'\n                                    ? 'bg-green-100 text-green-600'\n                                    : stage.status === 'in_progress'\n                                      ? 'bg-primary-100 text-primary-600'\n                                      : 'bg-neutral-100 text-neutral-400'\n                                }`}\n                              >\n                                <Icon className=\"w-4 h-4\" />\n                              </div>\n                              <div className=\"flex-1\">\n                                <h3\n                                  className={`text-sm font-medium ${\n                                    stage.status === 'completed'\n                                      ? 'text-green-600'\n                                      : stage.status === 'in_progress'\n                                        ? 'text-primary-600'\n                                        : 'text-neutral-500'\n                                  }`}\n                                >\n                                  {stage.name}\n                                </h3>\n                                <p className=\"text-xs text-neutral-500\">{stage.description}</p>\n                              </div>\n                              <Chip size=\"sm\" color={getStageStatusColor(stage.status)}>\n                                {stage.status.replace('_', ' ')}\n                              </Chip>\n                            </div>\n                            {index < transaction.stages.length - 1 && (\n                              <div className=\"absolute left-4 top-8 w-0.5 h-8 bg-neutral-200\"></div>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardBody>\n                </Card>\n              </div>\n\n              {/* Main Content */}\n              <div className=\"lg:col-span-3\">\n                <Tabs\n                  selectedKey={activeStage}\n                  onSelectionChange={key => setActiveStage(key as string)}\n                  className=\"w-full\"\n                >\n                  <Tab key=\"overview\" title=\"Overview\">\n                    <Card className=\"border border-neutral-200\">\n                      <CardBody className=\"p-6\">\n                        <h2 className=\"text-xl font-semibold text-neutral-900 mb-6\">\n                          Transaction Overview\n                        </h2>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                          <Card className=\"border border-neutral-200\">\n                            <CardBody className=\"p-4\">\n                              <h3 className=\"font-medium text-neutral-900 mb-3\">\n                                Transaction Details\n                              </h3>\n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Transaction ID:</span>\n                                  <span className=\"font-medium\">{transaction.id}</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Created:</span>\n                                  <span className=\"font-medium\">\n                                    {new Date(transaction.createdAt).toLocaleDateString()}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Status:</span>\n                                  <span className=\"font-medium capitalize\">\n                                    {transaction.status}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Current Stage:</span>\n                                  <span className=\"font-medium capitalize\">\n                                    {transaction.currentStage.replace('_', ' ')}\n                                  </span>\n                                </div>\n                              </div>\n                            </CardBody>\n                          </Card>\n\n                          <Card className=\"border border-neutral-200\">\n                            <CardBody className=\"p-4\">\n                              <h3 className=\"font-medium text-neutral-900 mb-3\">\n                                Financial Summary\n                              </h3>\n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Transaction Value:</span>\n                                  <span className=\"font-medium\">\n                                    {formatCurrency(\n                                      transaction.transactionAmount,\n                                      transaction.currency\n                                    )}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Success Fee:</span>\n                                  <span className=\"font-medium text-primary-600\">\n                                    {formatCurrency(transaction.successFee, transaction.currency)}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Fee Rate:</span>\n                                  <span className=\"font-medium\">0.5%</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-neutral-600\">Estimated Completion:</span>\n                                  <span className=\"font-medium\">\n                                    {new Date(transaction.estimatedCompletion).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              </div>\n                            </CardBody>\n                          </Card>\n                        </div>\n\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold text-neutral-900\">\n                            Recent Activity\n                          </h3>\n                          <div className=\"space-y-3\">\n                            {transaction.stages\n                              .filter(stage => stage.completedAt)\n                              .sort(\n                                (a, b) =>\n                                  new Date(b.completedAt!).getTime() -\n                                  new Date(a.completedAt!).getTime()\n                              )\n                              .slice(0, 3)\n                              .map(stage => (\n                                <div\n                                  key={stage.id}\n                                  className=\"flex items-center gap-3 p-3 bg-neutral-50 rounded-lg\"\n                                >\n                                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                                  <span className=\"text-sm text-neutral-700\">\n                                    {stage.name} completed\n                                  </span>\n                                  <span className=\"text-xs text-neutral-500 ml-auto\">\n                                    {new Date(stage.completedAt!).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              ))}\n                          </div>\n                        </div>\n                      </CardBody>\n                    </Card>\n                  </Tab>\n\n                  <Tab key=\"due_diligence\" title=\"Due Diligence\">\n                    <DueDiligencePlatform\n                      listingId={transaction.listingId}\n                      buyerId={transaction.buyerId}\n                      sellerId={transaction.sellerId}\n                    />\n                  </Tab>\n\n                  <Tab key=\"offer_management\" title=\"Offer Management\">\n                    <OfferManagement\n                      listingId={transaction.listingId}\n                      buyerId={transaction.buyerId}\n                      sellerId={transaction.sellerId}\n                    />\n                  </Tab>\n\n                  <Tab key=\"success_fee\" title=\"Success Fee\">\n                    <SuccessFeeCollection\n                      listingId={transaction.listingId}\n                      buyerId={transaction.buyerId}\n                      sellerId={transaction.sellerId}\n                    />\n                  </Tab>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default TransactionFlow;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/about/About.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'handleGetStarted' is assigned a value but never used.","line":14,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleGetStarted' is assigned a value but never used.","line":14,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport Container from '@/shared/components/layout/container/Container';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport { seoData } from '@/shared/utils/seo/seoData';\nimport { Card, CardBody } from '@heroui/react';\nimport { Award, CheckCircle, Globe, Heart, Shield, Target, TrendingUp, Users } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../providers/auth-provider';\n\nconst About = () => {\n  const navigate = useNavigate();\n  const { openModal } = useAuth();\n\n  const handleGetStarted = () => {\n    openModal('signup');\n  };\n\n  return (\n    <>\n      <SEOHead {...seoData.about} />\n\n      <div className=\"min-h-screen bg-white\">\n        {/* Hero Section */}\n        <div className=\"bg-gradient-to-br from-neutral-50 via-white to-primary-50 py-20\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-4xl md:text-6xl font-bold text-neutral-900 mb-6\">\n                About UpSwitch\n              </h1>\n              <p className=\"text-xl text-neutral-600 mb-8 leading-relaxed\">\n                The next-generation M&A platform modernizing how European SMEs buy and sell\n                businesses. Launching 2025 to transform a €125B fragmented market.\n              </p>\n              <div className=\"flex justify-center\">\n                <div className=\"flex items-center gap-3 bg-white px-6 py-3 rounded-full shadow-lg\">\n                  <Target className=\"w-6 h-6 text-primary-600\" />\n                  <span className=\"font-semibold text-neutral-900\">Launching Q1 2025</span>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Our Story */}\n        <Container>\n          <div className=\"py-20\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-12 text-center\">\n                Our Story\n              </h2>\n\n              <div className=\"space-y-8 text-lg text-neutral-700 leading-relaxed\">\n                <p>\n                  Upswitch is being built to solve one of Europe's biggest business challenges: the\n                  fragmented, inefficient SME M&A market. With 2.8 million SMEs across Europe\n                  seeking exit strategies and a €125 billion annual market plagued by 18-24 month\n                  sale cycles, we saw an opportunity to modernize an entire industry.\n                </p>\n\n                <p>\n                  Our founding team combines deep M&A expertise with cutting-edge technology to\n                  create the first truly digital-native M&A platform. We're not just building\n                  another listing site – we're creating a complete transaction ecosystem that guides\n                  businesses from initial discovery through successful deal closure.\n                </p>\n\n                <p>\n                  Starting with the Belgian market in 2025, our platform will feature AI-powered\n                  buyer-seller matching, advanced confidentiality controls, integrated due diligence\n                  workflows, and end-to-end transaction management. Our goal is to reduce average\n                  sale time by 60% while increasing deal success rates by 40%.\n                </p>\n\n                <p>\n                  We're building Upswitch because every entrepreneur deserves a transparent,\n                  efficient path to their next chapter – whether that's buying their first business\n                  or selling the company they've spent decades building.\n                </p>\n              </div>\n            </div>\n          </div>\n        </Container>\n\n        {/* Mission & Vision */}\n        <div className=\"bg-neutral-50 py-20\">\n          <Container>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12\">\n                <Card className=\"border border-neutral-200\">\n                  <CardBody className=\"p-8\">\n                    <div className=\"flex items-center gap-3 mb-6\">\n                      <div className=\"p-3 bg-primary-100 rounded-full\">\n                        <Target className=\"w-8 h-8 text-primary-600\" />\n                      </div>\n                      <h3 className=\"text-2xl font-bold text-neutral-900\">Our Mission</h3>\n                    </div>\n                    <p className=\"text-neutral-700 leading-relaxed\">\n                      To modernize European SME M&A by building the first truly digital-native\n                      platform that reduces transaction friction, eliminates inefficiencies, and\n                      empowers entrepreneurs to buy and sell businesses with confidence in a\n                      transparent marketplace.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200\">\n                  <CardBody className=\"p-8\">\n                    <div className=\"flex items-center gap-3 mb-6\">\n                      <div className=\"p-3 bg-success-100 rounded-full\">\n                        <Heart className=\"w-8 h-8 text-success-600\" />\n                      </div>\n                      <h3 className=\"text-2xl font-bold text-neutral-900\">Our Vision</h3>\n                    </div>\n                    <p className=\"text-neutral-700 leading-relaxed\">\n                      To transform European M&A into a streamlined, technology-driven process where\n                      entrepreneurs can discover, evaluate, and complete business transactions 60%\n                      faster than traditional methods, creating a new standard for the industry.\n                    </p>\n                  </CardBody>\n                </Card>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Market Opportunity */}\n        <Container>\n          <div className=\"py-20\">\n            <div className=\"max-w-6xl mx-auto\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-12 text-center\">\n                The Market Opportunity\n              </h2>\n\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">€125B</div>\n                  <div className=\"text-neutral-600\">Annual EU SME M&A Market</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">2.8M</div>\n                  <div className=\"text-neutral-600\">SMEs Seeking Exit Strategies</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">18-24</div>\n                  <div className=\"text-neutral-600\">Average Months to Sale</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">43%</div>\n                  <div className=\"text-neutral-600\">Deals Fail Due to Process</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">60%</div>\n                  <div className=\"text-neutral-600\">Target Time Reduction</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">Q1</div>\n                  <div className=\"text-neutral-600\">2025 Launch Date</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">AI</div>\n                  <div className=\"text-neutral-600\">Powered Matching</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl md:text-5xl font-bold text-primary-600 mb-2\">100%</div>\n                  <div className=\"text-neutral-600\">Digital Native Platform</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Container>\n\n        {/* Our Values */}\n        <div className=\"bg-neutral-50 py-20\">\n          <Container>\n            <div className=\"max-w-6xl mx-auto\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-12 text-center\">\n                What We Stand For\n              </h2>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"p-2 bg-primary-100 rounded-full\">\n                        <Shield className=\"w-6 h-6 text-primary-600\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900\">Trust & Security</h3>\n                    </div>\n                    <p className=\"text-neutral-700\">\n                      Every user is verified, every transaction is secure, and every piece of data\n                      is protected with enterprise-grade security.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"p-2 bg-success-100 rounded-full\">\n                        <CheckCircle className=\"w-6 h-6 text-success-600\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900\">Transparency</h3>\n                    </div>\n                    <p className=\"text-neutral-700\">\n                      Clear pricing, honest communication, and full disclosure ensure all parties\n                      make informed decisions.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"p-2 bg-warning-100 rounded-full\">\n                        <TrendingUp className=\"w-6 h-6 text-warning-600\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900\">Excellence</h3>\n                    </div>\n                    <p className=\"text-neutral-700\">\n                      We continuously improve our platform, tools, and services to deliver the best\n                      M&A experience in Europe.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"p-2 bg-primary-100 rounded-full\">\n                        <Users className=\"w-6 h-6 text-primary-600\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900\">Community</h3>\n                    </div>\n                    <p className=\"text-neutral-700\">\n                      We foster a supportive community of entrepreneurs, investors, and advisors\n                      helping each other succeed.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"p-2 bg-neutral-100 rounded-full\">\n                        <Globe className=\"w-6 h-6 text-neutral-600\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900\">European Focus</h3>\n                    </div>\n                    <p className=\"text-neutral-700\">\n                      Deep understanding of European markets, regulations, and business culture\n                      across all major economies.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"p-2 bg-success-100 rounded-full\">\n                        <Award className=\"w-6 h-6 text-success-600\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900\">Innovation</h3>\n                    </div>\n                    <p className=\"text-neutral-700\">\n                      Leveraging cutting-edge technology to streamline M&A processes and create new\n                      opportunities for growth.\n                    </p>\n                  </CardBody>\n                </Card>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Team Section */}\n        <Container>\n          <div className=\"py-20\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-8\">Our Team</h2>\n              <p className=\"text-lg text-neutral-700 mb-12 leading-relaxed\">\n                UpSwitch is proudly run by a dedicated team of M&A professionals, technology\n                experts, and business specialists based across Europe. Our diverse backgrounds in\n                finance, technology, and entrepreneurship allow us to understand the unique\n                challenges and opportunities in the European M&A market.\n              </p>\n              <p className=\"text-neutral-600 mb-8\">\n                We're always looking to improve our platform and service. Whether you're looking to\n                buy your first business, sell your life's work, or expand your investment portfolio,\n                we're here to support your journey every step of the way.\n              </p>\n\n              {/* CTA Section */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button variant=\"primary\" size=\"lg\" onPress={() => openModal('signup')}>\n                  Join Our Community\n                </Button>\n                <Button variant=\"secondary\" size=\"lg\" onPress={() => navigate('/contact')}>\n                  Get in Touch\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default About;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/cookiePolicy/CookiePolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/gdpr/GdprCompliance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/privacyPolicy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/privacyPolicy/privacyPolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/security/Security.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/termsAndConditions/TermsAndConditions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/company/legal/termsAndConditions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/due-diligence/DueDiligencePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/due-diligence/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/error/404/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/error/404/noPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/error/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/landingPages/home/home.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1277,1319],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { SearchComponent } from '@/shared/components/filters';\nimport Container from '@/shared/components/layout/container/Container';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport { authService } from '@/shared/services/auth';\nimport { seoData } from '@/shared/utils/seo/seoData';\nimport { Card, CardBody } from '@heroui/react';\nimport {\n  Car,\n  Coffee,\n  Factory,\n  HeartHandshake,\n  Hotel,\n  Laptop,\n  ShoppingCart,\n  Wrench,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../providers/auth-provider';\n\nconst Home = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [searchType] = useState('businesses'); // 'businesses' or 'franchises'\n  // const [_email, _setEmail] = useState('');\n  const navigate = useNavigate();\n  const { openModal } = useAuth();\n\n  useEffect(() => {\n    checkAuthentication();\n  }, []);\n\n  const checkAuthentication = async () => {\n    try {\n      const authResult = await authService.checkAuthentication();\n      setIsAuthenticated(authResult.isAuthenticated);\n    } catch (error) {\n      console.error('Auth check error:', error);\n    }\n  };\n\n  const handleSearch = () => {\n    const searchParams = new URLSearchParams();\n    if (searchQuery.trim()) {\n      searchParams.set('q', searchQuery.trim());\n    }\n    navigate(`/search?${searchParams.toString()}`);\n  };\n\n  // const _handleGetStarted = () => {\n  //   if (isAuthenticated) {\n  //     navigate('/account');\n  //   } else {\n  //     openModal('signup');\n  //   }\n  // };\n\n  return (\n    <>\n      <SEOHead {...seoData.home} />\n\n      <div className=\"min-h-screen bg-white\">\n        {/* Hero Section - Caregiver Style */}\n        <div className=\"relative bg-gradient-to-br from-neutral-100 via-white to-calm-50 py-20 lg:py-32\">\n          <Container>\n            <div className=\"max-w-7xl mx-auto\">\n              {/* Main Hero Content */}\n              <div className=\"text-center mb-12\">\n                <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-neutral-900 mb-6 leading-tight tracking-tight\">\n                  Selling your business?\n                  <span className=\"block text-primary-600\">We've got you covered</span>\n                </h1>\n\n                <p className=\"text-lg md:text-xl text-neutral-600 mb-10 max-w-3xl mx-auto leading-relaxed\">\n                  From stress to success — we guide business owners through every step of selling,\n                  with care, transparency, and the expertise to protect what you've built.\n                </p>\n\n                {/* Enhanced Search Bar */}\n                <div className=\"max-w-3xl mx-auto mb-10\">\n                  <SearchComponent\n                    value={searchQuery}\n                    onChange={setSearchQuery}\n                    onSearch={handleSearch}\n                    placeholder={\n                      searchType === 'businesses'\n                        ? 'e.g. Restaurant in Brussels, Tech company'\n                        : 'e.g. Food franchise, Service franchise'\n                    }\n                    size=\"large\"\n                    buttonText=\"Search\"\n                  />\n\n                  {/* Popular Searches */}\n                  <div className=\"mt-4 flex flex-wrap justify-center gap-2\">\n                    <span className=\"text-sm text-neutral-500\">Popular:</span>\n                    {['Restaurants', 'Tech Companies', 'Manufacturing', 'Retail', 'Healthcare'].map(\n                      term => (\n                        <button\n                          key={term}\n                          onClick={() => setSearchQuery(term.toLowerCase())}\n                          className=\"text-sm text-primary-600 hover:text-primary-700 underline underline-offset-2\"\n                        >\n                          {term}\n                        </button>\n                      )\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Popular Categories Section */}\n        <div className=\"py-20 bg-gradient-to-b from-white to-neutral-100\">\n          <Container>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-6\">\n                  We Help Owners in Every Sector\n                </h2>\n                <p className=\"text-lg text-neutral-600 max-w-2xl mx-auto leading-relaxed\">\n                  From restaurants to tech companies — we understand your industry and connect you\n                  with the right buyers who value what you've created.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n                {[\n                  {\n                    icon: Coffee,\n                    label: 'Restaurants',\n                    count: '450+',\n                    color: 'bg-orange-100 text-orange-600',\n                  },\n                  {\n                    icon: Laptop,\n                    label: 'Technology',\n                    count: '320+',\n                    color: 'bg-blue-100 text-blue-600',\n                  },\n                  {\n                    icon: Factory,\n                    label: 'Manufacturing',\n                    count: '280+',\n                    color: 'bg-gray-100 text-gray-600',\n                  },\n                  {\n                    icon: ShoppingCart,\n                    label: 'Retail',\n                    count: '210+',\n                    color: 'bg-green-100 text-green-600',\n                  },\n                  {\n                    icon: Hotel,\n                    label: 'Hospitality',\n                    count: '180+',\n                    color: 'bg-purple-100 text-purple-600',\n                  },\n                  {\n                    icon: Car,\n                    label: 'Automotive',\n                    count: '150+',\n                    color: 'bg-red-100 text-red-600',\n                  },\n                  {\n                    icon: Wrench,\n                    label: 'Services',\n                    count: '340+',\n                    color: 'bg-yellow-100 text-yellow-600',\n                  },\n                  {\n                    icon: HeartHandshake,\n                    label: 'Healthcare',\n                    count: '120+',\n                    color: 'bg-pink-100 text-pink-600',\n                  },\n                ].map((category, index) => (\n                  <button\n                    key={index}\n                    onClick={() => navigate(`/search?sector=${category.label.toLowerCase()}`)}\n                    className=\"group p-6 rounded-2xl border border-slate-200 bg-white hover:border-slate-300 hover:shadow-xl hover:shadow-slate-200/50 transition-all duration-300 text-center transform hover:-translate-y-1\"\n                  >\n                    <div\n                      className={`w-12 h-12 ${category.color} rounded-xl flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform`}\n                    >\n                      <category.icon\n                        className=\"w-6 h-6\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <div className=\"font-medium text-neutral-900 text-sm mb-1\">\n                      {category.label}\n                    </div>\n                    <div className=\"text-xs text-neutral-500\">{category.count}</div>\n                  </button>\n                ))}\n              </div>\n\n              <div className=\"text-center mt-8\">\n                <Button variant=\"secondary\" onPress={() => navigate('/search')}>\n                  View All Categories\n                </Button>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Main CTA Section - Caregiver Approach */}\n        <div className=\"py-20 bg-neutral-100\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h2 className=\"text-3xl md:text-5xl font-bold text-neutral-900 mb-8 leading-tight\">\n                Ready to take the next step?\n                <br />\n                <span className=\"text-calm-600\">We're here to help</span>\n              </h2>\n              <p className=\"text-lg md:text-xl text-neutral-600 mb-12 leading-relaxed max-w-3xl mx-auto\">\n                Whether you're ready to sell your life's work or looking to acquire your first\n                business, we provide the guidance, support, and expertise to make it happen safely\n                and successfully. Join thousands of business owners who trust UpSwitch with their\n                most important decisions.\n              </p>\n\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                <Button variant=\"primary\" size=\"lg\" onPress={() => navigate('/search')}>\n                  Explore businesses for sale\n                </Button>\n                <Button variant=\"secondary\" size=\"lg\" onPress={() => openModal('signup')}>\n                  Get help selling my business\n                </Button>\n              </div>\n\n              {/* Trust indicators */}\n              <div className=\"mt-12 flex flex-col sm:flex-row items-center justify-center gap-8 text-sm text-neutral-500\">\n                <div className=\"flex items-center gap-2\">\n                  <HeartHandshake className=\"w-5 h-5 text-calm-600\" />\n                  <span>Personal guidance every step</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 bg-success-100 rounded-full flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-success-600 rounded-full\"></div>\n                  </div>\n                  <span>Verified buyers & sellers only</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 bg-primary-100 rounded-full flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-primary-600 rounded-full\"></div>\n                  </div>\n                  <span>Free confidential valuations</span>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Recent Sold Businesses Section */}\n        <div className=\"py-20 bg-gradient-to-br from-neutral-100 to-success-50\">\n          <Container>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-6\">\n                  Success Stories That Matter\n                </h2>\n                <p className=\"text-lg text-neutral-600 max-w-2xl mx-auto leading-relaxed\">\n                  Real business owners who trusted us with their life's work — and found the perfect\n                  new owners to carry their legacy forward.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {[\n                  {\n                    name: 'Digital Marketing Agency',\n                    location: 'Brussels, BE',\n                    price: '€950,000',\n                    sector: 'Professional Services',\n                  },\n                  {\n                    name: 'Restaurant Chain',\n                    location: 'Amsterdam, NL',\n                    price: '€2,200,000',\n                    sector: 'Food & Beverage',\n                  },\n                  {\n                    name: 'E-commerce Platform',\n                    location: 'Paris, FR',\n                    price: '€1,200,000',\n                    sector: 'Technology',\n                  },\n                  {\n                    name: 'Manufacturing Company',\n                    location: 'Munich, DE',\n                    price: '€3,800,000',\n                    sector: 'Manufacturing',\n                  },\n                ].map((business, index) => (\n                  <Card\n                    key={index}\n                    className=\"border border-neutral-200 rounded-2xl bg-white shadow-sm hover:shadow-lg hover:shadow-neutral-200/50 hover:border-neutral-300 transition-all duration-300 transform hover:-translate-y-1\"\n                  >\n                    <CardBody className=\"p-6\">\n                      <div className=\"bg-success-100 text-success-700 text-xs font-semibold px-3 py-1.5 rounded-full inline-block mb-4 shadow-sm\">\n                        ✓ SUCCESSFULLY SOLD\n                      </div>\n                      <h4 className=\"font-semibold text-neutral-900 text-sm mb-2\">\n                        {business.name}\n                      </h4>\n                      <div className=\"text-xs text-neutral-600 mb-2\">{business.location}</div>\n                      <div className=\"text-xs text-neutral-600 mb-3\">{business.sector}</div>\n                      <div className=\"font-bold text-success-600\">{business.price}</div>\n                    </CardBody>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* About Us Section - Caregiver Story */}\n        <div className=\"py-20 bg-white\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-6\">\n                  Why We Do What We Do\n                </h2>\n                <p className=\"text-lg text-neutral-600 leading-relaxed mb-8\">\n                  We understand that selling a business isn't just a transaction — it's one of\n                  life's biggest decisions. That's why we created Upswitch: to be the caring guide\n                  that business owners need during this important journey.\n                </p>\n                <p className=\"text-lg text-neutral-600 leading-relaxed mb-8\">\n                  Every business represents years of hard work, dreams, and dedication. We honor\n                  that by providing the personal attention, expert guidance, and genuine care that\n                  every business owner deserves when it's time to move on.\n                </p>\n                <p className=\"text-lg text-neutral-600 leading-relaxed mb-8\">\n                  From family restaurants in Brussels to innovative startups in Antwerp, we're here\n                  to ensure your business finds the right new owner — someone who will respect and\n                  continue the legacy you've built.\n                </p>\n\n                {/* Supportive CTA */}\n                <div className=\"mt-12\">\n                  <Button\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onPress={() => openModal('signup')}\n                    className=\"px-8 py-3 h-14 text-base\"\n                  >\n                    Talk to our team — we're here to help\n                  </Button>\n                  <p className=\"text-sm text-neutral-500 mt-3\">\n                    Free consultation • No pressure • Just honest guidance\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/landingPages/home/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/landingPages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/landingPages/resources/DueDiligenceChecklist.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'openModal' is assigned a value but never used.","line":27,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openModal' is assigned a value but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from '@/app/providers/auth-provider';\nimport { Button } from '@/shared/components/buttons';\nimport Container from '@/shared/components/layout/container/Container';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport {\n  AlertTriangle,\n  Building2,\n  CheckCircle,\n  CheckSquare,\n  ChevronDown,\n  ChevronUp,\n  DollarSign,\n  Eye,\n  FileText,\n  Scale,\n  Shield,\n  Target,\n  TrendingUp,\n  Users,\n} from 'lucide-react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst DueDiligenceChecklist = () => {\n  const navigate = useNavigate();\n  const { openModal } = useAuth();\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n\n  const dueDiligenceCategories = [\n    {\n      id: 'financial',\n      title: 'Financial Due Diligence',\n      icon: DollarSign,\n      color: 'text-green-600',\n      bgColor: 'bg-green-100',\n      items: [\n        'Audited financial statements for past 3-5 years',\n        'Monthly management accounts for current year',\n        'Cash flow statements and projections',\n        'Revenue breakdown by product/service and customer',\n        'Working capital analysis',\n        'Debt schedules and loan agreements',\n        'Tax returns and compliance records',\n        'Accounts receivable aging',\n        'Inventory analysis and valuation',\n        'Capital expenditure history and plans',\n      ],\n    },\n    {\n      id: 'legal',\n      title: 'Legal Due Diligence',\n      icon: Scale,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-100',\n      items: [\n        'Corporate structure and ownership documents',\n        'Material contracts and agreements',\n        'Intellectual property portfolio',\n        'Employment agreements and HR policies',\n        'Litigation history and pending cases',\n        'Regulatory compliance records',\n        'Real estate leases and property deeds',\n        'Insurance policies and coverage',\n        'Permits and licenses',\n        'Environmental compliance certificates',\n      ],\n    },\n    {\n      id: 'operational',\n      title: 'Operational Due Diligence',\n      icon: Building2,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-100',\n      items: [\n        'Organization chart and key personnel',\n        'Business model and value proposition',\n        'Competitive analysis and market position',\n        'Supplier relationships and contracts',\n        'Customer analysis and retention rates',\n        'IT systems and technology infrastructure',\n        'Quality control and operational procedures',\n        'Key performance indicators (KPIs)',\n        'Operational risk assessment',\n        'Succession planning documentation',\n      ],\n    },\n    {\n      id: 'commercial',\n      title: 'Commercial Due Diligence',\n      icon: TrendingUp,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-100',\n      items: [\n        'Market size and growth projections',\n        'Customer segmentation and analysis',\n        'Sales pipeline and conversion rates',\n        'Marketing strategy and channels',\n        'Brand strength and recognition',\n        'Competitive landscape analysis',\n        'Pricing strategy and elasticity',\n        'Distribution channels and partnerships',\n        'Market entry barriers and opportunities',\n        'Customer satisfaction and loyalty metrics',\n      ],\n    },\n    {\n      id: 'technical',\n      title: 'Technical Due Diligence',\n      icon: FileText,\n      color: 'text-indigo-600',\n      bgColor: 'bg-indigo-100',\n      items: [\n        'Technology stack and architecture review',\n        'Software licenses and compliance',\n        'Data security and privacy measures',\n        'System performance and scalability',\n        'Technical debt assessment',\n        'Integration capabilities and APIs',\n        'Disaster recovery and backup systems',\n        'Cybersecurity vulnerabilities',\n        'Mobile and web application quality',\n        'Third-party service dependencies',\n      ],\n    },\n    {\n      id: 'hr',\n      title: 'HR Due Diligence',\n      icon: Users,\n      color: 'text-pink-600',\n      bgColor: 'bg-pink-100',\n      items: [\n        'Employee contracts and handbooks',\n        'Compensation and benefits structure',\n        'Organizational culture assessment',\n        'Key personnel retention plans',\n        'Training and development programs',\n        'Performance management systems',\n        'Employee satisfaction surveys',\n        'Labor law compliance',\n        'Union relationships and agreements',\n        'Succession planning for key roles',\n      ],\n    },\n  ];\n\n  const toggleCategory = (categoryId: string) => {\n    setExpandedCategories(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(categoryId)) {\n        newSet.delete(categoryId);\n      } else {\n        newSet.add(categoryId);\n      }\n      return newSet;\n    });\n  };\n\n  return (\n    <>\n      <SEOHead\n        title=\"Your Complete Due Diligence Guide | UpSwitch - We've Got You Covered\"\n        description=\"Don't let due diligence overwhelm you. Our caring, step-by-step guide helps both buyers and sellers navigate the process with confidence and peace of mind.\"\n        keywords=\"due diligence guide, business buying checklist, selling business preparation, M&A support, business acquisition help\"\n      />\n\n      <div className=\"min-h-screen bg-white\">\n        {/* Hero Section - Caregiver Approach */}\n        <div className=\"bg-gradient-to-br from-neutral-100 via-white to-calm-50 py-20\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"p-4 bg-calm-100 rounded-full\">\n                  <Shield className=\"w-12 h-12 text-calm-600\" />\n                </div>\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-bold text-neutral-900 mb-6\">\n                Your Peace of Mind Guide\n                <span className=\"block text-calm-600 text-3xl md:text-4xl mt-2\">\n                  We'll walk you through every step, together\n                </span>\n              </h1>\n              <p className=\"text-xl text-neutral-600 mb-8 leading-relaxed\">\n                Whether you're buying your first business or selling the one you've built with love,\n                due diligence doesn't have to be overwhelming. We've created this guide to be your\n                trusted companion — breaking down everything into simple, manageable steps so you\n                can make decisions with confidence and clarity.\n              </p>\n              <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n                <Chip className=\"text-lg px-6 py-2 rounded-full bg-calm-100 text-calm-800 border border-calm-200\">\n                  Free • No pressure, just support\n                </Chip>\n                <div className=\"flex items-center gap-2 text-sm text-neutral-500\">\n                  <CheckCircle className=\"w-4 h-4 text-success-600\" />\n                  <span>Trusted by 500+ business owners</span>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        <Container>\n          <div className=\"py-20\">\n            <div className=\"max-w-4xl mx-auto\">\n              {/* Introduction - Caregiver Approach */}\n              <div className=\"mb-16\">\n                <h2 className=\"text-3xl font-bold text-neutral-900 mb-6\">\n                  We Understand — This Feels Big and Scary\n                </h2>\n                <div className=\"prose prose-lg max-w-none text-neutral-700\">\n                  <p className=\"mb-6\">\n                    Whether you're selling the business you've poured your heart into or buying your\n                    first company, due diligence can feel overwhelming. But here's the thing — it's\n                    really just about making sure everyone knows what they're getting into. Think of\n                    it like a thorough health check for a business, where we make sure everything is\n                    as it should be.\n                  </p>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    <Card className=\"border border-calm-200 bg-calm-50 rounded-xl\">\n                      <CardBody className=\"p-6\">\n                        <div className=\"flex items-start gap-3\">\n                          <CheckCircle className=\"w-6 h-6 text-calm-600 mt-1 flex-shrink-0\" />\n                          <div>\n                            <h4 className=\"font-semibold text-calm-900 mb-2\">\n                              For Buyers: Your Protection\n                            </h4>\n                            <p className=\"text-calm-800\">\n                              This process protects you from nasty surprises. It's like having a\n                              trusted friend help you check everything before you make one of the\n                              biggest decisions of your life.\n                            </p>\n                          </div>\n                        </div>\n                      </CardBody>\n                    </Card>\n\n                    <Card className=\"border border-accent-200 bg-accent-50 rounded-xl\">\n                      <CardBody className=\"p-6\">\n                        <div className=\"flex items-start gap-3\">\n                          <Shield className=\"w-6 h-6 text-accent-600 mt-1 flex-shrink-0\" />\n                          <div>\n                            <h4 className=\"font-semibold text-accent-900 mb-2\">\n                              For Sellers: Your Peace of Mind\n                            </h4>\n                            <p className=\"text-accent-800\">\n                              When you're prepared and organized, the process goes smoothly. This\n                              checklist helps you show your business in its best light and find the\n                              right buyer.\n                            </p>\n                          </div>\n                        </div>\n                      </CardBody>\n                    </Card>\n                  </div>\n\n                  <Card className=\"border border-neutral-200 bg-neutral-50 rounded-xl\">\n                    <CardBody className=\"p-6\">\n                      <div className=\"flex items-start gap-3\">\n                        <Users className=\"w-6 h-6 text-neutral-600 mt-1 flex-shrink-0\" />\n                        <div>\n                          <h4 className=\"font-semibold text-neutral-900 mb-2\">\n                            Remember: You're Not Alone\n                          </h4>\n                          <p className=\"text-neutral-800\">\n                            Most people work with professionals for the technical parts —\n                            accountants, lawyers, business advisors. This guide helps you understand\n                            what should be covered, so you can ask the right questions and feel\n                            confident in your decisions.\n                          </p>\n                        </div>\n                      </div>\n                    </CardBody>\n                  </Card>\n                </div>\n              </div>\n\n              {/* Benefits Grid - Caregiver Messaging */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-16\">\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow rounded-xl\">\n                  <CardBody className=\"p-6 text-center\">\n                    <div className=\"flex justify-center mb-4\">\n                      <div className=\"p-3 bg-calm-100 rounded-full\">\n                        <Shield className=\"w-8 h-8 text-calm-600\" />\n                      </div>\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-neutral-900 mb-3\">\n                      Sleep Better at Night\n                    </h3>\n                    <p className=\"text-neutral-600\">\n                      No more wondering \"what if I missed something?\" This process helps you uncover\n                      any issues upfront, so you can make decisions with confidence and peace of\n                      mind.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow rounded-xl\">\n                  <CardBody className=\"p-6 text-center\">\n                    <div className=\"flex justify-center mb-4\">\n                      <div className=\"p-3 bg-success-100 rounded-full\">\n                        <Target className=\"w-8 h-8 text-success-600\" />\n                      </div>\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-neutral-900 mb-3\">\n                      Know You're Getting Fair Value\n                    </h3>\n                    <p className=\"text-neutral-600\">\n                      Whether you're buying or selling, this process ensures everyone understands\n                      the true value of what's being exchanged. No surprises, just honest,\n                      transparent dealings.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-neutral-200 hover:shadow-lg transition-shadow rounded-xl\">\n                  <CardBody className=\"p-6 text-center\">\n                    <div className=\"flex justify-center mb-4\">\n                      <div className=\"p-3 bg-accent-100 rounded-full\">\n                        <Eye className=\"w-8 h-8 text-accent-600\" />\n                      </div>\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-neutral-900 mb-3\">\n                      Build a Strong Foundation\n                    </h3>\n                    <p className=\"text-neutral-600\">\n                      Understanding every aspect of the business helps you plan for success. You'll\n                      know exactly what you're working with and how to make it even better.\n                    </p>\n                  </CardBody>\n                </Card>\n              </div>\n\n              {/* Process Timeline */}\n              <Card className=\"border border-neutral-200 mb-16 rounded-xl\">\n                <CardHeader>\n                  <h3 className=\"text-2xl font-bold text-neutral-900\">\n                    What to Expect: Your Journey Step by Step\n                  </h3>\n                  <p className=\"text-neutral-600 mt-2\">\n                    Every business is different, but here's a typical timeline so you know what to\n                    expect. Remember, we're here to guide you through each step.\n                  </p>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"flex justify-center mb-3\">\n                        <div className=\"w-12 h-12 bg-primary-600 rounded-full flex items-center justify-center text-white font-bold\">\n                          1\n                        </div>\n                      </div>\n                      <h4 className=\"font-semibold text-neutral-900 mb-2\">Getting Ready</h4>\n                      <p className=\"text-sm text-neutral-600\">1-2 weeks</p>\n                      <p className=\"text-xs text-neutral-500 mt-2\">\n                        Signing agreements, gathering your team, and making initial requests\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <div className=\"flex justify-center mb-3\">\n                        <div className=\"w-12 h-12 bg-primary-600 rounded-full flex items-center justify-center text-white font-bold\">\n                          2\n                        </div>\n                      </div>\n                      <h4 className=\"font-semibold text-neutral-900 mb-2\">Deep Dive</h4>\n                      <p className=\"text-sm text-neutral-600\">4-8 weeks</p>\n                      <p className=\"text-xs text-neutral-500 mt-2\">\n                        Reviewing documents, analyzing data, and having conversations with key\n                        people\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <div className=\"flex justify-center mb-3\">\n                        <div className=\"w-12 h-12 bg-primary-600 rounded-full flex items-center justify-center text-white font-bold\">\n                          3\n                        </div>\n                      </div>\n                      <h4 className=\"font-semibold text-neutral-900 mb-2\">Making Sense</h4>\n                      <p className=\"text-sm text-neutral-600\">2-3 weeks</p>\n                      <p className=\"text-xs text-neutral-500 mt-2\">\n                        Putting everything together, understanding risks, and adjusting expectations\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <div className=\"flex justify-center mb-3\">\n                        <div className=\"w-12 h-12 bg-success-600 rounded-full flex items-center justify-center text-white font-bold\">\n                          4\n                        </div>\n                      </div>\n                      <h4 className=\"font-semibold text-neutral-900 mb-2\">Moving Forward</h4>\n                      <p className=\"text-sm text-neutral-600\">1-2 weeks</p>\n                      <p className=\"text-xs text-neutral-500 mt-2\">\n                        Final report, making your decision, and working out the details\n                      </p>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n\n              {/* Due Diligence Categories */}\n              <div className=\"mb-16\">\n                <h2 className=\"text-3xl font-bold text-neutral-900 mb-4 text-center\">\n                  Your Complete Checklist\n                </h2>\n                <p className=\"text-lg text-neutral-600 mb-8 text-center max-w-3xl mx-auto\">\n                  Don't worry — you don't need to tackle everything at once. This checklist is here\n                  to guide you, not overwhelm you. Take it step by step, and remember that most\n                  people work with professionals for the technical parts.\n                </p>\n\n                <div className=\"space-y-4\">\n                  {dueDiligenceCategories.map(category => {\n                    const isExpanded = expandedCategories.has(category.id);\n\n                    return (\n                      <Card\n                        key={category.id}\n                        className=\"border-2 border-gray-200 rounded-xl overflow-hidden hover:shadow-md transition-all duration-200\"\n                      >\n                        <CardBody className=\"p-0\">\n                          {/* Accordion Header */}\n                          <button\n                            onClick={() => toggleCategory(category.id)}\n                            className=\"w-full p-6 text-left hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-200 focus:ring-inset\"\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-4\">\n                                <div className={`p-3 ${category.bgColor} rounded-xl flex-shrink-0`}>\n                                  <category.icon className={`w-6 h-6 ${category.color}`} />\n                                </div>\n                                <div className=\"flex-1\">\n                                  <h3 className=\"text-lg font-semibold text-neutral-900 mb-1\">\n                                    {category.title}\n                                  </h3>\n                                  <p className=\"text-sm text-neutral-500\">\n                                    {category.items.length} essential items\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"flex-shrink-0 ml-4\">\n                                {isExpanded ? (\n                                  <ChevronUp className=\"w-5 h-5 text-neutral-400 transition-transform\" />\n                                ) : (\n                                  <ChevronDown className=\"w-5 h-5 text-neutral-400 transition-transform\" />\n                                )}\n                              </div>\n                            </div>\n                          </button>\n\n                          {/* Accordion Content */}\n                          {isExpanded && (\n                            <div className=\"px-6 pb-6 border-t border-gray-100\">\n                              <div className=\"pt-4\">\n                                <div className=\"grid grid-cols-1 gap-3\">\n                                  {category.items.map((item, itemIndex) => (\n                                    <div\n                                      key={itemIndex}\n                                      className=\"flex items-start gap-3 p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\"\n                                    >\n                                      <div className=\"mt-1 flex-shrink-0\">\n                                        <CheckSquare className=\"w-4 h-4 text-success-600\" />\n                                      </div>\n                                      <span className=\"text-neutral-700 text-sm leading-relaxed\">\n                                        {item}\n                                      </span>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </CardBody>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Red Flags Section */}\n              <Card className=\"border border-red-200 bg-red-50 mb-16 rounded-xl\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-3\">\n                    <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                    <h3 className=\"text-2xl font-bold text-red-900\">Things to Watch Out For</h3>\n                  </div>\n                  <p className=\"text-red-800 mt-2\">\n                    Don't panic — these are just things to be aware of. Most issues can be resolved\n                    or factored into the deal. The key is knowing about them upfront.\n                  </p>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <h4 className=\"font-semibold text-red-900 mb-3\">Financial Concerns</h4>\n                      <ul className=\"space-y-2\">\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            Declining revenue or profitability trends\n                          </span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            Unusual accounting practices or restatements\n                          </span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            High customer concentration (&gt;20% from single customer)\n                          </span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            Significant related-party transactions\n                          </span>\n                        </li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold text-red-900 mb-3\">Operational Concerns</h4>\n                      <ul className=\"space-y-2\">\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            High employee turnover, especially in key positions\n                          </span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            Pending litigation or regulatory issues\n                          </span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">Outdated technology or equipment</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <div className=\"w-2 h-2 bg-red-600 rounded-full mt-2 flex-shrink-0\"></div>\n                          <span className=\"text-red-800\">\n                            Lack of documented processes or procedures\n                          </span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n\n              {/* CTA Section - Caregiver Approach */}\n              <Card className=\"border border-calm-200 bg-gradient-to-r from-calm-50 to-calm-100 rounded-xl\">\n                <CardBody className=\"p-8 text-center\">\n                  <h2 className=\"text-2xl font-bold text-calm-900 mb-4\">\n                    You Don't Have to Do This Alone\n                  </h2>\n                  <p className=\"text-calm-800 mb-6 max-w-2xl mx-auto\">\n                    This checklist is a great starting point, but we know every business and every\n                    situation is unique. If you're looking at a specific opportunity and want\n                    someone experienced to walk through it with you, we're here to help. No\n                    judgment, no pressure — just genuine support from people who understand what\n                    you're going through.\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                    <Button variant=\"primary\" size=\"lg\" onPress={() => navigate('/contact')}>\n                      Talk to our team\n                    </Button>\n                    <Button variant=\"secondary\" size=\"lg\" onPress={() => navigate('/search')}>\n                      Browse businesses\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-calm-700 mt-4\">\n                    We've helped hundreds of business owners through this process. Let us help you\n                    too.\n                  </p>\n                </CardBody>\n              </Card>\n            </div>\n          </div>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default DueDiligenceChecklist;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/landingPages/resources/ValuationGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/landingPages/sellers/sellers.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport Container from '@/shared/components/layout/container/Container';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport { authService } from '@/shared/services/auth';\nimport { seoData } from '@/shared/utils/seo/seoData';\nimport { Card, CardBody } from '@heroui/react';\nimport { Building2, CheckCircle, Clock, Euro, Users } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../providers/auth-provider';\n\nconst SellersLandingPage = () => {\n  const navigate = useNavigate();\n  const { openModal } = useAuth();\n\n  // Handle Sell Your Business button click - Smart routing based on authentication\n  const handleListBusinessClick = async () => {\n    try {\n      const authResult = await authService.checkAuthentication();\n\n      if (authResult.isAuthenticated && authResult.user) {\n        // User is logged in - check their role\n        const userRole = authResult.user.role;\n\n        if (userRole === 'seller' || userRole === 'both' || userRole === 'admin') {\n          // User has seller permissions - redirect to seller dashboard\n          navigate('/my-business');\n        } else {\n          // User is buyer - redirect to listing creation with role upgrade prompt\n          navigate('/seller/listings/new');\n        }\n      } else {\n        // User is not logged in, show signup modal with seller intent\n        openModal('signup', {\n          url: '/my-business',\n          state: { from: 'seller-landing', intent: 'seller' },\n        });\n      }\n    } catch (error) {\n      // On error, default to showing signup modal\n      openModal('signup', {\n        url: '/my-business',\n        state: { from: 'seller-landing', intent: 'seller' },\n      });\n    }\n  };\n\n  const howItWorks = [\n    {\n      step: '1',\n      title: \"Let's talk first\",\n      description:\n        'We start with a free, confidential conversation about your goals and timeline. No pressure, just understanding.',\n    },\n    {\n      step: '2',\n      title: 'We help you prepare',\n      description:\n        \"Together, we'll create a compelling listing that showcases your business's true value and attracts the right buyers.\",\n    },\n    {\n      step: '3',\n      title: 'We guide you through',\n      description:\n        \"From first inquiries to final handshake, we're with you every step to ensure a smooth, successful transition.\",\n    },\n  ];\n\n  return (\n    <>\n      <SEOHead {...seoData.sellers} />\n      <div className=\"min-h-screen bg-white\">\n        {/* Hero Section - Caregiver Approach */}\n        <div className=\"bg-gradient-to-br from-neutral-100 via-white to-calm-50 py-24\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-4xl md:text-6xl font-bold text-neutral-900 mb-8 leading-tight\">\n                Ready to sell your business?\n                <span className=\"block text-calm-600 mt-2\">We're here to guide you</span>\n              </h1>\n\n              <p className=\"text-xl md:text-2xl text-neutral-600 mb-12 max-w-3xl mx-auto leading-relaxed\">\n                Selling your life's work doesn't have to be overwhelming. We'll walk you through\n                every step, connect you with the right buyers, and ensure your business finds the\n                perfect new owner.\n              </p>\n\n              <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n                <Button\n                  variant=\"primary\"\n                  size=\"xl\"\n                  onPress={handleListBusinessClick}\n                  startContent={<Building2 className=\"w-6 h-6\" />}\n                >\n                  Get started — we'll help you\n                </Button>\n                <Button variant=\"secondary\" size=\"xl\" onPress={() => navigate('/contact')}>\n                  Talk to our team first\n                </Button>\n              </div>\n\n              {/* Trust indicators */}\n              <div className=\"mt-12 flex flex-col sm:flex-row items-center justify-center gap-8 text-sm text-neutral-500\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-success-600\" />\n                  <span>Free confidential consultation</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-success-600\" />\n                  <span>No pressure, just guidance</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-success-600\" />\n                  <span>Verified buyers only</span>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Value Proposition - Caregiver Benefits */}\n        <div className=\"py-20 bg-white\">\n          <Container>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-6\">\n                  Why Business Owners Choose Us\n                </h2>\n                <p className=\"text-lg text-neutral-600 max-w-2xl mx-auto leading-relaxed\">\n                  We understand this is more than a transaction — it's your legacy. That's why we\n                  provide the care and expertise you deserve.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12 text-center\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <div className=\"p-4 bg-calm-100 rounded-2xl\">\n                      <Users className=\"w-8 h-8 text-calm-600\" />\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-neutral-900\">\n                    We find the right buyers\n                  </h3>\n                  <p className=\"text-neutral-600\">\n                    Not just any buyer — we connect you with people who will respect and continue\n                    what you've built with care.\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <div className=\"p-4 bg-success-100 rounded-2xl\">\n                      <Euro className=\"w-8 h-8 text-success-600\" />\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-neutral-900\">\n                    Fair, transparent pricing\n                  </h3>\n                  <p className=\"text-neutral-600\">\n                    No hidden fees or surprises. You keep what your business is worth, and we're\n                    upfront about all costs.\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <div className=\"p-4 bg-accent-100 rounded-2xl\">\n                      <Clock className=\"w-8 h-8 text-accent-600\" />\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-neutral-900\">Support every step</h3>\n                  <p className=\"text-neutral-600\">\n                    From your first question to closing day, we're with you. No pressure, just\n                    guidance when you need it.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* How it Works Section - Caregiver Process */}\n        <div className=\"py-20 bg-neutral-100\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-neutral-900 mb-6\">\n                  How We Help You Sell\n                </h2>\n                <p className=\"text-lg text-neutral-600\">\n                  A caring, step-by-step approach designed to make selling your business as smooth\n                  and stress-free as possible.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                {howItWorks.map((item, index) => (\n                  <Card\n                    key={index}\n                    className=\"rounded-2xl border border-neutral-200 hover:shadow-lg transition-all duration-300 bg-white\"\n                  >\n                    <CardBody className=\"p-8 text-center\">\n                      <div className=\"w-16 h-16 bg-calm-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                        <span className=\"text-2xl font-bold text-calm-600\">{item.step}</span>\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-neutral-900 mb-4\">{item.title}</h3>\n                      <p className=\"text-neutral-600 leading-relaxed\">{item.description}</p>\n                    </CardBody>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Reassuring CTA */}\n              <div className=\"text-center mt-16\">\n                <Button variant=\"secondary\" size=\"lg\" onPress={() => navigate('/contact')}>\n                  Start with a free conversation\n                </Button>\n                <p className=\"text-sm text-neutral-500 mt-3\">\n                  No commitment required • Completely confidential • Expert guidance\n                </p>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* Pricing Section */}\n        <div className=\"py-20 bg-white\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 mb-6\">Simple pricing</h2>\n              <p className=\"text-lg text-slate-600 mb-12\">\n                One flat fee, no commission, no hidden costs\n              </p>\n\n              <Card className=\"max-w-md mx-auto rounded-2xl border-2 border-blue-500 bg-gradient-to-br from-blue-50 to-indigo-50 shadow-lg\">\n                <CardBody className=\"p-8 text-center\">\n                  <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">Business Listing</h3>\n                  <div className=\"mb-6\">\n                    <span className=\"text-5xl font-bold text-blue-600\">€299</span>\n                    <span className=\"text-slate-600 ml-2\">one-time</span>\n                  </div>\n\n                  <ul className=\"space-y-3 mb-8 text-left\">\n                    <li className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-slate-700\">3 months visibility</span>\n                    </li>\n                    <li className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-slate-700\">Professional listing page</span>\n                    </li>\n                    <li className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-slate-700\">Direct buyer inquiries</span>\n                    </li>\n                    <li className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                      <span className=\"text-slate-700\">Email support</span>\n                    </li>\n                  </ul>\n\n                  <Button\n                    variant=\"primary\"\n                    className=\"w-full\"\n                    size=\"lg\"\n                    onPress={handleListBusinessClick}\n                  >\n                    Start Listing\n                  </Button>\n                </CardBody>\n              </Card>\n            </div>\n          </Container>\n        </div>\n\n        {/* Sell in 5 Steps Section */}\n        <div className=\"py-20 bg-gray-50\">\n          <Container>\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 mb-6\">\n                  Sell a business in 5 steps\n                </h2>\n                <p className=\"text-lg text-slate-600\">\n                  Your complete guide to a successful business sale\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-8\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-2xl font-bold text-blue-600\">1</span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Orient</h3>\n                  <p className=\"text-slate-600 leading-relaxed\">\n                    Explore options and understand the market before you sell.\n                  </p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-2xl font-bold text-blue-600\">2</span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Find</h3>\n                  <p className=\"text-slate-600 leading-relaxed\">\n                    Find the ideal buyer who shares your vision.\n                  </p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-2xl font-bold text-blue-600\">3</span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Connect</h3>\n                  <p className=\"text-slate-600 leading-relaxed\">\n                    Meet interested parties and build relationships.\n                  </p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-2xl font-bold text-blue-600\">4</span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Validate</h3>\n                  <p className=\"text-slate-600 leading-relaxed\">\n                    Validate offers and negotiate with qualified buyers.\n                  </p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-2xl font-bold text-blue-600\">5</span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Close</h3>\n                  <p className=\"text-slate-600 leading-relaxed\">\n                    Complete the transaction and transfer ownership successfully.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Container>\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"py-20 bg-white\">\n          <Container>\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"text-center mb-16\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 mb-6\">\n                  Frequently Asked Questions\n                </h2>\n                <p className=\"text-lg text-slate-600\">\n                  Get answers to common questions about selling your business\n                </p>\n              </div>\n\n              <div className=\"space-y-8\">\n                <Card className=\"rounded-2xl border border-slate-200\">\n                  <CardBody className=\"p-8\">\n                    <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                      How long does it take to sell a business?\n                    </h3>\n                    <p className=\"text-slate-600 leading-relaxed\">\n                      The timeline varies depending on your business type, price, and market\n                      conditions. Most businesses sell within 3-9 months of listing.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"rounded-2xl border border-slate-200\">\n                  <CardBody className=\"p-8\">\n                    <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                      What information do I need to provide?\n                    </h3>\n                    <p className=\"text-slate-600 leading-relaxed\">\n                      You'll need basic business information, financial details, and a description\n                      of your operations. We'll guide you through each step of creating your\n                      listing.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"rounded-2xl border border-slate-200\">\n                  <CardBody className=\"p-8\">\n                    <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                      Is my information kept confidential?\n                    </h3>\n                    <p className=\"text-slate-600 leading-relaxed\">\n                      Yes, we protect your business information. Sensitive details are only shared\n                      with serious, qualified buyers who sign confidentiality agreements.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"rounded-2xl border border-slate-200\">\n                  <CardBody className=\"p-8\">\n                    <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                      What if I need help during the sale process?\n                    </h3>\n                    <p className=\"text-slate-600 leading-relaxed\">\n                      Our support team is here to help you throughout the process. You can also\n                      connect with professional advisors and brokers through our platform.\n                    </p>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"rounded-2xl border border-slate-200\">\n                  <CardBody className=\"p-8\">\n                    <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                      Can I edit my listing after it's published?\n                    </h3>\n                    <p className=\"text-slate-600 leading-relaxed\">\n                      Yes, you can update your listing at any time to add new information, photos,\n                      or adjust your asking price based on market feedback.\n                    </p>\n                  </CardBody>\n                </Card>\n              </div>\n\n              {/* CTA at bottom of FAQ */}\n              <div className=\"text-center mt-16\">\n                <h3 className=\"text-2xl font-bold text-slate-900 mb-6\">Ready to get started?</h3>\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onPress={handleListBusinessClick}\n                  startContent={<Building2 className=\"w-6 h-6\" />}\n                >\n                  List Your Business Now\n                </Button>\n              </div>\n            </div>\n          </Container>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SellersLandingPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/listings/CreateListingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/listings/EditListingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":49,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import SellerOnboardingModal, {\n  SellerFormData,\n} from '@/shared/components/modals/SellerOnboardingModal';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst EditListingPage: React.FC = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [existingData, setExistingData] = useState<SellerFormData | null>(null);\n  // Loading states removed for smooth UX\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const listingId = searchParams.get('id');\n\n  // Load existing listing data and auto-open modal\n  useEffect(() => {\n    const loadExistingListing = async () => {\n      if (!listingId) {\n        navigate('/my-business/overview');\n        return;\n      }\n\n      try {\n        // TODO: Replace with actual API call to fetch listing data\n\n        // Mock data for now - replace with actual API call\n        const mockListingData: SellerFormData = {\n          businessType: 'technology',\n          businessName: 'Example Tech Company',\n          industry: 'Technology',\n          country: 'Belgium',\n          city: 'Brussels',\n          foundedYear: '2018',\n          description:\n            'A innovative technology company specializing in software solutions for small and medium businesses. We have built a strong reputation for quality service and have a loyal customer base of over 500 active clients.',\n          employeeCount: '6-20',\n          revenueRange: [500000, 2000000],\n          sellingReason: 'retirement',\n          timeline: '6-months',\n          priceExpectations: '€1.5M - €2.5M',\n          contactEmail: 'owner@example.com',\n          contactPhone: '+32 2 123 4567',\n          wantsVerification: true,\n        };\n\n        setExistingData(mockListingData);\n        setIsModalOpen(true);\n      } catch (error) {\n        // Navigate back on error\n        navigate('/my-business/overview');\n      } finally {\n        // No loading state to manage\n      }\n    };\n\n    loadExistingListing();\n  }, [listingId, navigate]);\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    // Navigate back to business overview when modal closes\n    navigate('/my-business/overview');\n  };\n\n  const handleListingSave = async (data: SellerFormData) => {\n    try {\n      // TODO: Replace with actual API call to update listing\n      // const response = await fetch(`/api/listings/${listingId}`, {\n      //   method: 'PUT',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(data)\n      // });\n\n      // Mock API call with realistic delay\n      await new Promise(resolve => setTimeout(resolve, 1200));\n\n      // Close modal and navigate back with success message\n      setIsModalOpen(false);\n      navigate('/business/overview', {\n        state: {\n          message: 'Your business listing has been saved successfully!',\n          type: 'success',\n          listingData: data,\n        },\n      });\n    } catch (error) {\n      // TODO: Show error state in modal instead of failing silently\n      // For now, show generic error\n      alert('Failed to save listing changes. Please try again.');\n    }\n  };\n\n  // Loading screens removed for smooth user experience\n\n  return (\n    <>\n      <SEOHead\n        title=\"Edit Business Listing | UpSwitch\"\n        description=\"Update your business listing on UpSwitch. Modify your listing details to attract the right buyers.\"\n        keywords=\"edit business listing, update listing, business for sale, UpSwitch\"\n      />\n\n      <SellerOnboardingModal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        onComplete={handleListingSave}\n        existingData={existingData}\n        isEditMode={true}\n      />\n\n      {/* Fallback content if modal is not open */}\n      {!isModalOpen && (\n        <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Opening listing editor...</p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default EditListingPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/listings/ListingDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadListingDetails'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadListingDetails]","fix":{"range":[1206,1210],"text":"[id, loadListingDetails]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from '@/app/providers/auth-provider';\nimport { Button } from '@/shared/components/buttons';\nimport { ImageGalleryModal } from '@/shared/components/modals/images';\nimport InquiryModal from '@/shared/components/modals/InquiryModal';\nimport NDAModal from '@/shared/components/modals/NDAModal';\nimport { Card, CardBody, CardHeader, Divider, useDisclosure } from '@heroui/react';\nimport {\n  ArrowLeft,\n  Building2,\n  CheckCircle,\n  Eye,\n  MapPin,\n  MessageSquare,\n  Shield,\n  TrendingUp,\n} from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nconst ListingDetails = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { isOpen, onOpen, onOpenChange } = useDisclosure();\n  const { isAuthenticated, openModal } = useAuth();\n  const [listing, setListing] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isImageGalleryOpen, setIsImageGalleryOpen] = useState(false);\n  const [initialImageIndex, setInitialImageIndex] = useState(0);\n  const [isNdaModalOpen, setIsNdaModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadListingDetails();\n  }, [id]);\n\n  // Listen for authentication success and auto-open NDA modal if needed\n  useEffect(() => {\n    const handleAuthSuccess = () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.get('autoOpenNda') === 'true') {\n        setIsNdaModalOpen(true);\n        // Clean up URL parameter\n        const newUrl = new URL(window.location.href);\n        newUrl.searchParams.delete('autoOpenNda');\n        window.history.replaceState({}, '', newUrl.toString());\n      }\n    };\n\n    window.addEventListener('user-signup', handleAuthSuccess);\n    window.addEventListener('user-login', handleAuthSuccess);\n\n    return () => {\n      window.removeEventListener('user-signup', handleAuthSuccess);\n      window.removeEventListener('user-login', handleAuthSuccess);\n    };\n  }, []);\n\n  // Handle post-authentication inquiry modal opening\n  useEffect(() => {\n    const handleAuthSuccess = () => {\n      // Check if we have post-auth state indicating we should open inquiry modal\n      const urlParams = new URLSearchParams(window.location.search);\n      const shouldOpenInquiry = urlParams.get('autoOpenInquiry') === 'true';\n\n      if (shouldOpenInquiry && isAuthenticated) {\n        // Small delay to ensure auth state is fully updated\n        setTimeout(() => {\n          onOpen();\n        }, 100);\n      }\n    };\n\n    // Listen for auth change events\n    window.addEventListener('auth-change', handleAuthSuccess);\n    window.addEventListener('user-signup', handleAuthSuccess);\n    window.addEventListener('user-login', handleAuthSuccess);\n\n    return () => {\n      window.removeEventListener('auth-change', handleAuthSuccess);\n      window.removeEventListener('user-signup', handleAuthSuccess);\n      window.removeEventListener('user-login', handleAuthSuccess);\n    };\n  }, [isAuthenticated, onOpen]);\n\n  // Handle Contact Seller button click with improved flow\n  const handleContactSeller = () => {\n    if (!isAuthenticated) {\n      // For non-authenticated users, open signup modal with post-auth redirect\n      openModal('signup', {\n        url: window.location.pathname,\n        state: {\n          listingId: id,\n          action: 'contact_seller',\n          autoOpenInquiry: true,\n        },\n      });\n    } else {\n      // For authenticated users, directly open inquiry modal\n      onOpen();\n    }\n  };\n\n  // Handle Request More Information button click for NDA-required listings\n  const handleRequestMoreInfo = () => {\n    if (!isAuthenticated) {\n      // For non-authenticated users, open signup modal with post-auth redirect to same page\n      openModal('signup', {\n        url: window.location.pathname,\n        state: {\n          listingId: id,\n          action: 'request_more_info',\n          requiresNda: true,\n          autoOpenNda: true,\n        },\n      });\n    } else {\n      // For authenticated users, open NDA modal directly\n      setIsNdaModalOpen(true);\n    }\n  };\n\n  // Handle NDA acceptance\n  const handleNdaAccept = async () => {\n    try {\n      // TODO: Replace with actual API call to submit NDA signature\n      // NDA signature submitted\n\n      // Simulate NDA signing success\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Close modal and navigate to private page\n      setIsNdaModalOpen(false);\n      navigate(`/listings/${id}/private`);\n    } catch {\n      // NDA signing failed\n    }\n  };\n\n  const loadListingDetails = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 100)); // Minimal delay for demo\n\n      // Mock listing data\n      setListing({\n        id: id,\n        title: 'Premium Restaurant Chain - Brussels',\n        sector: 'Food & Beverage',\n        country: 'BE',\n        region: 'Brussels',\n        asking_price: 2500000,\n        currency: 'EUR',\n        summary:\n          'Established restaurant chain with 3 locations in prime Brussels areas. Strong customer base, excellent reputation, and significant growth potential in the Belgian market.',\n        images: [\n          {\n            id: '1',\n            storage_url:\n              'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=1200&h=800&fit=crop&crop=center&auto=format&q=80',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop&crop=center&auto=format&q=80',\n            is_primary: true,\n            alt_text: 'Premium restaurant interior with elegant dining setup',\n          },\n          {\n            id: '2',\n            storage_url:\n              'https://images.unsplash.com/photo-1424847651672-bf20a4b0982b?w=1200&h=800&fit=crop&crop=center&auto=format&q=80',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1424847651672-bf20a4b0982b?w=400&h=300&fit=crop&crop=center&auto=format&q=80',\n            is_primary: false,\n            alt_text: 'Restaurant exterior view',\n          },\n          {\n            id: '3',\n            storage_url:\n              'https://images.unsplash.com/photo-1514933651103-005eec06c04b?w=1200&h=800&fit=crop&crop=center&auto=format&q=80',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1514933651103-005eec06c04b?w=400&h=300&fit=crop&crop=center&auto=format&q=80',\n            is_primary: false,\n            alt_text: 'Delicious gourmet food presentation',\n          },\n        ],\n        description: `This premium restaurant chain represents an exceptional opportunity to acquire a well-established business in the heart of Brussels. With three strategically located restaurants in high-traffic areas, this business has built a loyal customer base over 8 years of operation.\n\nKey highlights:\n• Three prime locations in Brussels city center\n• Established brand with excellent reputation\n• Strong financial performance with consistent growth\n• Experienced management team willing to stay post-acquisition\n• Modern equipment and recently renovated facilities\n• Strong supplier relationships and operational systems\n\nThe business specializes in contemporary European cuisine with a focus on local ingredients and seasonal menus. Each location has been carefully selected for maximum visibility and foot traffic, resulting in strong and consistent revenue streams.\n\nThis is an ideal acquisition for an investor looking to enter the Belgian food service market or expand an existing hospitality portfolio.`,\n        views: 245,\n        inquiries: 12,\n        published_at: '2024-01-15',\n        featured: true,\n        anonymous: false,\n        requires_nda: true,\n        years_in_business: 8,\n        revenue_range: '€2M - €5M',\n        ebitda_range: '€400K - €800K',\n        employees: 45,\n        financials: {\n          revenue_2023: 4200000,\n          revenue_2022: 3800000,\n          revenue_2021: 3200000,\n          ebitda_2023: 756000,\n          ebitda_2022: 684000,\n          ebitda_2021: 576000,\n          ebitda_margin: 18,\n          growth_rate: 12,\n        },\n        highlights: [\n          'Prime Brussels locations',\n          'Established brand reputation',\n          'Experienced management team',\n          'Modern equipment & facilities',\n          'Strong supplier relationships',\n        ],\n        seller_info: {\n          reason_for_sale: 'Retirement',\n          timeline: '3-6 months',\n          involvement_post_sale: 'Transition support available',\n        },\n      });\n    } catch {\n      // Error loading listing details\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id]);\n\n  const formatPrice = (price?: number, currency = 'EUR') => {\n    if (!price) return 'Price on request';\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleImageClick = (imageIndex: number) => {\n    setInitialImageIndex(imageIndex);\n    setIsImageGalleryOpen(true);\n  };\n\n  // Show loading state while fetching data\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"max-w-4xl mx-auto p-6 text-center pt-20\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading listing details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show not found only after loading is complete and no listing found\n  if (!listing) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"max-w-4xl mx-auto p-6 text-center pt-20\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-4\">Listing not found</h2>\n          <p className=\"text-gray-600 mb-6\">\n            The listing you're looking for doesn't exist or has been removed.\n          </p>\n          <Button variant=\"primary\" onPress={() => navigate('/search')}>\n            Back to Search\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const primaryImage = listing.images?.find(img => img.is_primary) || listing.images?.[0];\n  const additionalImages = listing.images?.filter(img => img.id !== primaryImage?.id) || [];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"tertiary\"\n            startContent={\n              <ArrowLeft className=\"w-4 h-4\" style={{ stroke: 'currentColor', fill: 'none' }} />\n            }\n            onPress={() => navigate(-1)}\n            className=\"mb-6 text-neutral-600 hover:text-neutral-900\"\n          >\n            Back to Search\n          </Button>\n\n          <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <h1 className=\"text-4xl md:text-5xl font-bold text-neutral-900\">{listing.title}</h1>\n              </div>\n              <div className=\"flex flex-wrap items-center gap-4 text-neutral-600 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-5 h-5\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span className=\"font-medium\">{listing.sector}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span>\n                    {listing.region}, {listing.country}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Eye className=\"w-5 h-5\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span>{listing.views} views</span>\n                </div>\n              </div>\n\n              {/* M&A Funnel Progress */}\n              <div className=\"bg-neutral-50 rounded-xl p-4 border border-neutral-200\">\n                <div className=\"flex items-center justify-between max-w-2xl\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center mb-1\">\n                      <CheckCircle\n                        className=\"w-4 h-4 text-white\"\n                        style={{ stroke: '#ffffff', fill: 'none', strokeWidth: '2.5' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-primary-600\">Found</span>\n                  </div>\n                  <div className=\"flex-1 h-0.5 bg-primary-300 mx-2\"></div>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center mb-1\">\n                      <MessageSquare\n                        className=\"w-4 h-4 text-white\"\n                        style={{ stroke: '#ffffff', fill: 'none', strokeWidth: '2.5' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-primary-600\">Inquire</span>\n                  </div>\n                  <div className=\"flex-1 h-0.5 bg-neutral-300 mx-2\"></div>\n                  <div className=\"flex flex-col items-center opacity-50\">\n                    <div className=\"w-8 h-8 bg-neutral-300 rounded-full flex items-center justify-center mb-1\">\n                      <Shield\n                        className=\"w-4 h-4 text-neutral-600\"\n                        style={{ stroke: 'currentColor', fill: 'none', strokeWidth: '2' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-neutral-600\">NDA</span>\n                  </div>\n                  <div className=\"flex-1 h-0.5 bg-neutral-300 mx-2\"></div>\n                  <div className=\"flex flex-col items-center opacity-50\">\n                    <div className=\"w-8 h-8 bg-neutral-300 rounded-full flex items-center justify-center mb-1\">\n                      <Building2\n                        className=\"w-4 h-4 text-neutral-600\"\n                        style={{ stroke: 'currentColor', fill: 'none', strokeWidth: '2' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-neutral-600\">Close</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Airbnb-Style Image Gallery Section */}\n        {(primaryImage || additionalImages.length > 0) && (\n          <div className=\"mb-8\">\n            <div className=\"grid grid-cols-4 gap-2 h-[400px] md:h-[480px] rounded-xl overflow-hidden\">\n              {/* Large primary image - takes up 2 columns */}\n              {primaryImage && (\n                <div\n                  className=\"col-span-4 md:col-span-2 relative cursor-pointer group\"\n                  onClick={() => handleImageClick(0)}\n                >\n                  <img\n                    src={primaryImage.storage_url}\n                    alt={primaryImage.alt_text || `${listing.title} main image`}\n                    className=\"w-full h-full object-cover transition-all duration-300 group-hover:brightness-90\"\n                    loading=\"lazy\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-all duration-300\" />\n                </div>\n              )}\n\n              {/* Right side grid - smaller images */}\n              <div className=\"col-span-4 md:col-span-2 grid grid-cols-2 gap-2\">\n                {additionalImages.slice(0, 4).map((image, index) => (\n                  <div\n                    key={image.id}\n                    className={`relative cursor-pointer group overflow-hidden ${\n                      index === 1 ? 'row-span-1' : ''\n                    }`}\n                    onClick={() => handleImageClick(index + 1)}\n                  >\n                    <img\n                      src={image.thumbnail_url || image.storage_url}\n                      alt={image.alt_text || `${listing.title} photo ${index + 1}`}\n                      className=\"w-full h-full object-cover transition-all duration-300 group-hover:brightness-90\"\n                      loading=\"lazy\"\n                    />\n                    <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-all duration-300\" />\n\n                    {/* Show all photos overlay on last image if there are more */}\n                    {index === 3 && additionalImages.length > 4 && (\n                      <div\n                        className=\"absolute inset-0 bg-black/50 flex items-center justify-center transition-all duration-300 group-hover:bg-black/60\"\n                        onClick={e => {\n                          e.stopPropagation();\n                          handleImageClick(0);\n                        }}\n                      >\n                        <div className=\"text-center text-white\">\n                          <svg\n                            className=\"w-8 h-8 mx-auto mb-2\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"\n                            />\n                          </svg>\n                          <div className=\"text-sm font-semibold\">\n                            +{additionalImages.length - 3} photos\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n\n                {/* Fill empty slots if we have fewer than 4 additional images */}\n                {additionalImages.length < 4 &&\n                  Array.from({ length: 4 - additionalImages.length }).map((_, index) => (\n                    <div\n                      key={`empty-${index}`}\n                      className=\"bg-gray-100 flex items-center justify-center\"\n                    >\n                      <div className=\"text-gray-400\">\n                        <svg\n                          className=\"w-12 h-12\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                          />\n                        </svg>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n\n            {/* Show all photos button - mobile/tablet view */}\n            <div className=\"mt-4 md:hidden flex justify-center\">\n              <button\n                onClick={() => handleImageClick(0)}\n                className=\"flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"\n                  />\n                </svg>\n                <span className=\"text-sm font-medium\">\n                  View all {(listing.images || []).length} photos\n                </span>\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Mobile Price & Contact - Shown first on mobile */}\n          <div className=\"lg:hidden order-1\">\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Asking Price</h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"text-center mb-6\">\n                  <p className=\"text-4xl font-bold text-primary-600\">\n                    {formatPrice(listing.asking_price, listing.currency)}\n                  </p>\n                  <p className=\"text-sm text-neutral-600\">Negotiable</p>\n                </div>\n\n                {/* Conditional CTA based on NDA requirement */}\n                {listing.requires_nda ? (\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant=\"primary\"\n                      size=\"lg\"\n                      onPress={handleRequestMoreInfo}\n                      className=\"w-full\"\n                      startContent={\n                        <Shield\n                          className=\"w-5 h-5\"\n                          style={{ stroke: 'currentColor', fill: 'none' }}\n                        />\n                      }\n                    >\n                      Request More Information\n                    </Button>\n                    <p className=\"text-xs text-gray-600 text-center\">\n                      Sign NDA to access detailed financials and documents\n                    </p>\n                  </div>\n                ) : (\n                  <Button\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onPress={handleContactSeller}\n                    className=\"w-full\"\n                    startContent={\n                      <MessageSquare\n                        className=\"w-5 h-5\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    }\n                  >\n                    Contact Seller\n                  </Button>\n                )}\n              </CardBody>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6 order-2\">\n            {/* Key Information */}\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Business Overview</h2>\n              </CardHeader>\n              <CardBody>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-primary-600\">\n                      {listing.years_in_business}\n                    </p>\n                    <p className=\"text-sm text-neutral-600\">Years in Business</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-success-600\">{listing.employees}</p>\n                    <p className=\"text-sm text-neutral-600\">Employees</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-warning-600\">\n                      {listing.financials.ebitda_margin}%\n                    </p>\n                    <p className=\"text-sm text-neutral-600\">EBITDA Margin</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-primary-700\">\n                      {listing.financials.growth_rate}%\n                    </p>\n                    <p className=\"text-sm text-neutral-600\">Growth Rate</p>\n                  </div>\n                </div>\n\n                <Divider className=\"my-4\" />\n\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Key Highlights</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {listing.highlights.map((highlight: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm\">{highlight}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Description */}\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Business Description</h2>\n              </CardHeader>\n              <CardBody>\n                <div className=\"prose prose-gray max-w-none\">\n                  {listing.description.split('\\n\\n').map((paragraph: string, index: number) => (\n                    <p key={index} className=\"mb-4 text-gray-700 leading-relaxed\">\n                      {paragraph}\n                    </p>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Financial Information */}\n            <Card className=\"bg-gradient-to-br from-blue-50 via-white to-indigo-50 border border-blue-200 rounded-3xl shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between w-full\">\n                  <h2 className=\"text-2xl font-bold text-slate-900\">Financial Overview</h2>\n                  {listing.requires_nda && (\n                    <span className=\"inline-flex items-center gap-1.5 bg-gray-100 px-3 py-1.5 rounded-full text-gray-700 text-sm font-medium whitespace-nowrap\">\n                      <Shield\n                        className=\"w-3 h-3 flex-shrink-0\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                      <span>NDA Required</span>\n                    </span>\n                  )}\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6\">\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">Revenue 2023</p>\n                      <TrendingUp\n                        className=\"w-4 h-4 text-green-600\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.revenue_2023)}\n                    </p>\n                    <p className=\"text-xs text-green-600 font-medium mt-1\">+10.5% YoY</p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">EBITDA 2023</p>\n                      <TrendingUp\n                        className=\"w-4 h-4 text-green-600\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.ebitda_2023)}\n                    </p>\n                    <p className=\"text-xs text-green-600 font-medium mt-1\">+10.5% YoY</p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">Revenue 2022</p>\n                      <TrendingUp\n                        className=\"w-4 h-4 text-blue-600\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.revenue_2022)}\n                    </p>\n                    <p className=\"text-xs text-blue-600 font-medium mt-1\">+18.8% YoY</p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">EBITDA 2022</p>\n                      <TrendingUp\n                        className=\"w-4 h-4 text-blue-600\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.ebitda_2022)}\n                    </p>\n                    <p className=\"text-xs text-blue-600 font-medium mt-1\">+18.8% YoY</p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">Revenue 2021</p>\n                      <TrendingUp\n                        className=\"w-4 h-4 text-slate-600\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.revenue_2021)}\n                    </p>\n                    <p className=\"text-xs text-slate-600 font-medium mt-1\">Base year</p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">EBITDA 2021</p>\n                      <TrendingUp\n                        className=\"w-4 h-4 text-slate-600\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.ebitda_2021)}\n                    </p>\n                    <p className=\"text-xs text-slate-600 font-medium mt-1\">Base year</p>\n                  </div>\n                </div>\n\n                {listing.requires_nda && (\n                  <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 border-l-4 border-amber-400 rounded-xl p-6\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"bg-amber-100 rounded-full p-2 mt-0.5\">\n                        <Shield\n                          className=\"w-5 h-5 text-amber-600\"\n                          style={{ stroke: 'currentColor', fill: 'none' }}\n                        />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-amber-900 mb-2\">\n                          Confidential Financial Data\n                        </h4>\n                        <p className=\"text-sm text-amber-800 leading-relaxed\">\n                          Detailed financial statements, cash flow analysis, and sensitive business\n                          metrics are available to qualified buyers after NDA execution. This\n                          includes P&L statements, balance sheets, and growth projections.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6 order-3\">\n            {/* Price & Contact - Desktop Only */}\n            <Card className=\"hidden lg:block\">\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Asking Price</h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"text-center mb-6\">\n                  <p className=\"text-4xl font-bold text-primary-600\">\n                    {formatPrice(listing.asking_price, listing.currency)}\n                  </p>\n                  <p className=\"text-sm text-neutral-600\">Negotiable</p>\n                </div>\n\n                {/* Conditional CTA based on NDA requirement */}\n                {listing.requires_nda ? (\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant=\"primary\"\n                      size=\"lg\"\n                      onPress={handleRequestMoreInfo}\n                      className=\"w-full\"\n                      startContent={\n                        <Shield\n                          className=\"w-5 h-5\"\n                          style={{ stroke: 'currentColor', fill: 'none' }}\n                        />\n                      }\n                    >\n                      Request More Information\n                    </Button>\n                    <p className=\"text-xs text-gray-600 text-center\">\n                      Sign NDA to access detailed financials and documents\n                    </p>\n                  </div>\n                ) : (\n                  <Button\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onPress={handleContactSeller}\n                    className=\"w-full\"\n                    startContent={\n                      <MessageSquare\n                        className=\"w-5 h-5\"\n                        style={{ stroke: 'currentColor', fill: 'none' }}\n                      />\n                    }\n                  >\n                    Contact Seller\n                  </Button>\n                )}\n              </CardBody>\n            </Card>\n\n            {/* Sale Information */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Sale Information</h3>\n              </CardHeader>\n              <CardBody className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Reason for Sale</p>\n                  <p className=\"font-medium\">{listing.seller_info.reason_for_sale}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Preferred Timeline</p>\n                  <p className=\"font-medium\">{listing.seller_info.timeline}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Post-Sale Involvement</p>\n                  <p className=\"font-medium\">{listing.seller_info.involvement_post_sale}</p>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n\n        {/* Image Gallery Modal */}\n        <ImageGalleryModal\n          isOpen={isImageGalleryOpen}\n          onClose={() => setIsImageGalleryOpen(false)}\n          images={listing.images || []}\n          initialImageIndex={initialImageIndex}\n        />\n\n        {/* Inquiry Modal */}\n        <InquiryModal\n          isOpen={isOpen}\n          onClose={() => onOpenChange()}\n          listing={{\n            id: listing.id,\n            title: listing.title,\n            sector: listing.sector,\n            asking_price: listing.asking_price,\n            currency: listing.currency,\n            requires_nda: listing.requires_nda,\n          }}\n          onSubmit={() => {\n            // Inquiry submitted\n            // TODO: Implement actual inquiry submission\n            onOpenChange();\n          }}\n        />\n\n        <NDAModal\n          isOpen={isNdaModalOpen}\n          onClose={() => setIsNdaModalOpen(false)}\n          onAccept={handleNdaAccept}\n          listingTitle={listing?.title || 'Business Listing'}\n          sellerName={listing?.seller_info?.name || 'Business Owner'}\n          isLoading={false}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ListingDetails;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/listings/ListingSearch.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_showFilters' is assigned a value but never used.","line":56,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showFilters' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'_setShowFilters' is assigned a value but never used.","line":56,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowFilters' is assigned a value but never used.","line":56,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":39},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadListings'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams, currentPage, loadListings]","fix":{"range":[2317,2344],"text":"[searchParams, currentPage, loadListings]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9614,9662],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'searchData' is defined but never used.","line":307,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":307,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchData' is defined but never used.","line":307,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":307,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11162,11209],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11300,11303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11300,11303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":722,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":722,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":722,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":722,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":725,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":725,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":725,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":725,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'inquiryData' is defined but never used.","line":725,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":725,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'inquiryData' is defined but never used.","line":725,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":725,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport SaveSearchModal from '@/shared/components/buyer/SaveSearchModal';\nimport { PriceRangeSlider, SearchComponent } from '@/shared/components/filters';\nimport ListingCard from '@/shared/components/listings/ListingCard';\nimport { Card, CardBody, Pagination } from '@heroui/react';\nimport { Bell, Building2, CheckCircle, MessageSquare, Search, Shield } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\ninterface Listing {\n  id: string;\n  title: string;\n  sector: string;\n  country: string;\n  region?: string;\n  asking_price?: number;\n  currency: string;\n  summary: string;\n  views: number;\n  inquiries: number;\n  published_at: string;\n  featured: boolean;\n  anonymous: boolean;\n  requires_nda: boolean;\n  years_in_business?: number;\n  business_age?: number;\n  revenue_range?:\n    | string\n    | {\n        min?: number;\n        max?: number;\n      };\n  ebitda_range?:\n    | string\n    | {\n        min?: number;\n        max?: number;\n      };\n  highlights?: string[];\n  images?: {\n    id: string;\n    storage_url: string;\n    thumbnail_url: string;\n    is_primary: boolean;\n    alt_text?: string;\n  }[];\n}\n\nconst ListingSearch = () => {\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [listings, setListings] = useState<Listing[]>([]);\n  // Loading states removed for smooth UX\n  const [totalResults, setTotalResults] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [_showFilters, _setShowFilters] = useState(false);\n  const [showSaveSearchModal, setShowSaveSearchModal] = useState(false);\n\n  // Search filters state\n  const [filters, setFilters] = useState({\n    searchQuery: searchParams.get('q') || '',\n    sector: searchParams.get('sector') || '',\n    country: searchParams.get('country') || '',\n    priceRange: [\n      parseInt(searchParams.get('priceMin') || '0'),\n      parseInt(searchParams.get('priceMax') || '10000000'),\n    ] as [number, number],\n    revenueRange: [0, 50000000] as [number, number],\n    anonymous: searchParams.get('anonymous') || '',\n    requiresNda: searchParams.get('requiresNda') || '',\n    sortBy: 'published_at',\n  });\n\n  useEffect(() => {\n    loadListings();\n  }, [searchParams, currentPage]);\n\n  const loadListings = async () => {\n    // Instant data loading - no loading state\n    try {\n      // TODO: Replace with actual API call to backend\n      // For now, using mock data\n      await new Promise(resolve => setTimeout(resolve, 500)); // Simulate API delay\n\n      const mockListings: Listing[] = [\n        {\n          id: '1',\n          title: 'Premium Restaurant Chain - Brussels',\n          sector: 'Food & Beverage',\n          country: 'BE',\n          region: 'Brussels',\n          asking_price: 2500000,\n          currency: 'EUR',\n          summary:\n            'Established restaurant chain with 3 locations in prime Brussels areas. Strong customer base, excellent reputation, and significant growth potential in the Belgian market.',\n          images: [\n            {\n              id: '1',\n              storage_url:\n                'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=500&fit=crop&crop=center&auto=format&q=80',\n              thumbnail_url:\n                'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=250&fit=crop&crop=center&auto=format&q=80',\n              is_primary: true,\n              alt_text: 'Premium restaurant interior with elegant dining setup',\n            },\n            {\n              id: '2',\n              storage_url:\n                'https://images.unsplash.com/photo-1424847651672-bf20a4b0982b?w=800&h=500&fit=crop&crop=center&auto=format&q=80',\n              thumbnail_url:\n                'https://images.unsplash.com/photo-1424847651672-bf20a4b0982b?w=400&h=250&fit=crop&crop=center&auto=format&q=80',\n              is_primary: false,\n              alt_text: 'Restaurant exterior view',\n            },\n          ],\n          views: 245,\n          inquiries: 12,\n          published_at: '2024-01-15',\n          featured: true,\n          anonymous: false,\n          requires_nda: true,\n          years_in_business: 8,\n          revenue_range: '€2M - €5M',\n        },\n        {\n          id: '2',\n          title: 'Software Development Company',\n          sector: 'Technology',\n          country: 'BE',\n          region: 'Antwerp',\n          asking_price: 1800000,\n          currency: 'EUR',\n          summary:\n            'Growing SaaS company specializing in enterprise solutions. 15 employees, recurring revenue model, and expanding European client base.',\n          images: [\n            {\n              id: '3',\n              storage_url:\n                'https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=500&fit=crop&crop=center&auto=format&q=80',\n              thumbnail_url:\n                'https://images.unsplash.com/photo-1497366216548-37526070297c?w=400&h=250&fit=crop&crop=center&auto=format&q=80',\n              is_primary: true,\n              alt_text: 'Modern tech office workspace',\n            },\n          ],\n          views: 189,\n          inquiries: 8,\n          published_at: '2024-01-18',\n          featured: false,\n          anonymous: true,\n          requires_nda: true,\n          years_in_business: 5,\n          revenue_range: '€1M - €2M',\n        },\n        {\n          id: '3',\n          title: 'Manufacturing Business - Antwerp',\n          sector: 'Manufacturing',\n          country: 'BE',\n          region: 'Antwerp',\n          asking_price: 3200000,\n          currency: 'EUR',\n          summary:\n            'Specialized manufacturing company with modern equipment, established supply chains, and strong export capabilities.',\n          views: 156,\n          inquiries: 6,\n          published_at: '2024-01-20',\n          featured: false,\n          anonymous: false,\n          requires_nda: true,\n          years_in_business: 12,\n          revenue_range: '€5M - €10M',\n          images: [\n            {\n              id: '3',\n              storage_url:\n                'https://images.unsplash.com/photo-1565514020179-026b92b84bb6?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n              thumbnail_url:\n                'https://images.unsplash.com/photo-1565514020179-026b92b84bb6?w=400&h=300&fit=crop&crop=center&auto=format&q=80',\n              is_primary: true,\n              alt_text: 'Manufacturing facility',\n            },\n          ],\n        },\n        {\n          id: '4',\n          title: 'Digital Marketing Agency',\n          sector: 'Professional Services',\n          country: 'NL',\n          region: 'Amsterdam',\n          asking_price: 950000,\n          currency: 'EUR',\n          summary:\n            'Full-service digital marketing agency with 20+ clients, strong team, and proven track record in B2B marketing.',\n          images: [\n            {\n              id: '4',\n              storage_url:\n                'https://images.unsplash.com/photo-1497366811353-6870744d04b2?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n              thumbnail_url:\n                'https://images.unsplash.com/photo-1497366811353-6870744d04b2?w=400&h=300&fit=crop&crop=center&auto=format&q=80',\n              is_primary: true,\n              alt_text: 'Creative office space',\n            },\n          ],\n          views: 98,\n          inquiries: 4,\n          published_at: '2024-01-22',\n          featured: false,\n          anonymous: true,\n          requires_nda: false,\n          years_in_business: 6,\n          revenue_range: '€500K - €1M',\n        },\n        {\n          id: '5',\n          title: 'E-commerce Retail Platform',\n          sector: 'Retail',\n          country: 'FR',\n          region: 'Paris',\n          asking_price: 1200000,\n          currency: 'EUR',\n          summary:\n            'Successful e-commerce platform specializing in sustainable products. Growing customer base and strong online presence.',\n          images: [\n            {\n              id: '5',\n              storage_url:\n                'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=800&h=500&fit=crop&crop=center&auto=format&q=80',\n              thumbnail_url:\n                'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=400&h=250&fit=crop&crop=center&auto=format&q=80',\n              is_primary: true,\n              alt_text: 'Modern retail warehouse and fulfillment center',\n            },\n          ],\n          views: 134,\n          inquiries: 9,\n          published_at: '2024-01-19',\n          featured: true,\n          anonymous: false,\n          requires_nda: true,\n          years_in_business: 4,\n          revenue_range: '€1M - €2M',\n        },\n      ];\n\n      // Apply basic filtering (in a real app, this would be done server-side)\n      let filteredListings = mockListings;\n\n      if (filters.searchQuery) {\n        filteredListings = filteredListings.filter(\n          listing =>\n            listing.title.toLowerCase().includes(filters.searchQuery.toLowerCase()) ||\n            listing.summary.toLowerCase().includes(filters.searchQuery.toLowerCase())\n        );\n      }\n\n      if (filters.sector) {\n        filteredListings = filteredListings.filter(listing => listing.sector === filters.sector);\n      }\n\n      if (filters.country) {\n        filteredListings = filteredListings.filter(listing => listing.country === filters.country);\n      }\n\n      setListings(filteredListings);\n      setTotalResults(filteredListings.length);\n    } catch (error) {\n      console.error('Error loading listings:', error);\n    } finally {\n      // No loading state to manage\n    }\n  };\n\n  const updateSearchParams = () => {\n    const params = new URLSearchParams();\n    if (filters.searchQuery) params.set('q', filters.searchQuery);\n    if (filters.sector) params.set('sector', filters.sector);\n    if (filters.country) params.set('country', filters.country);\n    if (filters.priceRange[0] > 0) params.set('priceMin', filters.priceRange[0].toString());\n    if (filters.priceRange[1] < 10000000) params.set('priceMax', filters.priceRange[1].toString());\n    if (filters.anonymous) params.set('anonymous', filters.anonymous);\n    if (filters.requiresNda) params.set('requiresNda', filters.requiresNda);\n\n    setSearchParams(params);\n  };\n\n  const formatPrice = (price?: number, currency = 'EUR') => {\n    if (!price) return 'Price on request';\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleSearch = () => {\n    updateSearchParams();\n    setCurrentPage(1);\n  };\n\n  const handleFilterChange = (key: string, value: unknown) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleSaveSearch = async (searchData: unknown) => {\n    try {\n      // TODO: Replace with actual API call\n      // await searchService.saveSearch(searchData);\n      // Show success notification\n      // toast.success('Search saved successfully!');\n    } catch (error) {\n      console.error('Failed to save search:', error);\n    }\n  };\n\n  const getCurrentSearchCriteria = () => {\n    const criteria: Record<string, any> = {};\n\n    if (filters.searchQuery) criteria.searchQuery = filters.searchQuery;\n    if (filters.sector) criteria.sector = filters.sector;\n    if (filters.country) criteria.country = filters.country;\n    if (filters.priceRange[0] > 0 || filters.priceRange[1] < 10000000) {\n      criteria.priceRange = filters.priceRange;\n    }\n    if (filters.revenueRange[0] > 0 || filters.revenueRange[1] < 50000000) {\n      criteria.revenueRange = filters.revenueRange;\n    }\n    if (filters.anonymous) criteria.anonymous = true;\n    if (filters.requiresNda) criteria.requiresNda = true;\n\n    return criteria;\n  };\n\n  const hasActiveFilters = () => {\n    return (\n      filters.searchQuery ||\n      filters.sector ||\n      filters.country ||\n      filters.priceRange[0] > 0 ||\n      filters.priceRange[1] < 10000000 ||\n      filters.revenueRange[0] > 0 ||\n      filters.revenueRange[1] < 50000000 ||\n      filters.anonymous ||\n      filters.requiresNda\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-neutral-100 via-white to-calm-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Header - Caregiver Approach for Buyers */}\n        <div className=\"mb-12 text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold text-neutral-900 mb-6 leading-tight\">\n            Find your next business\n            <span className=\"block text-calm-600 mt-2\">We've got you — every step of the way</span>\n          </h1>\n          <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto leading-relaxed\">\n            Whether you're growing your portfolio or buying your first business, we're here to guide\n            you through verified opportunities with care, transparency, and the support you need to\n            succeed.\n          </p>\n\n          {/* Trust indicators for buyers */}\n          <div className=\"mt-8 flex flex-col sm:flex-row items-center justify-center gap-6 text-sm text-neutral-500\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-success-600\" />\n              <span>All businesses verified</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <MessageSquare className=\"w-5 h-5 text-calm-600\" />\n              <span>Personal guidance available</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-success-600\" />\n              <span>No pressure, just support</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Search Bar - Clean Component */}\n        <div className=\"max-w-5xl mx-auto mb-12\">\n          <SearchComponent\n            value={filters.searchQuery}\n            onChange={value => handleFilterChange('searchQuery', value)}\n            onSearch={handleSearch}\n            placeholder=\"e.g. Restaurant in Brussels, Tech company, Manufacturing...\"\n            size=\"large\"\n            buttonText=\"Search\"\n          />\n        </div>\n\n        {/* Redesigned Filter Section */}\n        <Card className=\"mb-12 shadow-xl border border-slate-200 bg-gradient-to-br from-white to-slate-50 rounded-3xl\">\n          <CardBody className=\"p-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {/* Industry Sector Dropdown */}\n              <div className=\"space-y-3\">\n                <label className=\"text-sm font-semibold text-slate-700 block\">\n                  Industry Sector\n                </label>\n                <div className=\"relative\">\n                  <select\n                    value={filters.sector || ''}\n                    onChange={e => handleFilterChange('sector', e.target.value)}\n                    className=\"clean-select w-full h-12 px-4 pr-10 bg-white border border-slate-200 rounded-2xl shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-slate-900 font-medium appearance-none cursor-pointer\"\n                  >\n                    <option value=\"\" className=\"text-slate-500\">\n                      Select sector\n                    </option>\n                    <option value=\"Technology\" className=\"text-slate-900\">\n                      Technology\n                    </option>\n                    <option value=\"Food & Beverage\" className=\"text-slate-900\">\n                      Food & Beverage\n                    </option>\n                    <option value=\"Manufacturing\" className=\"text-slate-900\">\n                      Manufacturing\n                    </option>\n                    <option value=\"Retail\" className=\"text-slate-900\">\n                      Retail\n                    </option>\n                    <option value=\"Healthcare\" className=\"text-slate-900\">\n                      Healthcare\n                    </option>\n                    <option value=\"Professional Services\" className=\"text-slate-900\">\n                      Professional Services\n                    </option>\n                    <option value=\"Construction\" className=\"text-slate-900\">\n                      Construction\n                    </option>\n                    <option value=\"Transportation\" className=\"text-slate-900\">\n                      Transportation\n                    </option>\n                  </select>\n                  <div className=\"absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none\">\n                    <svg\n                      className=\"w-4 h-4 text-slate-500\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M19 9l-7 7-7-7\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n\n              {/* Location Dropdown */}\n              <div className=\"space-y-3\">\n                <label className=\"text-sm font-semibold text-slate-700 block\">Location</label>\n                <div className=\"relative\">\n                  <select\n                    value={filters.country || ''}\n                    onChange={e => handleFilterChange('country', e.target.value)}\n                    className=\"clean-select w-full h-12 px-4 pr-10 bg-white border border-slate-200 rounded-2xl shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-slate-900 font-medium appearance-none cursor-pointer\"\n                  >\n                    <option value=\"\" className=\"text-slate-500\">\n                      Select region\n                    </option>\n                    <option value=\"BE\" className=\"text-slate-900\">\n                      Belgium\n                    </option>\n                    <option value=\"Brussels\" className=\"text-slate-900\">\n                      Brussels Capital\n                    </option>\n                    <option value=\"Flanders\" className=\"text-slate-900\">\n                      Flanders\n                    </option>\n                    <option value=\"Wallonia\" className=\"text-slate-900\">\n                      Wallonia\n                    </option>\n                  </select>\n                  <div className=\"absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none\">\n                    <svg\n                      className=\"w-4 h-4 text-slate-500\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M19 9l-7 7-7-7\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n\n              {/* Price Range Slider */}\n              <div className=\"space-y-3\">\n                <label className=\"text-sm font-semibold text-slate-700 block\">Price Range</label>\n                <PriceRangeSlider\n                  min={0}\n                  max={5000000}\n                  step={100000}\n                  value={filters.priceRange}\n                  onChange={value => handleFilterChange('priceRange', value)}\n                  currency=\"€\"\n                  showValueLabels={true}\n                />\n              </div>\n            </div>\n\n            {/* Filter Actions */}\n            <div className=\"mt-8 pt-6 border-t border-slate-200\">\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-center\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {filters.sector && (\n                    <div className=\"flex items-center gap-2 bg-blue-100 text-blue-800 px-3 py-1.5 rounded-full text-sm font-medium\">\n                      <span>{filters.sector}</span>\n                      <button\n                        onClick={() => handleFilterChange('sector', '')}\n                        className=\"hover:bg-blue-200 rounded-full p-0.5 transition-colors\"\n                      >\n                        <svg\n                          className=\"w-3 h-3\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                          />\n                        </svg>\n                      </button>\n                    </div>\n                  )}\n                  {filters.country && (\n                    <div className=\"flex items-center gap-2 bg-green-100 text-green-800 px-3 py-1.5 rounded-full text-sm font-medium\">\n                      <span>{filters.country === 'BE' ? 'Belgium' : filters.country}</span>\n                      <button\n                        onClick={() => handleFilterChange('country', '')}\n                        className=\"hover:bg-green-200 rounded-full p-0.5 transition-colors\"\n                      >\n                        <svg\n                          className=\"w-3 h-3\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                          />\n                        </svg>\n                      </button>\n                    </div>\n                  )}\n                  {(filters.priceRange[0] > 0 || filters.priceRange[1] < 5000000) && (\n                    <div className=\"flex items-center gap-2 bg-purple-100 text-purple-800 px-3 py-1.5 rounded-full text-sm font-medium\">\n                      <span>\n                        {formatPrice(filters.priceRange[0])} - {formatPrice(filters.priceRange[1])}\n                      </span>\n                      <button\n                        onClick={() => handleFilterChange('priceRange', [0, 5000000])}\n                        className=\"hover:bg-purple-200 rounded-full p-0.5 transition-colors\"\n                      >\n                        <svg\n                          className=\"w-3 h-3\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M6 18L18 6M6 6l12 12\"\n                          />\n                        </svg>\n                      </button>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button\n                    variant=\"tertiary\"\n                    color=\"default\"\n                    onPress={() => {\n                      setFilters({\n                        searchQuery: '',\n                        sector: '',\n                        country: '',\n                        priceRange: [0, 5000000],\n                        revenueRange: [0, 50000000],\n                        anonymous: '',\n                        requiresNda: '',\n                        sortBy: 'published_at',\n                      });\n                    }}\n                    className=\"bg-slate-100 hover:bg-slate-200 text-slate-700 font-medium px-6\"\n                  >\n                    Clear All\n                  </Button>\n                  <Button variant=\"primary\" onPress={handleSearch} className=\"px-8\">\n                    Apply Filters\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Results Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-8 gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-neutral-900\">\n              {`${totalResults} businesses found`}\n            </h2>\n            {filters.searchQuery && (\n              <p className=\"text-neutral-600 mt-1\">Results for \"{filters.searchQuery}\"</p>\n            )}\n          </div>\n\n          {/* Save Search Button */}\n          {hasActiveFilters() && totalResults > 0 && (\n            <div className=\"flex items-center gap-3\">\n              <Button\n                variant=\"tertiary\"\n                startContent={<Bell className=\"w-4 h-4\" />}\n                onPress={() => setShowSaveSearchModal(true)}\n                className=\"border-purple-200 text-purple-700 hover:bg-purple-50\"\n              >\n                Save Search Alert\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Results */}\n        {/* Loading screens removed for smooth UX */}\n        {listings.length === 0 ? (\n          <Card className=\"border border-neutral-200\">\n            <CardBody className=\"text-center py-12\">\n              <Building2\n                className=\"w-16 h-16 text-neutral-400 mx-auto mb-4\"\n                style={{ stroke: 'currentColor', fill: 'none' }}\n              />\n              <h3 className=\"text-lg font-semibold text-neutral-900 mb-2\">\n                No businesses match your search yet\n              </h3>\n              <p className=\"text-neutral-600 mb-6 max-w-md mx-auto\">\n                Don't worry — this happens! Let's try broadening your search or removing some\n                filters. We're here to help you find the perfect opportunity.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button\n                  variant=\"primary\"\n                  onPress={() => {\n                    setFilters({\n                      searchQuery: '',\n                      sector: '',\n                      country: '',\n                      priceRange: [0, 10000000],\n                      revenueRange: [0, 50000000],\n                      anonymous: '',\n                      requiresNda: '',\n                      sortBy: 'published_at',\n                    });\n                    setSearchParams(new URLSearchParams());\n                  }}\n                >\n                  Show all businesses\n                </Button>\n                <Button\n                  variant=\"tertiary\"\n                  onPress={() => navigate('/contact')}\n                  className=\"border-calm-600 text-calm-600 hover:bg-calm-50\"\n                >\n                  Get help finding businesses\n                </Button>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8\">\n              {listings.map(listing => {\n                // Transform listing to match ListingCard interface\n                const transformedListing = {\n                  ...listing,\n                  status: 'active',\n                  highlights:\n                    listing.requires_nda || listing.anonymous || listing.years_in_business\n                      ? [\n                          ...(listing.requires_nda ? ['NDA Required'] : []),\n                          ...(listing.anonymous ? ['Confidential'] : []),\n                        ]\n                      : undefined,\n                  business_age: listing.years_in_business,\n                  revenue_range:\n                    typeof listing.revenue_range === 'string'\n                      ? { min: 0, max: 1000000 }\n                      : listing.revenue_range,\n                  ebitda_range:\n                    typeof listing.ebitda_range === 'string'\n                      ? { min: 0, max: 200000 }\n                      : listing.ebitda_range,\n                };\n\n                return (\n                  <ListingCard\n                    key={listing.id}\n                    listing={transformedListing}\n                    currentUserRole=\"buyer\"\n                    viewMode=\"card\"\n                    onSave={listingId => {\n                      // TODO: Implement save functionality\n                    }}\n                    onInquiry={async (listingId, inquiryData) => {\n                      // TODO: Implement inquiry functionality\n                    }}\n                  />\n                );\n              })}\n            </div>\n\n            {/* Pagination */}\n            {totalResults > 20 && (\n              <div className=\"flex justify-center\">\n                <Pagination\n                  total={Math.ceil(totalResults / 20)}\n                  page={currentPage}\n                  onChange={setCurrentPage}\n                  showControls\n                  color=\"primary\"\n                />\n              </div>\n            )}\n\n            {/* M&A Funnel Progress Indicator */}\n            <div className=\"mt-12 bg-neutral-50 rounded-2xl p-6 border border-neutral-200\">\n              <h3 className=\"text-lg font-semibold text-neutral-900 mb-4 text-center\">\n                Your M&A Journey\n              </h3>\n              <div className=\"flex items-center justify-between max-w-4xl mx-auto\">\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-10 h-10 bg-primary-600 rounded-full flex items-center justify-center mb-2\">\n                    <Search\n                      className=\"w-5 h-5 text-white\"\n                      style={{ stroke: 'currentColor', fill: 'none' }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium text-primary-600\">Search</span>\n                  <span className=\"text-xs text-neutral-500\">Find opportunities</span>\n                </div>\n                <div className=\"flex-1 h-0.5 bg-neutral-300 mx-4\"></div>\n                <div className=\"flex flex-col items-center opacity-50\">\n                  <div className=\"w-10 h-10 bg-neutral-300 rounded-full flex items-center justify-center mb-2\">\n                    <MessageSquare\n                      className=\"w-5 h-5 text-neutral-600\"\n                      style={{ stroke: 'currentColor', fill: 'none' }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium text-neutral-600\">Inquire</span>\n                  <span className=\"text-xs text-neutral-500\">Submit interest</span>\n                </div>\n                <div className=\"flex-1 h-0.5 bg-neutral-300 mx-4\"></div>\n                <div className=\"flex flex-col items-center opacity-50\">\n                  <div className=\"w-10 h-10 bg-neutral-300 rounded-full flex items-center justify-center mb-2\">\n                    <Shield\n                      className=\"w-5 h-5 text-neutral-600\"\n                      style={{ stroke: 'currentColor', fill: 'none' }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium text-neutral-600\">NDA</span>\n                  <span className=\"text-xs text-neutral-500\">Sign agreement</span>\n                </div>\n                <div className=\"flex-1 h-0.5 bg-neutral-300 mx-4\"></div>\n                <div className=\"flex flex-col items-center opacity-50\">\n                  <div className=\"w-10 h-10 bg-neutral-300 rounded-full flex items-center justify-center mb-2\">\n                    <Building2\n                      className=\"w-5 h-5 text-neutral-600\"\n                      style={{ stroke: 'currentColor', fill: 'none' }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium text-neutral-600\">Close</span>\n                  <span className=\"text-xs text-neutral-500\">Complete deal</span>\n                </div>\n              </div>\n              <p className=\"text-center text-sm text-neutral-600 mt-4\">\n                Click on any business to start your acquisition journey\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Save Search Modal */}\n      <SaveSearchModal\n        isOpen={showSaveSearchModal}\n        onClose={() => setShowSaveSearchModal(false)}\n        onSave={handleSaveSearch}\n        initialCriteria={getCurrentSearchCriteria()}\n        mode=\"create\"\n      />\n    </div>\n  );\n};\n\nexport default ListingSearch;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/listings/PrivateListingDetails.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPrivateListingDetails'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadPrivateListingDetails]","fix":{"range":[2459,2463],"text":"[id, loadPrivateListingDetails]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":785,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":785,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34866,34869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34866,34869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import { useAuth } from '@/app/providers/auth-provider';\nimport { Button } from '@/shared/components/buttons';\nimport { ImageGalleryModal } from '@/shared/components/modals/images';\nimport InquiryModal from '@/shared/components/modals/InquiryModal';\nimport { Card, CardBody, CardHeader, Divider } from '@heroui/react';\nimport {\n  ArrowLeft,\n  BarChart3,\n  Building2,\n  CheckCircle,\n  DollarSign,\n  Download,\n  Eye,\n  FileSpreadsheet,\n  FileText,\n  MapPin,\n  MessageSquare,\n  Shield,\n  TrendingUp,\n  Users,\n} from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\ninterface PrivateListingData {\n  id: string;\n  title: string;\n  summary: string;\n  description: string;\n  sector: string;\n  region: string;\n  country: string;\n  asking_price: number;\n  currency: string;\n  views: number;\n  inquiries: number;\n  years_in_business: number;\n  employees: number;\n  customers: number;\n  growth_rate: number;\n  highlights: string[];\n  financials: {\n    revenue_2023: number;\n    revenue_2022: number;\n    revenue_2021: number;\n    ebitda_2023: number;\n    ebitda_2022: number;\n    ebitda_2021: number;\n    ebitda_margin_2023: number;\n    net_profit_2023: number;\n    net_profit_growth: number;\n    gross_profit_margin: number;\n    operating_expenses: number;\n    assets_value: number;\n    liabilities: number;\n  };\n  business_details: {\n    legal_structure: string;\n    location_description: string;\n    key_assets: string[];\n    growth_opportunities: string[];\n  };\n  seller_info: {\n    reason_for_sale: string;\n    timeline: string;\n    involvement_post_sale: string;\n    contact_email: string;\n    contact_phone: string;\n  };\n  documents: Array<{\n    name: string;\n    size: string;\n    format: string;\n    url: string;\n  }>;\n  images: Array<{\n    id: string;\n    storage_url: string;\n    thumbnail_url: string;\n    is_primary: boolean;\n    alt_text: string;\n  }>;\n}\n\nconst PrivateListingDetails = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  // useAuth(); // Unused for now\n  const [listing, setListing] = useState<PrivateListingData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isImageGalleryOpen, setIsImageGalleryOpen] = useState(false);\n  const [, setInitialImageIndex] = useState(0);\n  const [isInquiryModalOpen, setIsInquiryModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadPrivateListingDetails();\n  }, [id]);\n\n  const loadPrivateListingDetails = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      // TODO: Replace with actual API call\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      setListing({\n        id: id || '2',\n        title: 'Premium Restaurant Chain - Brussels',\n        summary:\n          'Established premium restaurant chain with 3 locations in prime Brussels areas. Strong brand recognition, experienced management team, and modern facilities. Excellent growth potential with established customer base and supplier relationships.',\n        description: `This premium restaurant chain represents an exceptional opportunity in the heart of Brussels' culinary scene. With three strategically located restaurants, the business has built a strong reputation for quality cuisine and exceptional service.\n\nThe flagship location in the historic center attracts both locals and tourists, while the two additional locations serve high-traffic commercial districts. Each restaurant features modern kitchen equipment, elegant dining spaces, and outdoor seating areas.\n\nThe business benefits from established relationships with premium suppliers, experienced kitchen and service staff, and a loyal customer base. The management team has successfully navigated market challenges and maintained profitability through innovative menu development and operational efficiency.\n\nRecent investments in technology, including a modern POS system and online ordering platform, have positioned the business for continued growth. The brand has strong social media presence and positive online reviews, contributing to consistent customer acquisition.\n\nThis opportunity is ideal for an experienced restaurateur or investor looking to enter the premium dining market with an established, profitable operation.`,\n        sector: 'Food & Beverage',\n        region: 'Brussels',\n        country: 'Belgium',\n        asking_price: 2500000,\n        currency: 'EUR',\n        views: 1247,\n        inquiries: 23,\n        years_in_business: 8,\n        employees: 45,\n        customers: 12000,\n        growth_rate: 15,\n        highlights: [\n          'Prime Brussels locations with high foot traffic',\n          'Established brand reputation and customer loyalty',\n          'Experienced management team with proven track record',\n          'Modern equipment and facilities recently upgraded',\n          'Strong supplier relationships and favorable terms',\n          'Multiple revenue streams including catering and events',\n          'Positive online reviews and social media presence',\n          'Scalable business model with expansion potential',\n        ],\n        financials: {\n          revenue_2023: 4200000,\n          revenue_2022: 3800000,\n          revenue_2021: 3200000,\n          ebitda_2023: 756000,\n          ebitda_2022: 684000,\n          ebitda_2021: 576000,\n          ebitda_margin_2023: 18,\n          net_profit_2023: 420000,\n          net_profit_growth: 12,\n          gross_profit_margin: 65,\n          operating_expenses: 2800000,\n          assets_value: 1800000,\n          liabilities: 450000,\n        },\n        business_details: {\n          legal_structure: 'Private Limited Company (BVBA)',\n          location_description:\n            'Three prime locations in Brussels: historic center (flagship), commercial district, and business quarter. All locations feature modern facilities, outdoor seating, and excellent accessibility.',\n          key_assets: [\n            'Three restaurant locations with long-term leases',\n            'Modern kitchen equipment and POS systems',\n            'Established brand trademarks and recipes',\n            'Customer database and loyalty program',\n            'Supplier contracts and relationships',\n            'Trained staff and management team',\n            'Online ordering and delivery platform',\n            'Event catering equipment and capabilities',\n          ],\n          growth_opportunities: [\n            'Expansion to additional Brussels locations',\n            'Franchise development opportunities',\n            'Catering and event services expansion',\n            'Online delivery and ghost kitchen concepts',\n            'Premium product line development',\n            'Corporate partnerships and contracts',\n            'Seasonal menu and special event offerings',\n            'International market entry potential',\n          ],\n        },\n        seller_info: {\n          reason_for_sale: 'Owner retirement and desire to focus on other ventures',\n          timeline: 'Flexible timeline, prefer completion within 3-6 months',\n          involvement_post_sale:\n            '3-month transition period available with full training and support',\n          contact_email: 'jp.dubois@duboisrestaurants.be',\n          contact_phone: '+32 2 123 4567',\n        },\n        documents: [\n          {\n            name: 'Financial Statements 2021-2023',\n            size: '2.4 MB',\n            format: 'PDF',\n            url: '#',\n          },\n          {\n            name: 'Tax Returns and Audits',\n            size: '1.8 MB',\n            format: 'PDF',\n            url: '#',\n          },\n          {\n            name: 'Lease Agreements',\n            size: '3.2 MB',\n            format: 'PDF',\n            url: '#',\n          },\n          {\n            name: 'Equipment Inventory',\n            size: '1.1 MB',\n            format: 'Excel',\n            url: '#',\n          },\n          {\n            name: 'Staff Contracts and HR',\n            size: '2.7 MB',\n            format: 'PDF',\n            url: '#',\n          },\n        ],\n        images: [\n          {\n            id: '1',\n            storage_url:\n              'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=600&fit=crop',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',\n            is_primary: true,\n            alt_text: 'Main restaurant interior',\n          },\n          {\n            id: '2',\n            storage_url:\n              'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=800&h=600&fit=crop',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop',\n            is_primary: false,\n            alt_text: 'Restaurant exterior',\n          },\n          {\n            id: '3',\n            storage_url:\n              'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800&h=600&fit=crop',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=400&h=300&fit=crop',\n            is_primary: false,\n            alt_text: 'Kitchen facilities',\n          },\n          {\n            id: '4',\n            storage_url:\n              'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400&h=300&fit=crop',\n            is_primary: false,\n            alt_text: 'Outdoor seating area',\n          },\n          {\n            id: '5',\n            storage_url:\n              'https://images.unsplash.com/photo-1551218808-94e220e084d2?w=800&h=600&fit=crop',\n            thumbnail_url:\n              'https://images.unsplash.com/photo-1551218808-94e220e084d2?w=400&h=300&fit=crop',\n            is_primary: false,\n            alt_text: 'Bar area',\n          },\n        ],\n      });\n    } catch {\n      // Error loading private listing details\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id]);\n\n  const formatPrice = (price?: number, currency = 'EUR') => {\n    if (!price) return 'Price on request';\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const formatNumber = (num: number) => {\n    return new Intl.NumberFormat('en-EU').format(num);\n  };\n\n  const formatPercentage = (num: number) => {\n    return `${num}%`;\n  };\n\n  const handleImageClick = (imageIndex: number) => {\n    setInitialImageIndex(imageIndex);\n    setIsImageGalleryOpen(true);\n  };\n\n  const handleContactSeller = () => {\n    setIsInquiryModalOpen(true);\n  };\n\n  // Show loading state while fetching data\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"max-w-4xl mx-auto p-6 text-center pt-20\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading private listing details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show not found only after loading is complete and no listing found\n  if (!listing) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"max-w-4xl mx-auto p-6 text-center pt-20\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-4\">Private listing not found</h2>\n          <p className=\"text-gray-600 mb-6\">\n            The private listing you're looking for doesn't exist or you don't have access to it.\n          </p>\n          <Button variant=\"primary\" onPress={() => navigate('/search')}>\n            Back to Search\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const primaryImage = listing.images?.find(img => img.is_primary) || listing.images?.[0];\n  const additionalImages = listing.images?.filter(img => img.id !== primaryImage?.id) || [];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"tertiary\"\n            startContent={\n              <ArrowLeft className=\"w-4 h-4\" style={{ stroke: 'currentColor', fill: 'none' }} />\n            }\n            onPress={() => navigate(-1)}\n            className=\"mb-6 text-neutral-600 hover:text-neutral-900\"\n          >\n            Back to Search\n          </Button>\n\n          <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <h1 className=\"text-4xl md:text-5xl font-bold text-neutral-900\">{listing.title}</h1>\n                <div className=\"inline-flex items-center gap-1.5 bg-green-100 px-3 py-1.5 rounded-full text-green-700 text-sm font-medium\">\n                  <Shield className=\"w-3 h-3\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span>Private Access</span>\n                </div>\n              </div>\n              <div className=\"flex flex-wrap items-center gap-4 text-neutral-600 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-5 h-5\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span className=\"font-medium\">{listing.sector}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span>\n                    {listing.region}, {listing.country}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Eye className=\"w-5 h-5\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                  <span>{listing.views} views</span>\n                </div>\n              </div>\n\n              {/* Private Access Timeline */}\n              <div className=\"bg-green-50 rounded-xl p-4 border border-green-200\">\n                <div className=\"flex items-center justify-between max-w-2xl\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center mb-1\">\n                      <CheckCircle\n                        className=\"w-4 h-4 text-white\"\n                        style={{ stroke: '#ffffff', fill: 'none', strokeWidth: '2.5' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-primary-600\">Found</span>\n                  </div>\n                  <div className=\"flex-1 h-0.5 bg-primary-300 mx-2\"></div>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center mb-1\">\n                      <Shield\n                        className=\"w-4 h-4 text-white\"\n                        style={{ stroke: '#ffffff', fill: 'none', strokeWidth: '2.5' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-green-600\">NDA Signed</span>\n                  </div>\n                  <div className=\"flex-1 h-0.5 bg-green-300 mx-2\"></div>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center mb-1\">\n                      <MessageSquare\n                        className=\"w-4 h-4 text-white\"\n                        style={{ stroke: '#ffffff', fill: 'none', strokeWidth: '2.5' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-primary-600\">Contact Seller</span>\n                  </div>\n                  <div className=\"flex-1 h-0.5 bg-neutral-300 mx-2\"></div>\n                  <div className=\"flex flex-col items-center opacity-50\">\n                    <div className=\"w-8 h-8 bg-neutral-300 rounded-full flex items-center justify-center mb-1\">\n                      <Building2\n                        className=\"w-4 h-4 text-neutral-600\"\n                        style={{ stroke: 'currentColor', fill: 'none', strokeWidth: '2' }}\n                      />\n                    </div>\n                    <span className=\"text-xs font-medium text-neutral-600\">Close</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Airbnb-Style Image Gallery Section */}\n        {(primaryImage || additionalImages.length > 0) && (\n          <div className=\"mb-8\">\n            <div className=\"grid grid-cols-4 gap-2 h-[400px] md:h-[480px] rounded-xl overflow-hidden\">\n              {/* Large primary image - takes up 2 columns */}\n              {primaryImage && (\n                <div\n                  className=\"col-span-4 md:col-span-2 relative cursor-pointer group\"\n                  onClick={() => handleImageClick(0)}\n                >\n                  <img\n                    src={primaryImage.storage_url}\n                    alt={primaryImage.alt_text || `${listing.title} main image`}\n                    className=\"w-full h-full object-cover transition-all duration-300 group-hover:brightness-90\"\n                    loading=\"lazy\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-all duration-300\" />\n                </div>\n              )}\n\n              {/* Right side grid - smaller images */}\n              <div className=\"col-span-4 md:col-span-2 grid grid-cols-2 gap-2\">\n                {additionalImages.slice(0, 4).map((image, index) => (\n                  <div\n                    key={image.id}\n                    className=\"relative cursor-pointer group overflow-hidden\"\n                    onClick={() => handleImageClick(index + 1)}\n                  >\n                    <img\n                      src={image.thumbnail_url || image.storage_url}\n                      alt={image.alt_text || `${listing.title} photo ${index + 1}`}\n                      className=\"w-full h-full object-cover transition-all duration-300 group-hover:brightness-90\"\n                      loading=\"lazy\"\n                    />\n                    <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-all duration-300\" />\n\n                    {/* Show all photos overlay on last image if there are more */}\n                    {index === 3 && additionalImages.length > 4 && (\n                      <div\n                        className=\"absolute inset-0 bg-black/50 flex items-center justify-center transition-all duration-300 group-hover:bg-black/60\"\n                        onClick={e => {\n                          e.stopPropagation();\n                          handleImageClick(0);\n                        }}\n                      >\n                        <div className=\"text-center text-white\">\n                          <svg\n                            className=\"w-8 h-8 mx-auto mb-2\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"\n                            />\n                          </svg>\n                          <div className=\"text-sm font-semibold\">\n                            +{additionalImages.length - 3} photos\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n\n                {/* Fill empty slots if we have fewer than 4 additional images */}\n                {additionalImages.length < 4 &&\n                  Array.from({ length: 4 - additionalImages.length }).map((_, index) => (\n                    <div\n                      key={`empty-${index}`}\n                      className=\"bg-gray-100 flex items-center justify-center\"\n                    >\n                      <div className=\"text-gray-400\">\n                        <svg\n                          className=\"w-12 h-12\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                          />\n                        </svg>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n\n            {/* Show all photos button - mobile/tablet view */}\n            <div className=\"mt-4 md:hidden flex justify-center\">\n              <button\n                onClick={() => handleImageClick(0)}\n                className=\"flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6z\"\n                  />\n                </svg>\n                <span className=\"text-sm font-medium\">Show all photos</span>\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Mobile Price & Contact - Shown first on mobile */}\n          <div className=\"lg:hidden order-1\">\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Asking Price</h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"text-center mb-4\">\n                  <p className=\"text-3xl font-bold text-primary-600\">\n                    {formatPrice(listing.asking_price, listing.currency)}\n                  </p>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {listing.sector} • {listing.region}, {listing.country}\n                  </p>\n                </div>\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onPress={handleContactSeller}\n                  className=\"w-full\"\n                  startContent={\n                    <MessageSquare\n                      className=\"w-5 h-5\"\n                      style={{ stroke: 'currentColor', fill: 'none' }}\n                    />\n                  }\n                >\n                  Contact Seller Directly\n                </Button>\n              </CardBody>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6 order-2\">\n            {/* Business Overview */}\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Business Overview</h2>\n              </CardHeader>\n              <CardBody>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-primary-600\">\n                      {listing.years_in_business}\n                    </p>\n                    <p className=\"text-sm text-neutral-600\">Years in Business</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-success-600\">{listing.employees}</p>\n                    <p className=\"text-sm text-neutral-600\">Employees</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-warning-600\">\n                      {formatNumber(listing.customers)}\n                    </p>\n                    <p className=\"text-sm text-neutral-600\">Customer Base</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-primary-700\">\n                      {formatPercentage(listing.growth_rate)}\n                    </p>\n                    <p className=\"text-sm text-neutral-600\">Annual Growth</p>\n                  </div>\n                </div>\n\n                <Divider className=\"my-4\" />\n\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Key Highlights</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {listing.highlights.map((highlight: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm\">{highlight}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Business Description */}\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold\">Business Description</h2>\n              </CardHeader>\n              <CardBody>\n                <div className=\"prose prose-gray max-w-none\">\n                  {listing.description.split('\\n\\n').map((paragraph: string, index: number) => (\n                    <p key={index} className=\"mb-4 text-gray-700 leading-relaxed\">\n                      {paragraph}\n                    </p>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Detailed Financial Performance */}\n            <Card className=\"bg-gradient-to-br from-blue-50 via-white to-indigo-50 border border-blue-200 rounded-3xl shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between w-full\">\n                  <h2 className=\"text-2xl font-bold text-slate-900 flex items-center gap-2\">\n                    <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n                    Detailed Financial Performance\n                  </h2>\n                  <div className=\"inline-flex items-center gap-1.5 bg-green-100 px-3 py-1.5 rounded-full text-green-700 text-sm font-medium\">\n                    <Shield className=\"w-3 h-3\" style={{ stroke: 'currentColor', fill: 'none' }} />\n                    <span>Private Data</span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6\">\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">Revenue 2023</p>\n                      <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.revenue_2023, listing.currency)}\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      vs. {formatPrice(listing.financials.revenue_2022, listing.currency)} in 2022\n                    </p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">EBITDA 2023</p>\n                      <DollarSign className=\"w-5 h-5 text-primary-500\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.ebitda_2023, listing.currency)}\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      Margin: {formatPercentage(listing.financials.ebitda_margin_2023)}\n                    </p>\n                  </div>\n                  <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <p className=\"text-sm font-medium text-slate-600\">Net Profit 2023</p>\n                      <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                    </div>\n                    <p className=\"text-2xl font-bold text-slate-900\">\n                      {formatPrice(listing.financials.net_profit_2023, listing.currency)}\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      Growth: {formatPercentage(listing.financials.net_profit_growth)}\n                    </p>\n                  </div>\n                </div>\n\n                <h3 className=\"font-semibold mb-3\">Detailed Financials</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center border-b border-gray-200 pb-2\">\n                    <span className=\"text-gray-700\">Revenue (Last 3 Years)</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {formatPrice(listing.financials.revenue_2023, listing.currency)} (2023),{' '}\n                      {formatPrice(listing.financials.revenue_2022, listing.currency)} (2022),{' '}\n                      {formatPrice(listing.financials.revenue_2021, listing.currency)} (2021)\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center border-b border-gray-200 pb-2\">\n                    <span className=\"text-gray-700\">Gross Profit Margin</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {formatPercentage(listing.financials.gross_profit_margin)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center border-b border-gray-200 pb-2\">\n                    <span className=\"text-gray-700\">Operating Expenses</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {formatPrice(listing.financials.operating_expenses, listing.currency)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center border-b border-gray-200 pb-2\">\n                    <span className=\"text-gray-700\">Assets Value</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {formatPrice(listing.financials.assets_value, listing.currency)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-700\">Liabilities</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {formatPrice(listing.financials.liabilities, listing.currency)}\n                    </span>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Business Details */}\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-primary-600\" />\n                  Business Details\n                </h2>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Industry & Sector</h3>\n                    <p className=\"text-gray-700\">{listing.sector}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Legal Structure</h3>\n                    <p className=\"text-gray-700\">{listing.business_details.legal_structure}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Location & Facilities</h3>\n                    <p className=\"text-gray-700\">{listing.business_details.location_description}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Key Assets</h3>\n                    <ul className=\"list-disc list-inside text-gray-700 space-y-1\">\n                      {listing.business_details.key_assets.map((asset: string, index: number) => (\n                        <li key={index}>{asset}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">Growth Opportunities</h3>\n                    <ul className=\"list-disc list-inside text-gray-700 space-y-1\">\n                      {listing.business_details.growth_opportunities.map(\n                        (opportunity: string, index: number) => (\n                          <li key={index}>{opportunity}</li>\n                        )\n                      )}\n                    </ul>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Documents */}\n            <Card>\n              <CardHeader>\n                <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n                  <FileText className=\"w-5 h-5 text-primary-600\" />\n                  Private Documents\n                </h2>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  {listing.documents.map((doc: any, index: number) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <FileSpreadsheet className=\"w-5 h-5 text-blue-600\" />\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{doc.name}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {doc.size} • {doc.format}\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        startContent={<Download className=\"w-4 h-4\" />}\n                        onPress={() => window.open(doc.url, '_blank')}\n                      >\n                        Download\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6 order-3\">\n            {/* Price & Contact - Desktop Only */}\n            <Card className=\"hidden lg:block\">\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Asking Price</h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"text-center mb-4\">\n                  <p className=\"text-3xl font-bold text-primary-600\">\n                    {formatPrice(listing.asking_price, listing.currency)}\n                  </p>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {listing.sector} • {listing.region}, {listing.country}\n                  </p>\n                </div>\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onPress={handleContactSeller}\n                  className=\"w-full\"\n                  startContent={\n                    <MessageSquare\n                      className=\"w-5 h-5\"\n                      style={{ stroke: 'currentColor', fill: 'none' }}\n                    />\n                  }\n                >\n                  Contact Seller Directly\n                </Button>\n              </CardBody>\n            </Card>\n\n            {/* Seller Information */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Seller Information</h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Reason for Sale</p>\n                    <p className=\"font-medium\">{listing.seller_info.reason_for_sale}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Preferred Timeline</p>\n                    <p className=\"font-medium\">{listing.seller_info.timeline}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Post-Sale Involvement</p>\n                    <p className=\"font-medium\">{listing.seller_info.involvement_post_sale}</p>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Image Gallery Modal */}\n      <ImageGalleryModal\n        isOpen={isImageGalleryOpen}\n        onClose={() => setIsImageGalleryOpen(false)}\n        images={listing.images || []}\n      />\n\n      {/* Inquiry Modal */}\n      <InquiryModal\n        isOpen={isInquiryModalOpen}\n        onClose={() => setIsInquiryModalOpen(false)}\n        listing={{\n          id: id || '',\n          title: listing?.title || 'Business Listing',\n          sector: listing?.sector || 'Business',\n          asking_price: listing?.asking_price,\n          currency: listing?.currency || 'EUR',\n          requires_nda: true,\n        }}\n        onSubmit={() => {\n          // Inquiry submitted\n          // TODO: Implement actual inquiry submission\n          setIsInquiryModalOpen(false);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PrivateListingDetails;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/listings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/messages/Messages.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/messages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/offer-management/OfferManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/offer-management/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/support/FAQ.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/support/NewContact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/support/contact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/support/help.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'faqCategories' array makes the dependencies of useMemo Hook (at line 403) change on every render. To fix this, wrap the initialization of 'faqCategories' in its own useMemo() Hook.","line":63,"column":9,"nodeType":"VariableDeclarator","endLine":348,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UpSwitch Help Center\n * Clean, modular implementation with new FAQ system\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { FAQCategory } from '@/shared/components/FAQ/FAQCategory';\nimport SearchComponent from '@/shared/components/search/SearchComponent';\nimport { SEOHead } from '@/shared/components/seo/SEOHead';\nimport { Card, CardBody } from '@heroui/react';\nimport {\n  BookOpen,\n  Building2,\n  Clock,\n  DollarSign,\n  FileText,\n  HelpCircle,\n  Mail,\n  MessageCircle,\n  Phone,\n  Settings,\n  Shield,\n  Star,\n  TrendingUp,\n  Users,\n  Zap,\n} from 'lucide-react';\nimport React, { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Custom FAQ type for this page\ninterface FAQCategoryType {\n  id: string;\n  category: string;\n  description: string;\n  icon: React.ReactNode;\n  color?: string;\n  questions: Array<{\n    question: string;\n    answer: string;\n    tags?: string[];\n    isPopular?: boolean;\n    isNew?: boolean;\n  }>;\n}\n\ninterface SupportOption {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  action: string;\n  availability?: string;\n  responseTime?: string;\n  color: string;\n}\n\nconst Help: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  // FAQ Categories Data\n  const faqCategories: FAQCategoryType[] = [\n    {\n      id: 'getting-started',\n      category: 'Getting Started',\n      description: 'Essential information to help you begin your journey on Upswitch',\n      icon: <Star className=\"w-6 h-6\" />,\n      color: 'blue',\n      questions: [\n        {\n          question: 'What is Upswitch and how does it work?',\n          answer:\n            \"Upswitch is Belgium's premier digital marketplace for buying and selling established businesses. We connect entrepreneurs, business owners, and investors through our secure, AI-powered platform. Our comprehensive system handles listing creation, buyer-seller matching, due diligence support, secure communications, and transaction facilitation - making business acquisitions faster, safer, and more efficient.\",\n          tags: ['platform', 'overview', 'marketplace'],\n          isPopular: true,\n        },\n        {\n          question: 'How do I create an account on Upswitch?',\n          answer:\n            'Creating an account is simple: Click \"Sign Up\" on our homepage, provide your email and basic information, verify your email address, and complete your profile. For sellers, we require additional business verification to ensure marketplace quality.',\n          tags: ['registration', 'account', 'signup'],\n          isNew: true,\n        },\n        {\n          question: 'Is Upswitch free to use?',\n          answer:\n            'Upswitch offers a freemium model. Basic browsing and initial contact with sellers is free for buyers. For sellers, listing your business is free, but we charge a success fee only when your business sells. Premium features like enhanced visibility and advanced analytics require a subscription.',\n          tags: ['pricing', 'free', 'subscription'],\n        },\n        {\n          question: 'What types of businesses can I find on Upswitch?',\n          answer:\n            'Our platform features a diverse range of established businesses including restaurants, retail stores, tech companies, service businesses, manufacturing operations, and more. All listings are verified and represent legitimate business opportunities in Belgium and beyond.',\n          tags: ['business-types', 'listings', 'variety'],\n        },\n      ],\n    },\n    {\n      id: 'buying-business',\n      category: 'Buying a Business',\n      description: 'Everything you need to know about finding and purchasing your ideal business',\n      icon: <Building2 className=\"w-6 h-6\" />,\n      color: 'green',\n      questions: [\n        {\n          question: 'How do I search for businesses to buy?',\n          answer:\n            'Use our advanced search filters to find businesses by industry, location, price range, revenue, and more. You can save searches, set up alerts for new listings, and use our AI-powered recommendation engine to discover opportunities that match your criteria.',\n          tags: ['search', 'filters', 'discovery'],\n        },\n        {\n          question: 'What information do business listings include?',\n          answer:\n            'Our listings provide comprehensive business information including financial summaries, operational details, market position, growth potential, asset information, and verified performance metrics. Premium listings include detailed financial statements and due diligence reports.',\n          tags: ['listings', 'information', 'details'],\n        },\n        {\n          question: 'How do I contact a business seller?',\n          answer:\n            'After viewing a listing, click \"Contact Seller\" to send a message through our secure platform. You\\'ll need to sign an NDA for detailed financial information. All communications are tracked and secure, ensuring privacy for both parties.',\n          tags: ['contact', 'sellers', 'communication'],\n          isPopular: true,\n        },\n        {\n          question: 'What is the due diligence process?',\n          answer:\n            'Our platform provides a structured due diligence framework including financial verification, legal document review, operational assessment, and market analysis. We connect you with verified professionals including accountants, lawyers, and business advisors to ensure thorough evaluation.',\n          tags: ['due-diligence', 'verification', 'analysis'],\n        },\n        {\n          question: 'How does financing work for business purchases?',\n          answer:\n            'UpSwitch partners with banks and alternative lenders to offer various financing options including SBA loans, asset-based financing, and seller financing. Our financing partners are pre-qualified and understand business acquisitions.',\n          tags: ['financing', 'loans', 'funding'],\n        },\n      ],\n    },\n    {\n      id: 'selling-business',\n      category: 'Selling a Business',\n      description: 'Guide to successfully listing and selling your business on our platform',\n      icon: <TrendingUp className=\"w-6 h-6\" />,\n      color: 'purple',\n      questions: [\n        {\n          question: 'How do I list my business for sale?',\n          answer:\n            'Start with our seller onboarding process: complete business verification, provide financial documents, describe your operations, set your asking price, and publish your listing. Our team reviews all listings to ensure quality and accuracy.',\n          tags: ['listing', 'selling', 'onboarding'],\n          isPopular: true,\n        },\n        {\n          question: 'What documents do I need to sell my business?',\n          answer:\n            'Essential documents include 3 years of financial statements, tax returns, legal structure documents, key contracts, asset lists, and operational procedures. Our platform provides a comprehensive checklist to ensure you have everything needed.',\n          tags: ['documents', 'requirements', 'paperwork'],\n        },\n        {\n          question: 'How do you determine the value of my business?',\n          answer:\n            'We provide a free AI-powered business valuation using multiple methodologies including revenue multiples, asset valuation, and market comparisons. Professional appraisers are available for detailed valuations.',\n          tags: ['valuation', 'pricing', 'assessment'],\n        },\n        {\n          question: 'How long does it take to sell a business?',\n          answer:\n            'Average time to sale varies by industry and price range, typically 3-12 months. Factors affecting timeline include business performance, asking price, market conditions, and seller flexibility. Well-prepared listings with complete documentation sell faster.',\n          tags: ['timeline', 'process', 'duration'],\n        },\n        {\n          question: 'What are your fees for selling?',\n          answer:\n            'UpSwitch charges a success fee only when your business sells, typically 3-8% depending on transaction size. No upfront fees, no monthly charges. Additional services like professional valuation or marketing upgrades have separate fees.',\n          tags: ['fees', 'commission', 'pricing'],\n          isNew: true,\n        },\n      ],\n    },\n    {\n      id: 'platform-features',\n      category: 'Platform Features',\n      description: 'Discover all the tools and features available on UpSwitch',\n      icon: <Zap className=\"w-6 h-6\" />,\n      color: 'orange',\n      questions: [\n        {\n          question: 'What is the AI-powered matching system?',\n          answer:\n            'Our AI analyzes buyer preferences, business characteristics, and market data to recommend the best matches. It considers factors like industry experience, investment capacity, location preferences, and business goals to connect the right buyers with the right sellers.',\n          tags: ['ai', 'matching', 'technology'],\n        },\n        {\n          question: 'How does the secure messaging system work?',\n          answer:\n            'All communications happen through our encrypted messaging platform. Messages are logged, searchable, and can include document sharing with automatic NDA protection. Integration with video calls and meeting scheduling makes negotiations efficient.',\n          tags: ['messaging', 'security', 'communication'],\n        },\n        {\n          question: 'What analytics are available to sellers?',\n          answer:\n            'Sellers get detailed analytics including listing views, buyer inquiries, market interest trends, comparative market analysis, and optimization suggestions. Premium accounts access advanced metrics and industry benchmarking.',\n          tags: ['analytics', 'insights', 'metrics'],\n        },\n        {\n          question: 'Can I get professional support during the process?',\n          answer:\n            'Yes, we offer access to verified professionals including business brokers, attorneys, accountants, and advisors. Our concierge service can manage the entire transaction process for complex deals.',\n          tags: ['support', 'professionals', 'assistance'],\n        },\n      ],\n    },\n    {\n      id: 'account-security',\n      category: 'Account & Security',\n      description: 'Manage your account settings, security, and privacy preferences',\n      icon: <Shield className=\"w-6 h-6\" />,\n      color: 'indigo',\n      questions: [\n        {\n          question: 'How do I update my account information?',\n          answer:\n            'Go to Settings > Profile to update personal information, business details, and preferences. Changes to sensitive information like banking details require additional verification for security.',\n          tags: ['account', 'profile', 'updates'],\n        },\n        {\n          question: 'What security measures protect my data?',\n          answer:\n            'We use enterprise-grade security including 256-bit SSL encryption, two-factor authentication, regular security audits, and GDPR compliance. All financial data is encrypted and stored separately from profile information.',\n          tags: ['security', 'encryption', 'protection'],\n          isPopular: true,\n        },\n        {\n          question: 'How do I enable two-factor authentication?',\n          answer:\n            'In Settings > Security, click \"Enable 2FA\" and follow the setup process using your preferred authentication method (SMS, authenticator app, or email). 2FA is required for all financial transactions.',\n          tags: ['2fa', 'authentication', 'security'],\n        },\n        {\n          question: 'Can I delete my account?',\n          answer:\n            'Yes, you can request account deletion in Settings > Account. Active listings must be closed first, and we retain certain transaction records as required by law. The deletion process takes 7-14 days.',\n          tags: ['deletion', 'account', 'privacy'],\n        },\n      ],\n    },\n    {\n      id: 'payments-transactions',\n      category: 'Payments & Transactions',\n      description: 'Understanding payment processing, escrow services, and transaction management',\n      icon: <DollarSign className=\"w-6 h-6\" />,\n      color: 'pink',\n      questions: [\n        {\n          question: 'How does the escrow service work?',\n          answer:\n            'Our secure escrow service holds buyer funds during due diligence and closing. Funds are released to sellers only after all conditions are met and both parties agree. This protects both buyers and sellers throughout the transaction.',\n          tags: ['escrow', 'payments', 'security'],\n        },\n        {\n          question: 'What payment methods do you accept?',\n          answer:\n            'We accept bank transfers, certified checks, and wire transfers for business purchases. Cryptocurrency payments are available for qualified transactions. All payments are processed through regulated financial institutions.',\n          tags: ['payments', 'methods', 'transactions'],\n        },\n        {\n          question: 'How are transaction fees calculated?',\n          answer:\n            'Transaction fees vary by deal size and complexity. Typical fees range from 1-3% for buyers and 3-8% for sellers. Detailed fee schedules are provided before any transaction begins. No hidden fees guaranteed.',\n          tags: ['fees', 'transactions', 'costs'],\n          isNew: true,\n        },\n        {\n          question: 'What happens if a deal falls through?',\n          answer:\n            'If a transaction is cancelled during due diligence, escrowed funds are returned to buyers minus any applicable fees. Our platform tracks all conditions and automatically manages refunds according to the purchase agreement.',\n          tags: ['cancellation', 'refunds', 'protection'],\n        },\n      ],\n    },\n    {\n      id: 'legal-compliance',\n      category: 'Legal & Compliance',\n      description: 'Legal requirements, compliance issues, and regulatory information',\n      icon: <FileText className=\"w-6 h-6\" />,\n      color: 'yellow',\n      questions: [\n        {\n          question: 'What legal documents are required for business sales?',\n          answer:\n            'Required documents include asset purchase agreements, disclosure statements, employment contracts, intellectual property assignments, and regulatory compliance certificates. Our legal partners provide standardized templates.',\n          tags: ['legal', 'documents', 'requirements'],\n        },\n        {\n          question: 'Do you provide legal advice?',\n          answer:\n            'UpSwitch does not provide legal advice. However, we partner with qualified business attorneys who specialize in M&A transactions. All users are encouraged to consult independent legal counsel.',\n          tags: ['legal', 'advice', 'attorneys'],\n        },\n        {\n          question: 'How do you ensure compliance with regulations?',\n          answer:\n            'We maintain compliance with Belgian commercial law, EU data protection regulations, and financial services requirements. All listings are verified for regulatory compliance and legitimate business operations.',\n          tags: ['compliance', 'regulations', 'verification'],\n        },\n        {\n          question: 'What are the tax implications of business sales?',\n          answer:\n            'Tax implications vary by business structure, sale terms, and jurisdiction. We recommend consulting qualified tax advisors. Our platform can connect you with experienced tax professionals who specialize in business transactions.',\n          tags: ['taxes', 'implications', 'advice'],\n        },\n      ],\n    },\n    {\n      id: 'troubleshooting',\n      category: 'Troubleshooting',\n      description: 'Common issues and technical support for platform usage',\n      icon: <Settings className=\"w-6 h-6\" />,\n      color: 'red',\n      questions: [\n        {\n          question: \"I'm having trouble uploading documents. What should I do?\",\n          answer:\n            'Ensure your files are in supported formats (PDF, DOC, JPG, PNG) and under 10MB each. Clear your browser cache, try a different browser, or use our mobile app. Contact support if issues persist.',\n          tags: ['upload', 'documents', 'technical'],\n        },\n        {\n          question: \"Why isn't my listing appearing in search results?\",\n          answer:\n            \"New listings take 24-48 hours to appear in search. Ensure your listing is complete, approved, and active. Incomplete listings or those under review won't appear in public searches.\",\n          tags: ['listings', 'search', 'visibility'],\n        },\n        {\n          question: 'How do I reset my password?',\n          answer:\n            'Click \"Forgot Password\" on the login page, enter your email, and check for a reset link. If you don\\'t receive the email within 10 minutes, check your spam folder or contact support.',\n          tags: ['password', 'reset', 'login'],\n        },\n        {\n          question: 'The platform seems slow. Is there an issue?',\n          answer:\n            'Check our status page for known issues. Clear your browser cache, disable browser extensions, and ensure you have a stable internet connection. Our platform is optimized for Chrome, Firefox, and Safari.',\n          tags: ['performance', 'speed', 'technical'],\n          isNew: true,\n        },\n      ],\n    },\n  ];\n\n  // Support options\n  const supportOptions: SupportOption[] = [\n    {\n      id: 'live-chat',\n      title: 'Live Chat',\n      description: 'Get instant help from our support team',\n      icon: <MessageCircle className=\"w-6 h-6\" />,\n      action: 'Start Chat',\n      availability: 'Mon-Fri 9AM-6PM CET',\n      responseTime: 'Usually responds within minutes',\n      color: 'blue',\n    },\n    {\n      id: 'email-support',\n      title: 'Email Support',\n      description: 'Send us a detailed message about your issue',\n      icon: <Mail className=\"w-6 h-6\" />,\n      action: 'Send Email',\n      availability: '24/7',\n      responseTime: 'Response within 4-6 hours',\n      color: 'green',\n    },\n    {\n      id: 'phone-support',\n      title: 'Phone Support',\n      description: 'Speak directly with our business experts',\n      icon: <Phone className=\"w-6 h-6\" />,\n      action: 'Schedule Call',\n      availability: 'Mon-Fri 9AM-5PM CET',\n      responseTime: 'Same-day callback available',\n      color: 'purple',\n    },\n  ];\n\n  // Filter categories based on search\n  const filteredCategories = useMemo(() => {\n    if (!searchQuery.trim()) {\n      return selectedCategory\n        ? faqCategories.filter(cat => cat.id === selectedCategory)\n        : faqCategories;\n    }\n\n    return faqCategories\n      .map(category => ({\n        ...category,\n        questions: category.questions.filter(\n          faq =>\n            faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            faq.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            faq.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n        ),\n      }))\n      .filter(category => category.questions.length > 0);\n  }, [searchQuery, selectedCategory, faqCategories]);\n\n  // Get total question count\n  const totalQuestions = faqCategories.reduce(\n    (total, category) => total + category.questions.length,\n    0\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50\">\n      <SEOHead\n        title=\"Help Center - UpSwitch\"\n        description=\"Find answers to common questions about buying and selling businesses on UpSwitch. Get support for account management, transactions, and platform features.\"\n        keywords=\"help, support, FAQ, business marketplace, UpSwitch assistance\"\n      />\n\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden bg-gradient-to-r from-blue-600 to-indigo-600 py-20\">\n        <div className=\"absolute inset-0 bg-black opacity-10\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-full p-4\">\n                <HelpCircle className=\"w-12 h-12 text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">How can we help you?</h1>\n            <p className=\"text-xl text-blue-100 mb-12 max-w-3xl mx-auto\">\n              Find answers to your questions about buying and selling businesses on Belgium's\n              premier business marketplace\n            </p>\n\n            {/* Search Bar */}\n            <div className=\"max-w-2xl mx-auto\">\n              <SearchComponent\n                value={searchQuery}\n                onChange={setSearchQuery}\n                onSearch={() => {}} // Search happens automatically as user types\n                placeholder=\"Search for answers... e.g., 'How to list my business'\"\n                size=\"large\"\n                buttonText=\"Search\"\n              />\n\n              {searchQuery && (\n                <div className=\"mt-4 text-blue-100\">\n                  {filteredCategories.length > 0\n                    ? `Found ${filteredCategories.reduce((total, cat) => total + cat.questions.length, 0)} relevant answers`\n                    : 'No results found. Try different keywords or browse categories below.'}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardBody className=\"text-center py-6\">\n              <BookOpen className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">{totalQuestions}</div>\n              <div className=\"text-gray-600\">Help Articles</div>\n            </CardBody>\n          </Card>\n\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardBody className=\"text-center py-6\">\n              <Users className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">24/7</div>\n              <div className=\"text-gray-600\">Support Available</div>\n            </CardBody>\n          </Card>\n\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardBody className=\"text-center py-6\">\n              <Clock className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-gray-900\">&lt; 1hr</div>\n              <div className=\"text-gray-600\">Average Response</div>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-12\">\n          {/* Sidebar - Category Filter */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-xl shadow-sm border p-6 sticky top-8\">\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Categories</h3>\n\n              <button\n                onClick={() => setSelectedCategory(null)}\n                className={`w-full text-left p-3 rounded-lg transition-colors mb-2 ${\n                  !selectedCategory\n                    ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                    : 'hover:bg-gray-50 text-gray-700'\n                }`}\n              >\n                All Categories\n              </button>\n\n              {faqCategories.map(category => (\n                <button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id)}\n                  className={`w-full text-left p-3 rounded-lg transition-colors mb-2 flex items-center gap-3 ${\n                    selectedCategory === category.id\n                      ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                      : 'hover:bg-gray-50 text-gray-700'\n                  }`}\n                >\n                  <div className=\"flex-shrink-0\">{category.icon}</div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium truncate\">{category.category}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      {category.questions.length} questions\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Main FAQ Content */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"space-y-12\">\n              {filteredCategories.length > 0 ? (\n                filteredCategories.map(category => (\n                  <FAQCategory\n                    key={category.id}\n                    category={{\n                      title: category.category,\n                      description: category.description,\n                      icon: category.icon,\n                      color: category.color,\n                      faqs: category.questions.map(q => ({\n                        question: q.question,\n                        answer: q.answer,\n                        tags: q.tags,\n                        isPopular: q.isPopular,\n                        isNew: q.isNew,\n                      })),\n                    }}\n                    allowMultiple={false}\n                  />\n                ))\n              ) : (\n                <div className=\"text-center py-12\">\n                  <HelpCircle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No results found</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Try adjusting your search terms or browse our categories\n                  </p>\n                  <Button onClick={() => setSearchQuery('')} className=\"bg-blue-600 text-white\">\n                    Clear Search\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Contact Support Section */}\n      <div className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Still need help?</h2>\n            <p className=\"text-gray-600 text-lg\">\n              Our support team is here to assist you with any questions\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {supportOptions.map(option => (\n              <Card\n                key={option.id}\n                className=\"border-0 shadow-md hover:shadow-lg transition-shadow\"\n              >\n                <CardBody className=\"p-6 text-center\">\n                  <div className=\"flex items-center justify-center mb-4\">\n                    <div\n                      className={`p-3 rounded-full bg-${option.color}-50 text-${option.color}-600`}\n                    >\n                      {option.icon}\n                    </div>\n                  </div>\n\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">{option.title}</h3>\n\n                  <p className=\"text-gray-600 mb-4\">{option.description}</p>\n\n                  <div className=\"text-sm text-gray-500 mb-4\">\n                    <div>{option.availability}</div>\n                    <div>{option.responseTime}</div>\n                  </div>\n\n                  <Button\n                    className={`w-full bg-${option.color}-600 text-white hover:bg-${option.color}-700`}\n                    onClick={() => {\n                      if (option.id === 'email-support') {\n                        window.location.href = 'mailto:support@upswitch.com';\n                      } else if (option.id === 'phone-support') {\n                        navigate('/contact');\n                      }\n                      // Live chat would integrate with chat system\n                    }}\n                  >\n                    {option.action}\n                  </Button>\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom CTA */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 py-16\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">Ready to get started?</h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Join thousands of entrepreneurs using UpSwitch to buy and sell businesses\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              className=\"bg-white text-blue-600 hover:bg-gray-50 font-semibold px-8\"\n              onClick={() => navigate('/signup')}\n            >\n              Create Account\n            </Button>\n            <Button size=\"lg\" variant=\"tertiary\" onClick={() => navigate('/browse')}>\n              Browse Businesses\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Help;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/support/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/test/RoleTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/test/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/transaction-completion/TransactionCompletionPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/transaction-completion/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/users/SavedListings.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":40,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":115,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":115,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 💾 Saved Listings Page - MVP Version\n// Location: src/app/pages/users/SavedListings.tsx\n// Purpose: Display user's saved business listings with management capabilities\n\nimport { useAuth } from '@/app/providers/auth-provider';\nimport {\n  Building2,\n  Calendar,\n  Euro,\n  Eye,\n  Filter,\n  Heart,\n  MapPin,\n  MessageSquare,\n  Search,\n  Users,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '../../../shared/components/buttons';\nimport { Card } from '../../../shared/components/cards';\nimport { CustomInputField } from '../../../shared/components/forms';\n\ninterface SavedListing {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  location: string;\n  industry: string;\n  employees: number;\n  revenue: number;\n  established: number;\n  imageUrl?: string;\n  savedAt: string;\n  views: number;\n  inquiries: number;\n}\n\nconst SavedListings: React.FC = () => {\n  const { user, isAuthenticated } = useAuth();\n  const [savedListings, setSavedListings] = useState<SavedListing[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterIndustry, setFilterIndustry] = useState('');\n  const [sortBy, setSortBy] = useState<'savedAt' | 'price' | 'title'>('savedAt');\n\n  // Mock data - replace with actual API call\n  useEffect(() => {\n    const mockSavedListings: SavedListing[] = [\n      {\n        id: '1',\n        title: 'Thriving Coffee Shop in City Center',\n        description:\n          'Well-established coffee shop with loyal customer base and prime location. Perfect for entrepreneurs looking to enter the food service industry.',\n        price: 125000,\n        location: 'Amsterdam, Netherlands',\n        industry: 'Food & Beverage',\n        employees: 8,\n        revenue: 180000,\n        established: 2018,\n        imageUrl: '/images/coffee-shop.jpg',\n        savedAt: '2024-01-15',\n        views: 45,\n        inquiries: 3,\n      },\n      {\n        id: '2',\n        title: 'Digital Marketing Agency',\n        description:\n          'Growing digital marketing agency with established client base and strong recurring revenue. Great opportunity for experienced marketers.',\n        price: 250000,\n        location: 'Rotterdam, Netherlands',\n        industry: 'Marketing & Advertising',\n        employees: 12,\n        revenue: 320000,\n        established: 2020,\n        imageUrl: '/images/marketing-agency.jpg',\n        savedAt: '2024-01-10',\n        views: 78,\n        inquiries: 5,\n      },\n      {\n        id: '3',\n        title: 'Boutique Fitness Studio',\n        description:\n          'Modern fitness studio with premium equipment and dedicated clientele. Ideal for fitness enthusiasts or business investors.',\n        price: 180000,\n        location: 'Utrecht, Netherlands',\n        industry: 'Health & Fitness',\n        employees: 6,\n        revenue: 220000,\n        established: 2019,\n        imageUrl: '/images/fitness-studio.jpg',\n        savedAt: '2024-01-08',\n        views: 32,\n        inquiries: 2,\n      },\n    ];\n\n    setTimeout(() => {\n      setSavedListings(mockSavedListings);\n      setLoading(false);\n    }, 1000);\n  }, []);\n\n  const handleRemoveSaved = (listingId: string) => {\n    setSavedListings(prev => prev.filter(listing => listing.id !== listingId));\n  };\n\n  const handleViewListing = (listingId: string) => {\n    // Navigate to listing details\n    window.location.href = `/listings/${listingId}`;\n  };\n\n  const handleSendInquiry = (listingId: string) => {\n    // Open inquiry modal or navigate to inquiry form\n  };\n\n  const filteredListings = savedListings.filter(listing => {\n    const matchesSearch =\n      listing.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      listing.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      listing.location.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesIndustry = !filterIndustry || listing.industry === filterIndustry;\n    return matchesSearch && matchesIndustry;\n  });\n\n  const sortedListings = [...filteredListings].sort((a, b) => {\n    switch (sortBy) {\n      case 'price':\n        return b.price - a.price;\n      case 'title':\n        return a.title.localeCompare(b.title);\n      case 'savedAt':\n      default:\n        return new Date(b.savedAt).getTime() - new Date(a.savedAt).getTime();\n    }\n  });\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: 'EUR',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('nl-NL', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h1>\n          <p className=\"text-gray-600 mb-6\">Please log in to view your saved listings.</p>\n          <Button variant=\"primary\" onClick={() => (window.location.href = '/login')}>\n            Log In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"p-2 bg-red-100 rounded-lg\">\n              <Heart className=\"w-6 h-6 text-red-600\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Saved Listings</h1>\n          </div>\n          <p className=\"text-gray-600\">\n            Manage your saved business listings and track your favorites.\n          </p>\n        </div>\n\n        {/* Search and Filter Bar */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <CustomInputField\n                label=\"Search saved listings\"\n                type=\"text\"\n                placeholder=\"Search saved listings...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                onBlur={() => {}}\n                name=\"search\"\n                className=\"pl-10\"\n              />\n            </div>\n\n            <div className=\"relative\">\n              <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <select\n                value={filterIndustry}\n                onChange={e => setFilterIndustry(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n              >\n                <option value=\"\">All Industries</option>\n                <option value=\"Food & Beverage\">Food & Beverage</option>\n                <option value=\"Marketing & Advertising\">Marketing & Advertising</option>\n                <option value=\"Health & Fitness\">Health & Fitness</option>\n                <option value=\"Technology\">Technology</option>\n                <option value=\"Retail\">Retail</option>\n                <option value=\"Services\">Services</option>\n              </select>\n            </div>\n\n            <div>\n              <select\n                value={sortBy}\n                onChange={e => setSortBy(e.target.value as 'savedAt' | 'price' | 'title')}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n              >\n                <option value=\"savedAt\">Sort by Date Saved</option>\n                <option value=\"price\">Sort by Price</option>\n                <option value=\"title\">Sort by Title</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Results Summary */}\n        <div className=\"mb-6\">\n          <p className=\"text-gray-600\">\n            {loading\n              ? 'Loading...'\n              : `${sortedListings.length} saved listing${sortedListings.length !== 1 ? 's' : ''}`}\n          </p>\n        </div>\n\n        {/* Saved Listings Grid */}\n        {loading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3].map(i => (\n              <div\n                key={i}\n                className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 animate-pulse\"\n              >\n                <div className=\"h-48 bg-gray-200 rounded-lg mb-4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : sortedListings.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Heart className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Saved Listings</h3>\n            <p className=\"text-gray-600 mb-6\">\n              {searchTerm || filterIndustry\n                ? 'No listings match your current filters.'\n                : \"Start saving listings you're interested in to see them here.\"}\n            </p>\n            <Button variant=\"primary\" onClick={() => (window.location.href = '/search')}>\n              Browse Listings\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sortedListings.map(listing => (\n              <Card\n                key={listing.id}\n                className=\"overflow-hidden hover:shadow-lg transition-shadow duration-200\"\n              >\n                {/* Listing Image */}\n                <div className=\"h-48 bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center\">\n                  {listing.imageUrl ? (\n                    <img\n                      src={listing.imageUrl}\n                      alt={listing.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"text-gray-400 text-center\">\n                      <Building2 className=\"w-12 h-12 mx-auto mb-2\" />\n                      <p className=\"text-sm\">No Image</p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"p-6\">\n                  {/* Title and Price */}\n                  <div className=\"mb-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2 line-clamp-2\">\n                      {listing.title}\n                    </h3>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold text-primary-600\">\n                        {formatPrice(listing.price)}\n                      </span>\n                      <button\n                        onClick={() => handleRemoveSaved(listing.id)}\n                        className=\"p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors\"\n                        title=\"Remove from saved\"\n                      >\n                        <Heart className=\"w-5 h-5 fill-current\" />\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Description */}\n                  <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">{listing.description}</p>\n\n                  {/* Key Details */}\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      {listing.location}\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      {listing.employees} employees\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Euro className=\"w-4 h-4 mr-2\" />\n                      {formatPrice(listing.revenue)} annual revenue\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Established {listing.established}\n                    </div>\n                  </div>\n\n                  {/* Stats */}\n                  <div className=\"flex items-center justify-between text-sm text-gray-500 mb-4\">\n                    <div className=\"flex items-center\">\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      {listing.views} views\n                    </div>\n                    <div className=\"flex items-center\">\n                      <MessageSquare className=\"w-4 h-4 mr-1\" />\n                      {listing.inquiries} inquiries\n                    </div>\n                    <div className=\"text-xs text-gray-400\">Saved {formatDate(listing.savedAt)}</div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"tertiary\"\n                      size=\"sm\"\n                      onClick={() => handleViewListing(listing.id)}\n                      className=\"flex-1\"\n                    >\n                      View Details\n                    </Button>\n                    <Button\n                      variant=\"primary\"\n                      size=\"sm\"\n                      onClick={() => handleSendInquiry(listing.id)}\n                      className=\"flex-1\"\n                    >\n                      Send Inquiry\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SavedListings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/pages/users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/providers/UIProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":8,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UIProvider - Compatibility Layer\n *\n * Re-exports the UI provider with the expected naming convention\n * for backward compatibility with existing import paths.\n */\n\nexport * from './ui-provider';\nexport { UIProvider as default } from './ui-provider';\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/providers/auth-provider.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[727,730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[727,730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":35,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":42,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'redirectInfo' is defined but never used.","line":42,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":63},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":53,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":53,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":97,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":124,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔐 Auth Provider - UpSwitch MVP\n * Combined authentication and modal management\n *\n * MVP APPROACH:\n * - Combined auth state + modal management\n * - Simple user authentication\n * - Basic modal handling\n * - No complex features\n */\n\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { authService } from '../../shared/services';\nimport { User } from '../../shared/types';\n\n// =============================================================================\n// TYPES & INTERFACES\n// =============================================================================\n\nexport type ModalType = 'signup' | 'login' | null;\n\ninterface PostAuthRedirect {\n  url: string;\n  state?: any;\n}\n\ninterface AuthContextType {\n  // User state\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n\n  // Auth actions\n  checkAuth: () => Promise<void>;\n  setUser: (user: User | null) => void;\n\n  // Modal state\n  activeModal: ModalType;\n  postAuthRedirect: PostAuthRedirect | null;\n\n  // Modal actions\n  openModal: (type: ModalType, redirectInfo?: PostAuthRedirect) => void;\n  closeModal: () => void;\n  clearRedirect: () => void;\n}\n\n// =============================================================================\n// CONTEXT\n// =============================================================================\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// =============================================================================\n// PROVIDER COMPONENT\n// =============================================================================\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  // User state\n  const [user, setUserState] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  // Modal state\n  const [activeModal, setActiveModal] = useState<ModalType>(null);\n  const [postAuthRedirect, setPostAuthRedirect] = useState<PostAuthRedirect | null>(null);\n\n  // Track if we've already checked authentication to prevent repeated calls\n  const hasCheckedAuth = useRef<boolean>(false);\n\n  // =============================================================================\n  // AUTH FUNCTIONS\n  // =============================================================================\n\n  const checkAuth = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const authResult = await authService.checkAuthentication();\n      if (authResult.isAuthenticated && authResult.user) {\n        setUserState(authResult.user);\n        setIsAuthenticated(true);\n      } else {\n        setUserState(null);\n        setIsAuthenticated(false);\n      }\n    } catch (err) {\n      setUserState(null);\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Optimized check that only runs once on mount\n  const checkAuthOnce = useCallback(async () => {\n    // Prevent multiple calls\n    if (hasCheckedAuth.current) {\n      return;\n    }\n\n    hasCheckedAuth.current = true;\n    setIsLoading(true);\n\n    try {\n      const authResult = await authService.checkAuthentication();\n      if (authResult.isAuthenticated && authResult.user) {\n        setUserState(authResult.user);\n        setIsAuthenticated(true);\n      } else {\n        setUserState(null);\n        setIsAuthenticated(false);\n      }\n    } catch (err) {\n      setUserState(null);\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const setUser = useCallback((user: User | null) => {\n    setUserState(user);\n    setIsAuthenticated(!!user);\n    // Reset auth check flag when user changes\n    hasCheckedAuth.current = false;\n  }, []);\n\n  // =============================================================================\n  // MODAL FUNCTIONS\n  // =============================================================================\n\n  const openModal = (type: ModalType, redirectInfo?: PostAuthRedirect) => {\n    setActiveModal(type);\n    setPostAuthRedirect(redirectInfo || null);\n  };\n\n  const closeModal = () => {\n    setActiveModal(null);\n    // Keep postAuthRedirect until authentication is complete\n  };\n\n  const clearRedirect = () => {\n    setPostAuthRedirect(null);\n  };\n\n  // =============================================================================\n  // EFFECTS\n  // =============================================================================\n\n  useEffect(() => {\n    checkAuthOnce();\n  }, [checkAuthOnce]);\n\n  // Listen for authentication events from modals\n  useEffect(() => {\n    const handleUserLogin = (event: CustomEvent) => {\n      if (event.detail) {\n        setUserState(event.detail);\n        setIsAuthenticated(true);\n        hasCheckedAuth.current = false; // Reset flag for future checks\n      }\n    };\n\n    const handleUserSignup = (event: CustomEvent) => {\n      if (event.detail) {\n        setUserState(event.detail);\n        setIsAuthenticated(true);\n        hasCheckedAuth.current = false; // Reset flag for future checks\n      }\n    };\n\n    const handleAuthChange = () => {\n      hasCheckedAuth.current = false; // Reset flag to allow recheck\n      checkAuth();\n    };\n\n    const handleAuthLogout = () => {\n      setUserState(null);\n      setIsAuthenticated(false);\n      hasCheckedAuth.current = false; // Reset flag for future checks\n    };\n\n    window.addEventListener('user-login', handleUserLogin as EventListener);\n    window.addEventListener('user-signup', handleUserSignup as EventListener);\n    window.addEventListener('auth-change', handleAuthChange);\n    window.addEventListener('auth-logout', handleAuthLogout);\n\n    return () => {\n      window.removeEventListener('user-login', handleUserLogin as EventListener);\n      window.removeEventListener('user-signup', handleUserSignup as EventListener);\n      window.removeEventListener('auth-change', handleAuthChange);\n      window.removeEventListener('auth-logout', handleAuthLogout);\n    };\n  }, [checkAuth]);\n\n  // =============================================================================\n  // CONTEXT VALUE\n  // =============================================================================\n\n  const contextValue: AuthContextType = {\n    // User state\n    user,\n    isAuthenticated,\n    isLoading,\n\n    // Auth actions\n    checkAuth,\n    setUser,\n\n    // Modal state\n    activeModal,\n    postAuthRedirect,\n\n    // Modal actions\n    openModal,\n    closeModal,\n    clearRedirect,\n  };\n\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/providers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/providers/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/providers/ui-provider.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is defined but never used.","line":31,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":35,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":67},{"ruleId":"no-unused-vars","severity":1,"message":"'message' is defined but never used.","line":35,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":84},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":36,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":45,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":45,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎨 UI Provider - UpSwitch MVP\n * Basic UI state management\n *\n * MVP APPROACH:\n * - Simple UI state only\n * - Sidebar, notifications, loading\n * - No complex features\n * - Essential functionality only\n */\n\nimport React, { createContext, useContext, useState } from 'react';\n\n// =============================================================================\n// TYPES & INTERFACES\n// =============================================================================\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n}\n\ninterface UIContextType {\n  // Sidebar state\n  isSidebarOpen: boolean;\n  toggleSidebar: () => void;\n\n  // Loading state\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n\n  // Notifications\n  notifications: Notification[];\n  addNotification: (type: 'success' | 'error' | 'warning' | 'info', message: string) => void;\n  removeNotification: (id: string) => void;\n}\n\n// =============================================================================\n// CONTEXT\n// =============================================================================\n\nconst UIContext = createContext<UIContextType | undefined>(undefined);\n\nexport const useUI = () => {\n  const context = useContext(UIContext);\n  if (context === undefined) {\n    throw new Error('useUI must be used within a UIProvider');\n  }\n  return context;\n};\n\n// =============================================================================\n// PROVIDER COMPONENT\n// =============================================================================\n\ninterface UIProviderProps {\n  children: React.ReactNode;\n}\n\nexport const UIProvider: React.FC<UIProviderProps> = ({ children }) => {\n  // State\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  // =============================================================================\n  // FUNCTIONS\n  // =============================================================================\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const addNotification = (type: 'success' | 'error' | 'warning' | 'info', message: string) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const notification: Notification = { id, type, message };\n\n    setNotifications(prev => [...prev, notification]);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      removeNotification(id);\n    }, 5000);\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  // =============================================================================\n  // CONTEXT VALUE\n  // =============================================================================\n\n  const contextValue: UIContextType = {\n    // Sidebar state\n    isSidebarOpen,\n    toggleSidebar,\n\n    // Loading state\n    isLoading,\n    setIsLoading,\n\n    // Notifications\n    notifications,\n    addNotification,\n    removeNotification,\n  };\n\n  return <UIContext.Provider value={contextValue}>{children}</UIContext.Provider>;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/routing/NDARouteGuard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'setIsNdaModalOpen' is assigned a value but never used.","line":37,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsNdaModalOpen' is assigned a value but never used.","line":37,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔒 NDA Route Guard - UpSwitch MVP\n * Protects private listing routes with NDA verification\n *\n * FEATURES:\n * - NDA status verification\n * - Automatic redirect to public listing if NDA not signed\n * - NDA expiration handling\n * - User authentication verification\n */\n\nimport { useAuth } from '@/app/providers/auth-provider';\nimport { Button } from '@/shared/components/buttons';\nimport NDAModal from '@/shared/components/modals/NDAModal';\nimport { Card, CardBody } from '@heroui/react';\nimport { AlertTriangle, Lock, Shield } from 'lucide-react';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Navigate, useParams } from 'react-router-dom';\n\ninterface NDARouteGuardProps {\n  children: React.ReactNode;\n}\n\ninterface NDAStatus {\n  status: 'verified' | 'pending' | 'expired' | 'none';\n  signedAt?: string;\n  expiresAt?: string;\n  listingId: string;\n  userId: string;\n}\n\nconst NDARouteGuard: React.FC<NDARouteGuardProps> = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const { id: listingId } = useParams();\n  const [ndaStatus, setNdaStatus] = useState<NDAStatus | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [, setIsNdaModalOpen] = useState(false);\n\n  const checkNdaStatus = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call to check NDA status\n      // For now, simulate NDA verification\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Mock NDA status - in real implementation, this would come from API\n      const mockNdaStatus: NDAStatus = {\n        status: 'verified', // NDA is verified after signing\n        signedAt: '2024-01-15T10:30:00Z',\n        expiresAt: '2024-12-31T23:59:59Z',\n        listingId: listingId || '',\n        userId: user?.id || '',\n      };\n\n      setNdaStatus(mockNdaStatus);\n    } catch {\n      setNdaStatus({\n        status: 'none',\n        listingId: listingId || '',\n        userId: user?.id || '',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [listingId, user?.id]);\n\n  useEffect(() => {\n    if (isAuthenticated && user && listingId) {\n      checkNdaStatus();\n    } else {\n      setIsLoading(false);\n    }\n  }, [isAuthenticated, user, listingId, checkNdaStatus]);\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Verifying NDA access...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated || !user) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  // Check NDA status\n  if (!ndaStatus || ndaStatus.status === 'none') {\n    return <NDAAccessDenied reason=\"no_nda\" listingId={listingId} />;\n  }\n\n  if (ndaStatus.status === 'expired') {\n    return <NDAAccessDenied reason=\"expired\" listingId={listingId} />;\n  }\n\n  if (ndaStatus.status === 'pending') {\n    return <NDAAccessDenied reason=\"pending\" listingId={listingId} />;\n  }\n\n  // NDA is verified, render protected content\n  return <>{children}</>;\n};\n\ninterface NDAAccessDeniedProps {\n  reason: 'no_nda' | 'expired' | 'pending';\n  listingId?: string;\n}\n\nconst NDAAccessDenied: React.FC<NDAAccessDeniedProps> = ({ reason, listingId }) => {\n  const [isNdaModalOpen, setIsNdaModalOpen] = useState(false);\n\n  const getContent = () => {\n    switch (reason) {\n      case 'no_nda':\n        return {\n          icon: Lock,\n          title: 'NDA Required',\n          description:\n            'You need to sign a Non-Disclosure Agreement to access this private listing.',\n          buttonText: 'Sign NDA to Access',\n          buttonAction: () => {},\n        };\n      case 'expired':\n        return {\n          icon: AlertTriangle,\n          title: 'NDA Expired',\n          description:\n            'Your Non-Disclosure Agreement has expired. Please sign a new NDA to continue accessing this listing.',\n          buttonText: 'Renew NDA',\n          buttonAction: () => {},\n        };\n      case 'pending':\n        return {\n          icon: Shield,\n          title: 'NDA Pending',\n          description:\n            'Your NDA is being processed. Please wait for verification or contact support if this takes longer than expected.',\n          buttonText: 'Check Status',\n          buttonAction: () => (window.location.href = `/listings/${listingId}`),\n        };\n    }\n  };\n\n  const content = getContent();\n  const IconComponent = content.icon;\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"max-w-md mx-auto p-6\">\n          <Card>\n            <CardBody className=\"text-center p-8\">\n              <div className=\"bg-red-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6\">\n                <IconComponent className=\"w-8 h-8 text-red-600\" />\n              </div>\n\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">{content.title}</h1>\n\n              <p className=\"text-gray-600 mb-8 leading-relaxed\">{content.description}</p>\n\n              <div className=\"space-y-3\">\n                <Button variant=\"primary\" className=\"w-full\" onPress={content.buttonAction}>\n                  {content.buttonText}\n                </Button>\n\n                <Button\n                  variant=\"secondary\"\n                  className=\"w-full\"\n                  onPress={() => (window.location.href = '/listings')}\n                >\n                  Browse Other Listings\n                </Button>\n              </div>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n\n      <NDAModal\n        isOpen={isNdaModalOpen}\n        onClose={() => setIsNdaModalOpen(false)}\n        onAccept={() => {}}\n        listingTitle=\"Premium Restaurant Chain - Brussels\"\n        sellerName=\"Business Owner\"\n        isLoading={false}\n      />\n    </>\n  );\n};\n\nexport default NDARouteGuard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/routing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/routing/route-guards.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":296,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":296,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🛡️ Route Guards - UpSwitch MVP\n * Enhanced route protection with role-based access control\n *\n * FEATURES:\n * - Authentication protection\n * - Role-based authorization (buyer, seller, both, admin)\n * - Informative access denied pages\n * - Loading states\n * - Flexible redirect handling\n */\n\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { Button } from '../../shared/components/buttons';\nimport { UserRole, isAdminUser, isBuyerUser, isSellerUser } from '../../shared/types';\nimport { shouldBypassProtectedRoute } from '../../shared/utils/dev/devBypass';\nimport { useAuth } from '../providers/auth-provider';\n\n// =============================================================================\n// TYPES & INTERFACES\n// =============================================================================\n\ninterface BaseRouteProps {\n  children: React.ReactNode;\n}\n\ninterface ProtectedRouteProps extends BaseRouteProps {\n  requireAuth?: boolean;\n  redirectTo?: string;\n}\n\ninterface RoleProtectedRouteProps extends BaseRouteProps {\n  allowedRoles: UserRole[];\n  redirectTo?: string;\n  fallbackTo?: string;\n}\n\n// =============================================================================\n// LOADING COMPONENT\n// =============================================================================\n\nconst LoadingScreen: React.FC<{ message?: string }> = ({ message = 'Loading...' }) => (\n  <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n    <div className=\"text-center\">\n      <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary-600 border-t-transparent mx-auto mb-4\"></div>\n      <p className=\"text-gray-600\">{message}</p>\n    </div>\n  </div>\n);\n\n// =============================================================================\n// ACCESS DENIED COMPONENT\n// =============================================================================\n\nconst AccessDeniedPage: React.FC<{\n  user: { email: string; role: string } | null;\n  allowedRoles: UserRole[];\n  onGoBack?: () => void;\n  onGoHome?: () => void;\n}> = ({ user, allowedRoles, onGoBack, onGoHome }) => (\n  <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n    <div className=\"text-center max-w-md\">\n      <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n        <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636 5.636 18.364\"\n          />\n        </svg>\n      </div>\n\n      <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Access Denied</h2>\n      <p className=\"text-gray-600 mb-6\">\n        You don't have permission to access this page. This area is restricted to{' '}\n        <span className=\"font-medium\">\n          {allowedRoles.map(role => (role === 'both' ? 'buyer & seller' : role)).join(', ')}\n        </span>{' '}\n        accounts.\n      </p>\n\n      <div className=\"space-y-3 mb-6\">\n        <Button\n          variant=\"primary\"\n          className=\"w-full\"\n          onPress={onGoBack || (() => window.history.back())}\n        >\n          Go Back\n        </Button>\n\n        <Button\n          variant=\"secondary\"\n          className=\"w-full\"\n          onPress={onGoHome || (() => (window.location.href = '/'))}\n        >\n          Go to Home\n        </Button>\n      </div>\n\n      {user && (\n        <div className=\"bg-gray-100 rounded-lg p-4\">\n          <p className=\"text-sm text-gray-600\">Currently logged in as:</p>\n          <p className=\"text-sm font-medium text-gray-900\">\n            {user.email}\n            <span className=\"ml-2 px-2 py-1 bg-gray-200 text-gray-700 rounded-full text-xs\">\n              {user.role === 'both' ? 'Buyer & Seller' : user.role}\n            </span>\n          </p>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\n// =============================================================================\n// ROUTE GUARD COMPONENTS\n// =============================================================================\n\n/**\n * Basic protected route component\n * Redirects unauthenticated users to login\n */\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  children,\n  requireAuth = true,\n  redirectTo = '/',\n}) => {\n  const { user, isLoading } = useAuth();\n\n  // 🚨 DEVELOPMENT BYPASS: Check if dev bypass is enabled\n  if (shouldBypassProtectedRoute()) {\n    return <>{children}</>;\n  }\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return <LoadingScreen message=\"Verifying authentication...\" />;\n  }\n\n  // Redirect if authentication required but user not authenticated\n  if (requireAuth && !user) {\n    return <Navigate to={redirectTo} replace />;\n  }\n\n  // Render protected content\n  return <>{children}</>;\n};\n\n/**\n * Role-based protected route component\n * Checks both authentication and authorization\n */\nexport const RoleProtectedRoute: React.FC<RoleProtectedRouteProps> = ({\n  children,\n  allowedRoles,\n  redirectTo = '/',\n  fallbackTo,\n}) => {\n  const { user, isLoading } = useAuth();\n\n  // 🚨 DEVELOPMENT BYPASS: Check if dev bypass is enabled\n  if (shouldBypassProtectedRoute()) {\n    return <>{children}</>;\n  }\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return <LoadingScreen message=\"Verifying access...\" />;\n  }\n\n  // Redirect to login if not authenticated\n  if (!user) {\n    return <Navigate to={redirectTo} replace />;\n  }\n\n  // Check if user has required role\n  const hasAccess = checkUserAccess(user, allowedRoles);\n\n  // Show access denied if not authorized\n  if (!hasAccess) {\n    if (fallbackTo) {\n      return <Navigate to={fallbackTo} replace />;\n    }\n\n    return (\n      <AccessDeniedPage\n        user={user}\n        allowedRoles={allowedRoles}\n        onGoHome={() => (window.location.href = '/')}\n      />\n    );\n  }\n\n  // Render protected content\n  return <>{children}</>;\n};\n\n/**\n * Guest-only route component (for login/register pages)\n * Redirects authenticated users to appropriate dashboard\n */\nexport const GuestRoute: React.FC<ProtectedRouteProps> = ({ children, redirectTo }) => {\n  const { user, isLoading } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return <LoadingScreen />;\n  }\n\n  // Redirect authenticated users to appropriate area\n  if (user) {\n    const targetRoute = redirectTo || getDefaultRouteForUser(user);\n    return <Navigate to={targetRoute} replace />;\n  }\n\n  // Render guest-only content\n  return <>{children}</>;\n};\n\n/**\n * Seller-only route component\n * Shorthand for seller role protection\n */\nexport const SellerRoute: React.FC<BaseRouteProps> = ({ children }) => (\n  <RoleProtectedRoute allowedRoles={['seller', 'both', 'admin']}>{children}</RoleProtectedRoute>\n);\n\n/**\n * Buyer-accessible route component\n * Allows buyers and users with both roles\n */\nexport const BuyerRoute: React.FC<BaseRouteProps> = ({ children }) => (\n  <RoleProtectedRoute allowedRoles={['buyer', 'both', 'admin']}>{children}</RoleProtectedRoute>\n);\n\n/**\n * Admin-only route component\n * Strictest protection for admin features\n */\nexport const AdminRoute: React.FC<BaseRouteProps> = ({ children }) => (\n  <RoleProtectedRoute allowedRoles={['admin']}>{children}</RoleProtectedRoute>\n);\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Check if user has access based on allowed roles\n */\nconst checkUserAccess = (user: { role: string } | null, allowedRoles: UserRole[]): boolean => {\n  if (!user || !user.role) return false;\n\n  // Admin has access to everything\n  if (user.role === 'admin') return true;\n\n  // Check if user role is in allowed roles\n  if (allowedRoles.includes(user.role as UserRole)) return true;\n\n  // Handle 'both' role - has access to buyer OR seller restricted areas\n  if (user.role === 'both') {\n    return allowedRoles.some(role => ['buyer', 'seller'].includes(role));\n  }\n\n  return false;\n};\n\n/**\n * Get default route for user based on their role\n */\nconst getDefaultRouteForUser = (user: { role: string } | null): string => {\n  if (!user) return '/';\n\n  switch (user.role) {\n    case 'seller':\n      return '/my-business';\n    case 'both':\n      return '/my-business'; // Prioritize business management for dual role\n    case 'admin':\n      return '/admin/dashboard';\n    case 'buyer':\n    default:\n      return '/listings'; // Buyers focus on browsing listings\n  }\n};\n\n// =============================================================================\n// HOOKS\n// =============================================================================\n\n/**\n * Hook for role-based access control in components\n */\nexport const useRoleGuard = (allowedRoles: UserRole[] = []) => {\n  const { user, isLoading } = useAuth();\n\n  const hasAccess = React.useMemo(() => {\n    if (allowedRoles.length === 0) return true; // No restrictions\n    if (!user) return false;\n\n    return checkUserAccess(user, allowedRoles);\n  }, [user, allowedRoles]);\n\n  return {\n    hasAccess,\n    user,\n    userRole: user?.role,\n    isLoading,\n    isSeller: isSellerUser(user),\n    isBuyer: isBuyerUser(user),\n    isAdmin: isAdminUser(user),\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/app/routing/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/config/api-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[369,372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[369,372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[827,830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[827,830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[922,925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[922,925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1021,1024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1021,1024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1222,1225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1222,1225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3175,3178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3175,3178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3248,3251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3248,3251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3320,3323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3320,3323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3401,3404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3401,3404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔗 API Configuration - MVP Version\n// Location: src/config/api-config.ts\n// Purpose: Centralized API configuration for MVP frontend\n\n// =============================================================================\n// ENVIRONMENT DETECTION\n// =============================================================================\n\nexport const isDevelopment = (import.meta as any).env?.DEV;\nexport const isProduction = (import.meta as any).env?.PROD;\n\n// =============================================================================\n// API CONFIGURATION\n// =============================================================================\n\n/**\n * API Configuration for MVP Frontend\n * Supports both Supabase and custom backend integration\n */\nexport const API_CONFIG = {\n  // Supabase Configuration\n  SUPABASE: {\n    url: (import.meta as any).env?.VITE_SUPABASE_URL || 'https://placeholder.supabase.co',\n    anonKey: (import.meta as any).env?.VITE_SUPABASE_ANON_KEY || 'placeholder-anon-key',\n    isValid: !!(\n      (import.meta as any).env?.VITE_SUPABASE_URL &&\n      (import.meta as any).env?.VITE_SUPABASE_ANON_KEY\n    ),\n  },\n\n  // Custom Backend Configuration (for additional services)\n  BACKEND: {\n    baseURL: (import.meta as any).env?.VITE_API_BASE_URL || 'http://localhost:3001',\n    timeout: 30000, // 30 seconds\n    retryAttempts: 3,\n    retryDelay: 1000, // 1 second\n  },\n\n  // API Endpoints\n  ENDPOINTS: {\n    // Authentication endpoints (Supabase handles these)\n    auth: {\n      login: '/api/auth/login',\n      register: '/api/auth/register',\n      logout: '/api/auth/logout',\n      refresh: '/api/auth/refresh',\n      profile: '/api/auth/profile',\n      resetPassword: '/api/auth/reset-password',\n      verifyEmail: '/api/auth/verify-email',\n    },\n\n    // User management endpoints\n    users: {\n      profile: '/api/users/profile',\n      update: '/api/users/update',\n      business: '/api/users/business',\n      preferences: '/api/users/preferences',\n      delete: '/api/users/delete',\n    },\n\n    // Business/Listing endpoints\n    listings: {\n      list: '/api/listings',\n      create: '/api/listings',\n      update: '/api/listings/:id',\n      delete: '/api/listings/:id',\n      search: '/api/listings/search',\n      analytics: '/api/listings/:id/analytics',\n      inquiries: '/api/listings/:id/inquiries',\n    },\n\n    // Messaging endpoints\n    messages: {\n      conversations: '/api/messages/conversations',\n      messages: '/api/messages/:conversationId',\n      send: '/api/messages/send',\n      markRead: '/api/messages/:id/read',\n    },\n\n    // File upload endpoints\n    upload: {\n      images: '/api/upload/images',\n      documents: '/api/upload/documents',\n      avatar: '/api/upload/avatar',\n    },\n\n    // Analytics endpoints\n    analytics: {\n      dashboard: '/api/analytics/dashboard',\n      listings: '/api/analytics/listings',\n      user: '/api/analytics/user',\n    },\n  },\n\n  // Request Configuration\n  REQUEST: {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    timeout: 30000,\n    retryAttempts: 3,\n    retryDelay: 1000,\n  },\n\n  // Development Configuration\n  DEV: {\n    bypassAuth: (import.meta as any).env?.VITE_DEV_BYPASS_AUTH === 'true',\n    mockData: (import.meta as any).env?.VITE_DEV_MOCK_DATA === 'true',\n    debugLogs: (import.meta as any).env?.VITE_DEV_DEBUG_LOGS === 'true',\n    apiDelay: parseInt((import.meta as any).env?.VITE_DEV_API_DELAY || '0'),\n  },\n} as const;\n\n// =============================================================================\n// API UTILITIES\n// =============================================================================\n\n/**\n * Get full API URL for an endpoint\n */\nexport const getApiUrl = (endpoint: string, params?: Record<string, string>): string => {\n  let url = `${API_CONFIG.BACKEND.baseURL}${endpoint}`;\n\n  // Replace URL parameters\n  if (params) {\n    Object.entries(params).forEach(([key, value]) => {\n      url = url.replace(`:${key}`, encodeURIComponent(value));\n    });\n  }\n\n  return url;\n};\n\n/**\n * Get Supabase configuration\n */\nexport const getSupabaseConfig = () => {\n  return {\n    url: API_CONFIG.SUPABASE.url,\n    key: API_CONFIG.SUPABASE.anonKey,\n    isValid: API_CONFIG.SUPABASE.isValid,\n  };\n};\n\n/**\n * Check if API is available\n */\nexport const isApiAvailable = (): boolean => {\n  return API_CONFIG.SUPABASE.isValid || API_CONFIG.BACKEND.baseURL !== 'http://localhost:3001';\n};\n\n/**\n * Get request headers with authentication\n */\nexport const getRequestHeaders = (token?: string): Record<string, string> => {\n  const headers = { ...API_CONFIG.REQUEST.headers };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n// =============================================================================\n// ERROR HANDLING CONFIGURATION\n// =============================================================================\n\nexport const API_ERROR_CONFIG = {\n  // Retry configuration\n  retryAttempts: 3,\n  retryDelay: 1000,\n  retryBackoff: 2,\n\n  // Timeout configuration\n  timeout: 30000,\n\n  // Error codes that should trigger retry\n  retryableErrors: [408, 429, 500, 502, 503, 504],\n\n  // Error messages\n  messages: {\n    networkError: 'Network error. Please check your connection.',\n    timeoutError: 'Request timed out. Please try again.',\n    serverError: 'Server error. Please try again later.',\n    unauthorizedError: 'Unauthorized. Please log in again.',\n    forbiddenError: 'Access denied.',\n    notFoundError: 'Resource not found.',\n    validationError: 'Invalid data provided.',\n    unknownError: 'An unexpected error occurred.',\n  },\n} as const;\n\n// =============================================================================\n// DEVELOPMENT HELPERS\n// =============================================================================\n\n/**\n * Log API configuration in development\n */\nexport const logApiConfig = () => {\n  if (isDevelopment && API_CONFIG.DEV.debugLogs) {\n    // API configuration logging removed for production\n  }\n};\n\n// Log configuration on import in development\nif (isDevelopment) {\n  logApiConfig();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/config/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[572,575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[572,575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[886,889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[886,889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2222,2225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2222,2225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5547,5550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5547,5550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔌 API Configuration - UpSwitch MVP\n *\n * Centralized API configuration and client setup for consistent\n * API interactions across the application.\n *\n * @author Senior CTO\n * @version 1.0.0\n */\n\nimport { ApiClientConfig, ApiRequestConfig } from '../shared/types/api';\n\n// =============================================================================\n// API CONFIGURATION\n// =============================================================================\n\n/**\n * Base API Configuration\n */\nexport const API_BASE_CONFIG: ApiClientConfig = {\n  baseURL: (import.meta as any).env?.VITE_API_BASE_URL || 'http://localhost:3001',\n  timeout: 30000, // 30 seconds\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n  },\n  retry: {\n    attempts: 3,\n    delay: 1000,\n    backoff: 'exponential',\n  },\n  validateResponses: true,\n  logRequests: (import.meta as any).env?.NODE_ENV === 'development',\n  auth: {\n    type: 'bearer',\n    tokenProvider: () => {\n      // Get token from localStorage or session storage\n      return localStorage.getItem('auth_token') || '';\n    },\n    refreshTokenProvider: () => {\n      return localStorage.getItem('refresh_token') || '';\n    },\n  },\n};\n\n/**\n * Default Request Configuration\n */\nexport const DEFAULT_REQUEST_CONFIG: ApiRequestConfig = {\n  timeout: 30000,\n  retryAttempts: 3,\n  retryDelay: 1000,\n  credentials: 'include',\n  cache: 'default',\n  validateResponse: true,\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n  },\n};\n\n// =============================================================================\n// ENVIRONMENT-SPECIFIC CONFIGURATIONS\n// =============================================================================\n\n/**\n * Development Configuration\n */\nexport const DEV_CONFIG: Partial<ApiClientConfig> = {\n  logRequests: true,\n  validateResponses: true,\n  timeout: 60000, // Longer timeout for development\n};\n\n/**\n * Production Configuration\n */\nexport const PROD_CONFIG: Partial<ApiClientConfig> = {\n  logRequests: false,\n  validateResponses: true,\n  timeout: 30000,\n};\n\n/**\n * Get environment-specific configuration\n */\nexport const getApiConfig = (): ApiClientConfig => {\n  const env = (import.meta as any).env?.NODE_ENV || 'development';\n\n  const baseConfig = { ...API_BASE_CONFIG };\n\n  if (env === 'production') {\n    return { ...baseConfig, ...PROD_CONFIG };\n  }\n\n  return { ...baseConfig, ...DEV_CONFIG };\n};\n\n// =============================================================================\n// API ENDPOINTS\n// =============================================================================\n\n/**\n * API Endpoints Configuration\n */\nexport const API_ENDPOINTS = {\n  // Authentication\n  AUTH: {\n    LOGIN: '/api/auth/login',\n    REGISTER: '/api/auth/register',\n    LOGOUT: '/api/auth/logout',\n    REFRESH: '/api/auth/refresh',\n    PROFILE: '/api/auth/profile',\n    RESET_PASSWORD: '/api/auth/reset-password',\n    VERIFY_EMAIL: '/api/auth/verify-email',\n    RESEND_VERIFICATION: '/api/auth/resend-verification',\n  },\n\n  // Users\n  USERS: {\n    PROFILE: '/api/users/profile',\n    UPDATE: '/api/users/update',\n    BUSINESS: '/api/users/business',\n    PREFERENCES: '/api/users/preferences',\n    DELETE: '/api/users/delete',\n    VERIFICATION: '/api/users/verification',\n    SECURITY: '/api/users/security',\n  },\n\n  // Business Listings\n  LISTINGS: {\n    LIST: '/api/listings',\n    CREATE: '/api/listings',\n    GET: (id: string) => `/api/listings/${id}`,\n    UPDATE: (id: string) => `/api/listings/${id}`,\n    DELETE: (id: string) => `/api/listings/${id}`,\n    SEARCH: '/api/listings/search',\n    ANALYTICS: (id: string) => `/api/listings/${id}/analytics`,\n    INQUIRIES: (id: string) => `/api/listings/${id}/inquiries`,\n    FEATURED: '/api/listings/featured',\n  },\n\n  // Valuations\n  VALUATIONS: {\n    CREATE: '/api/valuations',\n    GET: (id: string) => `/api/valuations/${id}`,\n    LIST: '/api/valuations',\n    REPORT: (id: string) => `/api/valuations/${id}/report`,\n  },\n\n  // Transactions\n  TRANSACTIONS: {\n    LIST: '/api/transactions',\n    CREATE: '/api/transactions',\n    GET: (id: string) => `/api/transactions/${id}`,\n    UPDATE: (id: string) => `/api/transactions/${id}`,\n    INQUIRIES: '/api/transactions/inquiries',\n    NDA: '/api/transactions/nda',\n    DUE_DILIGENCE: '/api/transactions/due-diligence',\n    OFFERS: '/api/transactions/offers',\n  },\n\n  // Messages\n  MESSAGES: {\n    CONVERSATIONS: '/api/messages/conversations',\n    MESSAGES: (conversationId: string) => `/api/messages/${conversationId}`,\n    SEND: '/api/messages/send',\n    MARK_READ: (id: string) => `/api/messages/${id}/read`,\n  },\n\n  // File Upload\n  UPLOAD: {\n    IMAGES: '/api/upload/images',\n    DOCUMENTS: '/api/upload/documents',\n    AVATAR: '/api/upload/avatar',\n    BUSINESS_DOCS: '/api/upload/business-documents',\n  },\n\n  // Analytics\n  ANALYTICS: {\n    DASHBOARD: '/api/analytics/dashboard',\n    LISTINGS: '/api/analytics/listings',\n    USER: '/api/analytics/user',\n    PERFORMANCE: '/api/analytics/performance',\n  },\n\n  // Payments\n  PAYMENTS: {\n    PLANS: '/api/payments/plans',\n    SUBSCRIBE: '/api/payments/subscribe',\n    CANCEL: '/api/payments/cancel',\n    INVOICES: '/api/payments/invoices',\n    METHODS: '/api/payments/methods',\n  },\n} as const;\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Build URL with parameters\n */\nexport const buildUrl = (endpoint: string, params?: Record<string, any>): string => {\n  if (!params) return endpoint;\n\n  const url = new URL(endpoint, API_BASE_CONFIG.baseURL);\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      url.searchParams.append(key, String(value));\n    }\n  });\n\n  return url.pathname + url.search;\n};\n\n/**\n * Get authorization header\n */\nexport const getAuthHeader = (): Record<string, string> => {\n  const token = localStorage.getItem('auth_token');\n  if (!token) return {};\n\n  return {\n    Authorization: `Bearer ${token}`,\n  };\n};\n\n/**\n * Check if request requires authentication\n */\nexport const requiresAuth = (endpoint: string): boolean => {\n  const publicEndpoints = [\n    API_ENDPOINTS.AUTH.LOGIN,\n    API_ENDPOINTS.AUTH.REGISTER,\n    API_ENDPOINTS.AUTH.RESET_PASSWORD,\n    API_ENDPOINTS.LISTINGS.LIST,\n    API_ENDPOINTS.LISTINGS.SEARCH,\n  ];\n\n  return !publicEndpoints.some(publicEndpoint => {\n    // Handle both static strings and function-generated endpoints\n    if (typeof publicEndpoint === 'string') {\n      return endpoint === publicEndpoint || endpoint.startsWith(publicEndpoint);\n    }\n    return false;\n  });\n};\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport default getApiConfig;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/config/config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1402,1405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1402,1405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1812,1815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1812,1815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1893,1896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1893,1896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1975,1978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1975,1978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2062,2065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2062,2065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2146,2149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2146,2149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2260,2263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2260,2263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2372,2375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2372,2375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2456,2459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2456,2459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2536,2539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2536,2539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2859,2862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2859,2862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2906,2909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2906,2909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏠 App Configuration - MVP Version\n// Location: src/config/config.ts\n// Purpose: Main application configuration\n\nimport { API_CONFIG } from './api-config';\n\n// =============================================================================\n// APP CONFIGURATION INTERFACE\n// =============================================================================\n\ninterface AppConfig {\n  // Basic App Info\n  appName: string;\n  version: string;\n  environment: 'development' | 'staging' | 'production';\n\n  // API Configuration\n  api: typeof API_CONFIG;\n\n  // App Settings\n  settings: {\n    defaultLanguage: string;\n    defaultCountry: string;\n    maxFileSize: number;\n    supportedLanguages: string[];\n    supportedCountries: string[];\n  };\n\n  // Feature Flags\n  features: {\n    enableAnalytics: boolean;\n    enableMessaging: boolean;\n    enableFileUpload: boolean;\n    enableNotifications: boolean;\n    enableDarkMode: boolean;\n  };\n\n  // UI Configuration\n  ui: {\n    theme: 'light' | 'dark' | 'system';\n    sidebarCollapsed: boolean;\n    animationsEnabled: boolean;\n    compactMode: boolean;\n  };\n}\n\n// =============================================================================\n// MAIN CONFIGURATION\n// =============================================================================\n\nconst config: AppConfig = {\n  // Basic App Info\n  appName: 'UpSwitch MVP',\n  version: '1.0.0',\n  environment: ((import.meta as any).env?.MODE as AppConfig['environment']) || 'development',\n\n  // API Configuration\n  api: API_CONFIG,\n\n  // App Settings\n  settings: {\n    defaultLanguage: 'en',\n    defaultCountry: 'BE',\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    supportedLanguages: ['en', 'nl', 'fr'],\n    supportedCountries: ['BE', 'NL', 'FR', 'DE', 'US'],\n  },\n\n  // Feature Flags\n  features: {\n    enableAnalytics: (import.meta as any).env?.VITE_ENABLE_ANALYTICS === 'true',\n    enableMessaging: (import.meta as any).env?.VITE_ENABLE_MESSAGING === 'true',\n    enableFileUpload: (import.meta as any).env?.VITE_ENABLE_FILE_UPLOAD === 'true',\n    enableNotifications: (import.meta as any).env?.VITE_ENABLE_NOTIFICATIONS === 'true',\n    enableDarkMode: (import.meta as any).env?.VITE_ENABLE_DARK_MODE === 'true',\n  },\n\n  // UI Configuration\n  ui: {\n    theme:\n      ((import.meta as any).env?.VITE_DEFAULT_THEME as 'light' | 'dark' | 'system') || 'system',\n    sidebarCollapsed: (import.meta as any).env?.VITE_SIDEBAR_COLLAPSED === 'true',\n    animationsEnabled: (import.meta as any).env?.VITE_ANIMATIONS_ENABLED !== 'false',\n    compactMode: (import.meta as any).env?.VITE_COMPACT_MODE === 'true',\n  },\n};\n\n// =============================================================================\n// CONFIGURATION UTILITIES\n// =============================================================================\n\n/**\n * Get configuration value by path\n */\nexport const getConfig = (path: string): any => {\n  return path.split('.').reduce((obj: any, key) => obj?.[key], config);\n};\n\n/**\n * Check if feature is enabled\n */\nexport const isFeatureEnabled = (feature: keyof AppConfig['features']): boolean => {\n  return config.features[feature];\n};\n\n/**\n * Get API configuration\n */\nexport const getApiConfig = () => config.api;\n\n/**\n * Get app settings\n */\nexport const getAppSettings = () => config.settings;\n\n/**\n * Get UI configuration\n */\nexport const getUIConfig = () => config.ui;\n\n/**\n * Check if running in development\n */\nexport const isDevelopment = config.environment === 'development';\n\n/**\n * Check if running in production\n */\nexport const isProduction = config.environment === 'production';\n\n/**\n * Log configuration in development\n */\nexport const logConfig = () => {\n  if (isDevelopment) {\n    // Configuration logging removed for production\n  }\n};\n\n// Log configuration on import in development\nif (isDevelopment) {\n  logConfig();\n}\n\nexport default config;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/config/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/config/security-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[390,393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[390,393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2157,2160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2157,2160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔒 Security Configuration - UpSwitch MVP\n * Security settings for the MVP application\n */\n\n// =============================================================================\n// ENVIRONMENT DETECTION\n// =============================================================================\n\nexport const isDevelopment = (import.meta as any).env?.DEV;\nexport const isProduction = (import.meta as any).env?.PROD;\n\n// =============================================================================\n// SECURITY CONFIGURATION\n// =============================================================================\n\nexport const SECURITY_CONFIG = {\n  // Token storage\n  TOKEN_STORAGE_KEY: 'UpSwitch_token',\n  REFRESH_TOKEN_KEY: 'UpSwitch_refresh_token',\n  TOKEN_REFRESH_THRESHOLD: 300000, // 5 minutes\n  REQUEST_ID_HEADER: 'X-Request-ID',\n\n  // Content Security Policy\n  CONTENT_SECURITY_POLICY: {\n    'default-src': [\"'self'\"],\n    'script-src': [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"], // More permissive for MVP\n    'style-src': [\"'self'\", \"'unsafe-inline'\"],\n    'img-src': [\"'self'\", 'data:', 'https:', 'blob:'],\n    'connect-src': [\"'self'\", 'https:', 'wss:'],\n    'font-src': [\"'self'\", 'data:', 'https:'],\n    'object-src': [\"'none'\"],\n    'media-src': [\"'self'\", 'https:'],\n    'frame-src': [\"'none'\"],\n    'worker-src': [\"'self'\", 'blob:'],\n    'child-src': [\"'self'\", 'blob:'],\n  },\n\n  // File upload security\n  ALLOWED_FILE_TYPES: [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/svg+xml',\n    'application/pdf',\n    'text/plain',\n    'text/csv',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  ],\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n} as const;\n\n// =============================================================================\n// MONITORING CONFIGURATION\n// =============================================================================\n\nexport const MONITORING_CONFIG = {\n  // Enable monitoring in production\n  ENABLED: isProduction || (import.meta as any).env?.VITE_ENABLE_MONITORING === 'true',\n\n  // Security monitoring\n  SECURITY: {\n    REPORT_VIOLATIONS: true,\n    REPORT_THREATS: true,\n    MAX_VIOLATIONS_PER_SESSION: 100,\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/config/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔐 Supabase Client Configuration - DEPRECATED\n// Location: src/config/supabase.ts\n// Purpose: Legacy Supabase client - NOW USING BACKEND API FOR SECURITY\n//\n// ⚠️  SECURITY NOTICE: Direct Supabase access has been moved to backend\n// ⚠️  Frontend now authenticates through backend API for enhanced security\n// ⚠️  This file is kept for compatibility but should not be used for auth\n\nimport { createClient } from '@supabase/supabase-js';\n\n// Function to safely get environment variables with fallbacks\nconst getSupabaseConfig = () => {\n  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\n  // Use placeholder values if environment variables are missing\n  const finalUrl = supabaseUrl || 'https://placeholder.supabase.co';\n  const finalKey = supabaseAnonKey || 'placeholder-anon-key';\n\n  // Enhanced production error detection\n  const isProduction = import.meta.env.PROD;\n  const hasValidConfig = !!supabaseUrl && !!supabaseAnonKey;\n\n  if (isProduction && !hasValidConfig) {\n    // Production error handling removed for clean build\n  }\n\n  return {\n    url: finalUrl,\n    key: finalKey,\n    isValid: hasValidConfig,\n  };\n};\n\n// Get configuration\nconst config = getSupabaseConfig();\n\n// Create Supabase client with error handling\nlet supabase: any = null;\n\ntry {\n  supabase = createClient(config.url, config.key, {\n    auth: {\n      autoRefreshToken: config.isValid,\n      persistSession: config.isValid,\n      detectSessionInUrl: config.isValid,\n    },\n  });\n} catch (error) {\n  // Create a mock client that won't crash the app\n  supabase = {\n    auth: {\n      signUp: () => Promise.reject(new Error('Supabase not configured')),\n      signInWithPassword: () => Promise.reject(new Error('Supabase not configured')),\n      signOut: () => Promise.reject(new Error('Supabase not configured')),\n      getSession: () => Promise.resolve({ data: { session: null }, error: null }),\n      getUser: () => Promise.resolve({ data: { user: null }, error: null }),\n      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),\n      updateUser: () => Promise.reject(new Error('Supabase not configured')),\n      resetPasswordForEmail: () => Promise.reject(new Error('Supabase not configured')),\n      refreshSession: () => Promise.reject(new Error('Supabase not configured')),\n    },\n    from: () => ({\n      select: () => Promise.reject(new Error('Supabase not configured')),\n      insert: () => Promise.reject(new Error('Supabase not configured')),\n      update: () => Promise.reject(new Error('Supabase not configured')),\n      delete: () => Promise.reject(new Error('Supabase not configured')),\n      eq: () => Promise.reject(new Error('Supabase not configured')),\n      single: () => Promise.reject(new Error('Supabase not configured')),\n    }),\n  };\n}\n\nexport { supabase };\n\n// Export types for use in other files\nexport type { SupabaseClient } from '@supabase/supabase-js';\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/components/AuthModals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/components/LoginModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/components/SignupModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/components/modals/AuthModals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/hooks/useAuthModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[366,369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[366,369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":17,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'redirectInfo' is defined but never used.","line":17,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":63},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":22,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":22,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":24,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":24,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎭 Auth Modal Hook - Enhanced modal management\n// Location: src/features/authentication/hooks/useAuthModal.ts\n// Purpose: Custom hook for managing authentication modals\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\nexport type ModalType = 'signup' | 'login' | null;\n\nexport interface PostAuthRedirect {\n  url: string;\n  state?: any;\n}\n\nexport interface AuthModalContextType {\n  activeModal: ModalType;\n  postAuthRedirect: PostAuthRedirect | null;\n  openModal: (type: ModalType, redirectInfo?: PostAuthRedirect) => void;\n  closeModal: () => void;\n  clearRedirect: () => void;\n}\n\nexport const AuthModalContext = createContext<AuthModalContextType | undefined>(undefined);\n\nexport const useAuthModal = () => {\n  const context = useContext(AuthModalContext);\n  if (!context) {\n    throw new Error('useAuthModal must be used within an AuthModalProvider');\n  }\n  return context;\n};\n\nexport const AuthModalProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [activeModal, setActiveModal] = useState<ModalType>(null);\n  const [postAuthRedirect, setPostAuthRedirect] = useState<PostAuthRedirect | null>(null);\n\n  const openModal = (type: ModalType, redirectInfo?: PostAuthRedirect) => {\n    setActiveModal(type);\n    if (redirectInfo) {\n      setPostAuthRedirect(redirectInfo);\n    }\n  };\n\n  const closeModal = () => {\n    setActiveModal(null);\n  };\n\n  const clearRedirect = () => {\n    setPostAuthRedirect(null);\n  };\n\n  const value: AuthModalContextType = {\n    activeModal,\n    postAuthRedirect,\n    openModal,\n    closeModal,\n    clearRedirect,\n  };\n\n  return <AuthModalContext.Provider value={value}>{children}</AuthModalContext.Provider>;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/authentication/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/dashboard/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1770,1773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1770,1773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'tab' is defined but never used.","line":87,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'name' is defined but never used.","line":88,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📊 Dashboard Types - Business Feature\n// Location: src/features/phase1/business/dashboard/types/index.ts\n// Purpose: Type definitions for business dashboard features\n\n// Business Metrics Types\nexport interface BusinessMetrics {\n  revenue: {\n    current: number;\n    previous: number;\n    growth: number;\n  };\n  transactions: {\n    total: number;\n    pending: number;\n    completed: number;\n  };\n  inquiries: {\n    total: number;\n    responded: number;\n    responseRate: number;\n  };\n  listings: {\n    active: number;\n    views: number;\n    favorites: number;\n  };\n}\n\nexport interface MetricsFilters {\n  timeframe: 'week' | 'month' | 'quarter' | 'year';\n  dateRange: {\n    start: Date;\n    end: Date;\n  };\n}\n\n// Performance Data Types\nexport interface PerformanceData {\n  totalViews: number;\n  totalInquiries: number;\n  conversionRate: number;\n  avgTimeOnListing: string;\n  uniqueVisitors: number;\n  returnVisitors: number;\n  topCountries: { country: string; views: number }[];\n  weeklyViews: number[];\n  weeklyInquiries: number[];\n}\n\n// Listing Types\nexport interface Listing {\n  id: string;\n  title: string;\n  status: 'draft' | 'under_review' | 'published' | 'archived';\n  views: number;\n  inquiries: number;\n  created_at: string;\n  asking_price?: number;\n  currency?: string;\n  sector: string;\n  country: string;\n}\n\n// Business Info Types\nexport interface BusinessInfo {\n  name: string;\n  industry: string;\n  description: string;\n  foundedYear: number;\n  teamSize: string;\n  revenue: number;\n  location: string;\n  isRemote: boolean;\n  status?: 'active' | 'inactive' | 'draft';\n}\n\n// Dashboard Toolbar Types\nexport interface DashboardToolbarProps {\n  onRefresh?: () => void;\n  onDownload?: () => void;\n  onFullScreen?: () => void;\n  isGenerating?: boolean;\n  user?: any;\n  reportName?: string;\n  reportId?: string;\n  activeTab?: 'preview' | 'source' | 'info';\n  onTabChange?: (tab: 'preview' | 'source' | 'info') => void;\n  onReportNameChange?: (name: string) => void;\n}\n\n// Dashboard Stats Types\nexport interface DashboardStatsProps {\n  performanceData: PerformanceData;\n  isLoading?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/components/ValuationDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":282,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":282,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":282,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":282,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 Valuation Dashboard - Comprehensive Business Valuation Management\n * Location: src/features/business/components/ValuationDashboard.tsx\n * Purpose: Complete valuation dashboard matching legacy app functionality\n *\n * Features:\n * - Current valuation display with quick stats\n * - Historical valuations timeline\n * - Valuation resources and tools\n * - Modern tabbed interface\n * - Action buttons for creating/updating valuations\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { ModernTabContent, ModernTabs } from '@/shared/components/tabs/Tabs';\nimport { Card, CardBody, CardHeader } from '@heroui/react';\nimport {\n  BarChart3,\n  BookOpen,\n  Calculator,\n  FileText,\n  History,\n  Plus,\n  Sparkles,\n  Target,\n  TrendingUp,\n} from 'lucide-react';\nimport React, { useState } from 'react';\nimport ValuationReportCard from './ValuationReportCard';\n\ninterface BusinessValuation {\n  id: string;\n  estimated_value: number;\n  currency: string;\n  valuation_date: string;\n  confidence_level: 'high' | 'medium' | 'low';\n  methodology: string;\n  status: 'completed' | 'in_progress' | 'draft' | 'expired';\n  last_updated?: string;\n  revenue_multiple?: number;\n  ebitda_multiple?: number;\n  industry_average?: number;\n  market_conditions?: string;\n  key_drivers?: string[];\n  risk_factors?: string[];\n  next_review_date?: string;\n}\n\ninterface ValuationDashboardProps {\n  currentValuation?: BusinessValuation | null;\n  historicalValuations?: BusinessValuation[];\n  onCreateValuation?: () => void;\n  onUpdateValuation?: () => void;\n  onCreateListing?: () => void;\n}\n\nconst ValuationDashboard: React.FC<ValuationDashboardProps> = ({\n  currentValuation,\n  historicalValuations = [],\n  onCreateValuation,\n  onUpdateValuation,\n  onCreateListing,\n}) => {\n  const [selectedTab, setSelectedTab] = useState('current');\n\n  // Define tabs for the ModernTabs component\n  const valuationTabs = [\n    {\n      id: 'current',\n      label: 'Current Valuation',\n      icon: <Calculator className=\"w-4 h-4\" />,\n    },\n    {\n      id: 'history',\n      label: 'Valuation History',\n      icon: <History className=\"w-4 h-4\" />,\n      badge: historicalValuations.length > 0 ? historicalValuations.length.toString() : undefined,\n    },\n    {\n      id: 'resources',\n      label: 'Resources',\n      icon: <BookOpen className=\"w-4 h-4\" />,\n    },\n  ];\n\n  const getValuationTrend = () => {\n    if (!historicalValuations.length || historicalValuations.length < 2) return null;\n\n    const sortedValuations = [...historicalValuations].sort(\n      (a, b) => new Date(a.valuation_date).getTime() - new Date(b.valuation_date).getTime()\n    );\n\n    const latest = sortedValuations[sortedValuations.length - 1];\n    const previous = sortedValuations[sortedValuations.length - 2];\n\n    const change =\n      ((latest.estimated_value - previous.estimated_value) / previous.estimated_value) * 100;\n    return {\n      change,\n      isPositive: change > 0,\n      previousValue: previous.estimated_value,\n      latestValue: latest.estimated_value,\n    };\n  };\n\n  const trend = getValuationTrend();\n\n  const handleCreateValuation = () => {\n    if (onCreateValuation) {\n      onCreateValuation();\n    }\n  };\n\n  const handleUpdateValuation = () => {\n    if (onUpdateValuation) {\n      onUpdateValuation();\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Dashboard Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Business Valuation</h2>\n          <p className=\"text-gray-600\">Manage and track your business valuation over time</p>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {currentValuation && (\n            <Button\n              variant=\"tertiary\"\n              startContent={<TrendingUp className=\"w-4 h-4\" />}\n              onPress={handleUpdateValuation}\n            >\n              Update Valuation\n            </Button>\n          )}\n          <Button\n            variant=\"primary\"\n            startContent={<Plus className=\"w-4 h-4\" />}\n            onPress={handleCreateValuation}\n          >\n            {currentValuation ? 'New Valuation' : 'Start Valuation'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      {currentValuation && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"border border-gray-200\">\n            <CardBody className=\"text-center p-4\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                €{(currentValuation.estimated_value / 1000).toFixed(0)}K\n              </div>\n              <div className=\"text-sm text-gray-600\">Current Value</div>\n            </CardBody>\n          </Card>\n\n          <Card className=\"border border-gray-200\">\n            <CardBody className=\"text-center p-4\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {currentValuation.confidence_level.toUpperCase()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Confidence</div>\n            </CardBody>\n          </Card>\n\n          <Card className=\"border border-gray-200\">\n            <CardBody className=\"text-center p-4\">\n              <div\n                className={`text-2xl font-bold ${trend?.isPositive ? 'text-green-600' : trend?.change ? 'text-red-600' : 'text-gray-900'}`}\n              >\n                {trend ? `${trend.isPositive ? '+' : ''}${trend.change.toFixed(1)}%` : 'N/A'}\n              </div>\n              <div className=\"text-sm text-gray-600\">vs. Previous</div>\n            </CardBody>\n          </Card>\n\n          <Card className=\"border border-gray-200\">\n            <CardBody className=\"text-center p-4\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {historicalValuations.length + (currentValuation ? 1 : 0)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Reports</div>\n            </CardBody>\n          </Card>\n        </div>\n      )}\n\n      {/* Main Content Tabs */}\n      <ModernTabs\n        tabs={valuationTabs}\n        activeTab={selectedTab}\n        onTabChange={setSelectedTab}\n        variant=\"pills\"\n        size=\"md\"\n        className=\"w-full\"\n      >\n        <div className=\"mt-6\">\n          <ModernTabContent tabId=\"current\">\n            <div className=\"space-y-6\">\n              {/* Financial Disclaimer */}\n              <Card className=\"border border-amber-200 bg-amber-50\">\n                <CardBody className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-6 h-6 bg-amber-100 rounded-full flex items-center justify-center\">\n                        <span className=\"text-amber-600 text-sm font-bold\">!</span>\n                      </div>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-sm font-medium text-amber-800 mb-1\">\n                        Financial Disclaimer\n                      </h4>\n                      <p className=\"text-sm text-amber-700\">\n                        This valuation is for informational purposes only and should not be\n                        considered as financial advice. Consult with a qualified professional for\n                        investment decisions.\n                      </p>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n\n              {/* Current Valuation Report */}\n              <ValuationReportCard\n                report={currentValuation}\n                onView={() => {}}\n                onDownload={() => {}}\n                onShare={() => {}}\n                onEdit={() => {}}\n                onCreateListing={onCreateListing}\n              />\n            </div>\n          </ModernTabContent>\n\n          <ModernTabContent tabId=\"history\">\n            <div className=\"space-y-6\">\n              {historicalValuations.length === 0 ? (\n                <Card className=\"border border-gray-200\">\n                  <CardBody className=\"text-center py-12\">\n                    <History className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                      No Historical Valuations\n                    </h3>\n                    <p className=\"text-gray-600 mb-6\">\n                      Your valuation history will appear here as you create new reports over time.\n                    </p>\n                    <Button\n                      variant=\"primary\"\n                      onPress={handleCreateValuation}\n                      startContent={<Plus className=\"w-4 h-4\" />}\n                    >\n                      Create First Valuation\n                    </Button>\n                  </CardBody>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Valuation Timeline Chart */}\n                  <Card className=\"border border-gray-200\">\n                    <CardHeader>\n                      <div className=\"flex items-center space-x-2\">\n                        <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n                        <h3 className=\"font-semibold text-gray-900\">Valuation Trend</h3>\n                      </div>\n                    </CardHeader>\n                    <CardBody className=\"pt-0\">\n                      <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\n                        <div className=\"text-center\">\n                          <BarChart3 className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-gray-500\">Chart visualization would go here</p>\n                        </div>\n                      </div>\n                    </CardBody>\n                  </Card>\n\n                  {/* Historical Reports List */}\n                  <div className=\"space-y-3\">\n                    {historicalValuations.map((valuation, index) => (\n                      <Card key={valuation.id} className=\"border border-gray-200\">\n                        <CardBody className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"p-2 bg-gray-100 rounded-lg\">\n                                <FileText className=\"w-5 h-5 text-gray-600\" />\n                              </div>\n                              <div>\n                                <h4 className=\"font-semibold text-gray-900\">\n                                  €{valuation.estimated_value.toLocaleString()}\n                                </h4>\n                                <p className=\"text-sm text-gray-600\">\n                                  {new Date(valuation.valuation_date).toLocaleDateString()} •{' '}\n                                  {valuation.methodology}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div\n                                className={`px-2 py-1 rounded-full text-xs font-medium ${\n                                  valuation.confidence_level === 'high'\n                                    ? 'bg-gray-100 text-green-700'\n                                    : valuation.confidence_level === 'medium'\n                                      ? 'bg-gray-100 text-gray-700'\n                                      : 'bg-gray-100 text-red-700'\n                                }`}\n                              >\n                                {valuation.confidence_level.toUpperCase()}\n                              </div>\n                              <Button size=\"sm\" variant=\"tertiary\">\n                                View Details\n                              </Button>\n                            </div>\n                          </div>\n                        </CardBody>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </ModernTabContent>\n\n          <ModernTabContent tabId=\"resources\">\n            <div className=\"space-y-6\">\n              {/* Valuation Resources */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card className=\"border border-gray-200 shadow-sm\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <Calculator className=\"w-8 h-8 text-gray-600\" />\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">Valuation Calculator</h3>\n                        <p className=\"text-gray-600 text-sm\">Quick estimate using multiples</p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"primary\"\n                      className=\"w-full\"\n                      endContent={<Sparkles className=\"w-4 h-4\" />}\n                    >\n                      Try Calculator\n                    </Button>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-gray-200 shadow-sm\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <BookOpen className=\"w-8 h-8 text-gray-600\" />\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">Valuation Guide</h3>\n                        <p className=\"text-gray-600 text-sm\">Learn valuation methods</p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"primary\"\n                      className=\"w-full\"\n                      endContent={<BookOpen className=\"w-4 h-4\" />}\n                    >\n                      Read Guide\n                    </Button>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-gray-200 shadow-sm\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <Target className=\"w-8 h-8 text-gray-600\" />\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">Industry Benchmarks</h3>\n                        <p className=\"text-gray-600 text-sm\">Compare with similar businesses</p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"primary\"\n                      className=\"w-full\"\n                      endContent={<Target className=\"w-4 h-4\" />}\n                    >\n                      View Benchmarks\n                    </Button>\n                  </CardBody>\n                </Card>\n\n                <Card className=\"border border-gray-200 shadow-sm\">\n                  <CardBody className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <TrendingUp className=\"w-8 h-8 text-gray-600\" />\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">Market Trends</h3>\n                        <p className=\"text-gray-600 text-sm\">Current M&A market insights</p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"primary\"\n                      className=\"w-full\"\n                      endContent={<TrendingUp className=\"w-4 h-4\" />}\n                    >\n                      View Trends\n                    </Button>\n                  </CardBody>\n                </Card>\n              </div>\n            </div>\n          </ModernTabContent>\n        </div>\n      </ModernTabs>\n    </div>\n  );\n};\n\nexport default ValuationDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/components/ValuationReportCard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":43,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":44,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":45,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":46,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":47,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📈 Valuation Report Card - MVP Version\n// Location: src/features/business-dashboard/components/ValuationReportCard.tsx\n// Purpose: Business valuation report display card\n\nimport { Button } from '@/shared/components/buttons';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport {\n  AlertCircle,\n  BarChart3,\n  Calendar,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  Download,\n  Eye,\n  FileText,\n  Rocket,\n  Share2,\n  TrendingUp,\n} from 'lucide-react';\nimport * as React from 'react';\n\ninterface ValuationReport {\n  id: string;\n  estimated_value: number;\n  currency: string;\n  valuation_date: string;\n  confidence_level: 'high' | 'medium' | 'low';\n  methodology: string;\n  status: 'completed' | 'in_progress' | 'draft' | 'expired';\n  last_updated?: string;\n  revenue_multiple?: number;\n  ebitda_multiple?: number;\n  industry_average?: number;\n  market_conditions?: string;\n  key_drivers?: string[];\n  risk_factors?: string[];\n  next_review_date?: string;\n}\n\ninterface ValuationReportCardProps {\n  report: ValuationReport;\n  onView?: (reportId: string) => void;\n  onDownload?: (reportId: string) => void;\n  onShare?: (reportId: string) => void;\n  onEdit?: (reportId: string) => void;\n  onCreateListing?: (reportId: string) => void;\n}\n\nconst ValuationReportCard: React.FC<ValuationReportCardProps> = ({\n  report,\n  onView,\n  onDownload,\n  onShare,\n  onEdit,\n  onCreateListing,\n}) => {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'draft':\n        return 'default';\n      case 'expired':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'in_progress':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'draft':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'expired':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getConfidenceColor = (level: string) => {\n    switch (level) {\n      case 'high':\n        return 'success';\n      case 'medium':\n        return 'warning';\n      case 'low':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Business Valuation Report</h3>\n              <p className=\"text-sm text-gray-500\">{formatDate(report.valuation_date)}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Chip\n              color={getStatusColor(report.status)}\n              variant=\"flat\"\n              size=\"sm\"\n              startContent={getStatusIcon(report.status)}\n            >\n              {report.status.replace('_', ' ')}\n            </Chip>\n            <Chip color={getConfidenceColor(report.confidence_level)} variant=\"flat\" size=\"sm\">\n              {report.confidence_level} confidence\n            </Chip>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardBody className=\"pt-0\">\n        {/* Valuation Amount */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <DollarSign className=\"w-5 h-5 text-green-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">Estimated Value</span>\n          </div>\n          <div className=\"text-3xl font-bold text-gray-900\">\n            {formatCurrency(report.estimated_value, report.currency)}\n          </div>\n          {report.industry_average && (\n            <div className=\"text-sm text-gray-500 mt-1\">\n              Industry average: {formatCurrency(report.industry_average, report.currency)}\n            </div>\n          )}\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          {report.revenue_multiple && (\n            <div className=\"bg-gray-50 p-3 rounded-lg\">\n              <div className=\"text-sm text-gray-600\">Revenue Multiple</div>\n              <div className=\"text-lg font-semibold text-gray-900\">{report.revenue_multiple}x</div>\n            </div>\n          )}\n          {report.ebitda_multiple && (\n            <div className=\"bg-gray-50 p-3 rounded-lg\">\n              <div className=\"text-sm text-gray-600\">EBITDA Multiple</div>\n              <div className=\"text-lg font-semibold text-gray-900\">{report.ebitda_multiple}x</div>\n            </div>\n          )}\n        </div>\n\n        {/* Methodology */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <TrendingUp className=\"w-4 h-4 text-blue-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">Methodology</span>\n          </div>\n          <p className=\"text-sm text-gray-700\">{report.methodology}</p>\n        </div>\n\n        {/* Key Drivers */}\n        {report.key_drivers && report.key_drivers.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"text-sm font-medium text-gray-600 mb-2\">Key Drivers</div>\n            <div className=\"flex flex-wrap gap-2\">\n              {report.key_drivers.slice(0, 3).map((driver, index) => (\n                <Chip key={index} size=\"sm\" variant=\"flat\" color=\"primary\">\n                  {driver}\n                </Chip>\n              ))}\n              {report.key_drivers.length > 3 && (\n                <Chip size=\"sm\" variant=\"flat\" color=\"default\">\n                  +{report.key_drivers.length - 3} more\n                </Chip>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Risk Factors */}\n        {report.risk_factors && report.risk_factors.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"text-sm font-medium text-gray-600 mb-2\">Risk Factors</div>\n            <div className=\"flex flex-wrap gap-2\">\n              {report.risk_factors.slice(0, 2).map((risk, index) => (\n                <Chip key={index} size=\"sm\" variant=\"flat\" color=\"warning\">\n                  {risk}\n                </Chip>\n              ))}\n              {report.risk_factors.length > 2 && (\n                <Chip size=\"sm\" variant=\"flat\" color=\"default\">\n                  +{report.risk_factors.length - 2} more\n                </Chip>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Market Conditions */}\n        {report.market_conditions && (\n          <div className=\"mb-6\">\n            <div className=\"text-sm font-medium text-gray-600 mb-2\">Market Conditions</div>\n            <p className=\"text-sm text-gray-700\">{report.market_conditions}</p>\n          </div>\n        )}\n\n        {/* Next Review Date */}\n        {report.next_review_date && (\n          <div className=\"mb-6\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Calendar className=\"w-4 h-4 text-gray-600\" />\n              <span className=\"text-sm font-medium text-gray-600\">Next Review</span>\n            </div>\n            <p className=\"text-sm text-gray-700\">{formatDate(report.next_review_date)}</p>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={() => onView?.(report.id)}\n              className=\"flex items-center space-x-2\"\n            >\n              <Eye className=\"w-4 h-4\" />\n              <span>View</span>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={() => onDownload?.(report.id)}\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>Download</span>\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              onClick={() => onShare?.(report.id)}\n              className=\"flex items-center space-x-2\"\n            >\n              <Share2 className=\"w-4 h-4\" />\n              <span>Share</span>\n            </Button>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {onCreateListing && (\n              <Button\n                size=\"sm\"\n                variant=\"primary\"\n                startContent={<Rocket className=\"w-4 h-4\" />}\n                onClick={() => onCreateListing(report.id)}\n              >\n                Create Listing\n              </Button>\n            )}\n            {report.status === 'draft' && (\n              <Button size=\"sm\" variant=\"secondary\" onClick={() => onEdit?.(report.id)}>\n                Edit Report\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ValuationReportCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/hooks/useBusinessValuation.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":5,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":5,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":5,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":5,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'inputs' is defined but never used.","line":56,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'name' is defined but never used.","line":58,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":59,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'format' is defined but never used.","line":60,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'industryMultiples' is assigned a value but never used.","line":78,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'industryMultiples' is assigned a value but never used.","line":78,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'projectedRevenue' is assigned a value but never used.","line":97,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projectedRevenue' is assigned a value but never used.","line":97,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'name' is defined but never used.","line":238,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":238,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'name' is defined but never used.","line":238,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":248,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":248,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'inputs'. Either exclude it or remove the dependency array.","line":252,"column":5,"nodeType":"ArrayExpression","endLine":252,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [results]","fix":{"range":[7544,7561],"text":"[results]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":256,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":256,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":256,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":269,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":269,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":285,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":285,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'inputs'. Either exclude it or remove the dependency array.","line":289,"column":5,"nodeType":"ArrayExpression","endLine":289,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [results]","fix":{"range":[8524,8541],"text":"[results]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏪 Business Valuation Hook - MVP Version\n// Location: src/features/business-dashboard/hooks/useBusinessValuation.ts\n// Purpose: Handle business valuation calculations, scenarios, and reports\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\n// Types\ninterface ValuationInputs {\n  // Financial metrics\n  revenue: number;\n  ebitda: number;\n  netIncome: number;\n  totalAssets: number;\n  totalDebt: number;\n\n  // Business metrics\n  industryGrowthRate: number;\n  marketPosition: 'leader' | 'competitor' | 'follower';\n\n  // Risk factors\n  customerConcentration: number; // 0-100%\n  keyPersonDependency: 'high' | 'medium' | 'low';\n  marketRisk: 'high' | 'medium' | 'low';\n}\n\ninterface ValuationResults {\n  // Multiple valuations\n  dcfValuation: number;\n  marketMultipleValuation: number;\n  assetBasedValuation: number;\n\n  // Range and final estimate\n  valuationRange: {\n    min: number;\n    max: number;\n    median: number;\n  };\n\n  // Key metrics\n  ebitdaMultiple: number;\n  revenueMultiple: number;\n\n  // Risk adjustments\n  riskAdjustedValue: number;\n  confidenceLevel: 'high' | 'medium' | 'low';\n}\n\ninterface UseBusinessValuationReturn {\n  // Data\n  inputs: ValuationInputs;\n  results: ValuationResults | null;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  updateInputs: (inputs: Partial<ValuationInputs>) => void;\n  calculateValuation: () => Promise<void>;\n  saveValuation: (name: string) => Promise<string>;\n  loadValuation: (id: string) => Promise<void>;\n  exportValuation: (format: 'pdf' | 'excel') => Promise<void>;\n}\n\n// Default inputs\nconst defaultInputs: ValuationInputs = {\n  revenue: 1000000,\n  ebitda: 200000,\n  netIncome: 150000,\n  totalAssets: 800000,\n  totalDebt: 200000,\n  industryGrowthRate: 5,\n  marketPosition: 'competitor',\n  customerConcentration: 30,\n  keyPersonDependency: 'medium',\n  marketRisk: 'medium',\n};\n\n// Industry multiples (simplified)\nconst industryMultiples = {\n  technology: { revenue: 3.5, ebitda: 12 },\n  retail: { revenue: 1.2, ebitda: 8 },\n  manufacturing: { revenue: 1.8, ebitda: 10 },\n  services: { revenue: 2.5, ebitda: 9 },\n  healthcare: { revenue: 4.0, ebitda: 15 },\n};\n\nexport const useBusinessValuation = (): UseBusinessValuationReturn => {\n  const [inputs, setInputs] = useState<ValuationInputs>(defaultInputs);\n  const [results, setResults] = useState<ValuationResults | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Calculate DCF valuation\n  const calculateDCF = useCallback((inputs: ValuationInputs): number => {\n    const { revenue, ebitda, industryGrowthRate } = inputs;\n\n    // Simplified DCF calculation\n    const projectedRevenue = revenue * (1 + industryGrowthRate / 100);\n    const projectedEBITDA = ebitda * (1 + industryGrowthRate / 100);\n    const terminalValue = projectedEBITDA * 10; // 10x EBITDA multiple\n    const presentValue = terminalValue / (1 + 0.1); // 10% discount rate\n\n    return Math.round(presentValue);\n  }, []);\n\n  // Calculate market multiple valuation\n  const calculateMarketMultiple = useCallback((inputs: ValuationInputs): number => {\n    const { revenue, ebitda } = inputs;\n\n    // Use average industry multiples (simplified)\n    const avgRevenueMultiple = 2.5;\n    const avgEBITDAMultiple = 10;\n\n    const revenueBasedValue = revenue * avgRevenueMultiple;\n    const ebitdaBasedValue = ebitda * avgEBITDAMultiple;\n\n    return Math.round((revenueBasedValue + ebitdaBasedValue) / 2);\n  }, []);\n\n  // Calculate asset-based valuation\n  const calculateAssetBased = useCallback((inputs: ValuationInputs): number => {\n    const { totalAssets, totalDebt } = inputs;\n    return Math.round(totalAssets - totalDebt);\n  }, []);\n\n  // Calculate risk adjustment\n  const calculateRiskAdjustment = useCallback((inputs: ValuationInputs): number => {\n    let riskFactor = 1.0;\n\n    // Customer concentration risk\n    if (inputs.customerConcentration > 50) riskFactor -= 0.1;\n    else if (inputs.customerConcentration > 30) riskFactor -= 0.05;\n\n    // Key person dependency risk\n    if (inputs.keyPersonDependency === 'high') riskFactor -= 0.15;\n    else if (inputs.keyPersonDependency === 'medium') riskFactor -= 0.08;\n\n    // Market risk\n    if (inputs.marketRisk === 'high') riskFactor -= 0.1;\n    else if (inputs.marketRisk === 'medium') riskFactor -= 0.05;\n\n    return Math.max(0.5, riskFactor); // Minimum 50% of original value\n  }, []);\n\n  // Calculate confidence level\n  const calculateConfidenceLevel = useCallback(\n    (inputs: ValuationInputs): 'high' | 'medium' | 'low' => {\n      let score = 0;\n\n      // Revenue stability\n      if (inputs.revenue > 500000) score += 1;\n\n      // Profitability\n      if (inputs.ebitda > inputs.revenue * 0.15) score += 1;\n\n      // Customer concentration\n      if (inputs.customerConcentration < 30) score += 1;\n\n      // Key person dependency\n      if (inputs.keyPersonDependency === 'low') score += 1;\n\n      // Market risk\n      if (inputs.marketRisk === 'low') score += 1;\n\n      if (score >= 4) return 'high';\n      if (score >= 2) return 'medium';\n      return 'low';\n    },\n    []\n  );\n\n  // Calculate valuation\n  const calculateValuation = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Calculate different valuation methods\n      const dcfValuation = calculateDCF(inputs);\n      const marketMultipleValuation = calculateMarketMultiple(inputs);\n      const assetBasedValuation = calculateAssetBased(inputs);\n\n      // Calculate range\n      const valuations = [dcfValuation, marketMultipleValuation, assetBasedValuation];\n      const min = Math.min(...valuations);\n      const max = Math.max(...valuations);\n      const median = valuations.sort((a, b) => a - b)[1];\n\n      // Calculate multiples\n      const ebitdaMultiple = marketMultipleValuation / inputs.ebitda;\n      const revenueMultiple = marketMultipleValuation / inputs.revenue;\n\n      // Apply risk adjustment\n      const riskFactor = calculateRiskAdjustment(inputs);\n      const riskAdjustedValue = Math.round(median * riskFactor);\n\n      // Calculate confidence level\n      const confidenceLevel = calculateConfidenceLevel(inputs);\n\n      const valuationResults: ValuationResults = {\n        dcfValuation,\n        marketMultipleValuation,\n        assetBasedValuation,\n        valuationRange: { min, max, median },\n        ebitdaMultiple,\n        revenueMultiple,\n        riskAdjustedValue,\n        confidenceLevel,\n      };\n\n      setResults(valuationResults);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to calculate valuation');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [\n    inputs,\n    calculateDCF,\n    calculateMarketMultiple,\n    calculateAssetBased,\n    calculateRiskAdjustment,\n    calculateConfidenceLevel,\n  ]);\n\n  // Update inputs\n  const updateInputs = useCallback((newInputs: Partial<ValuationInputs>) => {\n    setInputs(prev => ({\n      ...prev,\n      ...newInputs,\n    }));\n  }, []);\n\n  // Save valuation\n  const saveValuation = useCallback(\n    async (name: string): Promise<string> => {\n      if (!results) throw new Error('No valuation results to save');\n\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        const valuationId = `val_${Date.now()}`;\n\n        return valuationId;\n      } catch (err) {\n        throw new Error('Failed to save valuation');\n      }\n    },\n    [results, inputs]\n  );\n\n  // Load valuation\n  const loadValuation = useCallback(async (id: string): Promise<void> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In a real implementation, this would load from the API\n\n      // For now, just reset to defaults\n      setInputs(defaultInputs);\n      setResults(null);\n    } catch (err) {\n      setError('Failed to load valuation');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Export valuation\n  const exportValuation = useCallback(\n    async (format: 'pdf' | 'excel'): Promise<void> => {\n      if (!results) throw new Error('No valuation results to export');\n\n      try {\n        // Simulate export process\n\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (err) {\n        throw new Error(`Failed to export valuation as ${format.toUpperCase()}`);\n      }\n    },\n    [results, inputs]\n  );\n\n  return {\n    inputs,\n    results,\n    isLoading,\n    error,\n    updateInputs,\n    calculateValuation,\n    saveValuation,\n    loadValuation,\n    exportValuation,\n  };\n};\n\nexport default useBusinessValuation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/valuation/types/index.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":69,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":70,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":75,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":76,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":77,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":78,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'inputs' is defined but never used.","line":86,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":87,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'updates' is defined but never used.","line":87,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":63},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":88,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 💰 Valuation Types - Business Feature\n// Location: src/features/phase1/business/valuation/types/index.ts\n// Purpose: Type definitions for valuation features\n\n// Business Valuation Types\nexport interface ValuationInputs {\n  // Financial metrics\n  revenue: number;\n  ebitda: number;\n  netIncome: number;\n  totalAssets: number;\n  totalDebt: number;\n\n  // Business metrics\n  industryGrowthRate: number;\n  marketPosition: 'leader' | 'competitor' | 'follower';\n\n  // Risk factors\n  customerConcentration: number; // 0-100%\n  keyPersonDependency: 'high' | 'medium' | 'low';\n  marketRisk: 'high' | 'medium' | 'low';\n}\n\nexport interface ValuationResults {\n  // Multiple valuations\n  dcfValuation: number;\n  marketMultipleValuation: number;\n  assetBasedValuation: number;\n\n  // Range and final estimate\n  valuationRange: {\n    min: number;\n    max: number;\n    median: number;\n  };\n\n  // Key metrics\n  ebitdaMultiple: number;\n  revenueMultiple: number;\n\n  // Risk adjustments\n  riskAdjustedValue: number;\n  confidenceLevel: 'high' | 'medium' | 'low';\n}\n\nexport interface ValuationReport {\n  id: string;\n  estimated_value: number;\n  currency: string;\n  valuation_date: string;\n  confidence_level: 'high' | 'medium' | 'low';\n  methodology: string;\n  status: 'completed' | 'in_progress' | 'draft' | 'expired';\n  last_updated?: string;\n  revenue_multiple?: number;\n  ebitda_multiple?: number;\n  industry_average?: number;\n  market_conditions?: string;\n  key_drivers?: string[];\n  risk_factors?: string[];\n  next_review_date?: string;\n}\n\n// Valuation Dashboard Types\nexport interface ValuationDashboardProps {\n  reports: ValuationReport[];\n  isLoading?: boolean;\n  onGenerateReport?: () => void;\n  onViewReport?: (reportId: string) => void;\n  onDeleteReport?: (reportId: string) => void;\n}\n\nexport interface ValuationReportCardProps {\n  report: ValuationReport;\n  onView?: (reportId: string) => void;\n  onDownload?: (reportId: string) => void;\n  onShare?: (reportId: string) => void;\n  onEdit?: (reportId: string) => void;\n}\n\n// Valuation Hook Types\nexport interface UseBusinessValuationReturn {\n  reports: ValuationReport[];\n  isLoading: boolean;\n  error: string | null;\n  generateReport: (inputs: ValuationInputs) => Promise<void>;\n  updateReport: (id: string, updates: Partial<ValuationReport>) => Promise<void>;\n  deleteReport: (id: string) => Promise<void>;\n  refreshReports: () => Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/components/ListingWizardModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'businessInfo?.description', 'businessInfo?.foundedYear', 'businessInfo?.industry', 'businessInfo?.isRemote', 'businessInfo?.location', 'businessInfo?.name', 'businessInfo?.teamSize', 'businessInfo?.website', 'valuationData?.businessType', 'valuationData?.ebitda2023', 'valuationData?.ebitda2024', 'valuationData?.ebitda2025', 'valuationData?.estimated_value', 'valuationData?.revenue2023', 'valuationData?.revenue2024', 'valuationData?.revenue2025', 'valuationData?.sharesForSale', 'valuationData?.valuation_confidence', and 'valuationData?.valuation_methodology'. Either include them or remove the dependency array. If 'setWizardData' needs the current value of 'businessInfo.name', you can also switch to useReducer instead of useState and read 'businessInfo.name' in the reducer.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [businessInfo?.description, businessInfo?.foundedYear, businessInfo?.industry, businessInfo?.isRemote, businessInfo?.location, businessInfo?.name, businessInfo?.teamSize, businessInfo?.website, isOpen, valuationData?.businessType, valuationData?.ebitda2023, valuationData?.ebitda2024, valuationData?.ebitda2025, valuationData?.estimated_value, valuationData?.revenue2023, valuationData?.revenue2024, valuationData?.revenue2025, valuationData?.sharesForSale, valuationData?.valuation_confidence, valuationData?.valuation_methodology]","fix":{"range":[3726,3734],"text":"[businessInfo?.description, businessInfo?.foundedYear, businessInfo?.industry, businessInfo?.isRemote, businessInfo?.location, businessInfo?.name, businessInfo?.teamSize, businessInfo?.website, isOpen, valuationData?.businessType, valuationData?.ebitda2023, valuationData?.ebitda2024, valuationData?.ebitda2025, valuationData?.estimated_value, valuationData?.revenue2023, valuationData?.revenue2024, valuationData?.revenue2025, valuationData?.sharesForSale, valuationData?.valuation_confidence, valuationData?.valuation_methodology]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏢 Listing Wizard Modal - Modular Architecture\n// Location: src/features/phase1/business/wizard/components/ListingWizardModal.tsx\n// Purpose: Main modal orchestrating the listing creation wizard\n\nimport { FullscreenModal } from '@/shared/components/modals/foundations/FullscreenModal';\nimport React, { useEffect, useState } from 'react';\n\n// Step Components\nimport BasicInfoStep from '../steps/BasicInfoStep';\nimport BusinessDetailsStep from '../steps/BusinessDetailsStep';\nimport DocumentsStep from '../steps/DocumentsStep';\nimport FinancialInfoStep from '../steps/FinancialInfoStep';\nimport PrivacySettingsStep from '../steps/PrivacySettingsStep';\nimport ReviewStep from '../steps/ReviewStep';\nimport SaleDetailsStep from '../steps/SaleDetailsStep';\n\n// Shared Components\nimport StepIndicator from './StepIndicator';\nimport WizardNavigation from './WizardNavigation';\n\n// Types\nimport { ListingWizardData, ListingWizardModalProps } from '../types';\n\nconst ListingWizardModal: React.FC<ListingWizardModalProps> = ({\n  isOpen,\n  onClose,\n  onComplete,\n  businessInfo,\n  valuationData,\n  valuationReports = [],\n}) => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [wizardData, setWizardData] = useState<Partial<ListingWizardData>>({});\n\n  const totalSteps = 7;\n\n  // Initialize wizard data with business profile data or defaults\n  useEffect(() => {\n    if (isOpen) {\n      setWizardData({\n        basicInfo: {\n          name: businessInfo?.name || '',\n          description: businessInfo?.description || '',\n          industry: businessInfo?.industry || '',\n          location: businessInfo?.location || '',\n          isRemote: businessInfo?.isRemote || false,\n          foundedYear: businessInfo?.foundedYear || new Date().getFullYear(),\n          teamSize: businessInfo?.teamSize || '',\n          website: businessInfo?.website || '',\n          business_model: '', // Not available in business profile, will be filled by user\n        },\n        financialInfo: {\n          businessType: valuationData?.businessType || 'company',\n          sharesForSale: valuationData?.sharesForSale || 100,\n          revenue2025: valuationData?.revenue2025 || 0,\n          revenue2024: valuationData?.revenue2024 || 0,\n          revenue2023: valuationData?.revenue2023 || 0,\n          ebitda2025: valuationData?.ebitda2025 || 0,\n          ebitda2024: valuationData?.ebitda2024 || 0,\n          ebitda2023: valuationData?.ebitda2023 || 0,\n          asking_price: valuationData?.estimated_value?.toString() || '',\n          price_negotiable: true,\n          currency: 'EUR',\n          estimated_value: valuationData?.estimated_value,\n          valuation_confidence: valuationData?.valuation_confidence,\n          valuation_methodology: valuationData?.valuation_methodology,\n        },\n        businessDetails: {\n          key_products: '',\n          target_market: '',\n          competitive_advantage: '',\n          growth_opportunities: '',\n          key_assets: '',\n          operational_highlights: '',\n        },\n        saleDetails: {\n          reason_for_sale: '',\n          preferred_timeline: '',\n          included_assets: [],\n          excluded_assets: [],\n          transition_support: '',\n          staff_retention: '',\n        },\n        privacySettings: {\n          anonymous_listing: true,\n          requires_nda: true,\n          hide_financials: false,\n          hide_location: false,\n          hide_industry_details: false,\n          teaser_description: '',\n        },\n        documents: {\n          financial: null,\n          legal: null,\n          operations: null,\n          marketing: null,\n          other: null,\n        },\n      });\n    }\n  }, [isOpen]);\n\n  // Pre-populate form data when modal opens\n  useEffect(() => {\n    if (isOpen && businessInfo) {\n      setWizardData(prev => ({\n        ...prev,\n        basicInfo: {\n          ...prev.basicInfo!,\n          name: businessInfo.name\n            ? `${businessInfo.name} - Business for Sale`\n            : prev.basicInfo!.name,\n          description: businessInfo.description || prev.basicInfo!.description,\n          industry: businessInfo.industry || prev.basicInfo!.industry,\n          location: businessInfo.location || prev.basicInfo!.location,\n          isRemote: businessInfo.isRemote || prev.basicInfo!.isRemote,\n          foundedYear: businessInfo.foundedYear || prev.basicInfo!.foundedYear,\n          teamSize: businessInfo.teamSize || prev.basicInfo!.teamSize,\n        },\n      }));\n    }\n\n    if (isOpen && valuationData) {\n      setWizardData(prev => ({\n        ...prev,\n        financialInfo: {\n          ...prev.financialInfo!,\n          businessType: valuationData.businessType || prev.financialInfo!.businessType,\n          sharesForSale: valuationData.sharesForSale || prev.financialInfo!.sharesForSale,\n          revenue2025: valuationData.revenue2025 || prev.financialInfo!.revenue2025,\n          revenue2024: valuationData.revenue2024 || prev.financialInfo!.revenue2024,\n          revenue2023: valuationData.revenue2023 || prev.financialInfo!.revenue2023,\n          ebitda2025: valuationData.ebitda2025 || prev.financialInfo!.ebitda2025,\n          ebitda2024: valuationData.ebitda2024 || prev.financialInfo!.ebitda2024,\n          ebitda2023: valuationData.ebitda2023 || prev.financialInfo!.ebitda2023,\n          estimated_value: valuationData.estimated_value || prev.financialInfo!.estimated_value,\n          valuation_confidence:\n            valuationData.valuation_confidence || prev.financialInfo!.valuation_confidence,\n          valuation_methodology:\n            valuationData.valuation_methodology || prev.financialInfo!.valuation_methodology,\n          asking_price: valuationData.estimated_value\n            ? valuationData.estimated_value.toString()\n            : prev.financialInfo!.asking_price,\n        },\n        privacySettings: {\n          ...prev.privacySettings!,\n          anonymous_listing: true,\n          requires_nda: true,\n          hide_financials: false,\n          hide_location: false,\n          hide_industry_details: false,\n        },\n      }));\n    }\n  }, [isOpen, businessInfo, valuationData]);\n\n  const handleDataChange = (stepData: Partial<ListingWizardData>) => {\n    setWizardData(prev => ({\n      ...prev,\n      ...stepData,\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  const handleComplete = async () => {\n    setIsSubmitting(true);\n    try {\n      // Here you would typically send the data to your API\n      // TODO: Implement API call to submit listing data\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      if (onComplete) {\n        onComplete(wizardData as ListingWizardData);\n      }\n\n      onClose();\n    } catch {\n      // TODO: Handle error properly (show user notification, etc.)\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const canProceed = (): boolean => {\n    // Add validation logic for each step\n    switch (currentStep) {\n      case 1:\n        return !!(\n          wizardData.basicInfo?.name &&\n          wizardData.basicInfo?.description &&\n          wizardData.basicInfo?.industry\n        );\n      case 2:\n        return !!wizardData.financialInfo?.asking_price;\n      case 3:\n        return !!(\n          wizardData.businessDetails?.key_products && wizardData.businessDetails?.target_market\n        );\n      case 4:\n        return !!(\n          wizardData.saleDetails?.reason_for_sale && wizardData.saleDetails?.preferred_timeline\n        );\n      case 5:\n        return !!wizardData.privacySettings?.teaser_description;\n      case 6:\n        return true; // Documents are optional\n      case 7:\n        return true; // Review step\n      default:\n        return false;\n    }\n  };\n\n  const renderCurrentStep = () => {\n    const stepProps = {\n      data: wizardData,\n      onDataChange: handleDataChange,\n      onNext: handleNext,\n      onPrevious: handlePrevious,\n      isFirstStep: currentStep === 1,\n      isLastStep: currentStep === totalSteps,\n      isLoading: isSubmitting,\n    };\n\n    switch (currentStep) {\n      case 1:\n        return <BasicInfoStep {...stepProps} />;\n      case 2:\n        return <FinancialInfoStep {...stepProps} valuationReports={valuationReports} />;\n      case 3:\n        return <BusinessDetailsStep {...stepProps} />;\n      case 4:\n        return <SaleDetailsStep {...stepProps} />;\n      case 5:\n        return <PrivacySettingsStep {...stepProps} />;\n      case 6:\n        return <DocumentsStep {...stepProps} />;\n      case 7:\n        return <ReviewStep {...stepProps} />;\n      default:\n        return null;\n    }\n  };\n\n  const stepTitles = [\n    'Basic Info',\n    'Financials',\n    'Business Details',\n    'Sale Details',\n    'Privacy',\n    'Documents',\n    'Review',\n  ];\n\n  return (\n    <FullscreenModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Create Business Listing\"\n      currentStep={currentStep}\n      totalSteps={totalSteps}\n      showProgress={true}\n      headerContent={\n        <div className=\"w-full px-6 py-3\">\n          {/* Compact Timeline Container */}\n          <div className=\"relative\">\n            {/* Background Progress Line */}\n            <div className=\"absolute top-4 left-4 right-4 h-1 bg-gray-100 rounded-full\">\n              <div\n                className=\"h-full bg-gradient-to-r from-blue-500 to-emerald-500 rounded-full transition-all duration-700 ease-out\"\n                style={{\n                  width: `${((currentStep - 1) / (totalSteps - 1)) * 100}%`,\n                }}\n              />\n            </div>\n\n            {/* Step Indicators */}\n            <div className=\"relative flex justify-between items-start\">\n              {stepTitles.map((title, index) => (\n                <div key={index + 1} className=\"flex flex-col items-center flex-1\">\n                  <StepIndicator\n                    step={index + 1}\n                    title={title}\n                    completed={currentStep > index + 1}\n                    active={currentStep === index + 1}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      }\n    >\n      <div className=\"flex flex-col h-full min-h-0\">\n        {/* Main Content - Scrollable */}\n        <div className=\"flex-1 overflow-y-auto p-6 min-h-0\">{renderCurrentStep()}</div>\n\n        {/* Navigation Footer - Sticky */}\n        <div className=\"flex-shrink-0 bg-white border-t border-gray-100 px-4 py-2\">\n          <WizardNavigation\n            currentStep={currentStep}\n            totalSteps={totalSteps}\n            onPrevious={handlePrevious}\n            onNext={handleNext}\n            onComplete={handleComplete}\n            isFirstStep={currentStep === 1}\n            isLastStep={currentStep === totalSteps}\n            isLoading={isSubmitting}\n            canProceed={canProceed()}\n          />\n        </div>\n      </div>\n    </FullscreenModal>\n  );\n};\n\nexport default ListingWizardModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/components/StepIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/components/WizardNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/BasicInfoStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/BusinessDetailsStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/DocumentsStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/FinancialInfoStep.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange, selectedValuationReport, valuationReports]","fix":{"range":[1663,1706],"text":"[handleInputChange, selectedValuationReport, valuationReports]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏢 Financial Info Step - Listing Wizard\n// Location: src/features/phase1/business/wizard/steps/FinancialInfoStep.tsx\n// Purpose: Step 2 - Financial information and valuation data\n\nimport { CustomInputField, CustomNumberInputField } from '@/shared/components/forms';\nimport { BarChart3, Euro } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { FinancialInfo, StepComponentProps, WizardValuationReport } from '../types';\n\ninterface FinancialInfoStepProps extends StepComponentProps {\n  valuationReports?: WizardValuationReport[];\n}\n\nconst FinancialInfoStep: React.FC<FinancialInfoStepProps> = ({\n  data,\n  onDataChange,\n  valuationReports = [],\n}) => {\n  const financialInfo = data.financialInfo || ({} as FinancialInfo);\n  const [selectedValuationReport, setSelectedValuationReport] = useState<string | null>(null);\n\n  const handleInputChange = (field: keyof FinancialInfo, value: string | number | boolean) => {\n    onDataChange({\n      financialInfo: {\n        ...financialInfo,\n        [field]: value,\n      },\n    });\n  };\n\n  // Handle valuation report selection\n  useEffect(() => {\n    if (selectedValuationReport && valuationReports.length > 0) {\n      const selectedReport = valuationReports.find(report => report.id === selectedValuationReport);\n      if (selectedReport) {\n        handleInputChange('estimated_value', selectedReport.estimated_value);\n        handleInputChange('valuation_confidence', selectedReport.confidence_level);\n        handleInputChange('valuation_methodology', selectedReport.methodology);\n        handleInputChange('asking_price', selectedReport.estimated_value.toString());\n      }\n    }\n  }, [selectedValuationReport, valuationReports]);\n\n  // Check if we have valuation data\n  const hasValuationData = financialInfo.estimated_value && financialInfo.revenue2025;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <Euro className=\"w-12 h-12 text-primary-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-bold text-neutral-900 mb-2\">\n          {hasValuationData ? 'Financial Information' : 'Financial Information'}\n        </h2>\n        <p className=\"text-neutral-600\">\n          {hasValuationData\n            ? 'Review and update your financial data from valuation reports'\n            : 'Share your financial performance'}\n        </p>\n      </div>\n\n      {hasValuationData && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <BarChart3 className=\"h-5 w-5 text-blue-400\" />\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-blue-800\">\n                Financial data loaded from your valuation reports\n              </p>\n              <p className=\"text-sm text-blue-700\">You can edit any values below if needed</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Valuation Report Selection */}\n      {valuationReports.length > 0 && (\n        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6 mb-6\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-gray-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Select Valuation Report</h3>\n          </div>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Choose from your existing valuation reports to pre-fill financial data, or enter\n            manually below.\n          </p>\n\n          <div className=\"space-y-3\">\n            {valuationReports.map(report => (\n              <div\n                key={report.id}\n                className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                  selectedValuationReport === report.id\n                    ? 'border-primary-500 bg-primary-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() =>\n                  setSelectedValuationReport(\n                    selectedValuationReport === report.id ? null : report.id\n                  )\n                }\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <div\n                        className={`w-4 h-4 rounded-full border-2 flex items-center justify-center ${\n                          selectedValuationReport === report.id\n                            ? 'border-primary-500 bg-primary-500'\n                            : 'border-gray-300'\n                        }`}\n                      >\n                        {selectedValuationReport === report.id && (\n                          <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                        )}\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">\n                          €{report.estimated_value.toLocaleString()}\n                        </h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {new Date(report.valuation_date).toLocaleDateString()} •\n                          {report.confidence_level.charAt(0).toUpperCase() +\n                            report.confidence_level.slice(1)}{' '}\n                          confidence\n                        </p>\n                      </div>\n                    </div>\n                    <p className=\"text-xs text-gray-500 ml-7\">{report.methodology}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <span\n                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        report.status === 'completed'\n                          ? 'bg-green-100 text-green-800'\n                          : report.status === 'in_progress'\n                            ? 'bg-yellow-100 text-yellow-800'\n                            : 'bg-gray-100 text-gray-800'\n                      }`}\n                    >\n                      {report.status.replace('_', ' ')}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {selectedValuationReport && (\n            <div className=\"mt-4 p-3 bg-primary-50 border border-primary-200 rounded-lg\">\n              <p className=\"text-sm text-primary-700\">\n                ✓ Selected valuation report will be used to pre-fill financial data below.\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Valuation Summary - Enhanced */}\n      {financialInfo.estimated_value && (\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6 mb-6\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"text-lg font-semibold text-blue-900\">Business Valuation Summary</h3>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-900 mb-1\">\n                €{financialInfo.estimated_value.toLocaleString()}\n              </div>\n              <div className=\"text-sm font-medium text-blue-800\">Estimated Value</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-900 mb-1 capitalize\">\n                {financialInfo.valuation_confidence || 'Medium'}\n              </div>\n              <div className=\"text-sm font-medium text-blue-800\">Confidence Level</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-sm font-semibold text-blue-900 mb-1\">\n                {financialInfo.valuation_methodology || 'Revenue & EBITDA Analysis'}\n              </div>\n              <div className=\"text-sm font-medium text-blue-800\">Methodology</div>\n            </div>\n          </div>\n          <div className=\"mt-4 p-3 bg-white bg-opacity-50 rounded-lg\">\n            <p className=\"text-sm text-blue-700 text-center\">\n              💡 This valuation data has been pre-populated from your business valuation reports.\n              You can modify any values below if needed for your listing.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Business Structure Information */}\n      {(financialInfo.businessType || financialInfo.sharesForSale) && (\n        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6\">\n          <h3 className=\"font-semibold text-gray-900 mb-3\">Business Structure</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {financialInfo.businessType && (\n              <div>\n                <span className=\"text-sm font-medium text-gray-700\">Business Type:</span>\n                <div className=\"text-sm text-gray-900 capitalize\">\n                  {financialInfo.businessType.replace('-', ' ')}\n                </div>\n              </div>\n            )}\n            {financialInfo.sharesForSale && (\n              <div>\n                <span className=\"text-sm font-medium text-gray-700\">Shares for Sale:</span>\n                <div className=\"text-sm text-gray-900\">{financialInfo.sharesForSale}%</div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <CustomNumberInputField\n            label=\"Revenue 2025\"\n            placeholder=\"€1,000,000\"\n            value={financialInfo.revenue2025?.toString() || ''}\n            onChange={e => handleInputChange('revenue2025', parseFloat(e.target.value) || 0)}\n            required\n            onBlur={() => {}}\n            name=\"revenue2025\"\n          />\n\n          <CustomNumberInputField\n            label=\"Revenue 2024\"\n            placeholder=\"€900,000\"\n            value={financialInfo.revenue2024?.toString() || ''}\n            onChange={e => handleInputChange('revenue2024', parseFloat(e.target.value) || 0)}\n            required\n            onBlur={() => {}}\n            name=\"revenue2024\"\n          />\n\n          <CustomNumberInputField\n            label=\"Revenue 2023\"\n            placeholder=\"€800,000\"\n            value={financialInfo.revenue2023?.toString() || ''}\n            onChange={e => handleInputChange('revenue2023', parseFloat(e.target.value) || 0)}\n            required\n            onBlur={() => {}}\n            name=\"revenue2023\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <CustomNumberInputField\n            label=\"EBITDA 2025\"\n            placeholder=\"€150,000\"\n            value={financialInfo.ebitda2025?.toString() || ''}\n            onChange={e => handleInputChange('ebitda2025', parseFloat(e.target.value) || 0)}\n            onBlur={() => {}}\n            name=\"ebitda2025\"\n          />\n\n          <CustomNumberInputField\n            label=\"EBITDA 2024\"\n            placeholder=\"€135,000\"\n            value={financialInfo.ebitda2024?.toString() || ''}\n            onChange={e => handleInputChange('ebitda2024', parseFloat(e.target.value) || 0)}\n            onBlur={() => {}}\n            name=\"ebitda2024\"\n          />\n\n          <CustomNumberInputField\n            label=\"EBITDA 2023\"\n            placeholder=\"€120,000\"\n            value={financialInfo.ebitda2023?.toString() || ''}\n            onChange={e => handleInputChange('ebitda2023', parseFloat(e.target.value) || 0)}\n            onBlur={() => {}}\n            name=\"ebitda2023\"\n          />\n        </div>\n\n        <CustomInputField\n          label=\"Asking Price\"\n          placeholder=\"€5,000,000\"\n          value={financialInfo.asking_price || ''}\n          onChange={e => handleInputChange('asking_price', e.target.value)}\n          required\n          onBlur={() => {}}\n          name=\"asking_price\"\n        />\n\n        <div className=\"flex items-center justify-between p-4 border border-neutral-200 rounded-lg\">\n          <div>\n            <h3 className=\"font-medium text-neutral-900\">Price Negotiable</h3>\n            <p className=\"text-sm text-neutral-600\">\n              Allow potential buyers to negotiate the price\n            </p>\n          </div>\n          <input\n            type=\"checkbox\"\n            checked={financialInfo.price_negotiable || false}\n            onChange={e => handleInputChange('price_negotiable', e.target.checked)}\n            className=\"w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinancialInfoStep;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/PrivacySettingsStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/ReviewStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/SaleDetailsStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/steps/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/business/wizard/types/index.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'stepData' is defined but never used.","line":143,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":155,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏢 Listing Wizard Types - Modular Architecture\n// Location: src/features/phase1/business/wizard/types/index.ts\n// Purpose: Shared type definitions for the listing wizard feature\n\nimport React from 'react';\n\n// Aligned with BusinessProfileModal structure\nexport interface BasicInfo {\n  name: string; // Changed from 'title' to 'name' to match BusinessProfileModal\n  description: string;\n  industry: string;\n  location: string; // Combined location fields to match BusinessProfileModal\n  isRemote: boolean; // Added to match BusinessProfileModal\n  foundedYear: number; // Changed from string to number to match BusinessProfileModal\n  teamSize: string; // Changed from 'employee_count' to 'teamSize' to match BusinessProfileModal\n  website?: string; // Made optional to match BusinessProfileModal\n  business_model?: string; // Made optional, not in BusinessProfileModal\n}\n\n// Aligned with ValuationModal structure\nexport interface FinancialInfo {\n  // Business structure (from ValuationModal)\n  businessType: 'sole-trader' | 'company';\n  sharesForSale: number;\n\n  // Financial data (from ValuationModal)\n  revenue2025: number;\n  revenue2024: number;\n  revenue2023: number;\n  ebitda2025: number;\n  ebitda2024: number;\n  ebitda2023: number;\n\n  // Listing-specific financials\n  asking_price: string;\n  price_negotiable: boolean;\n  currency: string;\n\n  // Calculated valuation data (populated from valuation)\n  estimated_value?: number;\n  valuation_confidence?: 'high' | 'medium' | 'low';\n  valuation_methodology?: string;\n\n  // Legacy fields (kept for backward compatibility)\n  annual_revenue?: string;\n  revenue_trend?: string;\n  ebitda_margin?: string;\n  revenue_breakdown?: {\n    product_sales: string;\n    service_revenue: string;\n    recurring_revenue: string;\n    other_revenue: string;\n  };\n}\n\nexport interface BusinessDetails {\n  key_products: string;\n  target_market: string;\n  competitive_advantage: string;\n  growth_opportunities: string;\n  key_assets: string;\n  operational_highlights: string;\n}\n\nexport interface SaleDetails {\n  reason_for_sale: string;\n  preferred_timeline: string;\n  included_assets: string[];\n  excluded_assets: string[];\n  transition_support: string;\n  staff_retention: string;\n}\n\nexport interface PrivacySettings {\n  anonymous_listing: boolean;\n  requires_nda: boolean;\n  hide_financials: boolean;\n  hide_location: boolean;\n  hide_industry_details: boolean;\n  teaser_description: string;\n}\n\n// Aligned with DocumentVault structure\nexport interface Documents {\n  // Core document categories (from DocumentVault)\n  financial: File | null; // Financial statements, tax returns, etc.\n  legal: File | null; // Legal documents, contracts, etc.\n  operations: File | null; // Operational documents, procedures, etc.\n  marketing: File | null; // Marketing materials, brand assets, etc.\n  other: File | null; // Other supporting documents\n\n  // Legacy fields (kept for backward compatibility)\n  business_overview?: File | null;\n  financial_statements?: File | null;\n  tax_returns?: File | null;\n  legal_documents?: File | null;\n  operational_docs?: File | null;\n  marketing_materials?: File | null;\n}\n\n// Valuation Report Type (aligned with business types)\nexport interface WizardValuationReport {\n  id: string;\n  estimated_value: number;\n  currency: string;\n  valuation_date: string;\n  confidence_level: 'high' | 'medium' | 'low';\n  methodology: string;\n  status: 'completed' | 'in_progress' | 'draft' | 'expired';\n  last_updated?: string;\n  revenue_multiple?: number;\n  ebitda_multiple?: number;\n  industry_average?: number;\n  market_conditions?: string;\n  key_drivers?: string[];\n  risk_factors?: string[];\n  next_review_date?: string;\n}\n\n// Main wizard data structure\nexport interface ListingWizardData {\n  basicInfo: BasicInfo;\n  financialInfo: FinancialInfo;\n  businessDetails: BusinessDetails;\n  saleDetails: SaleDetails;\n  privacySettings: PrivacySettings;\n  documents: Documents;\n}\n\n// Wizard step configuration\nexport interface WizardStep {\n  id: number;\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  isCompleted: boolean;\n  isActive: boolean;\n}\n\n// Step component props\nexport interface StepComponentProps {\n  data: Partial<ListingWizardData>;\n  onDataChange: (stepData: Partial<ListingWizardData>) => void;\n  onNext: () => void;\n  onPrevious: () => void;\n  isFirstStep: boolean;\n  isLastStep: boolean;\n  isLoading?: boolean;\n}\n\n// Main wizard props\nexport interface ListingWizardModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete?: (data: ListingWizardData) => void;\n  businessInfo?: {\n    name: string;\n    industry: string;\n    description: string;\n    foundedYear: number;\n    teamSize: string;\n    location: string;\n    isRemote: boolean;\n    website?: string;\n    revenue?: number;\n    status?: 'active' | 'inactive' | 'draft';\n  };\n  valuationData?: {\n    businessType: 'sole-trader' | 'company';\n    sharesForSale: number;\n    revenue2025: number;\n    revenue2024: number;\n    revenue2023: number;\n    ebitda2025: number;\n    ebitda2024: number;\n    ebitda2023: number;\n    estimated_value?: number;\n    valuation_confidence?: 'high' | 'medium' | 'low';\n    valuation_methodology?: string;\n  };\n  valuationReports?: WizardValuationReport[];\n}\n\n// Step indicator props\nexport interface StepIndicatorProps {\n  step: number;\n  title: string;\n  completed: boolean;\n  active: boolean;\n}\n\n// Wizard navigation props\nexport interface WizardNavigationProps {\n  currentStep: number;\n  totalSteps: number;\n  onPrevious: () => void;\n  onNext: () => void;\n  onComplete?: () => void;\n  isFirstStep: boolean;\n  isLastStep: boolean;\n  isLoading?: boolean;\n  canProceed?: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/MessagesHeader.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_query' is defined but never used.","line":22,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'_category' is defined but never used.","line":23,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'_status' is defined but never used.","line":24,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":42},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'onSearchChange' and 'toggleSearch'. Either include them or remove the dependency array. If 'onSearchChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [isSearchVisible, onSearchChange, searchQuery, toggleSearch]","fix":{"range":[3731,3761],"text":"[isSearchVisible, onSearchChange, searchQuery, toggleSearch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Messages Header Component\n// Location: src/features/phase1/conversations/components/MessagesHeader.tsx\n// Purpose: Enhanced messages header with search, filters, and actions (Airbnb-style)\n\nimport { Button } from '@/shared/components/buttons';\nimport { Badge, Chip } from '@heroui/react';\nimport { ChevronDown, Search } from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\nexport type MessageCategory = 'all' | 'business' | 'due_diligence' | 'support';\nexport type MessageStatus = 'all' | 'unread' | 'archived';\n\ninterface MessagesHeaderProps {\n  searchQuery: string;\n  categoryFilter: MessageCategory;\n  statusFilter: MessageStatus;\n  unreadCount: number;\n  onSearchChange: (_query: string) => void;\n  onCategoryChange: (_category: MessageCategory) => void;\n  onStatusChange: (_status: MessageStatus) => void;\n  onSettingsClick: () => void;\n  className?: string;\n}\n\n// =============================================================================\n// MESSAGES HEADER COMPONENT\n// =============================================================================\n\nconst MessagesHeader: React.FC<MessagesHeaderProps> = ({\n  searchQuery,\n  categoryFilter,\n  statusFilter,\n  unreadCount,\n  onSearchChange,\n  onCategoryChange,\n  onStatusChange,\n  onSettingsClick,\n  className = '',\n}) => {\n  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);\n  const [isSearchVisible, setIsSearchVisible] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  const categories: { value: MessageCategory; label: string; count?: number }[] = [\n    { value: 'all', label: 'All' },\n    { value: 'business', label: 'Business' },\n    { value: 'due_diligence', label: 'Due Diligence' },\n    { value: 'support', label: 'Support' },\n  ];\n\n  const statusOptions: { value: MessageStatus; label: string; count?: number }[] = [\n    { value: 'all', label: 'All' },\n    { value: 'unread', label: 'Unread', count: unreadCount },\n    { value: 'archived', label: 'Archived' },\n  ];\n\n  const handleCategorySelect = (category: MessageCategory) => {\n    onCategoryChange(category);\n    setShowCategoryDropdown(false);\n  };\n\n  const toggleSearch = () => {\n    setIsSearchVisible(!isSearchVisible);\n    if (!isSearchVisible) {\n      // Focus the input after it becomes visible\n      setTimeout(() => {\n        searchInputRef.current?.focus();\n      }, 100);\n    } else {\n      // Clear search when hiding\n      onSearchChange('');\n    }\n  };\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowCategoryDropdown(false);\n      }\n    };\n\n    if (showCategoryDropdown) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showCategoryDropdown]);\n\n  // Keyboard shortcut for search (Cmd/Ctrl + K)\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {\n        event.preventDefault();\n        toggleSearch();\n      }\n      if (event.key === 'Escape' && isSearchVisible) {\n        setIsSearchVisible(false);\n        onSearchChange('');\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isSearchVisible, searchQuery]);\n\n  return (\n    <div className={`messages-header bg-white border-b border-gray-200 p-4 ${className}`}>\n      {/* Main Header Section */}\n      <div className=\"px-4 py-3 pt-0\">\n        {/* Header with Title and Search Toggle */}\n        {!isSearchVisible ? (\n          <div className=\"flex items-center justify-between mb-4\">\n            <h1 className=\"text-lg font-semibold text-gray-900\">Messages</h1>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={toggleSearch}\n                className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n                aria-label=\"Search conversations\"\n              >\n                <Search className=\"w-4 h-4 text-gray-600\" />\n              </button>\n              <button\n                onClick={onSettingsClick}\n                className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n                aria-label=\"Message settings\"\n              >\n                <svg\n                  className=\"w-4 h-4 text-gray-600\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n                  />\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n                  />\n                </svg>\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <input\n                ref={searchInputRef}\n                type=\"text\"\n                placeholder=\"Search conversations...\"\n                className=\"w-full h-10 pl-10 pr-4 text-sm bg-white border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400 text-gray-900 transition-all duration-200\"\n                value={searchQuery}\n                onChange={e => onSearchChange(e.target.value)}\n                onBlur={() => {\n                  if (!searchQuery) {\n                    setTimeout(() => {\n                      if (!searchQuery) {\n                        setIsSearchVisible(false);\n                      }\n                    }, 200);\n                  }\n                }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Filter Section - Only show when search is not visible */}\n        {!isSearchVisible && (\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"relative\" ref={dropdownRef}>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onPress={() => setShowCategoryDropdown(!showCategoryDropdown)}\n                  endContent={<ChevronDown className=\"w-3 h-3\" />}\n                  className=\"text-sm\"\n                >\n                  All\n                  {unreadCount > 0 && (\n                    <span className=\"ml-1 text-xs opacity-75\">({unreadCount} unread)</span>\n                  )}\n                </Button>\n\n                {showCategoryDropdown && (\n                  <div className=\"absolute top-full left-0 mt-1 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n                    <div className=\"p-2\">\n                      <div className=\"mb-2\">\n                        <div className=\"text-xs font-medium text-gray-500 mb-1 px-2\">\n                          Message Type\n                        </div>\n                        <div className=\"space-y-1\">\n                          {categories.map(category => (\n                            <button\n                              key={category.value}\n                              onClick={() => handleCategorySelect(category.value)}\n                              className={`w-full text-left px-2 py-1.5 text-sm rounded hover:bg-gray-50 flex items-center justify-between ${\n                                categoryFilter === category.value\n                                  ? 'bg-primary-50 text-primary-700'\n                                  : 'text-gray-700'\n                              }`}\n                            >\n                              <span>{category.label}</span>\n                              {category.count && category.count > 0 && (\n                                <Badge size=\"sm\" color=\"danger\">\n                                  {category.count}\n                                </Badge>\n                              )}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div>\n                        <div className=\"text-xs font-medium text-gray-500 mb-1 px-2\">Status</div>\n                        <div className=\"space-y-1\">\n                          {statusOptions.map(status => (\n                            <button\n                              key={status.value}\n                              onClick={() => onStatusChange(status.value)}\n                              className={`w-full text-left px-2 py-1.5 text-sm rounded hover:bg-gray-50 flex items-center justify-between ${\n                                statusFilter === status.value\n                                  ? 'bg-primary-50 text-primary-700'\n                                  : 'text-gray-700'\n                              }`}\n                            >\n                              <span>{status.label}</span>\n                              {status.count && status.count > 0 && (\n                                <Badge size=\"sm\" color=\"danger\">\n                                  {status.count}\n                                </Badge>\n                              )}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Active Filters Display */}\n      {(categoryFilter !== 'all' || statusFilter !== 'all' || searchQuery) && (\n        <div className=\"px-4 pb-4\">\n          <div className=\"flex items-center space-x-2 flex-wrap\">\n            {categoryFilter !== 'all' && (\n              <Chip\n                size=\"sm\"\n                variant=\"flat\"\n                color=\"primary\"\n                onClose={() => onCategoryChange('all')}\n                className=\"text-xs\"\n              >\n                {categories.find(c => c.value === categoryFilter)?.label}\n              </Chip>\n            )}\n            {statusFilter !== 'all' && (\n              <Chip\n                size=\"sm\"\n                variant=\"flat\"\n                color=\"secondary\"\n                onClose={() => onStatusChange('all')}\n                className=\"text-xs\"\n              >\n                {statusOptions.find(s => s.value === statusFilter)?.label}\n              </Chip>\n            )}\n            {searchQuery && (\n              <Chip\n                size=\"sm\"\n                variant=\"flat\"\n                color=\"default\"\n                onClose={() => onSearchChange('')}\n                className=\"text-xs\"\n              >\n                Search: \"{searchQuery}\"\n              </Chip>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MessagesHeader;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/ThreePanelMessages.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3585,3588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3585,3588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3822,3825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3822,3825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5770,5773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5770,5773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Three Panel Messages Component\n// Location: src/features/phase1/conversations/components/ThreePanelMessages.tsx\n// Purpose: Main three-panel messaging interface with context awareness\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { User as UserType } from '../../../../types/user.consolidated';\n\n// Import conversation components\nimport { Conversation, ConversationMessage } from '../types';\nimport { DocumentSharingModal, DueDiligenceRequestModal, OfferCreationModal } from './modals';\n\n// Import three-panel components\nimport ChatPanel from './panels/ChatPanel';\nimport ContextPanel from './panels/ContextPanel';\nimport EnhancedConversationPanel from './panels/EnhancedConversationPanel';\nimport ThreePanelLayout from './panels/ThreePanelLayout';\n\n// Import context panel hooks\nimport { useContextPanel } from '../hooks/useContextPanel';\n\n// =============================================================================\n// THREE PANEL MESSAGES COMPONENT\n// =============================================================================\n\n// Internal component that uses the conversation context\nconst ThreePanelMessagesContent: React.FC = () => {\n  const navigate = useNavigate();\n  // Mock user data for demonstration\n  const [user] = useState<UserType | null>({\n    id: 'user-2',\n    email: 'sarah@techstartup.com',\n    name: 'Sarah Johnson',\n    role: 'seller',\n    company_name: 'TechStartup Inc',\n    country: 'US',\n    email_verified: true,\n    auth_provider: 'email',\n    language_preference: 'en',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n  });\n  const [newMessage, setNewMessage] = useState('');\n\n  // Modal states\n  const [showOfferModal, setShowOfferModal] = useState(false);\n  const [showDDModal, setShowDDModal] = useState(false);\n  const [showDocumentModal, setShowDocumentModal] = useState(false);\n\n  // Use conversation context hook\n  // Mock conversation data for demonstration\n  const mockConversations: Conversation[] = [\n    {\n      id: 'conv-1',\n      participant: {\n        id: 'user-1',\n        name: 'Michael Chen',\n        role: 'buyer',\n        avatar:\n          'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\n        company: 'Chen Investments',\n        isOnline: true,\n      },\n      lastMessage: {\n        content:\n          \"I'm very interested in your business. Can we schedule a call to discuss the details?\",\n        timestamp: new Date(),\n        isRead: false,\n        senderId: 'user-1',\n        type: 'text',\n      },\n      businessContext: {\n        title: 'TechStartup Inc - SaaS Platform',\n        price: 2500000,\n        currency: 'USD',\n        location: 'San Francisco, CA',\n        photos: [\n          {\n            id: 'photo-1',\n            url: 'https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n            caption: 'Modern office space with collaborative work areas',\n          },\n          {\n            id: 'photo-2',\n            url: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n            caption: 'Team meeting room with state-of-the-art technology',\n          },\n          {\n            id: 'photo-3',\n            url: 'https://images.unsplash.com/photo-1497366811353-6870744d04b2?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n            caption: 'Reception area and company branding',\n          },\n        ],\n      } as any,\n      unreadCount: 1,\n      isPinned: false,\n      isArchived: false,\n      status: 'active',\n      context: {\n        id: 'conv-1',\n        listingId: 'biz-1',\n        currentStage: 'inquiry',\n        transactionState: 'active' as any,\n        quickActions: [],\n        progress: {\n          percentage: 25,\n          description: 'Initial inquiry stage',\n          currentStep: 'inquiry',\n          nextStep: 'Schedule call',\n        },\n        lastActivity: new Date().toISOString(),\n        participants: [\n          {\n            id: 'user-1',\n            name: 'Michael Chen',\n            role: 'buyer',\n            company: 'Chen Investments',\n            avatar:\n              'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\n            isOnline: true,\n          },\n          {\n            id: 'user-2',\n            name: 'Sarah Johnson',\n            role: 'seller',\n            company: 'TechStartup Inc',\n            avatar:\n              'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',\n            isOnline: false,\n          },\n        ],\n        businessContext: {\n          title: 'TechStartup Inc - SaaS Platform',\n          price: 2500000,\n          currency: 'USD',\n          location: 'San Francisco, CA',\n          sector: 'Technology',\n          photos: [\n            {\n              id: 'photo-1',\n              url: 'https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n              caption: 'Modern office space with collaborative work areas',\n            },\n            {\n              id: 'photo-2',\n              url: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n              caption: 'Team meeting room with state-of-the-art technology',\n            },\n            {\n              id: 'photo-3',\n              url: 'https://images.unsplash.com/photo-1497366811353-6870744d04b2?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n              caption: 'Reception area and company branding',\n            },\n          ],\n        } as any,\n      },\n    },\n  ];\n\n  const mockMessages: ConversationMessage[] = [\n    {\n      id: 'msg-1',\n      conversationId: 'conv-1',\n      senderId: 'user-1',\n      recipientId: 'user-2',\n      content:\n        \"I'm very interested in your business. Can we schedule a call to discuss the details?\",\n      sentAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\n      readAt: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago\n      isRead: true,\n      type: 'text',\n    },\n    {\n      id: 'msg-2',\n      conversationId: 'conv-1',\n      senderId: 'user-2',\n      recipientId: 'user-1',\n      content:\n        \"Absolutely! I'd love to discuss the opportunity. I'm available tomorrow at 2 PM PST. Does that work for you?\",\n      sentAt: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago\n      readAt: new Date(Date.now() - 900000).toISOString(), // 15 minutes ago\n      isRead: true,\n      type: 'text',\n    },\n    {\n      id: 'msg-3',\n      conversationId: 'conv-1',\n      senderId: 'user-1',\n      recipientId: 'user-2',\n      content:\n        \"Perfect! 2 PM PST works great. I'll send you a calendar invite. Looking forward to learning more about your business.\",\n      sentAt: new Date(Date.now() - 900000).toISOString(), // 15 minutes ago\n      readAt: undefined,\n      isRead: false,\n      type: 'text',\n    },\n  ];\n\n  // Local state for conversations and messages\n  const [conversations] = useState<Conversation[]>(mockConversations);\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(\n    mockConversations[0]\n  );\n  const [messages, setMessages] = useState<ConversationMessage[]>(mockMessages);\n\n  // Conversation management functions\n  const selectConversation = useCallback(\n    (conversationId: string) => {\n      const conversation = conversations.find(c => c.id === conversationId);\n      setSelectedConversation(conversation || null);\n    },\n    [conversations]\n  );\n\n  const addMessage = useCallback((message: ConversationMessage) => {\n    setMessages(prev => [...prev, message]);\n  }, []);\n\n  const performQuickAction = useCallback((actionId: string) => {\n    // Handle quick actions\n    // TODO: Implement quick action handling\n    void actionId;\n  }, []);\n\n  // Use context panel hooks\n  const { autoSwitchContext } = useContextPanel();\n\n  // Auto-select first conversation on mount\n  useEffect(() => {\n    if (conversations.length > 0 && !selectedConversation) {\n      selectConversation(conversations[0].id);\n    }\n  }, [conversations, selectedConversation, selectConversation]);\n\n  // Auto-switch context when conversation changes\n  useEffect(() => {\n    if (selectedConversation) {\n      autoSwitchContext(selectedConversation);\n    }\n  }, [selectedConversation, autoSwitchContext]);\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || !selectedConversation) return;\n\n    const newMessageObj: ConversationMessage = {\n      id: `msg-${Date.now()}`,\n      conversationId: selectedConversation.id,\n      senderId: user?.id || 'current-user',\n      recipientId: selectedConversation.participant.id,\n      content: newMessage,\n      sentAt: new Date().toISOString(),\n      type: 'text',\n      isRead: false,\n    };\n\n    addMessage(newMessageObj);\n    setNewMessage('');\n  };\n\n  const handleQuickAction = (actionId: string) => {\n    if (!selectedConversation) return;\n\n    switch (actionId) {\n      case 'create_offer':\n        setShowOfferModal(true);\n        break;\n      case 'request_due_diligence':\n        setShowDDModal(true);\n        break;\n      case 'share_document':\n        setShowDocumentModal(true);\n        break;\n      default:\n        performQuickAction(actionId);\n    }\n  };\n\n  const handleOfferSubmit = (offer: {\n    amount: number;\n    currency: string;\n    terms: string;\n    conditions: string[];\n  }) => {\n    if (!selectedConversation) return;\n\n    const offerMessage: ConversationMessage = {\n      id: `msg-${Date.now()}`,\n      conversationId: selectedConversation.id,\n      senderId: user?.id || 'current-user',\n      recipientId: selectedConversation.participant.id,\n      content: `I'd like to make an offer of ${offer.currency} ${(offer.amount / 1000000).toFixed(1)}M. ${offer.terms}`,\n      sentAt: new Date().toISOString(),\n      type: 'offer',\n      isRead: false,\n      offerDetails: {\n        amount: offer.amount,\n        currency: offer.currency,\n        terms: offer.terms,\n        status: 'pending',\n        conditions: offer.conditions,\n      },\n    };\n\n    addMessage(offerMessage);\n    setShowOfferModal(false);\n  };\n\n  const handleDueDiligenceRequest = (request: {\n    category: string;\n    priority: string;\n    deadline?: string;\n    description: string;\n    itemId: string;\n    message: string;\n    processId: string;\n  }) => {\n    if (!selectedConversation) return;\n\n    const ddMessage: ConversationMessage = {\n      id: `msg-${Date.now()}`,\n      conversationId: selectedConversation.id,\n      senderId: user?.id || 'current-user',\n      recipientId: selectedConversation.participant.id,\n      content: `I need to request ${request.itemId} for due diligence. ${request.message}`,\n      sentAt: new Date().toISOString(),\n      type: 'due_diligence',\n      isRead: false,\n      dueDiligenceDetails: {\n        processId: request.processId,\n        category: request.category,\n        itemId: request.itemId,\n        status: 'requested',\n        deadline: request.deadline,\n        priority: request.priority as 'low' | 'medium' | 'high' | 'urgent',\n      },\n    };\n\n    addMessage(ddMessage);\n    setShowDDModal(false);\n  };\n\n  const handleDocumentShare = (data: {\n    message?: string;\n    document?: {\n      id: string;\n      name: string;\n      type: string;\n      size: number;\n      accessLevel: string;\n      documentId: string;\n    };\n  }) => {\n    if (!selectedConversation) return;\n\n    const docMessage: ConversationMessage = {\n      id: `msg-${Date.now()}`,\n      conversationId: selectedConversation.id,\n      senderId: user?.id || 'current-user',\n      recipientId: selectedConversation.participant.id,\n      content: data.message || `I've shared ${data.document?.name || 'a document'} with you.`,\n      sentAt: new Date().toISOString(),\n      type: 'document',\n      isRead: false,\n      documentDetails: {\n        documentId: data.document?.documentId || 'doc-1',\n        name: data.document?.name || 'Document',\n        type: data.document?.type || 'pdf',\n        size: data.document?.size || 0,\n        accessLevel: (data.document?.accessLevel || 'public') as\n          | 'public'\n          | 'nda_required'\n          | 'due_diligence',\n      },\n    };\n\n    addMessage(docMessage);\n    setShowDocumentModal(false);\n  };\n\n  return (\n    <div className=\"h-screen bg-gray-50\">\n      <ThreePanelLayout>\n        {{\n          leftPanel: (\n            <EnhancedConversationPanel\n              conversations={conversations}\n              selectedConversationId={selectedConversation?.id || null}\n              onConversationSelect={selectConversation}\n              onNavigateToSearch={() => navigate('/search')}\n            />\n          ),\n          middlePanel: (\n            <ChatPanel\n              conversation={selectedConversation}\n              messages={messages}\n              newMessage={newMessage}\n              currentUserId={user?.id || 'current-user'}\n              onMessageChange={setNewMessage}\n              onSendMessage={handleSendMessage}\n              onQuickAction={handleQuickAction}\n              onNavigateToBusiness={() => navigate('/my-business/overview')}\n            />\n          ),\n          rightPanel: (\n            <ContextPanel conversation={selectedConversation} onQuickAction={handleQuickAction} />\n          ),\n        }}\n      </ThreePanelLayout>\n\n      {/* Transaction Modals */}\n      {selectedConversation && (\n        <>\n          <OfferCreationModal\n            isOpen={showOfferModal}\n            onClose={() => setShowOfferModal(false)}\n            conversationId={selectedConversation.id}\n            listingId={selectedConversation.context?.listingId}\n            onSuccess={handleOfferSubmit}\n          />\n\n          <DueDiligenceRequestModal\n            isOpen={showDDModal}\n            onClose={() => setShowDDModal(false)}\n            conversationId={selectedConversation.id}\n            listingId={selectedConversation.context?.listingId}\n            onSuccess={handleDueDiligenceRequest}\n          />\n\n          <DocumentSharingModal\n            isOpen={showDocumentModal}\n            onClose={() => setShowDocumentModal(false)}\n            conversationId={selectedConversation.id}\n            listingId={selectedConversation.context?.listingId}\n            onSuccess={handleDocumentShare}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\n// Main component that provides the conversation context\nexport default ThreePanelMessagesContent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/messages/TransactionMessage.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'action' is defined but never used.","line":23,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":23,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'_getMessageTypeIcon' is assigned a value but never used.","line":33,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_getMessageTypeIcon' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 💬 Transaction Message Component\n// Location: src/features/phase1/conversations/components/messages/TransactionMessage.tsx\n// Purpose: Renders different types of transaction messages with appropriate UI\n\nimport { Button, Chip } from '@heroui/react';\nimport {\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Download,\n  Euro,\n  Eye,\n  FileText,\n  Shield,\n  TrendingUp,\n} from 'lucide-react';\nimport React from 'react';\nimport { ConversationMessage } from '../../types';\n\ninterface TransactionMessageProps {\n  message: ConversationMessage;\n  isCurrentUser: boolean;\n  onAction?: (action: string, data: unknown) => void;\n  className?: string;\n}\n\nconst TransactionMessage: React.FC<TransactionMessageProps> = ({\n  message,\n  isCurrentUser,\n  onAction,\n  className = '',\n}) => {\n  const _getMessageTypeIcon = (type: ConversationMessage['type']) => {\n    switch (type) {\n      case 'offer':\n        return <Euro className=\"w-4 h-4\" />;\n      case 'due_diligence':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'document':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'nda':\n        return <Shield className=\"w-4 h-4\" />;\n      case 'transaction':\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case 'system':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getMessageTypeColor = (type: ConversationMessage['type']) => {\n    switch (type) {\n      case 'offer':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'due_diligence':\n        return 'bg-blue-50 border-blue-200 text-blue-800';\n      case 'document':\n        return 'bg-purple-50 border-purple-200 text-purple-800';\n      case 'nda':\n        return 'bg-orange-50 border-orange-200 text-orange-800';\n      case 'transaction':\n        return 'bg-indigo-50 border-indigo-200 text-indigo-800';\n      case 'system':\n        return 'bg-gray-50 border-gray-200 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-900';\n    }\n  };\n\n  const getOfferStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'success';\n      case 'rejected':\n        return 'danger';\n      case 'countered':\n        return 'warning';\n      case 'pending':\n        return 'primary';\n      default:\n        return 'default';\n    }\n  };\n\n  const getDueDiligenceStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'success';\n      case 'rejected':\n        return 'danger';\n      case 'reviewed':\n        return 'warning';\n      case 'provided':\n        return 'primary';\n      case 'requested':\n        return 'secondary';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'danger';\n      case 'high':\n        return 'warning';\n      case 'medium':\n        return 'primary';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const renderOfferMessage = () => {\n    const { offerDetails } = message;\n    if (!offerDetails) return null;\n\n    return (\n      <div className=\"w-full bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200 rounded-xl p-3 shadow-sm\">\n        {/* Header with offer amount and status */}\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex items-center justify-center w-8 h-8 bg-green-100 rounded-full\">\n              <Euro className=\"w-4 h-4 text-green-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-base font-bold text-gray-900\">\n                €{(offerDetails.amount / 1000000).toFixed(1)}M\n              </h3>\n              <p className=\"text-xs text-gray-600\">Business Offer</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Chip\n              size=\"sm\"\n              color={getOfferStatusColor(offerDetails.status)}\n              className=\"font-medium text-xs\"\n            >\n              {offerDetails.status}\n            </Chip>\n          </div>\n        </div>\n\n        {/* Offer message */}\n        <div className=\"mb-2\">\n          <p className=\"text-sm text-gray-700 leading-relaxed\">{message.content}</p>\n        </div>\n\n        {/* Terms and conditions - Compact layout */}\n        <div className=\"space-y-2 mb-3\">\n          {offerDetails.terms && (\n            <div className=\"bg-white/60 rounded-lg p-2 border border-green-100\">\n              <div className=\"flex items-start space-x-2\">\n                <div className=\"w-1 h-1 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                <p className=\"text-xs text-gray-700 italic\">{offerDetails.terms}</p>\n              </div>\n            </div>\n          )}\n\n          {offerDetails.conditions && offerDetails.conditions.length > 0 && (\n            <div className=\"bg-white/60 rounded-lg p-2 border border-green-100\">\n              <h4 className=\"text-xs font-semibold text-gray-800 mb-1\">Conditions</h4>\n              <ul className=\"space-y-0.5\">\n                {offerDetails.conditions.map((condition, index) => (\n                  <li key={index} className=\"flex items-start space-x-2 text-xs text-gray-700\">\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full mt-1.5 flex-shrink-0\"></div>\n                    <span>{condition}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {offerDetails.expirationDate && (\n            <div className=\"bg-white/60 rounded-lg p-2 border border-green-100\">\n              <div className=\"flex items-center space-x-2 text-xs text-gray-700\">\n                <Clock className=\"w-3 h-3 text-green-600\" />\n                <span>Expires: {new Date(offerDetails.expirationDate).toLocaleDateString()}</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Action buttons for non-current user */}\n        {!isCurrentUser && offerDetails.status === 'pending' && (\n          <div className=\"flex space-x-2 pt-2 border-t border-green-200\">\n            <Button\n              size=\"sm\"\n              color=\"success\"\n              className=\"flex-1 font-medium text-xs h-7\"\n              onPress={() => onAction?.('accept_offer', { messageId: message.id, offerDetails })}\n            >\n              Accept\n            </Button>\n            <Button\n              size=\"sm\"\n              color=\"warning\"\n              variant=\"bordered\"\n              className=\"flex-1 font-medium text-xs h-7\"\n              onPress={() => onAction?.('counter_offer', { messageId: message.id, offerDetails })}\n            >\n              Counter\n            </Button>\n            <Button\n              size=\"sm\"\n              color=\"danger\"\n              variant=\"bordered\"\n              className=\"flex-1 font-medium text-xs h-7\"\n              onPress={() => onAction?.('reject_offer', { messageId: message.id, offerDetails })}\n            >\n              Decline\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderDueDiligenceMessage = () => {\n    const { dueDiligenceDetails } = message;\n    if (!dueDiligenceDetails) return null;\n\n    return (\n      <div className=\"due-diligence-message\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <CheckCircle className=\"w-4 h-4 text-blue-600\" />\n          <span className=\"font-semibold text-blue-800\">\n            Due Diligence: {dueDiligenceDetails.category}\n          </span>\n          <Chip size=\"sm\" color={getDueDiligenceStatusColor(dueDiligenceDetails.status)}>\n            {dueDiligenceDetails.status}\n          </Chip>\n          <Chip size=\"sm\" color={getPriorityColor(dueDiligenceDetails.priority)}>\n            {dueDiligenceDetails.priority}\n          </Chip>\n        </div>\n\n        <p className=\"text-sm text-gray-700 mb-2\">{message.content}</p>\n\n        {dueDiligenceDetails.deadline && (\n          <div className=\"flex items-center space-x-1 text-xs text-gray-600 mb-3\">\n            <Clock className=\"w-3 h-3\" />\n            <span>Deadline: {new Date(dueDiligenceDetails.deadline).toLocaleDateString()}</span>\n          </div>\n        )}\n\n        {dueDiligenceDetails.notes && (\n          <p className=\"text-xs text-gray-600 italic mb-3\">{dueDiligenceDetails.notes}</p>\n        )}\n\n        {dueDiligenceDetails.relatedDocuments &&\n          dueDiligenceDetails.relatedDocuments.length > 0 && (\n            <div className=\"mb-3\">\n              <p className=\"text-xs font-medium text-gray-700 mb-1\">Related Documents:</p>\n              <div className=\"space-y-1\">\n                {dueDiligenceDetails.relatedDocuments.map((docId, index) => (\n                  <div key={index} className=\"flex items-center space-x-2 text-xs text-gray-600\">\n                    <FileText className=\"w-3 h-3\" />\n                    <span>Document {docId}</span>\n                    <Button size=\"sm\" variant=\"light\" className=\"h-6 px-2\">\n                      <Eye className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n        {/* Action buttons */}\n        {!isCurrentUser && dueDiligenceDetails.status === 'requested' && (\n          <div className=\"flex space-x-2\">\n            <Button\n              size=\"sm\"\n              color=\"success\"\n              onPress={() =>\n                onAction?.('provide_document', { messageId: message.id, dueDiligenceDetails })\n              }\n            >\n              Provide Document\n            </Button>\n            <Button\n              size=\"sm\"\n              color=\"warning\"\n              variant=\"bordered\"\n              onPress={() =>\n                onAction?.('request_clarification', { messageId: message.id, dueDiligenceDetails })\n              }\n            >\n              Request Clarification\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderDocumentMessage = () => {\n    const { documentDetails } = message;\n    if (!documentDetails) return null;\n\n    return (\n      <div className=\"document-message\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <FileText className=\"w-4 h-4 text-purple-600\" />\n          <span className=\"font-semibold text-purple-800\">Document: {documentDetails.name}</span>\n          <Chip size=\"sm\" color=\"secondary\">\n            {documentDetails.accessLevel}\n          </Chip>\n        </div>\n\n        <p className=\"text-sm text-gray-700 mb-2\">{message.content}</p>\n\n        <div className=\"flex items-center space-x-4 text-xs text-gray-600 mb-3\">\n          <span>Type: {documentDetails.type}</span>\n          <span>Size: {(documentDetails.size / 1024 / 1024).toFixed(1)} MB</span>\n        </div>\n\n        {/* Action buttons */}\n        <div className=\"flex space-x-2\">\n          {documentDetails.previewUrl && (\n            <Button\n              size=\"sm\"\n              color=\"primary\"\n              variant=\"bordered\"\n              onPress={() =>\n                onAction?.('preview_document', { messageId: message.id, documentDetails })\n              }\n              startContent={<Eye className=\"w-3 h-3\" />}\n            >\n              Preview\n            </Button>\n          )}\n          {documentDetails.downloadUrl && (\n            <Button\n              size=\"sm\"\n              color=\"primary\"\n              onPress={() =>\n                onAction?.('download_document', { messageId: message.id, documentDetails })\n              }\n              startContent={<Download className=\"w-3 h-3\" />}\n            >\n              Download\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderNDAMessage = () => {\n    const { ndaDetails } = message;\n    if (!ndaDetails) return null;\n\n    return (\n      <div className=\"nda-message\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <Shield className=\"w-4 h-4 text-orange-600\" />\n          <span className=\"font-semibold text-orange-800\">NDA: {ndaDetails.status}</span>\n          <Chip size=\"sm\" color={getOfferStatusColor(ndaDetails.status)}>\n            {ndaDetails.status}\n          </Chip>\n        </div>\n\n        <p className=\"text-sm text-gray-700 mb-2\">{message.content}</p>\n\n        <div className=\"flex items-center space-x-4 text-xs text-gray-600 mb-3\">\n          <span>Version: {ndaDetails.version}</span>\n          {ndaDetails.signedAt && (\n            <span>Signed: {new Date(ndaDetails.signedAt).toLocaleDateString()}</span>\n          )}\n          {ndaDetails.expiresAt && (\n            <span>Expires: {new Date(ndaDetails.expiresAt).toLocaleDateString()}</span>\n          )}\n        </div>\n\n        {/* Action buttons */}\n        {!isCurrentUser && ndaDetails.status === 'pending' && (\n          <div className=\"flex space-x-2\">\n            <Button\n              size=\"sm\"\n              color=\"success\"\n              onPress={() => onAction?.('sign_nda', { messageId: message.id, ndaDetails })}\n            >\n              Sign NDA\n            </Button>\n            <Button\n              size=\"sm\"\n              color=\"danger\"\n              variant=\"bordered\"\n              onPress={() => onAction?.('reject_nda', { messageId: message.id, ndaDetails })}\n            >\n              Reject\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderTransactionMessage = () => {\n    const { transactionDetails } = message;\n    if (!transactionDetails) return null;\n\n    return (\n      <div className=\"transaction-message\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <TrendingUp className=\"w-4 h-4 text-indigo-600\" />\n          <span className=\"font-semibold text-indigo-800\">\n            Transaction: {transactionDetails.stage}\n          </span>\n          <Chip size=\"sm\" color=\"primary\">\n            {transactionDetails.stage}\n          </Chip>\n        </div>\n\n        <p className=\"text-sm text-gray-700 mb-2\">{message.content}</p>\n\n        {transactionDetails.actionRequired && (\n          <div className=\"flex items-center space-x-1 text-xs text-gray-600 mb-3\">\n            <AlertCircle className=\"w-3 h-3\" />\n            <span>Action Required: {transactionDetails.actionRequired}</span>\n          </div>\n        )}\n\n        {transactionDetails.deadline && (\n          <div className=\"flex items-center space-x-1 text-xs text-gray-600 mb-3\">\n            <Clock className=\"w-3 h-3\" />\n            <span>Deadline: {new Date(transactionDetails.deadline).toLocaleDateString()}</span>\n          </div>\n        )}\n\n        {transactionDetails.progress !== undefined && (\n          <div className=\"mb-3\">\n            <div className=\"flex items-center justify-between text-xs text-gray-600 mb-1\">\n              <span>Progress</span>\n              <span>{transactionDetails.progress}%</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div\n                className=\"bg-indigo-600 h-2 rounded-full\"\n                style={{ width: `${transactionDetails.progress}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderSystemMessage = () => {\n    return (\n      <div className=\"system-message\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <AlertCircle className=\"w-4 h-4 text-gray-600\" />\n          <span className=\"font-semibold text-gray-800\">System Message</span>\n        </div>\n        <p className=\"text-sm text-gray-700\">{message.content}</p>\n      </div>\n    );\n  };\n\n  const renderMessageContent = () => {\n    switch (message.type) {\n      case 'offer':\n        return renderOfferMessage();\n      case 'due_diligence':\n        return renderDueDiligenceMessage();\n      case 'document':\n        return renderDocumentMessage();\n      case 'nda':\n        return renderNDAMessage();\n      case 'transaction':\n        return renderTransactionMessage();\n      case 'system':\n        return renderSystemMessage();\n      default:\n        return <p className=\"text-sm\">{message.content}</p>;\n    }\n  };\n\n  return (\n    <div\n      className={`${message.type === 'offer' ? 'w-full' : 'max-w-xs lg:max-w-md'} ${\n        isCurrentUser ? 'bg-primary-300 text-white' : `${getMessageTypeColor(message.type)}`\n      } rounded-lg px-4 py-2 ${className}`}\n    >\n      {renderMessageContent()}\n\n      {/* Message timestamp and read status */}\n      <div\n        className={`flex items-center justify-end space-x-1 mt-1 ${\n          isCurrentUser ? 'text-white/70' : 'text-gray-500'\n        }`}\n      >\n        <span className=\"text-xs\">\n          {new Date(message.sentAt).toLocaleTimeString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false,\n          })}\n        </span>\n        {isCurrentUser && (\n          <CheckCircle\n            className={`w-3 h-3 ${message.readAt ? 'text-blue-300' : 'text-white/50'}`}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionMessage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/messages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/modals/DocumentSharingModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_listingId' is defined but never used.","line":75,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_listingId' is defined but never used.","line":75,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":197,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedAccessLevel' is assigned a value but never used.","line":206,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedAccessLevel' is assigned a value but never used.","line":206,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📄 Document Sharing Modal\n// Location: src/features/phase1/conversations/components/modals/DocumentSharingModal.tsx\n// Purpose: Modal for sharing documents within conversation context\n\nimport { Button } from '@/shared/components/buttons';\nimport { CustomCheckbox, CustomDropdown, CustomTextarea } from '@/shared/components/forms';\nimport { CenteredModal } from '@/shared/components/modals/foundations';\nimport { Eye, FileText, Shield, Upload, UploadCloud, X } from 'lucide-react';\nimport React, { useRef, useState } from 'react';\nimport { DocumentSharingModalProps, ShareDocumentRequest } from '../../types';\n\ninterface DocumentSharingData {\n  documentType: 'financial' | 'legal' | 'operational' | 'marketing' | 'technical' | 'other';\n  accessLevel: 'public' | 'nda_required' | 'due_diligence';\n  message: string;\n  selectedFiles: File[];\n  isConfidential: boolean;\n  requiresAcknowledgment: boolean;\n  allowDownload: boolean;\n}\n\nconst documentTypes = [\n  {\n    value: 'financial',\n    label: 'Financial Documents',\n    description: 'P&L, Balance Sheet, Cash Flow',\n  },\n  { value: 'legal', label: 'Legal Documents', description: 'Contracts, Licenses, Agreements' },\n  {\n    value: 'operational',\n    label: 'Operational Documents',\n    description: 'Processes, Procedures, Manuals',\n  },\n  {\n    value: 'marketing',\n    label: 'Marketing Materials',\n    description: 'Brochures, Presentations, Branding',\n  },\n  {\n    value: 'technical',\n    label: 'Technical Documents',\n    description: 'Specifications, Manuals, Diagrams',\n  },\n  { value: 'other', label: 'Other Documents', description: 'Custom document types' },\n];\n\nconst accessLevels = [\n  {\n    value: 'public',\n    label: 'Public Access',\n    description: 'Visible to all conversation participants',\n    icon: Eye,\n    color: 'text-green-600',\n  },\n  {\n    value: 'nda_required',\n    label: 'NDA Required',\n    description: 'Requires signed NDA to access',\n    icon: Shield,\n    color: 'text-yellow-600',\n  },\n  {\n    value: 'due_diligence',\n    label: 'Due Diligence Only',\n    description: 'Only accessible during due diligence',\n    icon: FileText,\n    color: 'text-blue-600',\n  },\n];\n\nconst DocumentSharingModal: React.FC<DocumentSharingModalProps> = ({\n  isOpen,\n  onClose,\n  conversationId,\n  listingId: _listingId,\n  documentType,\n  accessLevel,\n  onSuccess,\n}) => {\n  const [formData, setFormData] = useState<DocumentSharingData>({\n    documentType: documentType || 'other',\n    accessLevel: accessLevel || 'nda_required',\n    message: '',\n    selectedFiles: [],\n    isConfidential: false,\n    requiresAcknowledgment: true,\n    allowDownload: true,\n  });\n\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleInputChange = (\n    field: keyof DocumentSharingData,\n    value: string | number | boolean | File[]\n  ) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setFormData(prev => ({\n      ...prev,\n      selectedFiles: [...prev.selectedFiles, ...files],\n    }));\n  };\n\n  const removeFile = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      selectedFiles: prev.selectedFiles.filter((_, i) => i !== index),\n    }));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (file: File) => {\n    const extension = file.name.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'xls':\n      case 'xlsx':\n        return '📊';\n      case 'ppt':\n      case 'pptx':\n        return '📈';\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return '🖼️';\n      case 'zip':\n      case 'rar':\n        return '📦';\n      default:\n        return '📄';\n    }\n  };\n\n  const validateForm = (): boolean => {\n    if (formData.selectedFiles.length === 0) {\n      alert('Please select at least one file to share');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Simulate upload progress\n      const uploadInterval = setInterval(() => {\n        setUploadProgress(prev => {\n          if (prev >= 100) {\n            clearInterval(uploadInterval);\n            return 100;\n          }\n          return prev + 10;\n        });\n      }, 200);\n\n      // TODO: Replace with actual API call\n      // const uploadPromises = formData.selectedFiles.map(file =>\n      //   conversationService.uploadDocument(conversationId, file, formData.accessLevel)\n      // );\n      // await Promise.all(uploadPromises);\n\n      // Mock success\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const shareRequest: ShareDocumentRequest = {\n        conversationId,\n        documentId: 'mock-document-id',\n        accessLevel: formData.accessLevel,\n        message: formData.message || undefined,\n      };\n\n      onSuccess?.(shareRequest);\n      onClose();\n    } catch (error) {\n      // Handle error\n      alert('Failed to share documents. Please try again.');\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const selectedAccessLevel = accessLevels.find(l => l.value === formData.accessLevel);\n\n  return (\n    <CenteredModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Share Documents\"\n      size=\"2xl\"\n      footer={\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"tertiary\" onPress={onClose} size=\"md\" isDisabled={isUploading}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            onPress={handleSubmit}\n            size=\"md\"\n            startContent={<Upload className=\"w-4 h-4\" />}\n            isLoading={isUploading}\n            isDisabled={formData.selectedFiles.length === 0}\n          >\n            {isUploading ? 'Uploading...' : 'Share Documents'}\n          </Button>\n        </div>\n      }\n    >\n      <div className=\"p-4\">\n        {/* Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Upload className=\"w-6 h-6 text-purple-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">Share Documents</h3>\n          <p className=\"text-gray-600 text-sm\">\n            Upload and share documents with conversation participants\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Document Type */}\n          <div className=\"space-y-2\">\n            <CustomDropdown\n              label=\"Document Type\"\n              placeholder=\"Select document type\"\n              options={documentTypes}\n              value={formData.documentType}\n              onChange={value => handleInputChange('documentType', value)}\n              name=\"documentType\"\n            />\n          </div>\n\n          {/* Access Level */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Access Level</label>\n            <div className=\"space-y-2\">\n              {accessLevels.map(level => {\n                const Icon = level.icon;\n                return (\n                  <div\n                    key={level.value}\n                    className={`p-3 rounded-lg border cursor-pointer transition-all duration-200 ${\n                      formData.accessLevel === level.value\n                        ? 'border-primary-300 bg-primary-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    onClick={() => handleInputChange('accessLevel', level.value)}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={level.color}>\n                        <Icon className=\"w-4 h-4\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium text-gray-900\">{level.label}</span>\n                          {formData.accessLevel === level.value && (\n                            <span className=\"px-2 py-1 text-xs bg-primary-100 text-primary-700 rounded-full\">\n                              Selected\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{level.description}</p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Sharing Options */}\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium text-gray-700\">Sharing Options</label>\n            <div className=\"space-y-2\">\n              <CustomCheckbox\n                label=\"Contains confidential information\"\n                checked={formData.isConfidential}\n                onChange={() => handleInputChange('isConfidential', !formData.isConfidential)}\n                name=\"isConfidential\"\n              />\n              <CustomCheckbox\n                label=\"Requires acknowledgment of receipt\"\n                checked={formData.requiresAcknowledgment}\n                onChange={() =>\n                  handleInputChange('requiresAcknowledgment', !formData.requiresAcknowledgment)\n                }\n                name=\"requiresAcknowledgment\"\n              />\n              <CustomCheckbox\n                label=\"Allow download of documents\"\n                checked={formData.allowDownload}\n                onChange={() => handleInputChange('allowDownload', !formData.allowDownload)}\n                name=\"allowDownload\"\n              />\n            </div>\n          </div>\n\n          {/* File Upload */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Select Files</label>\n            <div\n              className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors cursor-pointer\"\n              onClick={() => fileInputRef.current?.click()}\n            >\n              <UploadCloud className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600 mb-1\">Click to select files or drag and drop</p>\n              <p className=\"text-xs text-gray-500\">PDF, DOC, XLS, PPT, Images (Max 10MB each)</p>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                multiple\n                accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.jpg,.jpeg,.png,.gif,.zip,.rar\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n              />\n            </div>\n          </div>\n\n          {/* Selected Files */}\n          {formData.selectedFiles.length > 0 && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                Selected Files ({formData.selectedFiles.length})\n              </label>\n              <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                {formData.selectedFiles.map((file, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg border\"\n                  >\n                    <span className=\"text-lg\">{getFileIcon(file)}</span>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">{file.name}</p>\n                      <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n                    </div>\n                    <Button\n                      variant=\"tertiary\"\n                      isIconOnly\n                      onPress={() => removeFile(index)}\n                      className=\"text-red-500 hover:bg-red-50\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Upload Progress */}\n          {isUploading && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-700\">Uploading files...</span>\n                <span className=\"text-gray-500\">{uploadProgress}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div\n                  className=\"bg-primary-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${uploadProgress}%` }}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Additional Message */}\n          <div className=\"space-y-2\">\n            <CustomTextarea\n              label=\"Message (Optional)\"\n              placeholder=\"Add a message to accompany the shared documents\"\n              value={formData.message}\n              onChange={e => handleInputChange('message', e.target.value)}\n              onBlur={() => {}}\n              name=\"message\"\n              rows={2}\n            />\n          </div>\n        </div>\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default DocumentSharingModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/modals/DueDiligenceRequestModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_listingId' is defined but never used.","line":86,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_listingId' is defined but never used.","line":86,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'_processId' is defined but never used.","line":87,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_processId' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":171,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📋 Due Diligence Request Modal\n// Location: src/features/phase1/conversations/components/modals/DueDiligenceRequestModal.tsx\n// Purpose: Modal for requesting due diligence items within conversation context\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  CustomCheckbox,\n  CustomDropdown,\n  CustomInputField,\n  CustomTextarea,\n} from '@/shared/components/forms';\nimport { CenteredModal } from '@/shared/components/modals/foundations';\nimport { Calendar, FileText, X } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { CreateDueDiligenceRequest, DueDiligenceRequestModalProps } from '../../types';\n\ninterface DueDiligenceData {\n  category: string;\n  itemId: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  deadline: string;\n  message: string;\n  specificDocuments: string[];\n  isUrgent: boolean;\n  requiresResponse: boolean;\n  isConfidential: boolean;\n}\n\nconst dueDiligenceCategories = [\n  {\n    value: 'financial',\n    label: 'Financial Statements',\n    description: 'P&L, Balance Sheet, Cash Flow',\n  },\n  { value: 'legal', label: 'Legal Documents', description: 'Contracts, Licenses, Litigation' },\n  { value: 'operational', label: 'Operations', description: 'Processes, Systems, Procedures' },\n  { value: 'commercial', label: 'Commercial', description: 'Customers, Suppliers, Market' },\n  { value: 'technical', label: 'Technical', description: 'IT Systems, Infrastructure' },\n  { value: 'hr', label: 'Human Resources', description: 'Staff, Benefits, Policies' },\n  { value: 'environmental', label: 'Environmental', description: 'Compliance, Risks, Assessments' },\n  { value: 'other', label: 'Other', description: 'Custom requests' },\n];\n\nconst priorityOptions = [\n  { value: 'low', label: 'Low Priority' },\n  { value: 'medium', label: 'Medium Priority' },\n  { value: 'high', label: 'High Priority' },\n  { value: 'urgent', label: 'Urgent' },\n];\n\nconst commonDocuments = {\n  financial: [\n    'Audited Financial Statements (3 years)',\n    'Management Accounts (YTD)',\n    'Cash Flow Projections',\n    'Tax Returns',\n    'Bank Statements',\n  ],\n  legal: [\n    'Articles of Incorporation',\n    'Shareholder Agreements',\n    'Key Contracts',\n    'Insurance Policies',\n    'Litigation History',\n  ],\n  operational: [\n    'Organizational Chart',\n    'Standard Operating Procedures',\n    'Quality Certifications',\n    'Equipment List',\n    'Facility Information',\n  ],\n  commercial: [\n    'Customer List',\n    'Supplier Agreements',\n    'Market Analysis',\n    'Competitive Analysis',\n    'Sales Pipeline',\n  ],\n};\n\nconst DueDiligenceRequestModal: React.FC<DueDiligenceRequestModalProps> = ({\n  isOpen,\n  onClose,\n  conversationId,\n  listingId: _listingId,\n  processId: _processId,\n  category,\n  priority,\n  onSuccess,\n}) => {\n  const [formData, setFormData] = useState<DueDiligenceData>({\n    category: category || '',\n    itemId: '',\n    priority: priority || 'medium',\n    deadline: '',\n    message: '',\n    specificDocuments: [],\n    isUrgent: false,\n    requiresResponse: true,\n    isConfidential: false,\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (\n    field: keyof DueDiligenceData,\n    value: string | number | boolean | string[]\n  ) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  const addDocument = (document: string) => {\n    if (document && !formData.specificDocuments.includes(document)) {\n      setFormData(prev => ({\n        ...prev,\n        specificDocuments: [...prev.specificDocuments, document],\n      }));\n    }\n  };\n\n  const removeDocument = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      specificDocuments: prev.specificDocuments.filter((_, i) => i !== index),\n    }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.category) {\n      newErrors.category = 'Please select a due diligence category';\n    }\n\n    if (!formData.itemId.trim()) {\n      newErrors.itemId = 'Please provide a request description';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const ddRequest: CreateDueDiligenceRequest = {\n        conversationId,\n        category: formData.category,\n        itemId: formData.itemId,\n        priority: formData.priority,\n        deadline: formData.deadline || undefined,\n        message: formData.message || undefined,\n      };\n\n      // TODO: Replace with actual API call\n      // await conversationService.createDueDiligenceRequest(ddRequest);\n\n      // Mock success\n      onSuccess?.(ddRequest);\n      onClose();\n    } catch (error) {\n      // Handle error\n      alert('Failed to create due diligence request. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const selectedCategory = dueDiligenceCategories.find(c => c.value === formData.category);\n  const availableDocuments = formData.category\n    ? commonDocuments[formData.category as keyof typeof commonDocuments]\n    : [];\n\n  return (\n    <CenteredModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Request Due Diligence\"\n      size=\"2xl\"\n      footer={\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"tertiary\" onPress={onClose} size=\"md\" isDisabled={isSubmitting}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            onPress={handleSubmit}\n            size=\"md\"\n            startContent={<FileText className=\"w-4 h-4\" />}\n            isLoading={isSubmitting}\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit Request'}\n          </Button>\n        </div>\n      }\n    >\n      <div className=\"p-4\">\n        {/* Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <FileText className=\"w-6 h-6 text-blue-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">Request Due Diligence</h3>\n          <p className=\"text-gray-600 text-sm\">\n            Request specific documents or information for due diligence\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Category Selection */}\n          <div className=\"space-y-2\">\n            <CustomDropdown\n              label=\"Category\"\n              placeholder=\"Select a due diligence category\"\n              options={dueDiligenceCategories}\n              value={formData.category}\n              onChange={value => {\n                handleInputChange('category', value);\n                handleInputChange('specificDocuments', []); // Reset documents when category changes\n              }}\n              name=\"category\"\n              error={errors.category}\n              required\n            />\n            {selectedCategory && (\n              <p className=\"text-xs text-gray-500 mt-1\">{selectedCategory.description}</p>\n            )}\n          </div>\n\n          {/* Request Description */}\n          <div className=\"space-y-2\">\n            <CustomTextarea\n              label=\"Request Description\"\n              placeholder=\"Describe what specific information or documents you need\"\n              value={formData.itemId}\n              onChange={e => handleInputChange('itemId', e.target.value)}\n              onBlur={() => {}}\n              name=\"itemId\"\n              error={errors.itemId}\n              required\n              rows={3}\n            />\n          </div>\n\n          {/* Priority Selection */}\n          <div className=\"space-y-2\">\n            <CustomDropdown\n              label=\"Priority\"\n              placeholder=\"Select priority level\"\n              options={priorityOptions}\n              value={formData.priority}\n              onChange={value => handleInputChange('priority', value)}\n              name=\"priority\"\n            />\n          </div>\n\n          {/* Request Options */}\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium text-gray-700\">Request Options</label>\n            <div className=\"space-y-2\">\n              <CustomCheckbox\n                label=\"This is an urgent request\"\n                checked={formData.isUrgent}\n                onChange={() => handleInputChange('isUrgent', !formData.isUrgent)}\n                name=\"isUrgent\"\n              />\n              <CustomCheckbox\n                label=\"Requires written response\"\n                checked={formData.requiresResponse}\n                onChange={() => handleInputChange('requiresResponse', !formData.requiresResponse)}\n                name=\"requiresResponse\"\n              />\n              <CustomCheckbox\n                label=\"Contains confidential information\"\n                checked={formData.isConfidential}\n                onChange={() => handleInputChange('isConfidential', !formData.isConfidential)}\n                name=\"isConfidential\"\n              />\n            </div>\n          </div>\n\n          {/* Common Documents for Selected Category */}\n          {availableDocuments && availableDocuments.length > 0 && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                Common Documents ({selectedCategory?.label})\n              </label>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {availableDocuments.map(doc => (\n                  <Button\n                    key={doc}\n                    variant=\"tertiary\"\n                    size=\"sm\"\n                    onPress={() => addDocument(doc)}\n                    isDisabled={formData.specificDocuments.includes(doc)}\n                    className=\"justify-start h-auto p-2 text-left\"\n                    startContent={<FileText className=\"w-3 h-3\" />}\n                  >\n                    <span className=\"text-xs\">{doc}</span>\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Selected Documents */}\n          {formData.specificDocuments.length > 0 && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                Selected Documents ({formData.specificDocuments.length})\n              </label>\n              <div className=\"space-y-2\">\n                {formData.specificDocuments.map((doc, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center space-x-2 p-3 bg-blue-50 rounded-lg border border-blue-200\"\n                  >\n                    <FileText className=\"w-4 h-4 text-blue-600\" />\n                    <span className=\"flex-1 text-sm text-blue-800\">{doc}</span>\n                    <Button\n                      variant=\"tertiary\"\n                      isIconOnly\n                      onPress={() => removeDocument(index)}\n                      className=\"text-red-500 hover:bg-red-50\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Deadline */}\n          <div className=\"space-y-2\">\n            <CustomDropdown\n              label=\"Deadline (Optional)\"\n              placeholder=\"Select deadline\"\n              options={[\n                { value: '', label: 'No deadline' },\n                { value: '1', label: '1 day' },\n                { value: '3', label: '3 days' },\n                { value: '7', label: '1 week' },\n                { value: '14', label: '2 weeks' },\n                { value: '30', label: '1 month' },\n                { value: 'custom', label: 'Custom date' },\n              ]}\n              value={formData.deadline}\n              onChange={value => handleInputChange('deadline', value)}\n              name=\"deadline\"\n            />\n            {formData.deadline === 'custom' && (\n              <CustomInputField\n                label=\"Custom Date\"\n                type=\"date\"\n                value={formData.deadline}\n                onChange={e => handleInputChange('deadline', e.target.value)}\n                onBlur={() => {}}\n                name=\"customDeadline\"\n                leftIcon={<Calendar className=\"w-4 h-4 text-gray-400\" />}\n              />\n            )}\n          </div>\n\n          {/* Additional Message */}\n          <div className=\"space-y-2\">\n            <CustomTextarea\n              label=\"Additional Message\"\n              placeholder=\"Add any additional context or specific requirements\"\n              value={formData.message}\n              onChange={e => handleInputChange('message', e.target.value)}\n              onBlur={() => {}}\n              name=\"message\"\n              rows={2}\n            />\n          </div>\n        </div>\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default DueDiligenceRequestModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/modals/OfferCreationModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_listingId' is defined but never used.","line":40,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_listingId' is defined but never used.","line":40,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":127,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 💰 Offer Creation Modal\n// Location: src/features/phase1/conversations/components/modals/OfferCreationModal.tsx\n// Purpose: Modal for creating offers within conversation context\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  CustomCheckbox,\n  CustomDropdown,\n  CustomInputField,\n  CustomNumberInputField,\n  CustomTextarea,\n} from '@/shared/components/forms';\nimport { CenteredModal } from '@/shared/components/modals/foundations';\nimport { Calendar, Euro, Plus, X } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { CreateOfferRequest, OfferCreationModalProps } from '../../types';\n\ninterface OfferData {\n  amount: number;\n  currency: string;\n  terms: string;\n  conditions: string[];\n  expirationDate: string;\n  additionalMessage: string;\n  isSubjectToDueDiligence: boolean;\n  isSubjectToFinancing: boolean;\n  isSubjectToLegalReview: boolean;\n}\n\nconst currencyOptions = [\n  { value: 'EUR', label: 'EUR', symbol: '€' },\n  { value: 'USD', label: 'USD', symbol: '$' },\n  { value: 'GBP', label: 'GBP', symbol: '£' },\n];\n\nconst OfferCreationModal: React.FC<OfferCreationModalProps> = ({\n  isOpen,\n  onClose,\n  conversationId,\n  listingId: _listingId,\n  initialOffer,\n  onSuccess,\n}) => {\n  const [formData, setFormData] = useState<OfferData>({\n    amount: initialOffer?.amount || 0,\n    currency: 'EUR', // Default currency since initialOffer doesn't have currency\n    terms: initialOffer?.terms || '',\n    conditions: initialOffer?.conditions || [],\n    expirationDate: '',\n    additionalMessage: '',\n    isSubjectToDueDiligence: true,\n    isSubjectToFinancing: false,\n    isSubjectToLegalReview: false,\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (\n    field: keyof OfferData,\n    value: string | number | boolean | string[]\n  ) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  const addCondition = () => {\n    setFormData(prev => ({ ...prev, conditions: [...prev.conditions, ''] }));\n  };\n\n  const updateCondition = (index: number, value: string) => {\n    const newConditions = [...formData.conditions];\n    newConditions[index] = value;\n    setFormData(prev => ({ ...prev, conditions: newConditions }));\n  };\n\n  const removeCondition = (index: number) => {\n    if (formData.conditions.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        conditions: prev.conditions.filter((_, i) => i !== index),\n      }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.amount || formData.amount <= 0) {\n      newErrors.amount = 'Please enter a valid offer amount';\n    }\n\n    if (!formData.terms.trim()) {\n      newErrors.terms = 'Please describe the terms of your offer';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const offerRequest: CreateOfferRequest = {\n        conversationId,\n        amount: formData.amount,\n        currency: formData.currency,\n        terms: formData.terms,\n        conditions: formData.conditions.length > 0 ? formData.conditions : undefined,\n        expirationDate: formData.expirationDate || undefined,\n        message: formData.additionalMessage || undefined,\n      };\n\n      // TODO: Replace with actual API call\n      // await conversationService.createOffer(offerRequest);\n\n      // Mock success\n      onSuccess?.(offerRequest);\n      onClose();\n    } catch (error) {\n      // Handle error\n      alert('Failed to create offer. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const selectedCurrency = currencyOptions.find(c => c.value === formData.currency);\n\n  return (\n    <CenteredModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Make an Offer\"\n      size=\"2xl\"\n      footer={\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"tertiary\" onPress={onClose} size=\"md\" isDisabled={isSubmitting}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            onPress={handleSubmit}\n            size=\"md\"\n            startContent={<Euro className=\"w-4 h-4\" />}\n            isLoading={isSubmitting}\n          >\n            {isSubmitting ? 'Submitting...' : 'Submit Offer'}\n          </Button>\n        </div>\n      }\n    >\n      <div className=\"p-4\">\n        {/* Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Euro className=\"w-6 h-6 text-green-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">Make an Offer</h3>\n          <p className=\"text-gray-600 text-sm\">\n            Submit a formal offer for this business opportunity\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Offer Amount */}\n          <div className=\"space-y-2\">\n            <CustomNumberInputField\n              label=\"Offer Amount\"\n              placeholder=\"Enter amount\"\n              value={formData.amount.toString()}\n              onChange={e => handleInputChange('amount', parseFloat(e.target.value) || 0)}\n              onBlur={() => {}}\n              name=\"amount\"\n              error={errors.amount}\n              required\n              min={0}\n              allowDecimals={true}\n              prefix={selectedCurrency?.symbol}\n            />\n          </div>\n\n          {/* Currency Selection */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Currency</label>\n            <div className=\"flex space-x-2\">\n              {currencyOptions.map(currency => (\n                <button\n                  key={currency.value}\n                  type=\"button\"\n                  onClick={() => handleInputChange('currency', currency.value)}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 border-2 ${\n                    formData.currency === currency.value\n                      ? 'border-primary-500 bg-primary-50 text-primary-700'\n                      : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  {currency.symbol} {currency.label}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Offer Terms */}\n          <div className=\"space-y-2\">\n            <CustomTextarea\n              label=\"Offer Terms\"\n              placeholder=\"Describe the terms of your offer (e.g., payment structure, closing timeline, etc.)\"\n              value={formData.terms}\n              onChange={e => handleInputChange('terms', e.target.value)}\n              onBlur={() => {}}\n              name=\"terms\"\n              error={errors.terms}\n              required\n              rows={3}\n            />\n          </div>\n\n          {/* Standard Conditions */}\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium text-gray-700\">Standard Conditions</label>\n            <div className=\"space-y-2\">\n              <CustomCheckbox\n                label=\"Subject to due diligence\"\n                checked={formData.isSubjectToDueDiligence}\n                onChange={() =>\n                  handleInputChange('isSubjectToDueDiligence', !formData.isSubjectToDueDiligence)\n                }\n                name=\"isSubjectToDueDiligence\"\n              />\n              <CustomCheckbox\n                label=\"Subject to financing approval\"\n                checked={formData.isSubjectToFinancing}\n                onChange={() =>\n                  handleInputChange('isSubjectToFinancing', !formData.isSubjectToFinancing)\n                }\n                name=\"isSubjectToFinancing\"\n              />\n              <CustomCheckbox\n                label=\"Subject to legal review\"\n                checked={formData.isSubjectToLegalReview}\n                onChange={() =>\n                  handleInputChange('isSubjectToLegalReview', !formData.isSubjectToLegalReview)\n                }\n                name=\"isSubjectToLegalReview\"\n              />\n            </div>\n          </div>\n\n          {/* Additional Conditions */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Additional Conditions</label>\n            <div className=\"space-y-2\">\n              {formData.conditions.map((condition, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  <div className=\"flex-1\">\n                    <CustomInputField\n                      placeholder=\"Add a custom condition\"\n                      value={condition}\n                      onChange={e => updateCondition(index, e.target.value)}\n                      onBlur={() => {}}\n                      name={`condition-${index}`}\n                    />\n                  </div>\n                  {formData.conditions.length > 1 && (\n                    <Button\n                      variant=\"tertiary\"\n                      isIconOnly\n                      onPress={() => removeCondition(index)}\n                      className=\"text-red-500 hover:bg-red-50\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n              <Button\n                variant=\"tertiary\"\n                onPress={addCondition}\n                startContent={<Plus className=\"w-4 h-4\" />}\n                className=\"text-primary hover:text-primary-600\"\n              >\n                Add Condition\n              </Button>\n            </div>\n          </div>\n\n          {/* Expiration Date */}\n          <div className=\"space-y-2\">\n            <CustomDropdown\n              label=\"Offer Expiration (Optional)\"\n              placeholder=\"Select expiration timeframe\"\n              options={[\n                { value: '', label: 'No expiration' },\n                { value: '1', label: '1 day' },\n                { value: '3', label: '3 days' },\n                { value: '7', label: '1 week' },\n                { value: '14', label: '2 weeks' },\n                { value: '30', label: '1 month' },\n                { value: 'custom', label: 'Custom date' },\n              ]}\n              value={formData.expirationDate}\n              onChange={value => handleInputChange('expirationDate', value)}\n              name=\"expirationDate\"\n            />\n            {formData.expirationDate === 'custom' && (\n              <CustomInputField\n                label=\"Custom Expiration Date\"\n                type=\"date\"\n                value={formData.expirationDate}\n                onChange={e => handleInputChange('expirationDate', e.target.value)}\n                onBlur={() => {}}\n                name=\"customExpirationDate\"\n                leftIcon={<Calendar className=\"w-4 h-4 text-gray-400\" />}\n              />\n            )}\n          </div>\n\n          {/* Additional Message */}\n          <div className=\"space-y-2\">\n            <CustomTextarea\n              label=\"Additional Message\"\n              placeholder=\"Add any additional context or message to accompany your offer\"\n              value={formData.additionalMessage}\n              onChange={e => handleInputChange('additionalMessage', e.target.value)}\n              onBlur={() => {}}\n              name=\"additionalMessage\"\n              rows={2}\n            />\n          </div>\n        </div>\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default OfferCreationModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/modals/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/panels/ChatPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_message' is defined but never used.","line":19,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'_actionId' is defined but never used.","line":21,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Chat Panel Component\n// Location: src/features/phase1/conversations/components/panels/ChatPanel.tsx\n// Purpose: Middle panel for chat messages with business details toggle\n\nimport { Button } from '@/shared/components/buttons';\nimport React, { useRef } from 'react';\nimport { useContextPanel } from '../../hooks/useContextPanel';\nimport { Conversation, ConversationMessage } from '../../types';\n\n// =============================================================================\n// COMPONENT PROPS\n// =============================================================================\n\ninterface ChatPanelProps {\n  conversation: Conversation | null;\n  messages: ConversationMessage[];\n  newMessage: string;\n  currentUserId: string;\n  onMessageChange: (_message: string) => void;\n  onSendMessage: () => void;\n  onQuickAction?: (_actionId: string) => void;\n  onNavigateToBusiness?: () => void;\n  className?: string;\n}\n\n// =============================================================================\n// CHAT PANEL COMPONENT\n// =============================================================================\n\nconst ChatPanel: React.FC<ChatPanelProps> = ({\n  conversation,\n  messages,\n  newMessage,\n  currentUserId,\n  onMessageChange,\n  onSendMessage,\n  onQuickAction,\n  onNavigateToBusiness,\n  className = '',\n}) => {\n  // Suppress unused parameter warnings for optional callbacks\n  void onQuickAction;\n  void onNavigateToBusiness;\n  const { isVisible, toggleVisibility } = useContextPanel();\n  const messageInputRef = useRef<HTMLDivElement>(null);\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      onSendMessage();\n      // Clear the contentEditable div\n      if (messageInputRef.current) {\n        messageInputRef.current.textContent = '';\n      }\n    }\n  };\n\n  if (!conversation) {\n    return (\n      <div className={`chat-panel flex flex-col bg-white h-full ${className}`}>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">No conversation selected</h2>\n            <p className=\"text-gray-600\">Select a conversation to start messaging</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`chat-panel flex flex-col bg-white h-full ${className}`}>\n      {/* Chat Header */}\n      <div className=\"border-b border-gray-200 bg-white flex-shrink-0\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          {/* Participant Info */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden\">\n              {conversation.participant.avatar ? (\n                <img\n                  src={conversation.participant.avatar}\n                  alt={conversation.participant.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <span className=\"text-sm font-medium text-gray-600\">\n                  {conversation.participant.name?.charAt(0)}\n                </span>\n              )}\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {conversation.participant.name}\n              </h2>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <span>{conversation.participant.company}</span>\n                <div\n                  className=\"shrink-0 bg-divider border-none w-divider mx-2 h-4\"\n                  role=\"separator\"\n                  data-orientation=\"vertical\"\n                  aria-orientation=\"vertical\"\n                ></div>\n                <span className=\"capitalize\">{conversation.participant.role}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-2\">\n            {!isVisible && (\n              <Button\n                variant=\"tertiary\"\n                size=\"sm\"\n                className=\"text-gray-500 hover:text-gray-700\"\n                onPress={toggleVisibility}\n              >\n                Show business details\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Start the conversation</h3>\n              <p className=\"text-gray-600\">\n                Send a message to begin discussing the business opportunity\n              </p>\n            </div>\n          </div>\n        ) : (\n          messages.map(message => {\n            const isCurrentUser = message.senderId === currentUserId;\n            const messageTime = new Date(message.sentAt).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit',\n            });\n\n            if (isCurrentUser) {\n              // User's own messages - right aligned\n              return (\n                <div key={message.id} className=\"flex justify-end mb-4\">\n                  <div className=\"max-w-[70%]\">\n                    {/* Message bubble */}\n                    <div className=\"bg-gray-800 text-white rounded-2xl px-4 py-3 mb-1\">\n                      <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                    </div>\n\n                    {/* Timestamp and actions */}\n                    <div className=\"flex items-center justify-end space-x-2\">\n                      <span className=\"text-xs text-gray-500\">{messageTime}</span>\n                      <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          className=\"p-1 rounded-full hover:bg-gray-100 transition-colors\"\n                          aria-label=\"React to message\"\n                        >\n                          <svg\n                            className=\"w-4 h-4 text-gray-500\"\n                            fill=\"currentColor\"\n                            viewBox=\"0 0 16 16\"\n                          >\n                            <path d=\"m8 0c4.418278 0 8 3.581722 8 8s-3.581722 8-8 8-8-3.581722-8-8 3.581722-8 8-8zm0 1.5c-3.58985087 0-6.5 2.91014913-6.5 6.5 0 3.5898509 2.91014913 6.5 6.5 6.5 3.5898509 0 6.5-2.9101491 6.5-6.5 0-3.58985087-2.9101491-6.5-6.5-6.5zm-2.25 7.5c0 1.2426407 1.00735931 2.25 2.25 2.25s2.25-1.0073593 2.25-2.25h1.5c0 2.0710678-1.6789322 3.75-3.75 3.75-2.07106781 0-3.75-1.6789322-3.75-3.75zm5.25-4c.5522847 0 1 .44771525 1 1s-.4477153 1-1 1-1-.44771525-1-1 .4477153-1 1-1zm-6 0c.55228475 0 1 .44771525 1 1s-.44771525 1-1 1-1-.44771525-1-1 .44771525-1 1-1z\"></path>\n                          </svg>\n                        </button>\n                        <button\n                          className=\"p-1 rounded-full hover:bg-gray-100 transition-colors\"\n                          aria-label=\"More actions\"\n                        >\n                          <svg\n                            className=\"w-4 h-4 text-gray-500\"\n                            fill=\"currentColor\"\n                            viewBox=\"0 0 16 16\"\n                          >\n                            <path d=\"m3 9.5c.82842712 0 1.5-.67157288 1.5-1.5s-.67157288-1.5-1.5-1.5-1.5.67157288-1.5 1.5.67157288 1.5 1.5 1.5zm5 0c.82842712 0 1.5-.67157288 1.5-1.5s-.67157288-1.5-1.5-1.5-1.5.67157288-1.5 1.5.67157288 1.5 1.5 1.5zm5 0c.8284271 0 1.5-.67157288 1.5-1.5s-.6715729-1.5-1.5-1.5-1.5.67157288-1.5 1.5.6715729 1.5 1.5 1.5z\"></path>\n                          </svg>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            } else {\n              // Other person's messages - left aligned with avatar\n              return (\n                <div key={message.id} className=\"flex items-start space-x-3 mb-4 group\">\n                  {/* Avatar */}\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden\">\n                      {conversation.participant.avatar ? (\n                        <img\n                          src={conversation.participant.avatar}\n                          alt={conversation.participant.name || 'User'}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <span className=\"text-sm font-medium text-gray-600\">\n                          {conversation.participant.name?.charAt(0) || 'U'}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Message content */}\n                  <div className=\"flex-1 min-w-0\">\n                    {/* Name and timestamp */}\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {conversation.participant.name || 'User'}\n                      </span>\n                      <span className=\"text-xs text-gray-500\">{messageTime}</span>\n                    </div>\n\n                    {/* Message bubble */}\n                    <div className=\"bg-white border border-gray-200 rounded-2xl px-4 py-3 mb-1\">\n                      <p className=\"text-sm text-gray-900 leading-relaxed\">{message.content}</p>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <button\n                        className=\"p-1 rounded-full hover:bg-gray-100 transition-colors\"\n                        aria-label=\"React to message\"\n                      >\n                        <svg\n                          className=\"w-4 h-4 text-gray-500\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 16 16\"\n                        >\n                          <path d=\"m8 0c4.418278 0 8 3.581722 8 8s-3.581722 8-8 8-8-3.581722-8-8 3.581722-8 8-8zm0 1.5c-3.58985087 0-6.5 2.91014913-6.5 6.5 0 3.5898509 2.91014913 6.5 6.5 6.5 3.5898509 0 6.5-2.9101491 6.5-6.5 0-3.58985087-2.9101491-6.5-6.5-6.5zm-2.25 7.5c0 1.2426407 1.00735931 2.25 2.25 2.25s2.25-1.0073593 2.25-2.25h1.5c0 2.0710678-1.6789322 3.75-3.75 3.75-2.07106781 0-3.75-1.6789322-3.75-3.75zm5.25-4c.5522847 0 1 .44771525 1 1s-.4477153 1-1 1-1-.44771525-1-1 .4477153-1 1-1zm-6 0c.55228475 0 1 .44771525 1 1s-.44771525 1-1 1-1-.44771525-1-1 .44771525-1 1-1z\"></path>\n                        </svg>\n                      </button>\n                      <button\n                        className=\"p-1 rounded-full hover:bg-gray-100 transition-colors\"\n                        aria-label=\"More actions\"\n                      >\n                        <svg\n                          className=\"w-4 h-4 text-gray-500\"\n                          fill=\"currentColor\"\n                          viewBox=\"0 0 16 16\"\n                        >\n                          <path d=\"m3 9.5c.82842712 0 1.5-.67157288 1.5-1.5s-.67157288-1.5-1.5-1.5-1.5.67157288-1.5 1.5.67157288 1.5 1.5 1.5zm5 0c.82842712 0 1.5-.67157288 1.5-1.5s-.67157288-1.5-1.5-1.5-1.5.67157288-1.5 1.5.67157288 1.5 1.5 1.5zm5 0c.8284271 0 1.5-.67157288 1.5-1.5s-.6715729-1.5-1.5-1.5-1.5.67157288-1.5 1.5.6715729 1.5 1.5 1.5z\"></path>\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n          })\n        )}\n      </div>\n\n      {/* Message Input - Airbnb Style Compose Bar */}\n      <div className=\"border-t border-gray-200 bg-white flex-shrink-0 sticky bottom-0 z-10\">\n        {/* Main Compose Container */}\n        <div className=\"p-4\">\n          {/* Input Section */}\n          <div className=\"mb-4\">\n            <div className=\"relative\">\n              <label className=\"sr-only\" htmlFor=\"message_input\">\n                Type a message\n              </label>\n              <div className=\"relative\">\n                <div\n                  ref={messageInputRef}\n                  role=\"textbox\"\n                  aria-label=\"Type a message\"\n                  contentEditable=\"plaintext-only\"\n                  className=\"w-full min-h-[44px] max-h-32 px-4 py-3 text-sm text-gray-900 bg-white border border-gray-300 rounded-lg resize-none focus:outline-none focus:border-gray-500 focus:ring-1 focus:ring-gray-500 overflow-y-auto\"\n                  id=\"message_input\"\n                  data-testid=\"messaging-composebar\"\n                  tabIndex={0}\n                  style={\n                    {\n                      '--messaging-composebar-placeholder': 'Type a message',\n                    } as React.CSSProperties\n                  }\n                  onInput={e => {\n                    const target = e.target as HTMLDivElement;\n                    onMessageChange(target.textContent || '');\n                  }}\n                  onKeyPress={e => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSendMessage();\n                    }\n                  }}\n                >\n                  {!newMessage && (\n                    <span className=\"absolute inset-0 px-4 py-3 text-gray-500 pointer-events-none\">\n                      Type a message\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons Section */}\n          <div className=\"flex items-center justify-between\">\n            {/* Photo Upload Button */}\n            <div className=\"flex items-center\">\n              <button\n                className=\"inline-flex items-center justify-center p-2 rounded-lg hover:bg-gray-100 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\"\n                aria-label=\"Add photo or video\"\n                data-testid=\"compose-bar-button-messaging__open_image_upload_dialog\"\n                type=\"button\"\n              >\n                <div className=\"flex items-center\">\n                  <div className=\"flex items-center justify-center\">\n                    <svg className=\"w-6 h-6 text-gray-600\" fill=\"currentColor\" viewBox=\"0 0 32 32\">\n                      <path d=\"M27 3a4 4 0 0 1 4 4v18a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4V7a4 4 0 0 1 4-4zM8.89 19.04l-.1.08L3 24.92V25a2 2 0 0 0 1.85 2H18.1l-7.88-7.88a1 1 0 0 0-1.32-.08zm12.5-6-.1.08-7.13 7.13L20.92 27H27a2 2 0 0 0 2-1.85v-5.73l-6.3-6.3a1 1 0 0 0-1.31-.08zM27 5H5a2 2 0 0 0-2 2v15.08l4.38-4.37a3 3 0 0 1 4.1-.14l.14.14 1.13 1.13 7.13-7.13a3 3 0 0 1 4.1-.14l.14.14L29 16.59V7a2 2 0 0 0-1.85-2zM8 7a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 2a1 1 0 1 0 0 2 1 1 0 0 0 0-2z\"></path>\n                    </svg>\n                  </div>\n                </div>\n              </button>\n            </div>\n\n            {/* Send Button */}\n            <div className=\"flex items-center\">\n              <button\n                disabled={!newMessage.trim()}\n                className={`inline-flex items-center justify-center p-3 rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n                  newMessage.trim()\n                    ? 'bg-primary-500 text-white hover:bg-primary-600 focus:ring-primary-500 cursor-pointer'\n                    : 'bg-gray-200 text-gray-400 cursor-not-allowed focus:ring-gray-500'\n                }`}\n                aria-label=\"Send\"\n                data-testid=\"messaging_compose_bar_send_button\"\n                type=\"button\"\n                onClick={handleSendMessage}\n              >\n                <svg className=\"w-3 h-3 rotate-90\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                  <path d=\"m1 7.41 1.41 1.42 4.6-4.6v10.79h2V4.2l4.63 4.63 1.41-1.42-5.94-5.94a1.53 1.53 0 0 0-2.05-.1l-.11.1z\"></path>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/panels/ContextPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_actionId' is defined but never used.","line":17,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Context Panel Component\n// Location: src/features/phase1/conversations/components/panels/ContextPanel.tsx\n// Purpose: Right panel wrapper for contextual information and actions - Airbnb Style\n\nimport { Button } from '@/shared/components/buttons';\nimport { X } from 'lucide-react';\nimport React, { Suspense } from 'react';\nimport { useContextPanel } from '../../hooks/useContextPanel';\nimport { Conversation } from '../../types';\n\n// =============================================================================\n// COMPONENT PROPS\n// =============================================================================\n\ninterface ContextPanelProps {\n  conversation: Conversation | null;\n  onQuickAction: (_actionId: string) => void;\n  className?: string;\n}\n\n// =============================================================================\n// LAZY LOADED CONTEXT PANELS\n// =============================================================================\n\nconst UnifiedDealPanel = React.lazy(() => import('./context-panels/UnifiedDealPanel'));\n\n// =============================================================================\n// CONTEXT PANEL COMPONENT\n// =============================================================================\n\nconst ContextPanel: React.FC<ContextPanelProps> = ({\n  conversation,\n  onQuickAction,\n  className = '',\n}) => {\n  const { isVisible, isLoading, error, toggleVisibility } = useContextPanel();\n\n  // Don't render if no conversation or not visible\n  if (!conversation || !isVisible) {\n    return null;\n  }\n\n  // Render the unified deal panel\n  const renderContextPanel = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500\"></div>\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-full p-4 text-center\">\n          <div className=\"text-red-500 mb-2\">⚠️</div>\n          <p className=\"text-sm text-gray-600 mb-4\">{error}</p>\n          <Button size=\"sm\" variant=\"secondary\" onPress={() => window.location.reload()}>\n            Retry\n          </Button>\n        </div>\n      );\n    }\n\n    return <UnifiedDealPanel conversation={conversation} onQuickAction={onQuickAction} />;\n  };\n\n  return (\n    <div\n      className={`context-panel bg-white border-l border-gray-200 flex flex-col h-full ${className}`}\n    >\n      {/* Panel Header - Minimal & Functional */}\n      <div className=\"px-4 py-6 border-b border-gray-200 bg-white flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Business Details</h3>\n          </div>\n          <Button\n            isIconOnly\n            variant=\"tertiary\"\n            size=\"sm\"\n            className=\"text-gray-500 hover:text-gray-700\"\n            onPress={toggleVisibility}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Panel Content */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <Suspense\n          fallback={\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500\"></div>\n            </div>\n          }\n        >\n          {renderContextPanel()}\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default ContextPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/panels/EnhancedConversationPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_conversationId' is defined but never used.","line":19,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3427,3459],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Enhanced Conversation Panel Component\n// Location: src/features/phase1/conversations/components/panels/EnhancedConversationPanel.tsx\n// Purpose: Left panel with enhanced messages header (Airbnb-style)\n\nimport { Button } from '@/shared/components/buttons';\nimport { Avatar } from '@heroui/react';\nimport { MessageCircle, Search } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Conversation } from '../../types';\nimport MessagesHeader, { MessageCategory, MessageStatus } from '../MessagesHeader';\n\n// =============================================================================\n// COMPONENT PROPS\n// =============================================================================\n\ninterface EnhancedConversationPanelProps {\n  conversations: Conversation[];\n  selectedConversationId: string | null;\n  onConversationSelect: (_conversationId: string) => void;\n  onNavigateToSearch: () => void;\n  className?: string;\n}\n\n// =============================================================================\n// ENHANCED CONVERSATION PANEL COMPONENT\n// =============================================================================\n\nconst EnhancedConversationPanel: React.FC<EnhancedConversationPanelProps> = ({\n  conversations,\n  selectedConversationId,\n  onConversationSelect,\n  onNavigateToSearch,\n  className = '',\n}) => {\n  // State for search and filters\n  const [searchQuery, setSearchQuery] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState<MessageCategory>('all');\n  const [statusFilter, setStatusFilter] = useState<MessageStatus>('all');\n\n  const formatMessageTime = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (days === 0) {\n      return timestamp.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false,\n      });\n    } else if (days === 1) {\n      return 'Yesterday';\n    } else if (days < 7) {\n      return timestamp.toLocaleDateString('en-US', { weekday: 'short' });\n    } else {\n      return timestamp.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n      });\n    }\n  };\n\n  const filteredConversations = conversations.filter(conv => {\n    // Category filter\n    if (categoryFilter !== 'all') {\n      if (categoryFilter === 'business' && !conv.businessContext) return false;\n      if (categoryFilter === 'due_diligence' && conv.status !== 'negotiating') return false;\n      if (categoryFilter === 'support' && conv.participant.role !== 'advisor') return false;\n    }\n\n    // Status filter\n    if (statusFilter === 'unread' && conv.unreadCount === 0) return false;\n    if (statusFilter === 'archived' && !conv.isArchived) return false;\n\n    // Search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      return (\n        conv.participant.name.toLowerCase().includes(query) ||\n        conv.participant.company.toLowerCase().includes(query) ||\n        conv.businessContext?.title.toLowerCase().includes(query) ||\n        conv.businessContext?.location.toLowerCase().includes(query) ||\n        conv.lastMessage.content.toLowerCase().includes(query)\n      );\n    }\n\n    return true;\n  });\n\n  const unreadCount = conversations.filter(c => c.unreadCount > 0).length;\n\n  const handleSettingsClick = () => {\n    // TODO: Implement settings modal\n    console.log('Settings clicked');\n  };\n\n  return (\n    <div\n      className={`enhanced-conversation-panel bg-white border-r border-gray-200 flex flex-col ${className}`}\n    >\n      {/* Enhanced Messages Header */}\n      <MessagesHeader\n        searchQuery={searchQuery}\n        categoryFilter={categoryFilter}\n        statusFilter={statusFilter}\n        unreadCount={unreadCount}\n        onSearchChange={setSearchQuery}\n        onCategoryChange={setCategoryFilter}\n        onStatusChange={setStatusFilter}\n        onSettingsClick={handleSettingsClick}\n      />\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {filteredConversations.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full p-8 text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n              <MessageCircle className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              {searchQuery ? 'No conversations found' : 'No conversations'}\n            </h3>\n            <p className=\"text-gray-600 text-sm mb-4\">\n              {searchQuery\n                ? 'Try adjusting your search or filters.'\n                : 'Start connecting buyers and sellers.'}\n            </p>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onPress={onNavigateToSearch}\n              startContent={<Search className=\"w-4 h-4\" />}\n            >\n              Browse Businesses\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {filteredConversations.map(conversation => (\n              <div\n                key={conversation.id}\n                className={`mx-2 p-4 rounded-lg cursor-pointer transition-colors relative border-0 ${\n                  selectedConversationId === conversation.id\n                    ? 'bg-gray-100'\n                    : 'bg-gray-100 hover:bg-gray-200'\n                }`}\n                onClick={() => onConversationSelect(conversation.id)}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  {/* Avatar */}\n                  <div className=\"flex-shrink-0\">\n                    <Avatar\n                      src={conversation.participant.avatar}\n                      alt={conversation.participant.name}\n                      className=\"w-10 h-10\"\n                    />\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    {/* Name and Date */}\n                    <div className=\"flex items-center justify-between mb-0.5\">\n                      <h3\n                        className={`text-sm font-medium truncate ${\n                          conversation.unreadCount > 0 ? 'text-gray-900' : 'text-gray-700'\n                        }`}\n                      >\n                        {conversation.participant.name}\n                      </h3>\n                      <span className=\"text-xs text-gray-500 whitespace-nowrap ml-2\">\n                        {formatMessageTime(conversation.lastMessage.timestamp)}\n                      </span>\n                    </div>\n\n                    {/* Message Preview */}\n                    <div className=\"mb-0.5\">\n                      <p\n                        className={`text-sm truncate ${\n                          conversation.unreadCount > 0\n                            ? 'text-gray-900 font-medium'\n                            : 'text-gray-600'\n                        }`}\n                      >\n                        {conversation.lastMessage.content}\n                      </p>\n                    </div>\n\n                    {/* Status */}\n                    {conversation.status === 'closed' && (\n                      <div>\n                        <span className=\"text-xs text-gray-500\">Closed</span>\n                      </div>\n                    )}\n                    {conversation.status === 'negotiating' && (\n                      <div>\n                        <span className=\"text-xs text-orange-600\">Negotiating</span>\n                      </div>\n                    )}\n                    {conversation.status === 'active' && (\n                      <div>\n                        <span className=\"text-xs text-green-600\">Active</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedConversationPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/panels/ThreePanelLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/components/panels/context-panels/UnifiedDealPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_actionId' is defined but never used.","line":41,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Unified Deal Panel Component\n// Location: src/features/phase1/conversations/components/panels/context-panels/UnifiedDealPanel.tsx\n// Purpose: Sophisticated yet simple unified deal command center\n\nimport { Button } from '@/shared/components/buttons';\nimport { Chip, Progress } from '@heroui/react';\nimport {\n  Building2,\n  Download,\n  FileText,\n  Handshake,\n  MapPin,\n  MessageSquare,\n  Upload,\n} from 'lucide-react';\nimport React from 'react';\nimport { Conversation } from '../../../types';\n\n// =============================================================================\n// TYPES\n// =============================================================================\n\n// Extended business context type for photos\ninterface BusinessContextWithPhotos {\n  title: string;\n  price: number;\n  currency: string;\n  location: string;\n  photos?: Array<{\n    url: string;\n    caption?: string;\n  }>;\n}\n\n// =============================================================================\n// COMPONENT PROPS\n// =============================================================================\n\ninterface UnifiedDealPanelProps {\n  conversation: Conversation | null;\n  onQuickAction: (_actionId: string) => void;\n  className?: string;\n}\n\n// =============================================================================\n// UNIFIED DEAL PANEL COMPONENT\n// =============================================================================\n\nconst UnifiedDealPanel: React.FC<UnifiedDealPanelProps> = ({\n  conversation,\n  onQuickAction,\n  className = '',\n}) => {\n  if (!conversation) {\n    return (\n      <div className={`unified-deal-panel p-4 ${className}`}>\n        <div className=\"flex flex-col items-center justify-center h-full text-center\">\n          <Building2 className=\"w-12 h-12 text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Deal Selected</h3>\n          <p className=\"text-gray-600 text-sm\">\n            Select a conversation to view deal details and actions.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const businessContext = conversation.businessContext || conversation.context?.businessContext;\n\n  // Mock deal data - would come from API\n  const dealData = {\n    status: 'negotiation',\n    progress: 65,\n    currentStage: 'due_diligence',\n    lastActivity: '2 hours ago',\n    nextDeadline: 'Jan 25, 2024',\n    totalValue: businessContext?.price || 2500000,\n    currency: 'EUR',\n  };\n\n  const activeTasks = [\n    {\n      id: '1',\n      type: 'due_diligence',\n      title: 'Review Financial Statements',\n      status: 'pending',\n      priority: 'high',\n      dueDate: 'Jan 25',\n    },\n    {\n      id: '2',\n      type: 'offer',\n      title: 'Respond to Counter Offer',\n      status: 'pending',\n      priority: 'medium',\n      dueDate: 'Jan 27',\n    },\n    {\n      id: '3',\n      type: 'document',\n      title: 'Share Business Plan',\n      status: 'in_progress',\n      priority: 'low',\n      dueDate: 'Jan 30',\n    },\n  ];\n\n  const recentDocuments = [\n    {\n      id: '1',\n      name: 'Financial Statements 2023.pdf',\n      type: 'pdf',\n      uploadedAt: '2 hours ago',\n      accessLevel: 'due_diligence',\n    },\n    {\n      id: '2',\n      name: 'Business Plan.docx',\n      type: 'docx',\n      uploadedAt: '1 day ago',\n      accessLevel: 'public',\n    },\n    {\n      id: '3',\n      name: 'Market Analysis.xlsx',\n      type: 'xlsx',\n      uploadedAt: '2 days ago',\n      accessLevel: 'nda_required',\n    },\n  ];\n\n  const formatCurrency = (amount: number, currency: string = 'EUR') => {\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'pending':\n        return 'default';\n      case 'overdue':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getTaskIcon = (type: string) => {\n    switch (type) {\n      case 'due_diligence':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'offer':\n        return <Handshake className=\"w-4 h-4\" />;\n      case 'document':\n        return <Upload className=\"w-4 h-4\" />;\n      default:\n        return <MessageSquare className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className={`unified-deal-panel flex flex-col h-full ${className}`}>\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        <div className=\"space-y-6\">\n          {/* Business Photos */}\n          {businessContext &&\n          (businessContext as BusinessContextWithPhotos).photos &&\n          (businessContext as BusinessContextWithPhotos).photos!.length > 0 ? (\n            <div className=\"grid grid-cols-2 gap-1 h-32 rounded-lg overflow-hidden\">\n              <div className=\"relative\">\n                <img\n                  src={(businessContext as BusinessContextWithPhotos).photos![0].url}\n                  alt={\n                    (businessContext as BusinessContextWithPhotos).photos![0].caption ||\n                    businessContext.title\n                  }\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              <div className=\"relative\">\n                <img\n                  src={\n                    (businessContext as BusinessContextWithPhotos).photos![1]?.url ||\n                    (businessContext as BusinessContextWithPhotos).photos![0].url\n                  }\n                  alt={\n                    (businessContext as BusinessContextWithPhotos).photos![1]?.caption ||\n                    businessContext.title\n                  }\n                  className=\"w-full h-full object-cover\"\n                />\n                {(businessContext as BusinessContextWithPhotos).photos!.length > 2 && (\n                  <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                    <span className=\"text-white text-sm font-medium\">\n                      +{(businessContext as BusinessContextWithPhotos).photos!.length - 2}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"h-32 bg-gray-100 rounded-lg flex items-center justify-center\">\n              <div className=\"text-center\">\n                <Building2 className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-500\">No photos available</p>\n              </div>\n            </div>\n          )}\n\n          {/* Business Info */}\n          {businessContext && (\n            <div className=\"space-y-3\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">{businessContext.title}</h3>\n                <div className=\"flex items-center text-sm text-gray-600 mt-1\">\n                  <MapPin className=\"w-4 h-4 mr-1\" />\n                  <span>{businessContext.location}</span>\n                </div>\n              </div>\n\n              {/* Deal Value */}\n              <div className=\"bg-gray-50 rounded-lg p-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Deal Value</p>\n                    <p className=\"text-xl font-bold text-gray-900\">\n                      {formatCurrency(dealData.totalValue, dealData.currency)}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <Chip size=\"sm\" color=\"success\" variant=\"flat\">\n                      {dealData.progress}% Complete\n                    </Chip>\n                  </div>\n                </div>\n                <div className=\"mt-2\">\n                  <Progress value={dealData.progress} color=\"success\" className=\"h-2\" />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Next Steps */}\n          <div className=\"pt-4 border-t border-gray-200\">\n            <div className=\"mb-3\">\n              <h4 className=\"text-sm font-semibold text-gray-900\">Next Steps</h4>\n            </div>\n            <div className=\"space-y-2\">\n              {activeTasks.map(task => (\n                <div\n                  key={task.id}\n                  className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-100 cursor-pointer transition-all duration-200 border border-transparent hover:border-gray-200 hover:shadow-sm\"\n                  onClick={() => onQuickAction(`task_${task.id}`)}\n                >\n                  {getTaskIcon(task.type)}\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 hover:text-primary-600 transition-colors\">\n                      {task.title}\n                    </p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Chip size=\"sm\" color={getStatusColor(task.status)} variant=\"flat\">\n                        {task.status}\n                      </Chip>\n                      <span className=\"text-xs text-gray-500\">Due {task.dueDate}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex-shrink-0\">\n                    <svg\n                      className=\"w-4 h-4 text-gray-400\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M9 5l7 7-7 7\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"pt-4 border-t border-gray-200\">\n            <h4 className=\"text-sm font-semibold text-gray-900 mb-4\">Quick Actions</h4>\n\n            <div className=\"grid grid-cols-1 gap-3\">\n              <Button\n                className=\"w-full h-auto p-4 rounded-lg hover:shadow-md transition-all duration-200\"\n                variant=\"secondary\"\n                onPress={() => onQuickAction('create_offer')}\n              >\n                <div className=\"flex flex-col w-full text-left\">\n                  <div className=\"font-semibold text-white text-sm leading-tight\">Make Offer</div>\n                  <div className=\"text-xs text-gray-300 mt-1 leading-tight\">\n                    Create a new business offer\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                className=\"w-full h-auto p-4 rounded-lg hover:shadow-md transition-all duration-200\"\n                variant=\"secondary\"\n                onPress={() => onQuickAction('request_documents')}\n              >\n                <div className=\"flex flex-col w-full text-left\">\n                  <div className=\"font-semibold text-white text-sm leading-tight\">\n                    Request Documents\n                  </div>\n                  <div className=\"text-xs text-gray-300 mt-1 leading-tight\">\n                    Ask for due diligence items\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                className=\"w-full h-auto p-4 rounded-lg hover:shadow-md transition-all duration-200\"\n                variant=\"secondary\"\n                onPress={() => onQuickAction('share_document')}\n              >\n                <div className=\"flex flex-col w-full text-left\">\n                  <div className=\"font-semibold text-white text-sm leading-tight\">\n                    Share Document\n                  </div>\n                  <div className=\"text-xs text-gray-300 mt-1 leading-tight\">\n                    Upload and share files\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                className=\"w-full h-auto p-4 rounded-lg hover:shadow-md transition-all duration-200\"\n                variant=\"secondary\"\n                onPress={() => onQuickAction('schedule_meeting')}\n              >\n                <div className=\"flex flex-col w-full text-left\">\n                  <div className=\"font-semibold text-white text-sm leading-tight\">\n                    Schedule Meeting\n                  </div>\n                  <div className=\"text-xs text-gray-300 mt-1 leading-tight\">\n                    Book a call or meeting\n                  </div>\n                </div>\n              </Button>\n            </div>\n          </div>\n\n          {/* Deal Timeline */}\n          <div className=\"pt-4 border-t border-gray-200\">\n            <h4 className=\"text-sm font-semibold text-gray-900 mb-4\">Deal Timeline</h4>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">Initial Contact</p>\n                  <p className=\"text-xs text-gray-500\">Jan 15, 2024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">First Offer Made</p>\n                  <p className=\"text-xs text-gray-500\">Jan 18, 2024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">Due Diligence Started</p>\n                  <p className=\"text-xs text-gray-500\">Jan 20, 2024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Final Negotiation</p>\n                  <p className=\"text-xs text-gray-400\">Pending</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Shared Files */}\n          <div className=\"pt-4 border-t border-gray-200\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"text-sm font-semibold text-gray-900\">Shared Files</h4>\n              <Button\n                size=\"sm\"\n                variant=\"tertiary\"\n                onPress={() => onQuickAction('upload_document')}\n                startContent={<Upload className=\"w-3 h-3\" />}\n              >\n                Upload\n              </Button>\n            </div>\n            <div className=\"space-y-2\">\n              {recentDocuments.map(doc => (\n                <div\n                  key={doc.id}\n                  className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50\"\n                >\n                  <FileText className=\"w-4 h-4 text-gray-400\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900 truncate\">{doc.name}</p>\n                    <p className=\"text-xs text-gray-500\">{doc.uploadedAt}</p>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"tertiary\"\n                    isIconOnly\n                    onPress={() => onQuickAction(`download_${doc.id}`)}\n                  >\n                    <Download className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UnifiedDealPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/hooks/useContextPanel.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_visible' is defined but never used.","line":22,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'_collapsed' is defined but never used.","line":24,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'_context' is defined but never used.","line":26,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'_loading' is defined but never used.","line":27,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":28,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'_preferences' is defined but never used.","line":29,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":86},{"ruleId":"no-unused-vars","severity":1,"message":"'_conversation' is defined but never used.","line":32,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":46},{"ruleId":"no-unused-vars","severity":1,"message":"'_conversation' is defined but never used.","line":33,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'_breakpoint' is defined but never used.","line":37,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":215,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":215,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Context Panel State Management\n// Location: src/features/phase1/conversations/hooks/useContextPanel.ts\n// Purpose: Zustand store for managing three-panel messaging interface state\n\nimport { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nimport {\n  Breakpoint,\n  ContextDetectionResult,\n  ContextPanelState,\n  ContextPanelType,\n  Conversation,\n  PanelLayoutConfig,\n} from '../types';\n\n// =============================================================================\n// CONTEXT PANEL STORE INTERFACE\n// =============================================================================\n\ninterface ContextPanelStore extends ContextPanelState {\n  // Actions\n  setVisibility: (_visible: boolean) => void;\n  toggleVisibility: () => void;\n  setCollapsed: (_collapsed: boolean) => void;\n  toggleCollapsed: () => void;\n  setActiveContext: (_context: ContextPanelType) => void;\n  setLoading: (_loading: boolean) => void;\n  setError: (_error: string | null) => void;\n  updateUserPreferences: (_preferences: Partial<ContextPanelState['userPreferences']>) => void;\n\n  // Context detection\n  detectContext: (_conversation: Conversation) => ContextDetectionResult;\n  autoSwitchContext: (_conversation: Conversation) => void;\n\n  // Responsive design\n  currentBreakpoint: Breakpoint;\n  setBreakpoint: (_breakpoint: Breakpoint) => void;\n  getLayoutConfig: () => PanelLayoutConfig;\n\n  // Reset\n  reset: () => void;\n}\n\n// =============================================================================\n// INITIAL STATE\n// =============================================================================\n\nconst initialState: ContextPanelState = {\n  isVisible: false, // Hidden by default\n  isCollapsed: false,\n  activeContext: 'business_info', // Default to business info\n  isLoading: false,\n  error: null,\n  userPreferences: {\n    defaultVisibility: false, // Hidden by default\n    preferredContext: 'business_info', // Default to business info\n    rememberCollapseState: false, // Don't persist collapse state to avoid issues\n  },\n};\n\n// =============================================================================\n// CONTEXT DETECTION LOGIC\n// =============================================================================\n\nconst detectContextType = (conversation: Conversation): ContextDetectionResult => {\n  // Priority order for context detection\n  const rules = [\n    {\n      condition: (conv: Conversation) => conv.context?.currentStage === 'due_diligence',\n      contextType: 'due_diligence' as ContextPanelType,\n      priority: 1,\n      reason: 'Due diligence stage active',\n    },\n    {\n      condition: (conv: Conversation) =>\n        conv.context?.currentStage === 'offer' || conv.context?.currentStage === 'transaction',\n      contextType: 'transaction' as ContextPanelType,\n      priority: 2,\n      reason: 'Transaction/offer stage active',\n    },\n    {\n      condition: (conv: Conversation) => conv.context?.transactionState?.hasDueDiligence,\n      contextType: 'documents' as ContextPanelType,\n      priority: 3,\n      reason: 'Documents shared or due diligence active',\n    },\n    {\n      condition: (conv: Conversation) => conv.businessContext || conv.context?.businessContext,\n      contextType: 'business_info' as ContextPanelType,\n      priority: 4,\n      reason: 'Business context available',\n    },\n  ];\n\n  // Find the highest priority rule that matches\n  const matchingRule = rules\n    .filter(rule => rule.condition(conversation))\n    .sort((a, b) => a.priority - b.priority)[0];\n\n  if (matchingRule) {\n    return {\n      contextType: matchingRule.contextType,\n      shouldShow: true,\n      confidence: 0.9,\n      reason: matchingRule.reason,\n    };\n  }\n\n  // Default to communication context\n  return {\n    contextType: 'communication',\n    shouldShow: true,\n    confidence: 0.5,\n    reason: 'Default communication context',\n  };\n};\n\n// =============================================================================\n// RESPONSIVE LAYOUT CONFIGURATIONS\n// =============================================================================\n\nconst getLayoutConfigs = (): Record<Breakpoint, PanelLayoutConfig> => ({\n  desktop: {\n    breakpoint: 'desktop',\n    leftPanel: {\n      width: 400,\n      visible: true,\n      position: 'relative',\n    },\n    middlePanel: {\n      width: 'flex',\n      visible: true,\n    },\n    rightPanel: {\n      width: 420,\n      visible: true,\n      position: 'relative',\n      overlay: false,\n    },\n  },\n  tablet: {\n    breakpoint: 'tablet',\n    leftPanel: {\n      width: 360,\n      visible: true,\n      position: 'relative',\n    },\n    middlePanel: {\n      width: 'flex',\n      visible: true,\n    },\n    rightPanel: {\n      width: 380,\n      visible: true,\n      position: 'relative',\n      overlay: false,\n    },\n  },\n  mobile: {\n    breakpoint: 'mobile',\n    leftPanel: {\n      width: 100,\n      visible: false,\n      position: 'fixed',\n    },\n    middlePanel: {\n      width: 'flex',\n      visible: true,\n    },\n    rightPanel: {\n      width: 100,\n      visible: false,\n      position: 'fixed',\n      overlay: true,\n    },\n  },\n});\n\n// =============================================================================\n// ZUSTAND STORE\n// =============================================================================\n\nexport const useContextPanel = create<ContextPanelStore>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        ...initialState,\n        currentBreakpoint: 'desktop',\n\n        // Actions\n        setVisibility: (visible: boolean) =>\n          set(\n            state => ({\n              isVisible: visible,\n              userPreferences: {\n                ...state.userPreferences,\n                defaultVisibility: visible,\n              },\n            }),\n            false,\n            'setVisibility'\n          ),\n\n        toggleVisibility: () =>\n          set(\n            state => ({\n              isVisible: !state.isVisible,\n            }),\n            false,\n            'toggleVisibility'\n          ),\n\n        setCollapsed: (collapsed: boolean) =>\n          set(\n            state => ({\n              isCollapsed: collapsed,\n            }),\n            false,\n            'setCollapsed'\n          ),\n\n        toggleCollapsed: () =>\n          set(\n            state => ({\n              isCollapsed: !state.isCollapsed,\n            }),\n            false,\n            'toggleCollapsed'\n          ),\n\n        setActiveContext: (context: ContextPanelType) =>\n          set(\n            state => ({\n              activeContext: context,\n              userPreferences: {\n                ...state.userPreferences,\n                preferredContext: context,\n              },\n            }),\n            false,\n            'setActiveContext'\n          ),\n\n        setLoading: (loading: boolean) => set({ isLoading: loading }, false, 'setLoading'),\n\n        setError: (error: string | null) => set({ error }, false, 'setError'),\n\n        updateUserPreferences: preferences =>\n          set(\n            state => ({\n              userPreferences: {\n                ...state.userPreferences,\n                ...preferences,\n              },\n            }),\n            false,\n            'updateUserPreferences'\n          ),\n\n        // Context detection\n        detectContext: (conversation: Conversation) => {\n          return detectContextType(conversation);\n        },\n\n        autoSwitchContext: (conversation: Conversation) => {\n          const detection = detectContextType(conversation);\n          const state = get();\n\n          // Only auto-switch if confidence is high and context is different\n          if (detection.confidence > 0.7 && detection.contextType !== state.activeContext) {\n            set(\n              {\n                activeContext: detection.contextType,\n                isVisible: detection.shouldShow,\n              },\n              false,\n              'autoSwitchContext'\n            );\n          }\n        },\n\n        // Responsive design\n        setBreakpoint: (breakpoint: Breakpoint) =>\n          set({ currentBreakpoint: breakpoint }, false, 'setBreakpoint'),\n\n        getLayoutConfig: () => {\n          const state = get();\n          const configs = getLayoutConfigs();\n          return configs[state.currentBreakpoint];\n        },\n\n        // Reset\n        reset: () => set(initialState, false, 'reset'),\n      }),\n      {\n        name: 'context-panel-store',\n        partialize: state => ({\n          userPreferences: state.userPreferences,\n          isVisible: state.userPreferences.defaultVisibility,\n          // Don't persist isCollapsed to avoid state conflicts\n        }),\n      }\n    ),\n    {\n      name: 'context-panel-store',\n    }\n  )\n);\n\n// =============================================================================\n// HOOK FOR BREAKPOINT DETECTION\n// =============================================================================\n\nexport const useBreakpointDetection = () => {\n  const setBreakpoint = useContextPanel(state => state.setBreakpoint);\n\n  const detectBreakpoint = (width: number): Breakpoint => {\n    if (width < 768) return 'mobile';\n    if (width < 1200) return 'tablet';\n    return 'desktop';\n  };\n\n  const handleResize = () => {\n    const width = window.innerWidth;\n    const breakpoint = detectBreakpoint(width);\n    setBreakpoint(breakpoint);\n  };\n\n  return {\n    detectBreakpoint,\n    handleResize,\n  };\n};\n\n// =============================================================================\n// HOOK FOR CONTEXT DETECTION\n// =============================================================================\n\nexport const useContextDetection = (conversation: Conversation | null) => {\n  const detectContext = useContextPanel(state => state.detectContext);\n  const autoSwitchContext = useContextPanel(state => state.autoSwitchContext);\n\n  const detection = conversation ? detectContext(conversation) : null;\n\n  const triggerAutoSwitch = () => {\n    if (conversation) {\n      autoSwitchContext(conversation);\n    }\n  };\n\n  return {\n    detection,\n    triggerAutoSwitch,\n  };\n};\n\n// =============================================================================\n// HOOK FOR PANEL LAYOUT\n// =============================================================================\n\nexport const usePanelLayout = () => {\n  const currentBreakpoint = useContextPanel(state => state.currentBreakpoint);\n  const getLayoutConfig = useContextPanel(state => state.getLayoutConfig);\n  const isVisible = useContextPanel(state => state.isVisible);\n  const isCollapsed = useContextPanel(state => state.isCollapsed);\n\n  const layoutConfig = getLayoutConfig();\n\n  // Adjust layout based on panel state\n  const adjustedConfig: PanelLayoutConfig = {\n    ...layoutConfig,\n    rightPanel: {\n      ...layoutConfig.rightPanel,\n      visible: isVisible && !isCollapsed,\n    },\n  };\n\n  return {\n    breakpoint: currentBreakpoint,\n    layoutConfig: adjustedConfig,\n    isVisible,\n    isCollapsed,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/conversations/types/index.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":213,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":213,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🗨️ Conversation Feature Types\n// Location: src/features/phase1/conversations/types/index.ts\n// Purpose: Type definitions for conversation-centric transaction management\n\n// =============================================================================\n// ENHANCED MESSAGE TYPES\n// =============================================================================\n\n/**\n * Enhanced message interface with transaction-specific data\n */\nexport interface ConversationMessage {\n  id: string;\n  conversationId: string;\n  senderId: string;\n  recipientId: string;\n  content: string;\n  attachments?: Array<{\n    id: string;\n    name: string;\n    url: string;\n    type: string;\n  }>;\n  sentAt: string;\n  readAt?: string;\n  isRead?: boolean;\n  type: 'text' | 'system' | 'offer' | 'due_diligence' | 'document' | 'nda' | 'transaction';\n\n  // Offer-specific data\n  offerDetails?: {\n    amount: number;\n    currency: string;\n    terms: string;\n    status: 'pending' | 'accepted' | 'rejected' | 'countered';\n    expirationDate?: string;\n    conditions?: string[];\n    counterOffer?: {\n      amount: number;\n      terms: string;\n      conditions?: string[];\n    };\n  };\n\n  // Due diligence-specific data\n  dueDiligenceDetails?: {\n    processId: string;\n    category: string;\n    itemId: string;\n    status: 'requested' | 'provided' | 'reviewed' | 'approved' | 'rejected';\n    deadline?: string;\n    priority: 'low' | 'medium' | 'high' | 'urgent';\n    relatedDocuments?: string[];\n    notes?: string;\n  };\n\n  // Document-specific data\n  documentDetails?: {\n    documentId: string;\n    name: string;\n    type: string;\n    size: number;\n    accessLevel: 'public' | 'nda_required' | 'due_diligence';\n    downloadUrl?: string;\n    previewUrl?: string;\n  };\n\n  // NDA-specific data\n  ndaDetails?: {\n    ndaId: string;\n    status: 'pending' | 'signed' | 'expired' | 'rejected';\n    signedAt?: string;\n    expiresAt?: string;\n    version: string;\n  };\n\n  // Transaction-specific data\n  transactionDetails?: {\n    transactionId: string;\n    stage: 'offer' | 'due_diligence' | 'negotiation' | 'closing' | 'completed';\n    actionRequired?: string;\n    deadline?: string;\n    progress?: number;\n  };\n}\n\n// =============================================================================\n// CONVERSATION CONTEXT TYPES\n// =============================================================================\n\n/**\n * Transaction stage enumeration\n */\nexport type TransactionStage =\n  | 'inquiry'\n  | 'nda'\n  | 'offer'\n  | 'due_diligence'\n  | 'transaction'\n  | 'completed';\n\n/**\n * Transaction state tracking\n */\nexport interface TransactionState {\n  hasNDA: boolean;\n  hasOffer: boolean;\n  hasDueDiligence: boolean;\n  hasTransaction: boolean;\n  currentStage: TransactionStage;\n  progress: number;\n}\n\n/**\n * Quick action for transaction stages\n */\nexport interface QuickAction {\n  id: string;\n  label: string;\n  icon: string;\n  action: () => void;\n  available: boolean;\n  urgency: 'low' | 'medium' | 'high';\n  description?: string;\n}\n\n/**\n * Transaction progress tracking\n */\nexport interface TransactionProgress {\n  percentage: number;\n  description: string;\n  currentStep: string;\n  nextStep?: string;\n  estimatedCompletion?: string;\n}\n\n/**\n * Enhanced conversation context\n */\nexport interface ConversationContext {\n  id: string;\n  listingId: string;\n  currentStage: TransactionStage;\n  transactionState: TransactionState;\n  quickActions: QuickAction[];\n  progress: TransactionProgress;\n  lastActivity: string;\n  participants: ConversationParticipant[];\n  businessContext?: {\n    title: string;\n    price: number;\n    currency: string;\n    location: string;\n    sector: string;\n  };\n}\n\n/**\n * Conversation participant\n */\nexport interface ConversationParticipant {\n  id: string;\n  name: string;\n  role: 'buyer' | 'seller' | 'advisor';\n  company?: string;\n  avatar?: string;\n  isOnline: boolean;\n  lastSeen?: string;\n}\n\n// =============================================================================\n// CONVERSATION TYPES\n// =============================================================================\n\n/**\n * Enhanced conversation interface\n */\nexport interface Conversation {\n  id: string;\n  participant: ConversationParticipant;\n  lastMessage: {\n    content: string;\n    timestamp: Date;\n    isRead: boolean;\n    senderId: string;\n    type: ConversationMessage['type'];\n  };\n  businessContext?: {\n    title: string;\n    price: number;\n    currency: string;\n    location: string;\n  };\n  unreadCount: number;\n  isPinned: boolean;\n  isArchived: boolean;\n  status: 'active' | 'negotiating' | 'closed';\n  context: ConversationContext;\n}\n\n// =============================================================================\n// MODAL TYPES\n// =============================================================================\n\n/**\n * Modal props for transaction actions\n */\nexport interface TransactionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  conversationId: string;\n  listingId?: string;\n  onSuccess?: (data: unknown) => void;\n}\n\n/**\n * Offer creation modal props\n */\nexport interface OfferCreationModalProps extends TransactionModalProps {\n  initialOffer?: {\n    amount?: number;\n    terms?: string;\n    conditions?: string[];\n  };\n}\n\n/**\n * Due diligence request modal props\n */\nexport interface DueDiligenceRequestModalProps extends TransactionModalProps {\n  processId?: string;\n  category?: string;\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\n}\n\n/**\n * Document sharing modal props\n */\nexport interface DocumentSharingModalProps extends TransactionModalProps {\n  documentType?: 'financial' | 'legal' | 'operational' | 'other';\n  accessLevel?: 'public' | 'nda_required' | 'due_diligence';\n}\n\n// =============================================================================\n// API TYPES\n// =============================================================================\n\n/**\n * Create offer request\n */\nexport interface CreateOfferRequest {\n  conversationId: string;\n  amount: number;\n  currency: string;\n  terms: string;\n  conditions?: string[];\n  expirationDate?: string;\n  message?: string;\n}\n\n/**\n * Create due diligence request\n */\nexport interface CreateDueDiligenceRequest {\n  conversationId: string;\n  category: string;\n  itemId: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  deadline?: string;\n  message?: string;\n}\n\n/**\n * Share document request\n */\nexport interface ShareDocumentRequest {\n  conversationId: string;\n  documentId: string;\n  accessLevel: 'public' | 'nda_required' | 'due_diligence';\n  message?: string;\n}\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\n/**\n * Message filter options\n */\nexport interface MessageFilter {\n  type?: ConversationMessage['type'];\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  sender?: string;\n  hasAttachments?: boolean;\n}\n\n/**\n * Conversation filter options\n */\nexport interface ConversationFilter {\n  status?: Conversation['status'];\n  stage?: TransactionStage;\n  hasUnread?: boolean;\n  participantRole?: 'buyer' | 'seller';\n}\n\n/**\n * Transaction analytics\n */\nexport interface TransactionAnalytics {\n  totalConversations: number;\n  activeConversations: number;\n  averageResponseTime: number;\n  conversionRate: number;\n  stageDistribution: Record<TransactionStage, number>;\n}\n\n// =============================================================================\n// CONTEXT PANEL TYPES\n// =============================================================================\n\n/**\n * Context panel types for different conversation stages\n */\nexport type ContextPanelType =\n  | 'business_info'\n  | 'due_diligence'\n  | 'transaction'\n  | 'documents'\n  | 'communication';\n\n/**\n * Context panel state interface\n */\nexport interface ContextPanelState {\n  isVisible: boolean;\n  isCollapsed: boolean;\n  activeContext: ContextPanelType;\n  isLoading: boolean;\n  error: string | null;\n  userPreferences: {\n    defaultVisibility: boolean;\n    preferredContext: ContextPanelType;\n    rememberCollapseState: boolean;\n  };\n}\n\n/**\n * Context detection result\n */\nexport interface ContextDetectionResult {\n  contextType: ContextPanelType;\n  shouldShow: boolean;\n  confidence: number;\n  reason: string;\n}\n\n/**\n * Breakpoint definitions\n */\nexport type Breakpoint = 'mobile' | 'tablet' | 'desktop';\n\n/**\n * Panel layout configuration\n */\nexport interface PanelLayoutConfig {\n  breakpoint: Breakpoint;\n  leftPanel: {\n    width: number;\n    visible: boolean;\n    position: 'fixed' | 'relative';\n  };\n  middlePanel: {\n    width: number | 'flex';\n    visible: boolean;\n  };\n  rightPanel: {\n    width: number;\n    visible: boolean;\n    position: 'fixed' | 'relative';\n    overlay: boolean;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/AddTimelineEvent.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'eventData' is defined but never used.","line":16,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[952,955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[952,955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2059,2116],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Add Timeline Event Component\n * Modal/form for adding new timeline events\n */\n\nimport React, { useState } from 'react';\nimport {\n  BusinessTimelineEventType,\n  CreateTimelineEventRequest,\n  EVENT_TYPE_CONFIGS,\n} from '../types/timeline.types';\n\ninterface AddTimelineEventProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (eventData: CreateTimelineEventRequest) => Promise<void>;\n  className?: string;\n}\n\nconst AddTimelineEvent: React.FC<AddTimelineEventProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  className = '',\n}) => {\n  const [formData, setFormData] = useState<CreateTimelineEventRequest>({\n    type: 'business_founded',\n    title: '',\n    subtitle: '',\n    date: '',\n    description: '',\n    location: '',\n    metadata: {},\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleInputChange = (field: keyof CreateTimelineEventRequest, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: '',\n      }));\n    }\n  };\n\n  const handleMetadataChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        [field]: value,\n      },\n    }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Title is required';\n    }\n\n    if (!formData.subtitle.trim()) {\n      newErrors.subtitle = 'Subtitle is required';\n    }\n\n    if (!formData.date) {\n      newErrors.date = 'Date is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await onSubmit(formData);\n      handleClose();\n    } catch (error) {\n      console.error('Failed to create timeline event:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({\n      type: 'business_founded',\n      title: '',\n      subtitle: '',\n      date: '',\n      description: '',\n      location: '',\n      metadata: {},\n    });\n    setErrors({});\n    onClose();\n  };\n\n  const selectedEventConfig = EVENT_TYPE_CONFIGS.find(config => config.type === formData.type);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div\n        className={`bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto ${className}`}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Add Business Activity</h2>\n          <button onClick={handleClose} className=\"text-gray-400 hover:text-gray-600\">\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* Event Type */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Activity Type</label>\n            <select\n              value={formData.type}\n              onChange={e => handleInputChange('type', e.target.value as BusinessTimelineEventType)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            >\n              {EVENT_TYPE_CONFIGS.map(config => (\n                <option key={config.type} value={config.type}>\n                  {config.icon} {config.label}\n                </option>\n              ))}\n            </select>\n            {selectedEventConfig && (\n              <p className=\"text-xs text-gray-500 mt-1\">{selectedEventConfig.description}</p>\n            )}\n          </div>\n\n          {/* Title */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Title *</label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={e => handleInputChange('title', e.target.value)}\n              placeholder=\"e.g., Founded TechStart Inc.\"\n              className={`w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500 ${\n                errors.title ? 'border-red-300' : 'border-gray-300'\n              }`}\n            />\n            {errors.title && <p className=\"text-xs text-red-600 mt-1\">{errors.title}</p>}\n          </div>\n\n          {/* Subtitle */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Subtitle *</label>\n            <input\n              type=\"text\"\n              value={formData.subtitle}\n              onChange={e => handleInputChange('subtitle', e.target.value)}\n              placeholder=\"e.g., Software development company\"\n              className={`w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500 ${\n                errors.subtitle ? 'border-red-300' : 'border-gray-300'\n              }`}\n            />\n            {errors.subtitle && <p className=\"text-xs text-red-600 mt-1\">{errors.subtitle}</p>}\n          </div>\n\n          {/* Date */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Date *</label>\n            <input\n              type=\"date\"\n              value={formData.date}\n              onChange={e => handleInputChange('date', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500 ${\n                errors.date ? 'border-red-300' : 'border-gray-300'\n              }`}\n            />\n            {errors.date && <p className=\"text-xs text-red-600 mt-1\">{errors.date}</p>}\n          </div>\n\n          {/* Location */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Location</label>\n            <input\n              type=\"text\"\n              value={formData.location || ''}\n              onChange={e => handleInputChange('location', e.target.value)}\n              placeholder=\"e.g., San Francisco, CA\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Description</label>\n            <textarea\n              value={formData.description || ''}\n              onChange={e => handleInputChange('description', e.target.value)}\n              placeholder=\"Tell us more about this activity...\"\n              rows={3}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          {/* Metadata Fields */}\n          <div className=\"border-t border-gray-200 pt-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Additional Details</h3>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              {/* Industry */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Industry</label>\n                <input\n                  type=\"text\"\n                  value={formData.metadata?.industry || ''}\n                  onChange={e => handleMetadataChange('industry', e.target.value)}\n                  placeholder=\"e.g., Technology\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              {/* Valuation */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Valuation (USD)\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.metadata?.valuation || ''}\n                  onChange={e =>\n                    handleMetadataChange(\n                      'valuation',\n                      e.target.value ? parseInt(e.target.value) : undefined\n                    )\n                  }\n                  placeholder=\"e.g., 1000000\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              {/* Investment Amount */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Investment Amount (USD)\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.metadata?.investmentAmount || ''}\n                  onChange={e =>\n                    handleMetadataChange(\n                      'investmentAmount',\n                      e.target.value ? parseInt(e.target.value) : undefined\n                    )\n                  }\n                  placeholder=\"e.g., 500000\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              {/* Employees */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Number of Employees\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.metadata?.employees || ''}\n                  onChange={e =>\n                    handleMetadataChange(\n                      'employees',\n                      e.target.value ? parseInt(e.target.value) : undefined\n                    )\n                  }\n                  placeholder=\"e.g., 50\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {loading ? 'Adding...' : 'Add Activity'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTimelineEvent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/BusinessTimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/CommunicationPreferences.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'preferences' is defined but never used.","line":19,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1583,1586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1583,1586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1794,1797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1794,1797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💬 Communication Preferences Component\n *\n * Component for managing communication preferences and settings\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Card, CardBody, CardHeader, Input, Select, SelectItem, Switch } from '@heroui/react';\nimport { Clock, MessageCircle, Settings } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { CommunicationPreferences as CommunicationPreferencesType } from '../types/profile.types';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface CommunicationPreferencesProps {\n  preferences: CommunicationPreferencesType;\n  onUpdate?: (preferences: Partial<CommunicationPreferencesType>) => void;\n  className?: string;\n}\n\n// =============================================================================\n// COMMUNICATION PREFERENCES COMPONENT\n// =============================================================================\n\nexport const CommunicationPreferences: React.FC<CommunicationPreferencesProps> = ({\n  preferences,\n  onUpdate,\n  className = '',\n}) => {\n  const [localPreferences, setLocalPreferences] =\n    useState<CommunicationPreferencesType>(preferences);\n  const [isEditing, setIsEditing] = useState(false);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleFieldChange = (field: string, value: any) => {\n    const updatedPreferences = { ...localPreferences, [field]: value };\n    setLocalPreferences(updatedPreferences);\n  };\n\n  const handleNestedFieldChange = (parentField: string, field: string, value: any) => {\n    const parentValue = localPreferences[parentField as keyof CommunicationPreferencesType];\n    const updatedPreferences = {\n      ...localPreferences,\n      [parentField]: {\n        ...(parentValue && typeof parentValue === 'object' ? parentValue : {}),\n        [field]: value,\n      },\n    };\n    setLocalPreferences(updatedPreferences);\n  };\n\n  const handleSave = () => {\n    onUpdate?.(localPreferences);\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setLocalPreferences(preferences);\n    setIsEditing(false);\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderContactPreferences = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Preferred Contact Method\n        </label>\n        {isEditing ? (\n          <Select\n            value={localPreferences.preferredContactMethod}\n            onChange={value => handleFieldChange('preferredContactMethod', value)}\n            placeholder=\"Select contact method\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"email\">Email</SelectItem>\n            <SelectItem key=\"phone\">Phone</SelectItem>\n            <SelectItem key=\"platform\">Platform Messaging</SelectItem>\n            <SelectItem key=\"any\">Any Method</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <MessageCircle className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">{localPreferences.preferredContactMethod}</span>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Response Time Commitment\n        </label>\n        {isEditing ? (\n          <Select\n            value={localPreferences.responseTimeCommitment}\n            onChange={value => handleFieldChange('responseTimeCommitment', value)}\n            placeholder=\"Select response time\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"immediate\">Immediate (within hours)</SelectItem>\n            <SelectItem key=\"24-hours\">Within 24 hours</SelectItem>\n            <SelectItem key=\"48-hours\">Within 48 hours</SelectItem>\n            <SelectItem key=\"1-week\">Within 1 week</SelectItem>\n            <SelectItem key=\"flexible\">Flexible</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <Clock className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">{localPreferences.responseTimeCommitment}</span>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Communication Style</label>\n        {isEditing ? (\n          <Select\n            value={localPreferences.communicationStyle}\n            onChange={value => handleFieldChange('communicationStyle', value)}\n            placeholder=\"Select communication style\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"formal\">Formal</SelectItem>\n            <SelectItem key=\"professional\">Professional</SelectItem>\n            <SelectItem key=\"casual\">Casual</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <MessageCircle className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">{localPreferences.communicationStyle}</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderLanguagePreferences = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Language Preferences</label>\n        {isEditing ? (\n          <Select\n            value={localPreferences.languagePreferences}\n            onChange={value => handleFieldChange('languagePreferences', value)}\n            placeholder=\"Select languages\"\n            variant=\"bordered\"\n            selectionMode=\"multiple\"\n          >\n            <SelectItem key=\"en\">English</SelectItem>\n            <SelectItem key=\"nl\">Dutch</SelectItem>\n            <SelectItem key=\"fr\">French</SelectItem>\n            <SelectItem key=\"de\">German</SelectItem>\n            <SelectItem key=\"es\">Spanish</SelectItem>\n            <SelectItem key=\"it\">Italian</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localPreferences.languagePreferences.map(lang => (\n              <span key={lang} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded\">\n                {lang.toUpperCase()}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderAvailabilitySchedule = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Working Hours Start\n          </label>\n          {isEditing ? (\n            <Input\n              type=\"time\"\n              value={localPreferences.availabilitySchedule.workingHours.start}\n              onChange={e =>\n                handleNestedFieldChange('availabilitySchedule', 'workingHours', {\n                  ...localPreferences.availabilitySchedule.workingHours,\n                  start: e.target.value,\n                })\n              }\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localPreferences.availabilitySchedule.workingHours.start}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Working Hours End</label>\n          {isEditing ? (\n            <Input\n              type=\"time\"\n              value={localPreferences.availabilitySchedule.workingHours.end}\n              onChange={e =>\n                handleNestedFieldChange('availabilitySchedule', 'workingHours', {\n                  ...localPreferences.availabilitySchedule.workingHours,\n                  end: e.target.value,\n                })\n              }\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localPreferences.availabilitySchedule.workingHours.end}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Working Days</label>\n        {isEditing ? (\n          <Select\n            value={localPreferences.availabilitySchedule.workingHours.days}\n            onChange={value =>\n              handleNestedFieldChange('availabilitySchedule', 'workingHours', {\n                ...localPreferences.availabilitySchedule.workingHours,\n                days: value,\n              })\n            }\n            placeholder=\"Select working days\"\n            variant=\"bordered\"\n            selectionMode=\"multiple\"\n          >\n            <SelectItem key=\"monday\">Monday</SelectItem>\n            <SelectItem key=\"tuesday\">Tuesday</SelectItem>\n            <SelectItem key=\"wednesday\">Wednesday</SelectItem>\n            <SelectItem key=\"thursday\">Thursday</SelectItem>\n            <SelectItem key=\"friday\">Friday</SelectItem>\n            <SelectItem key=\"saturday\">Saturday</SelectItem>\n            <SelectItem key=\"sunday\">Sunday</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localPreferences.availabilitySchedule.workingHours.days.map(day => (\n              <span key={day} className=\"px-2 py-1 bg-green-100 text-green-800 text-sm rounded\">\n                {day.charAt(0).toUpperCase() + day.slice(1)}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-700\">Emergency Contact</label>\n          <p className=\"text-xs text-gray-500\">Allow emergency contact outside working hours</p>\n        </div>\n        <Switch\n          isSelected={localPreferences.availabilitySchedule.emergencyContact}\n          onValueChange={value =>\n            handleNestedFieldChange('availabilitySchedule', 'emergencyContact', value)\n          }\n          isDisabled={!isEditing}\n        />\n      </div>\n    </div>\n  );\n\n  const renderMeetingPreferences = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Preferred Meeting Format\n        </label>\n        {isEditing ? (\n          <Select\n            value={localPreferences.meetingPreferences.preferredFormat}\n            onChange={value =>\n              handleNestedFieldChange('meetingPreferences', 'preferredFormat', value)\n            }\n            placeholder=\"Select meeting format\"\n            variant=\"bordered\"\n            selectionMode=\"multiple\"\n          >\n            <SelectItem key=\"video\">Video Call</SelectItem>\n            <SelectItem key=\"phone\">Phone Call</SelectItem>\n            <SelectItem key=\"in-person\">In-Person</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localPreferences.meetingPreferences.preferredFormat.map(format => (\n              <span\n                key={format}\n                className=\"px-2 py-1 bg-purple-100 text-purple-800 text-sm rounded\"\n              >\n                {format.charAt(0).toUpperCase() + format.slice(1)}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Preferred Meeting Times\n          </label>\n          {isEditing ? (\n            <Select\n              value={localPreferences.meetingPreferences.preferredTimes}\n              onChange={value =>\n                handleNestedFieldChange('meetingPreferences', 'preferredTimes', value)\n              }\n              placeholder=\"Select preferred times\"\n              variant=\"bordered\"\n              selectionMode=\"multiple\"\n            >\n              <SelectItem key=\"morning\">Morning</SelectItem>\n              <SelectItem key=\"afternoon\">Afternoon</SelectItem>\n              <SelectItem key=\"evening\">Evening</SelectItem>\n            </Select>\n          ) : (\n            <div className=\"flex flex-wrap gap-2\">\n              {localPreferences.meetingPreferences.preferredTimes.map(time => (\n                <span\n                  key={time}\n                  className=\"px-2 py-1 bg-orange-100 text-orange-800 text-sm rounded\"\n                >\n                  {time.charAt(0).toUpperCase() + time.slice(1)}\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Meeting Duration</label>\n          {isEditing ? (\n            <Select\n              value={localPreferences.meetingPreferences.meetingDuration}\n              onChange={value =>\n                handleNestedFieldChange('meetingPreferences', 'meetingDuration', value)\n              }\n              placeholder=\"Select duration\"\n              variant=\"bordered\"\n            >\n              <SelectItem key=\"30\">30 minutes</SelectItem>\n              <SelectItem key=\"60\">1 hour</SelectItem>\n              <SelectItem key=\"90\">1.5 hours</SelectItem>\n              <SelectItem key=\"120\">2 hours</SelectItem>\n            </Select>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localPreferences.meetingPreferences.meetingDuration} minutes\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-700\">Calendar Integration</label>\n          <p className=\"text-xs text-gray-500\">Sync with your calendar for availability</p>\n        </div>\n        <Switch\n          isSelected={localPreferences.meetingPreferences.calendarIntegration}\n          onValueChange={value =>\n            handleNestedFieldChange('meetingPreferences', 'calendarIntegration', value)\n          }\n          isDisabled={!isEditing}\n        />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-700\">Preparation Required</label>\n          <p className=\"text-xs text-gray-500\">Require preparation before meetings</p>\n        </div>\n        <Switch\n          isSelected={localPreferences.meetingPreferences.preparationRequired}\n          onValueChange={value =>\n            handleNestedFieldChange('meetingPreferences', 'preparationRequired', value)\n          }\n          isDisabled={!isEditing}\n        />\n      </div>\n    </div>\n  );\n\n  const renderNotificationSettings = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Email Notifications</label>\n              <p className=\"text-xs text-gray-500\">Receive notifications via email</p>\n            </div>\n            <Switch\n              isSelected={localPreferences.notificationSettings.emailNotifications}\n              onValueChange={value =>\n                handleNestedFieldChange('notificationSettings', 'emailNotifications', value)\n              }\n              isDisabled={!isEditing}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Push Notifications</label>\n              <p className=\"text-xs text-gray-500\">Receive push notifications</p>\n            </div>\n            <Switch\n              isSelected={localPreferences.notificationSettings.pushNotifications}\n              onValueChange={value =>\n                handleNestedFieldChange('notificationSettings', 'pushNotifications', value)\n              }\n              isDisabled={!isEditing}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">SMS Notifications</label>\n              <p className=\"text-xs text-gray-500\">Receive SMS notifications</p>\n            </div>\n            <Switch\n              isSelected={localPreferences.notificationSettings.smsNotifications}\n              onValueChange={value =>\n                handleNestedFieldChange('notificationSettings', 'smsNotifications', value)\n              }\n              isDisabled={!isEditing}\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Marketing Emails</label>\n              <p className=\"text-xs text-gray-500\">Receive marketing communications</p>\n            </div>\n            <Switch\n              isSelected={localPreferences.notificationSettings.marketingEmails}\n              onValueChange={value =>\n                handleNestedFieldChange('notificationSettings', 'marketingEmails', value)\n              }\n              isDisabled={!isEditing}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Listing Updates</label>\n              <p className=\"text-xs text-gray-500\">Get notified about listing changes</p>\n            </div>\n            <Switch\n              isSelected={localPreferences.notificationSettings.listingUpdates}\n              onValueChange={value =>\n                handleNestedFieldChange('notificationSettings', 'listingUpdates', value)\n              }\n              isDisabled={!isEditing}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Message Notifications</label>\n              <p className=\"text-xs text-gray-500\">Get notified about new messages</p>\n            </div>\n            <Switch\n              isSelected={localPreferences.notificationSettings.messageNotifications}\n              onValueChange={value =>\n                handleNestedFieldChange('notificationSettings', 'messageNotifications', value)\n              }\n              isDisabled={!isEditing}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <MessageCircle className=\"w-5 h-5 text-blue-600\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Communication Preferences</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Manage how you prefer to communicate and be contacted\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {isEditing ? (\n              <>\n                <Button variant=\"secondary\" color=\"default\" size=\"sm\" onPress={handleCancel}>\n                  Cancel\n                </Button>\n                <Button variant=\"primary\" color=\"primary\" size=\"sm\" onPress={handleSave}>\n                  Save Changes\n                </Button>\n              </>\n            ) : (\n              <Button\n                variant=\"secondary\"\n                color=\"primary\"\n                size=\"sm\"\n                onPress={() => setIsEditing(true)}\n                startContent={<Settings className=\"w-4 h-4\" />}\n              >\n                Edit Preferences\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardBody className=\"pt-0\">\n        <div className=\"space-y-8\">\n          {/* Contact Preferences */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Contact Preferences</h4>\n            {renderContactPreferences()}\n          </div>\n\n          {/* Language Preferences */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Language Preferences</h4>\n            {renderLanguagePreferences()}\n          </div>\n\n          {/* Availability Schedule */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Availability Schedule</h4>\n            {renderAvailabilitySchedule()}\n          </div>\n\n          {/* Meeting Preferences */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Meeting Preferences</h4>\n            {renderMeetingPreferences()}\n          </div>\n\n          {/* Notification Settings */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Notification Settings</h4>\n            {renderNotificationSettings()}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default CommunicationPreferences;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileEditFullscreenModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'updatedProfile' is defined but never used.","line":31,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":32,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 👤 Profile Edit Fullscreen Modal\n *\n * Full-screen modal for editing user profile, inspired by Airbnb's profile edit design\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n    CustomDropdown,\n    CustomInputField,\n    CustomTextarea\n} from '@/shared/components/forms';\nimport { FullscreenModal } from '@/shared/components/modals/foundations/FullscreenModal';\nimport { Avatar, Divider } from '@heroui/react';\nimport { Briefcase, Building2, Camera, Edit3, Globe, MapPin, User } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Profile } from '../types/profile.types';\nimport {\n    getProfileDisplayName,\n    getProfileLocationDisplayName,\n} from '../utils/profileHelpers';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface ProfileEditFullscreenModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  profile: Profile;\n  onSave: (updatedProfile: Partial<Profile>) => void;\n  onImageUpload?: (file: File) => void;\n  onImageDelete?: () => void;\n}\n\n// =============================================================================\n// PROFILE EDIT FULLSCREEN MODAL COMPONENT\n// =============================================================================\n\nexport const ProfileEditFullscreenModal: React.FC<ProfileEditFullscreenModalProps> = ({\n  isOpen,\n  onClose,\n  profile,\n  onSave,\n  onImageUpload,\n  onImageDelete,\n}) => {\n  const [editedProfile, setEditedProfile] = useState<Partial<Profile>>(profile);\n  const [showImageMenu, setShowImageMenu] = useState(false);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setEditedProfile(prev => ({\n      ...prev,\n      personalInfo: {\n        ...prev.personalInfo,\n        [field]: value,\n      },\n    }));\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && onImageUpload) {\n      onImageUpload(file);\n    }\n  };\n\n  const handleSave = () => {\n    onSave(editedProfile);\n    onClose();\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderProfileSection = (title: string, children: React.ReactNode) => (\n    <div className=\"mb-8\">\n      <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">{title}</h2>\n      {children}\n    </div>\n  );\n\n  const renderEditableField = (\n    label: string,\n    value: string,\n    field: string,\n    type: 'text' | 'textarea' | 'select' = 'text',\n    options?: { value: string; label: string }[],\n    icon?: React.ReactNode\n  ) => (\n    <div className=\"mb-6\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center space-x-2\">\n          {icon && <span className=\"text-gray-500\">{icon}</span>}\n          <label className=\"text-sm font-medium text-gray-700\">{label}</label>\n        </div>\n        <Button\n          variant=\"link\"\n          size=\"sm\"\n          className=\"text-blue-600 hover:text-blue-700\"\n        >\n          <Edit3 className=\"w-4 h-4 mr-1\" />\n          aanpassen\n        </Button>\n      </div>\n      \n      {type === 'textarea' ? (\n        <CustomTextarea\n          label=\"\"\n          value={value}\n          onChange={(e) => handleInputChange(field, e.target.value)}\n          onBlur={() => {}}\n          name={field}\n          placeholder={`${label} toevoegen`}\n          className=\"w-full\"\n          rows={3}\n        />\n      ) : type === 'select' && options ? (\n        <CustomDropdown\n          label=\"\"\n          value={value}\n          onChange={(value) => handleInputChange(field, value)}\n          options={options}\n          placeholder={`${label} selecteren`}\n          className=\"w-full\"\n        />\n      ) : (\n        <CustomInputField\n          type=\"text\"\n          value={value}\n          onChange={(e) => handleInputChange(field, e.target.value)}\n          placeholder={`${label} toevoegen`}\n          className=\"w-full\"\n        />\n      )}\n    </div>\n  );\n\n  // =============================================================================\n  // RENDER\n  // =============================================================================\n\n  return (\n    <FullscreenModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Mijn profiel\"\n      className=\"profile-edit-modal\"\n    >\n      <div className=\"h-full overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto p-6\">\n          {/* Profile Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center space-x-6 mb-6\">\n              <div className=\"relative group\">\n                <Avatar\n                  src={profile.personalInfo.avatarUrl}\n                  name={getProfileDisplayName(profile)}\n                  size=\"lg\"\n                  className=\"w-24 h-24 cursor-pointer\"\n                  onClick={() => setShowImageMenu(!showImageMenu)}\n                />\n                \n                {showImageMenu && (\n                  <div className=\"absolute top-full left-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n                    <div className=\"py-1\">\n                      <label className=\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 cursor-pointer\">\n                        <Camera className=\"w-4 h-4 mr-2\" />\n                        Foto uploaden\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleImageUpload}\n                          className=\"hidden\"\n                        />\n                      </label>\n                      {profile.personalInfo.avatarUrl && (\n                        <button\n                          onClick={() => {\n                            onImageDelete?.();\n                            setShowImageMenu(false);\n                          }}\n                          className=\"flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-gray-50\"\n                        >\n                          Foto verwijderen\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  {getProfileDisplayName(profile)}\n                </h1>\n                <p className=\"text-gray-600\">\n                  {getProfileLocationDisplayName(profile)}\n                </p>\n                <div className=\"flex items-center space-x-1 text-green-600 mt-2\">\n                  <Globe className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-medium\">Openbaar</span>\n                </div>\n              </div>\n            </div>\n            \n            <p className=\"text-sm text-gray-600\">\n              Hosts en gasten kunnen je profiel zien en het kan op Airbnb verschijnen om vertrouwen op te bouwen binnen onze community. \n              <a href=\"#\" className=\"text-blue-600 hover:underline ml-1\">Meer informatie</a>\n            </p>\n          </div>\n\n          <Divider className=\"my-8\" />\n\n          {/* Personal Information Section */}\n          {renderProfileSection('Persoonlijke informatie', (\n            <div className=\"space-y-6\">\n              {renderEditableField(\n                'Wat doe je voor werk?',\n                profile.personalInfo.professionalTitle || '',\n                'professionalTitle',\n                'text',\n                undefined,\n                <Briefcase className=\"w-4 h-4\" />\n              )}\n              \n              {renderEditableField(\n                'Bedrijf',\n                profile.personalInfo.company || '',\n                'company',\n                'text',\n                undefined,\n                <Building2 className=\"w-4 h-4\" />\n              )}\n              \n              {renderEditableField(\n                'Industrie',\n                profile.personalInfo.industry || '',\n                'industry',\n                'text',\n                undefined,\n                <Briefcase className=\"w-4 h-4\" />\n              )}\n              \n              {renderEditableField(\n                'Telefoonnummer',\n                profile.personalInfo.phone || '',\n                'phone',\n                'text',\n                undefined,\n                <User className=\"w-4 h-4\" />\n              )}\n              \n              {renderEditableField(\n                'Tijdzone',\n                profile.personalInfo.timezone || '',\n                'timezone',\n                'select',\n                [\n                  { value: 'Europe/Amsterdam', label: 'Europa/Amsterdam' },\n                  { value: 'Europe/London', label: 'Europa/Londen' },\n                  { value: 'America/New_York', label: 'Amerika/New York' },\n                  { value: 'America/Los_Angeles', label: 'Amerika/Los Angeles' },\n                  { value: 'Asia/Tokyo', label: 'Azië/Tokio' },\n                ]\n              )}\n              \n              {renderEditableField(\n                'Waar je woont',\n                getProfileLocationDisplayName(profile),\n                'location',\n                'text',\n                undefined,\n                <MapPin className=\"w-4 h-4\" />\n              )}\n            </div>\n          ))}\n\n          <Divider className=\"my-8\" />\n\n          {/* About Section */}\n          {renderProfileSection('Over mij', (\n            <div>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Schrijf iets leuks en pakkends.\n              </p>\n              {renderEditableField(\n                'Introductie',\n                profile.personalInfo.bio || '',\n                'bio',\n                'textarea'\n              )}\n            </div>\n          ))}\n\n          <Divider className=\"my-8\" />\n\n          {/* Interests Section */}\n          {renderProfileSection('Mijn interesses', (\n            <div>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Zet je interesses in je profiel, zodat andere gasten en hosts weten wat jullie met elkaar gemeen hebben.\n              </p>\n              {renderEditableField(\n                'Interesses',\n                profile.personalInfo.professionalSummary || '',\n                'professionalSummary',\n                'textarea'\n              )}\n            </div>\n          ))}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-4 mt-8 pt-6 border-t border-gray-200\">\n            <Button\n              variant=\"tertiary\"\n              onClick={onClose}\n              className=\"px-6\"\n            >\n              Annuleren\n            </Button>\n            <Button\n              onClick={handleSave}\n              className=\"px-6 bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              Opslaan\n            </Button>\n          </div>\n        </div>\n      </div>\n    </FullscreenModal>\n  );\n};\n\nexport default ProfileEditFullscreenModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileEditModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'updatedProfile' is defined but never used.","line":38,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2712,2715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2712,2715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2997,3000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2997,3000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3290,3293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3290,3293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3573,3576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3573,3576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3951,3999],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4517,4573],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📝 Profile Edit Modal - Airbnb-Inspired Profile Editing\n *\n * Comprehensive profile editing modal with LinkedIn integration\n * Similar to Airbnb's profile editing experience\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  Avatar,\n  Card,\n  CardBody,\n  CardHeader,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Select,\n  SelectItem,\n  Textarea,\n} from '@heroui/react';\nimport { Building2, Globe, Linkedin, MapPin, TrendingUp, Upload, User, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport {\n  BusinessOwnerProfile,\n  InvestorProfile,\n  PersonalInfo,\n  Profile,\n  SharedProfileData,\n} from '../types/profile.types';\n\ninterface ProfileEditModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  profile: Profile;\n  onSave: (updatedProfile: Partial<Profile>) => Promise<void>;\n  onLinkedInImport?: () => Promise<void>;\n  className?: string;\n}\n\nexport const ProfileEditModal: React.FC<ProfileEditModalProps> = ({\n  isOpen,\n  onClose,\n  profile,\n  onSave,\n  onLinkedInImport,\n  className = '',\n}) => {\n  // =============================================================================\n  // STATE MANAGEMENT\n  // =============================================================================\n\n  const [activeSection, setActiveSection] = useState<string>('personal');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Form data state\n  const [formData, setFormData] = useState<Partial<Profile>>({});\n  const [personalInfo, setPersonalInfo] = useState<Partial<PersonalInfo>>({});\n  const [businessData, setBusinessData] = useState<Partial<BusinessOwnerProfile>>({});\n  const [investorData, setInvestorData] = useState<Partial<InvestorProfile>>({});\n  const [sharedData, setSharedData] = useState<Partial<SharedProfileData>>({});\n\n  // =============================================================================\n  // EFFECTS\n  // =============================================================================\n\n  useEffect(() => {\n    if (isOpen && profile) {\n      // Initialize form data with current profile\n      setFormData(profile);\n      setPersonalInfo(profile.personalInfo || {});\n      setBusinessData(profile.businessOwnerData || {});\n      setInvestorData(profile.investorData || {});\n      setSharedData(profile.sharedData || {});\n      setHasChanges(false);\n    }\n  }, [isOpen, profile]);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handlePersonalInfoChange = (field: keyof PersonalInfo, value: any) => {\n    const updated = { ...personalInfo, [field]: value } as PersonalInfo;\n    setPersonalInfo(updated);\n    setFormData(prev => ({ ...prev, personalInfo: updated }));\n    setHasChanges(true);\n  };\n\n  const handleBusinessDataChange = (field: keyof BusinessOwnerProfile, value: any) => {\n    const updated = { ...businessData, [field]: value } as BusinessOwnerProfile;\n    setBusinessData(updated);\n    setFormData(prev => ({ ...prev, businessOwnerData: updated }));\n    setHasChanges(true);\n  };\n\n  const handleInvestorDataChange = (field: keyof InvestorProfile, value: any) => {\n    const updated = { ...investorData, [field]: value } as InvestorProfile;\n    setInvestorData(updated);\n    setFormData(prev => ({ ...prev, investorData: updated }));\n    setHasChanges(true);\n  };\n\n  const handleSharedDataChange = (field: keyof SharedProfileData, value: any) => {\n    const updated = { ...sharedData, [field]: value } as SharedProfileData;\n    setSharedData(updated);\n    setFormData(prev => ({ ...prev, sharedData: updated }));\n    setHasChanges(true);\n  };\n\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      await onSave(formData);\n      setHasChanges(false);\n      onClose();\n    } catch (error) {\n      console.error('Failed to save profile:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLinkedInImport = async () => {\n    if (onLinkedInImport) {\n      setIsLoading(true);\n      try {\n        await onLinkedInImport();\n        // Refresh form data after import\n        setFormData(profile);\n        setPersonalInfo(profile.personalInfo || {});\n        setBusinessData(profile.businessOwnerData || {});\n        setInvestorData(profile.investorData || {});\n        setSharedData(profile.sharedData || {});\n      } catch (error) {\n        console.error('Failed to import from LinkedIn:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderPersonalInfoSection = () => (\n    <div className=\"space-y-6\">\n      {/* Profile Header */}\n      <div className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n        <Avatar\n          src={personalInfo.avatarUrl}\n          name={`${personalInfo.firstName} ${personalInfo.lastName}`}\n          size=\"lg\"\n          className=\"w-20 h-20\"\n        />\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            {personalInfo.firstName} {personalInfo.lastName}\n          </h3>\n          <p className=\"text-gray-600\">{personalInfo.professionalTitle}</p>\n          <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-500\">\n            {personalInfo.city && (\n              <div className=\"flex items-center space-x-1\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>\n                  {personalInfo.city}, {personalInfo.country}\n                </span>\n              </div>\n            )}\n            {personalInfo.company && (\n              <div className=\"flex items-center space-x-1\">\n                <Building2 className=\"w-4 h-4\" />\n                <span>{personalInfo.company}</span>\n              </div>\n            )}\n          </div>\n        </div>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => {\n            /* Handle avatar upload */\n          }}\n          className=\"flex items-center space-x-2\"\n        >\n          <Upload className=\"w-4 h-4\" />\n          <span>Change Photo</span>\n        </Button>\n      </div>\n\n      {/* Basic Information */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-lg font-semibold\">Basic Information</h4>\n        </CardHeader>\n        <CardBody className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"First Name\"\n              value={personalInfo.firstName || ''}\n              onChange={e => handlePersonalInfoChange('firstName', e.target.value)}\n              placeholder=\"Enter your first name\"\n            />\n            <Input\n              label=\"Last Name\"\n              value={personalInfo.lastName || ''}\n              onChange={e => handlePersonalInfoChange('lastName', e.target.value)}\n              placeholder=\"Enter your last name\"\n            />\n          </div>\n\n          <Input\n            label=\"Professional Title\"\n            value={personalInfo.professionalTitle || ''}\n            onChange={e => handlePersonalInfoChange('professionalTitle', e.target.value)}\n            placeholder=\"e.g., CEO, Managing Director, Investment Partner\"\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"Company\"\n              value={personalInfo.company || ''}\n              onChange={e => handlePersonalInfoChange('company', e.target.value)}\n              placeholder=\"Your current company\"\n            />\n            <Input\n              label=\"Industry\"\n              value={personalInfo.industry || ''}\n              onChange={e => handlePersonalInfoChange('industry', e.target.value)}\n              placeholder=\"e.g., Technology, Manufacturing, Services\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"City\"\n              value={personalInfo.city || ''}\n              onChange={e => handlePersonalInfoChange('city', e.target.value)}\n              placeholder=\"Your city\"\n            />\n            <Select\n              label=\"Country\"\n              selectedKeys={personalInfo.country ? [personalInfo.country] : []}\n              onSelectionChange={keys => handlePersonalInfoChange('country', Array.from(keys)[0])}\n              placeholder=\"Select your country\"\n            >\n              <SelectItem key=\"Netherlands\">Netherlands</SelectItem>\n              <SelectItem key=\"Belgium\">Belgium</SelectItem>\n              <SelectItem key=\"Germany\">Germany</SelectItem>\n              <SelectItem key=\"France\">France</SelectItem>\n              <SelectItem key=\"United Kingdom\">United Kingdom</SelectItem>\n            </Select>\n          </div>\n\n          <Textarea\n            label=\"Professional Summary\"\n            value={personalInfo.professionalSummary || ''}\n            onChange={e => handlePersonalInfoChange('professionalSummary', e.target.value)}\n            placeholder=\"Tell us about your professional background and expertise...\"\n            minRows={3}\n          />\n        </CardBody>\n      </Card>\n\n      {/* LinkedIn Integration */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-2\">\n              <Linkedin className=\"w-5 h-5 text-blue-600\" />\n              <h4 className=\"text-lg font-semibold\">LinkedIn Integration</h4>\n            </div>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleLinkedInImport}\n              disabled={isLoading}\n              className=\"flex items-center space-x-2\"\n            >\n              <Linkedin className=\"w-4 h-4\" />\n              <span>Import from LinkedIn</span>\n            </Button>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <p className=\"text-gray-600 text-sm\">\n            Connect your LinkedIn profile to automatically import your professional information,\n            work experience, and skills to enhance your profile.\n          </p>\n        </CardBody>\n      </Card>\n    </div>\n  );\n\n  const renderBusinessOwnerSection = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-lg font-semibold\">Business Information</h4>\n        </CardHeader>\n        <CardBody className=\"space-y-4\">\n          <Input\n            label=\"Business Name\"\n            value={businessData.businessName || ''}\n            onChange={e => handleBusinessDataChange('businessName', e.target.value)}\n            placeholder=\"Your business name\"\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"Business Type\"\n              value={businessData.businessType || ''}\n              onChange={e => handleBusinessDataChange('businessType', e.target.value)}\n              placeholder=\"e.g., B.V., N.V., Sole Proprietorship\"\n            />\n            <Input\n              label=\"Industry\"\n              value={businessData.industry || ''}\n              onChange={e => handleBusinessDataChange('industry', e.target.value)}\n              placeholder=\"Your business industry\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"Years in Business\"\n              type=\"number\"\n              value={businessData.yearsInBusiness?.toString() || ''}\n              onChange={e => handleBusinessDataChange('yearsInBusiness', parseInt(e.target.value))}\n              placeholder=\"0\"\n            />\n            <Input\n              label=\"Years in Industry\"\n              type=\"number\"\n              value={businessData.yearsInIndustry?.toString() || ''}\n              onChange={e => handleBusinessDataChange('yearsInIndustry', parseInt(e.target.value))}\n              placeholder=\"0\"\n            />\n          </div>\n\n          <Textarea\n            label=\"Business Model\"\n            value={businessData.businessModel || ''}\n            onChange={e => handleBusinessDataChange('businessModel', e.target.value)}\n            placeholder=\"Describe your business model and how you generate revenue...\"\n            minRows={3}\n          />\n        </CardBody>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-lg font-semibold\">Professional Background</h4>\n        </CardHeader>\n        <CardBody className=\"space-y-4\">\n          <Input\n            label=\"Current Role\"\n            value={businessData.currentRole || ''}\n            onChange={e => handleBusinessDataChange('currentRole', e.target.value)}\n            placeholder=\"Your current role in the business\"\n          />\n\n          <Textarea\n            label=\"Key Responsibilities\"\n            value={businessData.responsibilities?.join(', ') || ''}\n            onChange={e => handleBusinessDataChange('responsibilities', e.target.value.split(', '))}\n            placeholder=\"List your main responsibilities (separated by commas)...\"\n            minRows={2}\n          />\n\n          <Textarea\n            label=\"Industry Expertise\"\n            value={businessData.industryExpertise?.join(', ') || ''}\n            onChange={e =>\n              handleBusinessDataChange('industryExpertise', e.target.value.split(', '))\n            }\n            placeholder=\"List your areas of expertise (separated by commas)...\"\n            minRows={2}\n          />\n        </CardBody>\n      </Card>\n    </div>\n  );\n\n  const renderInvestorSection = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-lg font-semibold\">Investment Profile</h4>\n        </CardHeader>\n        <CardBody className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"Investment Capacity (Min)\"\n              type=\"number\"\n              value={investorData.investmentCapacity?.minAmount?.toString() || ''}\n              onChange={e =>\n                handleInvestorDataChange('investmentCapacity', {\n                  ...investorData.investmentCapacity,\n                  minAmount: parseFloat(e.target.value),\n                })\n              }\n              placeholder=\"0\"\n            />\n            <Input\n              label=\"Investment Capacity (Max)\"\n              type=\"number\"\n              value={investorData.investmentCapacity?.maxAmount?.toString() || ''}\n              onChange={e =>\n                handleInvestorDataChange('investmentCapacity', {\n                  ...investorData.investmentCapacity,\n                  maxAmount: parseFloat(e.target.value),\n                })\n              }\n              placeholder=\"0\"\n            />\n          </div>\n\n          <Textarea\n            label=\"Industry Focus\"\n            value={investorData.investmentFocus?.industries?.join(', ') || ''}\n            onChange={e =>\n              handleInvestorDataChange('investmentFocus', {\n                ...investorData.investmentFocus,\n                industries: e.target.value.split(', '),\n              })\n            }\n            placeholder=\"List industries you focus on (separated by commas)...\"\n            minRows={2}\n          />\n\n          <Textarea\n            label=\"Geographic Preferences\"\n            value={investorData.investmentFocus?.geographicRegions?.join(', ') || ''}\n            onChange={e =>\n              handleInvestorDataChange('investmentFocus', {\n                ...investorData.investmentFocus,\n                geographicRegions: e.target.value.split(', '),\n              })\n            }\n            placeholder=\"List preferred geographic regions (separated by commas)...\"\n            minRows={2}\n          />\n\n          <Select\n            label=\"Investment Timeline\"\n            selectedKeys={\n              investorData.dealPreferences?.dealTimeline\n                ? [investorData.dealPreferences.dealTimeline]\n                : []\n            }\n            onSelectionChange={keys =>\n              handleInvestorDataChange('dealPreferences', {\n                ...investorData.dealPreferences,\n                dealTimeline: Array.from(keys)[0],\n              })\n            }\n            placeholder=\"Select your investment timeline\"\n          >\n            <SelectItem key=\"immediate\">Immediate (0-3 months)</SelectItem>\n            <SelectItem key=\"short-term\">Short-term (3-6 months)</SelectItem>\n            <SelectItem key=\"medium-term\">Medium-term (6-12 months)</SelectItem>\n            <SelectItem key=\"long-term\">Long-term (12+ months)</SelectItem>\n          </Select>\n        </CardBody>\n      </Card>\n    </div>\n  );\n\n  const renderCommunicationSection = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-lg font-semibold\">Communication Preferences</h4>\n        </CardHeader>\n        <CardBody className=\"space-y-4\">\n          <Select\n            label=\"Preferred Contact Method\"\n            selectedKeys={\n              sharedData.communication?.preferredContactMethod\n                ? [sharedData.communication.preferredContactMethod]\n                : []\n            }\n            onSelectionChange={keys =>\n              handleSharedDataChange('communication', {\n                ...sharedData.communication,\n                preferredContactMethod: Array.from(keys)[0] as string,\n              })\n            }\n            placeholder=\"Select preferred contact method\"\n          >\n            <SelectItem key=\"email\">Email</SelectItem>\n            <SelectItem key=\"phone\">Phone</SelectItem>\n            <SelectItem key=\"platform\">Platform Messaging</SelectItem>\n            <SelectItem key=\"any\">Any Method</SelectItem>\n          </Select>\n\n          <Select\n            label=\"Response Time Commitment\"\n            selectedKeys={\n              sharedData.communication?.responseTimeCommitment\n                ? [sharedData.communication.responseTimeCommitment]\n                : []\n            }\n            onSelectionChange={keys =>\n              handleSharedDataChange('communication', {\n                ...sharedData.communication,\n                responseTimeCommitment: Array.from(keys)[0] as string,\n              })\n            }\n            placeholder=\"Select response time commitment\"\n          >\n            <SelectItem key=\"immediate\">Immediate (within 1 hour)</SelectItem>\n            <SelectItem key=\"same-day\">Same Day</SelectItem>\n            <SelectItem key=\"24-hours\">Within 24 Hours</SelectItem>\n            <SelectItem key=\"48-hours\">Within 48 Hours</SelectItem>\n            <SelectItem key=\"week\">Within a Week</SelectItem>\n          </Select>\n\n          <Textarea\n            label=\"Languages Spoken\"\n            value={sharedData.communication?.languagePreferences?.join(', ') || ''}\n            onChange={e =>\n              handleSharedDataChange('communication', {\n                ...sharedData.communication,\n                languagePreferences: e.target.value.split(', '),\n              })\n            }\n            placeholder=\"List languages you speak (separated by commas)...\"\n            minRows={2}\n          />\n        </CardBody>\n      </Card>\n    </div>\n  );\n\n  const renderActiveSection = () => {\n    switch (activeSection) {\n      case 'personal':\n        return renderPersonalInfoSection();\n      case 'business':\n        return renderBusinessOwnerSection();\n      case 'investor':\n        return renderInvestorSection();\n      case 'communication':\n        return renderCommunicationSection();\n      default:\n        return renderPersonalInfoSection();\n    }\n  };\n\n  // =============================================================================\n  // RENDER\n  // =============================================================================\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"5xl\"\n      scrollBehavior=\"inside\"\n      className={className}\n    >\n      <ModalContent>\n        <ModalHeader className=\"flex flex-col gap-1\">\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5\" />\n              <h2 className=\"text-xl font-semibold\">Edit Profile</h2>\n            </div>\n            <Button variant=\"tertiary\" size=\"sm\" onClick={onClose} className=\"p-2\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </ModalHeader>\n\n        <ModalBody>\n          <div className=\"flex flex-col lg:flex-row gap-6\">\n            {/* Sidebar Navigation */}\n            <div className=\"w-full lg:w-64 flex-shrink-0\">\n              <nav className=\"space-y-2\">\n                {[\n                  { id: 'personal', label: 'Personal Info', icon: User },\n                  { id: 'business', label: 'Business Info', icon: Building2 },\n                  { id: 'investor', label: 'Investment Profile', icon: TrendingUp },\n                  { id: 'communication', label: 'Communication', icon: Globe },\n                ].map(section => {\n                  const Icon = section.icon;\n                  return (\n                    <button\n                      key={section.id}\n                      onClick={() => setActiveSection(section.id)}\n                      className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${\n                        activeSection === section.id\n                          ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                          : 'text-gray-700 hover:bg-gray-50'\n                      }`}\n                    >\n                      <Icon className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">{section.label}</span>\n                    </button>\n                  );\n                })}\n              </nav>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1 min-w-0\">{renderActiveSection()}</div>\n          </div>\n        </ModalBody>\n\n        <ModalFooter>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"text-sm text-gray-500\">{hasChanges && 'You have unsaved changes'}</div>\n            <div className=\"flex space-x-3\">\n              <Button variant=\"secondary\" onClick={onClose} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSave}\n                disabled={!hasChanges || isLoading}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {isLoading ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </div>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ProfileEditModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileHeader.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":28,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'visibility' is defined but never used.","line":30,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'isEditing' is assigned a value but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isEditing' is assigned a value but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'onEditToggle' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onEditToggle' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'handleVisibilityChange' is assigned a value but never used.","line":68,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleVisibilityChange' is assigned a value but never used.","line":68,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 👤 Profile Header Component\n *\n * Header component for profile display with Airbnb-inspired design\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Avatar, Card, CardBody } from '@heroui/react';\nimport { Camera, Edit3, Globe, Shield } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Profile } from '../types/profile.types';\nimport {\n    getProfileDisplayName,\n    getProfileLocationDisplayName,\n    getProfileRoleDisplayName,\n} from '../utils/profileHelpers';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface ProfileHeaderProps {\n  profile: Profile;\n  isOwnProfile?: boolean;\n  isEditing?: boolean;\n  onEditToggle?: () => void;\n  onEditProfile?: () => void;\n  onImageUpload?: (file: File) => void;\n  onImageDelete?: () => void;\n  onVisibilityUpdate?: (visibility: string) => void;\n  className?: string;\n}\n\n// =============================================================================\n// PROFILE HEADER COMPONENT\n// =============================================================================\n\nexport const ProfileHeader: React.FC<ProfileHeaderProps> = ({\n  profile,\n  isOwnProfile = false,\n  isEditing = false,\n  onEditToggle,\n  onEditProfile,\n  onImageUpload,\n  onImageDelete,\n  onVisibilityUpdate,\n  className = '',\n}) => {\n  const [showImageMenu, setShowImageMenu] = useState(false);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleImageClick = () => {\n    if (isOwnProfile) {\n      setShowImageMenu(!showImageMenu);\n    }\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && onImageUpload) {\n      onImageUpload(file);\n    }\n  };\n\n  const handleVisibilityChange = (visibility: string) => {\n    if (onVisibilityUpdate) {\n      onVisibilityUpdate(visibility);\n    }\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  // Verification system removed from MVP\n\n  const renderProfileStats = () => {\n    const stats = [\n      {\n        label: 'Profile Views',\n        value: profile.sharedData.platformActivity.profileViews.toLocaleString(),\n      },\n      {\n        label: 'Response Rate',\n        value: `${Math.round(profile.sharedData.platformActivity.averageResponseTime)}h`,\n      },\n      {\n        label: 'Member Since',\n        value: new Date(profile.sharedData.platformActivity.memberSince).getFullYear().toString(),\n      },\n    ];\n\n    return (\n      <div className=\"flex space-x-6\">\n        {stats.map((stat, index) => (\n          <div key={index} className=\"text-center\">\n            <div className=\"text-lg font-semibold text-gray-900\">{stat.value}</div>\n            <div className=\"text-sm text-gray-500\">{stat.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderVisibilityIndicator = () => {\n    const visibility = profile.sharedData.privacy.profileVisibility;\n    const visibilityConfig = {\n      public: { icon: Globe, color: 'text-green-600', label: 'Public' },\n      'verified-only': { icon: Shield, color: 'text-blue-600', label: 'Verified only' },\n      private: { icon: Shield, color: 'text-gray-600', label: 'Private' },\n    };\n\n    const config = visibilityConfig[visibility] || visibilityConfig.public;\n    const Icon = config.icon;\n\n    return (\n      <div className={`flex items-center space-x-1 ${config.color}`}>\n        <Icon className=\"w-4 h-4\" />\n        <span className=\"text-sm font-medium\">{config.label}</span>\n      </div>\n    );\n  };\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardBody className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-start lg:space-x-6\">\n          {/* Profile Image Section */}\n          <div className=\"flex flex-col items-center lg:items-start mb-6 lg:mb-0\">\n            <div className=\"relative group\">\n              <Avatar\n                src={profile.personalInfo.avatarUrl}\n                name={getProfileDisplayName(profile)}\n                size=\"lg\"\n                className=\"w-24 h-24 lg:w-32 lg:h-32 cursor-pointer\"\n                onClick={handleImageClick}\n              />\n\n              {/* Image Upload Overlay */}\n              {isOwnProfile && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\">\n                  <Camera className=\"w-6 h-6 text-white\" />\n                </div>\n              )}\n\n              {/* Image Menu */}\n              {showImageMenu && isOwnProfile && (\n                <div className=\"absolute top-full left-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n                  <div className=\"py-1\">\n                    <label className=\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer\">\n                      <Camera className=\"w-4 h-4 mr-2\" />\n                      Upload new photo\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"hidden\"\n                      />\n                    </label>\n                    {profile.personalInfo.avatarUrl && (\n                      <button\n                        onClick={() => {\n                          onImageDelete?.();\n                          setShowImageMenu(false);\n                        }}\n                        className=\"flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-gray-100\"\n                      >\n                        <Camera className=\"w-4 h-4 mr-2\" />\n                        Remove photo\n                      </button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n          </div>\n\n          {/* Profile Information Section */}\n          <div className=\"flex-1\">\n            <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between mb-4\">\n              <div>\n                <h1 className=\"text-2xl lg:text-3xl font-bold text-gray-900 mb-2\">\n                  {getProfileDisplayName(profile)}\n                </h1>\n\n                <div className=\"flex items-center space-x-4 mb-3\">\n                  <span className=\"text-lg text-gray-600\">\n                    {getProfileRoleDisplayName(profile.role)}\n                  </span>\n                  <span className=\"text-gray-400\">•</span>\n                  <span className=\"text-lg text-gray-600\">\n                    {getProfileLocationDisplayName(profile)}\n                  </span>\n                </div>\n\n                {/* Verification system removed from MVP */}\n\n                {/* Bio */}\n                {profile.personalInfo.bio && (\n                  <p className=\"text-gray-700 leading-relaxed mb-4 max-w-2xl\">\n                    {profile.personalInfo.bio}\n                  </p>\n                )}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center space-x-3\">\n                {isOwnProfile && (\n                  <>\n                    {renderVisibilityIndicator()}\n                    <Button\n                      variant=\"secondary\"\n                      color=\"default\"\n                      onPress={onEditProfile}\n                      startContent={<Edit3 className=\"w-4 h-4\" />}\n                    >\n                      Edit profile\n                    </Button>\n                  </>\n                )}\n\n                {!isOwnProfile && (\n                  <Button\n                    variant=\"primary\"\n                    color=\"primary\"\n                    startContent={<Edit3 className=\"w-4 h-4\" />}\n                  >\n                    Contact\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Profile Stats */}\n            {!isOwnProfile && (\n              <div className=\"border-t border-gray-200 pt-4\">{renderProfileStats()}</div>\n            )}\n\n            {/* Professional Summary */}\n            {profile.personalInfo.professionalSummary && (\n              <div className=\"border-t border-gray-200 pt-4 mt-4\">\n                <h3 className=\"text-sm font-semibold text-gray-900 mb-2\">Professional Summary</h3>\n                <p className=\"text-gray-700 leading-relaxed\">\n                  {profile.personalInfo.professionalSummary}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ProfileHeader;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileHeaderMinimal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":25,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 👤 Minimalistic Profile Header Component\n *\n * Ultra-minimalistic profile header inspired by Airbnb's clean design\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Avatar, Card, CardBody } from '@heroui/react';\nimport { Camera, Edit3 } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Profile } from '../types/profile.types';\nimport {\n    getProfileDisplayName,\n    getProfileLocationDisplayName,\n} from '../utils/profileHelpers';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface ProfileHeaderMinimalProps {\n  profile: Profile;\n  isOwnProfile?: boolean;\n  onEditProfile?: () => void;\n  onImageUpload?: (file: File) => void;\n  onImageDelete?: () => void;\n  className?: string;\n}\n\n// =============================================================================\n// MINIMALISTIC PROFILE HEADER COMPONENT\n// =============================================================================\n\nexport const ProfileHeaderMinimal: React.FC<ProfileHeaderMinimalProps> = ({\n  profile,\n  isOwnProfile = false,\n  onEditProfile,\n  onImageUpload,\n  onImageDelete,\n  className = '',\n}) => {\n  const [showImageMenu, setShowImageMenu] = useState(false);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleImageClick = () => {\n    if (isOwnProfile) {\n      setShowImageMenu(!showImageMenu);\n    }\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && onImageUpload) {\n      onImageUpload(file);\n    }\n  };\n\n  // =============================================================================\n  // RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardBody className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-start lg:space-x-6\">\n          {/* Profile Image Section - Minimalistic */}\n          <div className=\"flex flex-col items-center lg:items-start mb-6 lg:mb-0\">\n            <div className=\"relative group\">\n              <Avatar\n                src={profile.personalInfo.avatarUrl}\n                name={getProfileDisplayName(profile)}\n                size=\"lg\"\n                className=\"w-24 h-24 lg:w-32 lg:h-32 cursor-pointer\"\n                onClick={handleImageClick}\n              />\n\n              {/* Image Upload Overlay */}\n              {isOwnProfile && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\">\n                  <Camera className=\"w-6 h-6 text-white\" />\n                </div>\n              )}\n\n              {/* Image Menu */}\n              {showImageMenu && isOwnProfile && (\n                <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-32\">\n                  <div className=\"py-1\">\n                    <label className=\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 cursor-pointer\">\n                      <Camera className=\"w-4 h-4 mr-2\" />\n                      Upload Photo\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"hidden\"\n                      />\n                    </label>\n                    {profile.personalInfo.avatarUrl && (\n                      <button\n                        onClick={() => {\n                          onImageDelete?.();\n                          setShowImageMenu(false);\n                        }}\n                        className=\"flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-gray-50\"\n                      >\n                        Remove Photo\n                      </button>\n                    )}\n                    <button\n                      onClick={() => setShowImageMenu(false)}\n                      className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50\"\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Profile Information Section - Minimalistic */}\n          <div className=\"flex-1\">\n            <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between mb-4\">\n              <div>\n                <h1 className=\"text-2xl lg:text-3xl font-bold text-gray-900 mb-2\">\n                  {getProfileDisplayName(profile)}\n                </h1>\n                <div className=\"flex items-center space-x-4 mb-3\">\n                  <span className=\"text-lg text-gray-600\">\n                    {getProfileLocationDisplayName(profile)}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                {isOwnProfile && (\n                  <Button\n                    color=\"default\"\n                    size=\"sm\"\n                    startContent={<Edit3 className=\"w-4 h-4\" />}\n                    onClick={onEditProfile}\n                  >\n                    Edit profile\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Simple Stats - Airbnb Style */}\n            {!isOwnProfile && (\n              <div className=\"flex space-x-6 border-t border-gray-200 pt-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-semibold text-gray-900\">\n                    {profile.sharedData.platformActivity.profileViews.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Profile Views</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-semibold text-gray-900\">\n                    {Math.round(profile.sharedData.platformActivity.averageResponseTime)}h\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Response Time</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-semibold text-gray-900\">\n                    {new Date(profile.sharedData.platformActivity.memberSince).getFullYear()}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Member Since</div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ProfileHeaderMinimal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileImageUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":19,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📸 Profile Image Upload Component\n *\n * Component for uploading and managing profile images\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Modal, ModalBody, ModalContent, ModalFooter, ModalHeader } from '@heroui/react';\nimport { AlertCircle, Camera, Check, Upload, X } from 'lucide-react';\nimport React, { useRef, useState } from 'react';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface ProfileImageUploadProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUpload: (file: File) => void;\n  onDelete?: () => void;\n  currentImage?: string;\n  className?: string;\n}\n\n// =============================================================================\n// PROFILE IMAGE UPLOAD COMPONENT\n// =============================================================================\n\nexport const ProfileImageUpload: React.FC<ProfileImageUploadProps> = ({\n  isOpen,\n  onClose,\n  onUpload,\n  onDelete,\n  currentImage,\n  className = '',\n}) => {\n  const [dragActive, setDragActive] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleFileSelect = (file: File) => {\n    setError(null);\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      setError('Please select an image file');\n      return;\n    }\n\n    // Validate file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      setError('File size must be less than 5MB');\n      return;\n    }\n\n    setSelectedFile(file);\n\n    // Create preview URL\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) return;\n\n    setUploading(true);\n    setError(null);\n\n    try {\n      await onUpload(selectedFile);\n      handleClose();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Upload failed');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!onDelete) return;\n\n    setUploading(true);\n    setError(null);\n\n    try {\n      await onDelete();\n      handleClose();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Delete failed');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedFile(null);\n    setPreviewUrl(null);\n    setError(null);\n    setUploading(false);\n    onClose();\n  };\n\n  const handleCameraClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderUploadArea = () => (\n    <div\n      className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n        dragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'\n      }`}\n      onDragEnter={handleDrag}\n      onDragLeave={handleDrag}\n      onDragOver={handleDrag}\n      onDrop={handleDrop}\n    >\n      <div className=\"space-y-4\">\n        <div className=\"mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center\">\n          <Upload className=\"w-8 h-8 text-gray-400\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Upload a new profile photo</h3>\n          <p className=\"text-gray-600 mb-4\">\n            Drag and drop an image here, or click to select a file\n          </p>\n          <Button\n            variant=\"secondary\"\n            color=\"primary\"\n            onPress={handleCameraClick}\n            startContent={<Camera className=\"w-4 h-4\" />}\n          >\n            Choose File\n          </Button>\n        </div>\n        <p className=\"text-xs text-gray-500\">JPG, PNG, or GIF. Max size 5MB.</p>\n      </div>\n    </div>\n  );\n\n  const renderPreview = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-32 h-32 bg-gray-100 rounded-full overflow-hidden mb-4\">\n          {previewUrl ? (\n            <img src={previewUrl} alt=\"Preview\" className=\"w-full h-full object-cover\" />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <Camera className=\"w-8 h-8 text-gray-400\" />\n            </div>\n          )}\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n          {selectedFile ? 'Preview your new photo' : 'Current profile photo'}\n        </h3>\n        {selectedFile && (\n          <p className=\"text-sm text-gray-600\">\n            {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n          </p>\n        )}\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n            <span className=\"text-sm text-red-800\">{error}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose} size=\"md\" className={className}>\n      <ModalContent>\n        <ModalHeader className=\"flex flex-col gap-1\">\n          <h2 className=\"text-xl font-semibold\">Profile Photo</h2>\n          <p className=\"text-sm text-gray-600\">\n            Upload a professional photo to build trust and credibility\n          </p>\n        </ModalHeader>\n        <ModalBody>{selectedFile || currentImage ? renderPreview() : renderUploadArea()}</ModalBody>\n        <ModalFooter>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-2\">\n              {currentImage && (\n                <Button\n                  variant=\"secondary\"\n                  color=\"danger\"\n                  onPress={handleDelete}\n                  isLoading={uploading}\n                  startContent={!uploading && <X className=\"w-4 h-4\" />}\n                >\n                  Delete Photo\n                </Button>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"secondary\"\n                color=\"default\"\n                onPress={handleClose}\n                isDisabled={uploading}\n              >\n                Cancel\n              </Button>\n              {selectedFile && (\n                <Button\n                  variant=\"primary\"\n                  color=\"primary\"\n                  onPress={handleUpload}\n                  isLoading={uploading}\n                  startContent={!uploading && <Check className=\"w-4 h-4\" />}\n                >\n                  {uploading ? 'Uploading...' : 'Upload Photo'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileInputChange}\n        className=\"hidden\"\n      />\n    </Modal>\n  );\n};\n\nexport default ProfileImageUpload;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfilePageWrapper.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'handleProfileDelete' is assigned a value but never used.","line":58,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleProfileDelete' is assigned a value but never used.","line":58,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 👤 Profile Page Wrapper\n *\n * Wrapper component that fetches profile data and renders the RoleBasedProfilePage\n * This handles the data fetching logic and provides proper loading/error states\n */\n\nimport React, { useEffect } from 'react';\nimport { useProfile } from '../hooks/useProfile';\nimport { RoleBasedProfilePage } from './RoleBasedProfilePage';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface ProfilePageWrapperProps {\n  isOwnProfile?: boolean;\n  onProfileUpdate?: () => void;\n  onProfileDelete?: () => void;\n  className?: string;\n}\n\n// =============================================================================\n// PROFILE PAGE WRAPPER COMPONENT\n// =============================================================================\n\nexport const ProfilePageWrapper: React.FC<ProfilePageWrapperProps> = ({\n  isOwnProfile = false,\n  onProfileUpdate,\n  onProfileDelete,\n  className = '',\n}) => {\n  const { profile, loading: profileLoading, error: profileError, refreshProfile } = useProfile();\n\n  // =============================================================================\n  // EFFECTS\n  // =============================================================================\n\n  useEffect(() => {\n    if (isOwnProfile) {\n      refreshProfile();\n    }\n  }, [isOwnProfile, refreshProfile]);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleProfileUpdate = async () => {\n    try {\n      onProfileUpdate?.();\n    } catch {\n      // TODO: Add error notification\n      // Error handling for profile update\n    }\n  };\n\n  const handleProfileDelete = async () => {\n    try {\n      onProfileDelete?.();\n    } catch {\n      // TODO: Add error notification\n      // Error handling for profile deletion\n    }\n  };\n\n  // =============================================================================\n  // LOADING AND ERROR STATES\n  // =============================================================================\n\n  if (profileLoading) {\n    return (\n      <div className={`flex items-center justify-center min-h-screen ${className}`}>\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (profileError) {\n    return (\n      <div className={`flex items-center justify-center min-h-screen ${className}`}>\n        <div className=\"text-center\">\n          <div className=\"text-red-500 text-6xl mb-4\">\n            <i className=\"fas fa-exclamation-triangle\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Error Loading Profile</h2>\n          <p className=\"text-gray-600 mb-4\">{profileError}</p>\n          <button\n            onClick={refreshProfile}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className={`flex items-center justify-center min-h-screen ${className}`}>\n        <div className=\"text-center\">\n          <div className=\"text-gray-400 text-6xl mb-4\">\n            <i className=\"fas fa-user\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">No Profile Found</h2>\n          <p className=\"text-gray-600\">This profile could not be found or is not accessible.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <RoleBasedProfilePage\n      profile={profile}\n      isOwnProfile={isOwnProfile}\n      onProfileUpdate={handleProfileUpdate}\n      className={className}\n    />\n  );\n};\n\nexport default ProfilePageWrapper;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileSections/BusinessOwnerProfile.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":24,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'field' is defined but never used.","line":25,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":25,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1709,1712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1709,1712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 Business Owner Profile Section\n *\n * Business owner specific profile information section\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Card, CardBody, CardHeader, Input, Select, SelectItem, Textarea } from '@heroui/react';\nimport { Award, Briefcase, Building2, Calendar, TrendingUp, Users } from 'lucide-react';\nimport React, { useState } from 'react';\nimport {\n  BusinessOwnerProfile as BusinessOwnerProfileType,\n  Profile,\n} from '../../types/profile.types';\nimport BusinessTimeline from '../BusinessTimeline';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface BusinessOwnerProfileProps {\n  profile: Profile;\n  isEditing?: boolean;\n  onUpdate?: (data: Partial<BusinessOwnerProfileType>) => void;\n  onFieldUpdate?: (field: string, value: any) => void;\n  className?: string;\n  userId?: string;\n}\n\n// =============================================================================\n// BUSINESS OWNER PROFILE COMPONENT\n// =============================================================================\n\nexport const BusinessOwnerProfile: React.FC<BusinessOwnerProfileProps> = ({\n  profile,\n  isEditing = false,\n  onUpdate,\n  onFieldUpdate,\n  className = '',\n  userId,\n}) => {\n  const [localData, setLocalData] = useState<Partial<BusinessOwnerProfileType>>(\n    profile.businessOwnerData || {}\n  );\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleFieldChange = (field: string, value: any) => {\n    const updatedData = { ...localData, [field]: value };\n    setLocalData(updatedData);\n    onFieldUpdate?.(field, value);\n  };\n\n  const handleSave = () => {\n    onUpdate?.(localData);\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderBusinessInfo = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Business Name</label>\n          {isEditing ? (\n            <Input\n              value={localData.businessName || ''}\n              onChange={e => handleFieldChange('businessName', e.target.value)}\n              placeholder=\"Enter your business name\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Building2 className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">{localData.businessName || 'Not specified'}</span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Business Type</label>\n          {isEditing ? (\n            <Select\n              value={localData.businessType || ''}\n              onChange={value => handleFieldChange('businessType', value)}\n              placeholder=\"Select business type\"\n              variant=\"bordered\"\n            >\n              <SelectItem key=\"sole-proprietorship\">Sole Proprietorship</SelectItem>\n              <SelectItem key=\"partnership\">Partnership</SelectItem>\n              <SelectItem key=\"llc\">Limited Liability Company (LLC)</SelectItem>\n              <SelectItem key=\"corporation\">Corporation</SelectItem>\n              <SelectItem key=\"s-corp\">S-Corporation</SelectItem>\n              <SelectItem key=\"b-corp\">B-Corporation</SelectItem>\n              <SelectItem key=\"non-profit\">Non-Profit</SelectItem>\n            </Select>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">{localData.businessType || 'Not specified'}</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Years in Business</label>\n          {isEditing ? (\n            <Input\n              type=\"number\"\n              value={localData.yearsInBusiness?.toString() || ''}\n              onChange={e => handleFieldChange('yearsInBusiness', parseInt(e.target.value) || 0)}\n              placeholder=\"Enter years in business\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localData.yearsInBusiness ? `${localData.yearsInBusiness} years` : 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Number of Employees\n          </label>\n          {isEditing ? (\n            <Input\n              type=\"number\"\n              value={localData.employeeCount?.toString() || ''}\n              onChange={e => handleFieldChange('employeeCount', parseInt(e.target.value) || 0)}\n              placeholder=\"Enter number of employees\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localData.employeeCount ? `${localData.employeeCount} employees` : 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Revenue Range</label>\n        {isEditing ? (\n          <Select\n            value={localData.revenueRange || ''}\n            onChange={value => handleFieldChange('revenueRange', value)}\n            placeholder=\"Select revenue range\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"0-100k\">€0 - €100K</SelectItem>\n            <SelectItem key=\"100k-500k\">€100K - €500K</SelectItem>\n            <SelectItem key=\"500k-1m\">€500K - €1M</SelectItem>\n            <SelectItem key=\"1m-5m\">€1M - €5M</SelectItem>\n            <SelectItem key=\"5m-10m\">€5M - €10M</SelectItem>\n            <SelectItem key=\"10m+\">€10M+</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">{localData.revenueRange || 'Not specified'}</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderExitStrategy = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Exit Timeline</label>\n        {isEditing ? (\n          <Select\n            value={localData.exitTimeline?.timeframe || ''}\n            onChange={value =>\n              handleFieldChange('exitTimeline', { ...localData.exitTimeline, timeframe: value })\n            }\n            placeholder=\"Select exit timeline\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"immediate\">Immediate (0-3 months)</SelectItem>\n            <SelectItem key=\"6-months\">6 months</SelectItem>\n            <SelectItem key=\"1-year\">1 year</SelectItem>\n            <SelectItem key=\"2-years\">2 years</SelectItem>\n            <SelectItem key=\"flexible\">Flexible</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <Calendar className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">\n              {localData.exitTimeline?.timeframe || 'Not specified'}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Reason for Selling</label>\n        {isEditing ? (\n          <Textarea\n            value={localData.reasonForSelling || ''}\n            onChange={e => handleFieldChange('reasonForSelling', e.target.value)}\n            placeholder=\"Why are you considering selling your business?\"\n            variant=\"bordered\"\n            minRows={3}\n          />\n        ) : (\n          <div className=\"text-gray-900\">{localData.reasonForSelling || 'Not specified'}</div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderAchievements = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Key Achievements</label>\n        <div className=\"space-y-2\">\n          {localData.keyAchievements?.map((achievement, index) => (\n            <div key={index} className=\"flex items-start space-x-2\">\n              <Award className=\"w-4 h-4 text-yellow-500 mt-1\" />\n              <div>\n                <div className=\"font-medium text-gray-900\">{achievement.title}</div>\n                <div className=\"text-sm text-gray-600\">{achievement.description}</div>\n                <div className=\"text-xs text-gray-500\">{achievement.date}</div>\n              </div>\n            </div>\n          )) || <div className=\"text-gray-500 text-sm\">No achievements listed</div>}\n        </div>\n      </div>\n    </div>\n  );\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <Building2 className=\"w-5 h-5 text-blue-600\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Business Information</h3>\n              <p className=\"text-gray-600 text-sm\">Details about your business and exit strategy</p>\n            </div>\n          </div>\n          {isEditing && (\n            <Button variant=\"primary\" color=\"primary\" size=\"sm\" onPress={handleSave}>\n              Save Changes\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardBody className=\"pt-0\">\n        <div className=\"space-y-8\">\n          {/* Business Information */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Business Details</h4>\n            {renderBusinessInfo()}\n          </div>\n\n          {/* Exit Strategy */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Exit Strategy</h4>\n            {renderExitStrategy()}\n          </div>\n\n          {/* Achievements */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Key Achievements</h4>\n            {renderAchievements()}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\n// =============================================================================\n// BUSINESS TIMELINE COMPONENT\n// =============================================================================\n\nexport const BusinessTimelineSection: React.FC<{ userId?: string }> = ({ userId }) => {\n  if (!userId) {\n    return (\n      <Card className=\"border border-gray-200 shadow-sm\">\n        <CardBody className=\"text-center py-12\">\n          <div className=\"w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n            <span className=\"text-4xl\">📈</span>\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Business Timeline</h3>\n          <p className=\"text-gray-600\">User ID required to load timeline</p>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-gray-200 shadow-sm\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <Building2 className=\"w-5 h-5 text-blue-600\" />\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Business Journey</h3>\n            <p className=\"text-gray-600 text-sm\">Your business activities and milestones</p>\n          </div>\n        </div>\n      </CardHeader>\n      <CardBody className=\"pt-0\">\n        <BusinessTimeline\n          userId={userId}\n          showHeader={false}\n          showStats={true}\n          maxEvents={12}\n          groupByYear={true}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default BusinessOwnerProfile;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileSections/InvestorProfile.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":29,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":49},{"ruleId":"no-unused-vars","severity":1,"message":"'field' is defined but never used.","line":30,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":30,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[844,847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[844,847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1580,1583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1580,1583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💼 Investor Profile Section\n *\n * Investor specific profile information section\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Chip,\n  Input,\n  Select,\n  SelectItem,\n  Textarea,\n} from '@heroui/react';\nimport { Briefcase, Clock, DollarSign, Target, TrendingUp } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { InvestorProfile as InvestorProfileType, Profile } from '../../types/profile.types';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface InvestorProfileProps {\n  profile: Profile;\n  isEditing?: boolean;\n  onUpdate?: (data: Partial<InvestorProfileType>) => void;\n  onFieldUpdate?: (field: string, value: any) => void;\n  className?: string;\n}\n\n// =============================================================================\n// INVESTOR PROFILE COMPONENT\n// =============================================================================\n\nexport const InvestorProfile: React.FC<InvestorProfileProps> = ({\n  profile,\n  isEditing = false,\n  onUpdate,\n  onFieldUpdate,\n  className = '',\n}) => {\n  const [localData, setLocalData] = useState<Partial<InvestorProfileType>>(\n    profile.investorData || {}\n  );\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleFieldChange = (field: string, value: any) => {\n    const updatedData = { ...localData, [field]: value };\n    setLocalData(updatedData);\n    onFieldUpdate?.(field, value);\n  };\n\n  const handleSave = () => {\n    onUpdate?.(localData);\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderInvestmentCapacity = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Minimum Investment</label>\n          {isEditing ? (\n            <Input\n              type=\"number\"\n              value={localData.investmentCapacity?.minAmount?.toString() || ''}\n              onChange={e =>\n                handleFieldChange('investmentCapacity', {\n                  ...localData.investmentCapacity,\n                  minAmount: parseInt(e.target.value) || 0,\n                })\n              }\n              placeholder=\"Enter minimum amount\"\n              variant=\"bordered\"\n              startContent={<span className=\"text-gray-500\">€</span>}\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                €{localData.investmentCapacity?.minAmount?.toLocaleString() || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Maximum Investment</label>\n          {isEditing ? (\n            <Input\n              type=\"number\"\n              value={localData.investmentCapacity?.maxAmount?.toString() || ''}\n              onChange={e =>\n                handleFieldChange('investmentCapacity', {\n                  ...localData.investmentCapacity,\n                  maxAmount: parseInt(e.target.value) || 0,\n                })\n              }\n              placeholder=\"Enter maximum amount\"\n              variant=\"bordered\"\n              startContent={<span className=\"text-gray-500\">€</span>}\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                €{localData.investmentCapacity?.maxAmount?.toLocaleString() || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Investment Frequency</label>\n        {isEditing ? (\n          <Select\n            value={localData.investmentCapacity?.investmentFrequency || ''}\n            onChange={value =>\n              handleFieldChange('investmentCapacity', {\n                ...localData.investmentCapacity,\n                investmentFrequency: value,\n              })\n            }\n            placeholder=\"Select investment frequency\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"one-time\">One-time</SelectItem>\n            <SelectItem key=\"ongoing\">Ongoing</SelectItem>\n            <SelectItem key=\"fund-based\">Fund-based</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <Clock className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">\n              {localData.investmentCapacity?.investmentFrequency || 'Not specified'}\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderInvestmentFocus = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Industries of Interest\n        </label>\n        {isEditing ? (\n          <Select\n            value={localData.investmentFocus?.industries || []}\n            onChange={value =>\n              handleFieldChange('investmentFocus', {\n                ...localData.investmentFocus,\n                industries: value,\n              })\n            }\n            placeholder=\"Select industries\"\n            variant=\"bordered\"\n            selectionMode=\"multiple\"\n          >\n            <SelectItem key=\"technology\">Technology</SelectItem>\n            <SelectItem key=\"manufacturing\">Manufacturing</SelectItem>\n            <SelectItem key=\"retail\">Retail</SelectItem>\n            <SelectItem key=\"services\">Services</SelectItem>\n            <SelectItem key=\"healthcare\">Healthcare</SelectItem>\n            <SelectItem key=\"finance\">Finance</SelectItem>\n            <SelectItem key=\"real-estate\">Real Estate</SelectItem>\n            <SelectItem key=\"construction\">Construction</SelectItem>\n            <SelectItem key=\"food-beverage\">Food & Beverage</SelectItem>\n            <SelectItem key=\"education\">Education</SelectItem>\n            <SelectItem key=\"consulting\">Consulting</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localData.investmentFocus?.industries?.map(industry => (\n              <Chip key={industry} size=\"sm\" variant=\"flat\" color=\"primary\">\n                {industry}\n              </Chip>\n            )) || <span className=\"text-gray-500 text-sm\">No industries specified</span>}\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Business Stages</label>\n        {isEditing ? (\n          <Select\n            value={localData.investmentFocus?.businessStages || []}\n            onChange={value =>\n              handleFieldChange('investmentFocus', {\n                ...localData.investmentFocus,\n                businessStages: value,\n              })\n            }\n            placeholder=\"Select business stages\"\n            variant=\"bordered\"\n            selectionMode=\"multiple\"\n          >\n            <SelectItem key=\"startup\">Startup</SelectItem>\n            <SelectItem key=\"growth\">Growth</SelectItem>\n            <SelectItem key=\"mature\">Mature</SelectItem>\n            <SelectItem key=\"turnaround\">Turnaround</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localData.investmentFocus?.businessStages?.map(stage => (\n              <Chip key={stage} size=\"sm\" variant=\"flat\" color=\"secondary\">\n                {stage}\n              </Chip>\n            )) || <span className=\"text-gray-500 text-sm\">No stages specified</span>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderExperience = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Years of Experience\n          </label>\n          {isEditing ? (\n            <Input\n              type=\"number\"\n              value={localData.investmentExperience?.yearsActive?.toString() || ''}\n              onChange={e =>\n                handleFieldChange('investmentExperience', {\n                  ...localData.investmentExperience,\n                  yearsActive: parseInt(e.target.value) || 0,\n                })\n              }\n              placeholder=\"Enter years of experience\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localData.investmentExperience?.yearsActive\n                  ? `${localData.investmentExperience.yearsActive} years`\n                  : 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Total Deals Completed\n          </label>\n          {isEditing ? (\n            <Input\n              type=\"number\"\n              value={localData.investmentExperience?.totalDeals?.toString() || ''}\n              onChange={e =>\n                handleFieldChange('investmentExperience', {\n                  ...localData.investmentExperience,\n                  totalDeals: parseInt(e.target.value) || 0,\n                })\n              }\n              placeholder=\"Enter total deals\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localData.investmentExperience?.totalDeals || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Investment Philosophy\n        </label>\n        {isEditing ? (\n          <Textarea\n            value={localData.investmentExperience?.investmentPhilosophy || ''}\n            onChange={e =>\n              handleFieldChange('investmentExperience', {\n                ...localData.investmentExperience,\n                investmentPhilosophy: e.target.value,\n              })\n            }\n            placeholder=\"Describe your investment philosophy and approach\"\n            variant=\"bordered\"\n            minRows={3}\n          />\n        ) : (\n          <div className=\"text-gray-900\">\n            {localData.investmentExperience?.investmentPhilosophy || 'Not specified'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderDecisionProcess = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Decision Timeline</label>\n        {isEditing ? (\n          <Select\n            value={localData.decisionProcess?.decisionTimeline || ''}\n            onChange={value =>\n              handleFieldChange('decisionProcess', {\n                ...localData.decisionProcess,\n                decisionTimeline: value,\n              })\n            }\n            placeholder=\"Select decision timeline\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"immediate\">Immediate (same day)</SelectItem>\n            <SelectItem key=\"1-week\">1 week</SelectItem>\n            <SelectItem key=\"2-weeks\">2 weeks</SelectItem>\n            <SelectItem key=\"1-month\">1 month</SelectItem>\n            <SelectItem key=\"flexible\">Flexible</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <Clock className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">\n              {localData.decisionProcess?.decisionTimeline || 'Not specified'}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Key Criteria</label>\n        {isEditing ? (\n          <Textarea\n            value={localData.decisionProcess?.keyCriteria?.join(', ') || ''}\n            onChange={e =>\n              handleFieldChange('decisionProcess', {\n                ...localData.decisionProcess,\n                keyCriteria: e.target.value\n                  .split(',')\n                  .map(c => c.trim())\n                  .filter(c => c),\n              })\n            }\n            placeholder=\"List your key investment criteria (comma-separated)\"\n            variant=\"bordered\"\n            minRows={2}\n          />\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localData.decisionProcess?.keyCriteria?.map(criteria => (\n              <Chip key={criteria} size=\"sm\" variant=\"flat\" color=\"default\">\n                {criteria}\n              </Chip>\n            )) || <span className=\"text-gray-500 text-sm\">No criteria specified</span>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderPreviousDeals = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Previous Deals</label>\n        <div className=\"space-y-3\">\n          {localData.previousDeals?.map((deal, index) => (\n            <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-gray-900\">{deal.companyName}</div>\n                  <div className=\"text-sm text-gray-600\">{deal.industry}</div>\n                  <div className=\"text-sm text-gray-500\">\n                    {deal.year} • €{deal.dealSize.toLocaleString()} • {deal.role}\n                  </div>\n                  {deal.description && (\n                    <div className=\"text-sm text-gray-700 mt-2\">{deal.description}</div>\n                  )}\n                </div>\n                <div className=\"ml-4\">\n                  <Chip\n                    size=\"sm\"\n                    color={\n                      deal.outcome === 'successful'\n                        ? 'success'\n                        : deal.outcome === 'ongoing'\n                          ? 'warning'\n                          : 'danger'\n                    }\n                    variant=\"flat\"\n                  >\n                    {deal.outcome}\n                  </Chip>\n                </div>\n              </div>\n            </div>\n          )) || <div className=\"text-gray-500 text-sm\">No previous deals listed</div>}\n        </div>\n      </div>\n    </div>\n  );\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <Target className=\"w-5 h-5 text-green-600\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Investment Profile</h3>\n              <p className=\"text-gray-600 text-sm\">Your investment preferences and experience</p>\n            </div>\n          </div>\n          {isEditing && (\n            <Button variant=\"primary\" color=\"primary\" size=\"sm\" onPress={handleSave}>\n              Save Changes\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardBody className=\"pt-0\">\n        <div className=\"space-y-8\">\n          {/* Investment Capacity */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Investment Capacity</h4>\n            {renderInvestmentCapacity()}\n          </div>\n\n          {/* Investment Focus */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Investment Focus</h4>\n            {renderInvestmentFocus()}\n          </div>\n\n          {/* Experience */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Experience</h4>\n            {renderExperience()}\n          </div>\n\n          {/* Decision Process */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Decision Process</h4>\n            {renderDecisionProcess()}\n          </div>\n\n          {/* Previous Deals */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Previous Deals</h4>\n            {renderPreviousDeals()}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default InvestorProfile;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileSections/ProfessionalBackground.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":22,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'field' is defined but never used.","line":23,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":23,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleFieldChange' is assigned a value but never used.","line":44,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFieldChange' is assigned a value but never used.","line":44,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1723,1726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1723,1726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎓 Professional Background Component\n *\n * Shared professional background section for both business owners and investors\n * Emphasizes common professional experience and achievements\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport { Award, Briefcase, GraduationCap, Star, Target, TrendingUp, Users } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Profile } from '../../types/profile.types';\nimport { CommonProfessionalBackground } from '../../types/roleBased.types';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface ProfessionalBackgroundProps {\n  profile: Profile;\n  isEditing?: boolean;\n  onUpdate?: (data: Partial<CommonProfessionalBackground>) => void;\n  onFieldUpdate?: (field: string, value: any) => void;\n  className?: string;\n}\n\n// =============================================================================\n// PROFESSIONAL BACKGROUND COMPONENT\n// =============================================================================\n\nexport const ProfessionalBackground: React.FC<ProfessionalBackgroundProps> = ({\n  profile,\n  isEditing = false,\n  onUpdate,\n  onFieldUpdate,\n  className = '',\n}) => {\n  const [localData, setLocalData] = useState<Partial<CommonProfessionalBackground>>({});\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleFieldChange = (field: keyof CommonProfessionalBackground, value: any) => {\n    const updated = { ...localData, [field]: value };\n    setLocalData(updated);\n    onFieldUpdate?.(field, value);\n  };\n\n  const handleSave = () => {\n    onUpdate?.(localData);\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderCurrentRole = () => {\n    const currentRole = profile.personalInfo.professionalTitle || 'Professional';\n    const company = profile.personalInfo.company || 'Independent';\n    const industry = profile.personalInfo.industry || 'Various';\n    const yearsExperience =\n      profile.businessOwnerData?.yearsInIndustry ||\n      profile.investorData?.investmentExperience?.yearsActive ||\n      '5+';\n\n    return (\n      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 mb-6\">\n        <div className=\"flex items-start space-x-4\">\n          <div className=\"bg-blue-100 p-3 rounded-full\">\n            <Briefcase className=\"w-6 h-6 text-blue-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{currentRole}</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-gray-600\">\n                <span className=\"font-medium\">Company:</span>\n                <span>{company}</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-gray-600\">\n                <span className=\"font-medium\">Industry:</span>\n                <span>{industry}</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-gray-600\">\n                <span className=\"font-medium\">Experience:</span>\n                <span>{yearsExperience} years</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderIndustryExpertise = () => {\n    const expertise =\n      profile.businessOwnerData?.industryExpertise ||\n      profile.investorData?.investmentFocus?.industries ||\n      [];\n\n    if (expertise.length === 0) return null;\n\n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n          <Star className=\"w-5 h-5 text-yellow-500 mr-2\" />\n          Industry Expertise\n        </h4>\n        <div className=\"flex flex-wrap gap-2\">\n          {expertise.map((skill, index) => (\n            <Chip\n              key={index}\n              size=\"sm\"\n              variant=\"flat\"\n              color=\"primary\"\n              className=\"bg-blue-100 text-blue-800\"\n            >\n              {skill}\n            </Chip>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderPreviousVentures = () => {\n    const ventures = profile.businessOwnerData?.previousVentures || [];\n\n    if (ventures.length === 0) return null;\n\n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n          <TrendingUp className=\"w-5 h-5 text-green-500 mr-2\" />\n          Previous Ventures\n        </h4>\n        <div className=\"space-y-4\">\n          {ventures.map(venture => (\n            <div key={venture.id} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h5 className=\"font-semibold text-gray-900\">{venture.name}</h5>\n                  <p className=\"text-gray-600 text-sm\">\n                    {venture.role} • {venture.industry}\n                  </p>\n                  <p className=\"text-gray-500 text-sm mt-1\">{venture.duration}</p>\n                  {venture.description && (\n                    <p className=\"text-gray-700 text-sm mt-2\">{venture.description}</p>\n                  )}\n                </div>\n                <div className=\"ml-4\">\n                  <Chip\n                    size=\"sm\"\n                    variant=\"flat\"\n                    color={venture.outcome === 'Acquired by larger company' ? 'success' : 'default'}\n                  >\n                    {venture.outcome}\n                  </Chip>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderPreviousDeals = () => {\n    const deals = profile.investorData?.previousDeals || [];\n\n    if (deals.length === 0) return null;\n\n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n          <Target className=\"w-5 h-5 text-green-500 mr-2\" />\n          Previous Investments\n        </h4>\n        <div className=\"space-y-4\">\n          {deals.map(deal => (\n            <div key={deal.id} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h5 className=\"font-semibold text-gray-900\">{deal.companyName}</h5>\n                  <p className=\"text-gray-600 text-sm\">\n                    {deal.industry} • {deal.year}\n                  </p>\n                  <p className=\"text-gray-500 text-sm mt-1\">€{deal.dealSize.toLocaleString()}</p>\n                  {deal.description && (\n                    <p className=\"text-gray-700 text-sm mt-2\">{deal.description}</p>\n                  )}\n                </div>\n                <div className=\"ml-4\">\n                  <Chip\n                    size=\"sm\"\n                    variant=\"flat\"\n                    color={deal.outcome === 'successful' ? 'success' : 'default'}\n                  >\n                    {deal.outcome}\n                  </Chip>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderCertifications = () => {\n    const certifications =\n      profile.businessOwnerData?.professionalCertifications ||\n      profile.investorData?.professionalCredentials ||\n      [];\n\n    if (certifications.length === 0) return null;\n\n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n          <GraduationCap className=\"w-5 h-5 text-purple-500 mr-2\" />\n          Professional Certifications\n        </h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {certifications.map(cert => (\n            <div key={cert.id} className=\"border border-gray-200 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-gray-900\">{cert.name}</h5>\n              <p className=\"text-gray-600 text-sm\">{cert.issuer}</p>\n              <p className=\"text-gray-500 text-sm mt-1\">\n                {new Date(cert.dateObtained).getFullYear()}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderAchievements = () => {\n    const achievements = profile.businessOwnerData?.keyAchievements || [];\n\n    if (achievements.length === 0) return null;\n\n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n          <Award className=\"w-5 h-5 text-yellow-500 mr-2\" />\n          Key Achievements\n        </h4>\n        <div className=\"space-y-4\">\n          {achievements.map(achievement => (\n            <div key={achievement.id} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-yellow-100 p-2 rounded-full\">\n                  <Award className=\"w-4 h-4 text-yellow-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h5 className=\"font-semibold text-gray-900\">{achievement.title}</h5>\n                  <p className=\"text-gray-700 text-sm mt-1\">{achievement.description}</p>\n                  <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-500\">\n                    <span>{new Date(achievement.date).getFullYear()}</span>\n                    <Chip size=\"sm\" variant=\"flat\" color=\"warning\">\n                      {achievement.impact} impact\n                    </Chip>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderProfessionalNetwork = () => {\n    const network = profile.businessOwnerData?.professionalNetwork || '';\n\n    if (!network) return null;\n\n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n          <Users className=\"w-5 h-5 text-blue-500 mr-2\" />\n          Professional Network\n        </h4>\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <p className=\"text-gray-700\">{network}</p>\n        </div>\n      </div>\n    );\n  };\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 p-2 rounded-lg\">\n              <Briefcase className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Professional Background</h3>\n              <p className=\"text-gray-600 text-sm\">Your professional experience and achievements</p>\n            </div>\n          </div>\n          {isEditing && (\n            <Button variant=\"primary\" color=\"primary\" size=\"sm\" onPress={handleSave}>\n              Save Changes\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardBody className=\"pt-0\">\n        <div className=\"space-y-6\">\n          {/* Current Role */}\n          {renderCurrentRole()}\n\n          {/* Industry Expertise */}\n          {renderIndustryExpertise()}\n\n          {/* Previous Ventures (Business Owners) */}\n          {renderPreviousVentures()}\n\n          {/* Previous Deals (Investors) */}\n          {renderPreviousDeals()}\n\n          {/* Certifications */}\n          {renderCertifications()}\n\n          {/* Achievements */}\n          {renderAchievements()}\n\n          {/* Professional Network */}\n          {renderProfessionalNetwork()}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ProfessionalBackground;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/ProfileSections/SharedProfile.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":29,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'field' is defined but never used.","line":30,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":30,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[819,822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[819,822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1537,1540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1537,1540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🤝 Shared Profile Section\n *\n * Shared profile information section for all user types\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Input,\n  Select,\n  SelectItem,\n  Switch,\n  Textarea,\n} from '@heroui/react';\nimport { Bell, Globe, MapPin, MessageCircle, User } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Profile, SharedProfileData } from '../../types/profile.types';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface SharedProfileProps {\n  profile: Profile;\n  isEditing?: boolean;\n  onUpdate?: (data: Partial<SharedProfileData>) => void;\n  onFieldUpdate?: (field: string, value: any) => void;\n  className?: string;\n}\n\n// =============================================================================\n// SHARED PROFILE COMPONENT\n// =============================================================================\n\nexport const SharedProfile: React.FC<SharedProfileProps> = ({\n  profile,\n  isEditing = false,\n  onUpdate,\n  onFieldUpdate,\n  className = '',\n}) => {\n  const [localData, setLocalData] = useState<Partial<SharedProfileData>>(profile.sharedData || {});\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleFieldChange = (field: string, value: any) => {\n    const updatedData = { ...localData, [field]: value };\n    setLocalData(updatedData);\n    onFieldUpdate?.(field, value);\n  };\n\n  const handleSave = () => {\n    onUpdate?.(localData);\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderPersonalInfo = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">First Name</label>\n          {isEditing ? (\n            <Input\n              value={profile.personalInfo.firstName}\n              onChange={e => onFieldUpdate?.('firstName', e.target.value)}\n              placeholder=\"Enter your first name\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">{profile.personalInfo.firstName}</span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Last Name</label>\n          {isEditing ? (\n            <Input\n              value={profile.personalInfo.lastName}\n              onChange={e => onFieldUpdate?.('lastName', e.target.value)}\n              placeholder=\"Enter your last name\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">{profile.personalInfo.lastName}</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Professional Title</label>\n          {isEditing ? (\n            <Input\n              value={profile.personalInfo.professionalTitle || ''}\n              onChange={e => onFieldUpdate?.('professionalTitle', e.target.value)}\n              placeholder=\"e.g., CEO, Managing Director\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {profile.personalInfo.professionalTitle || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Company</label>\n          {isEditing ? (\n            <Input\n              value={profile.personalInfo.company || ''}\n              onChange={e => onFieldUpdate?.('company', e.target.value)}\n              placeholder=\"Enter your company name\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {profile.personalInfo.company || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">City</label>\n          {isEditing ? (\n            <Input\n              value={profile.personalInfo.city || ''}\n              onChange={e => onFieldUpdate?.('city', e.target.value)}\n              placeholder=\"Enter your city\"\n              variant=\"bordered\"\n            />\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <MapPin className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">{profile.personalInfo.city || 'Not specified'}</span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Country</label>\n          {isEditing ? (\n            <Select\n              value={profile.personalInfo.country}\n              onChange={value => onFieldUpdate?.('country', value)}\n              placeholder=\"Select your country\"\n              variant=\"bordered\"\n            >\n              <SelectItem key=\"BE\">Belgium</SelectItem>\n              <SelectItem key=\"NL\">Netherlands</SelectItem>\n              <SelectItem key=\"FR\">France</SelectItem>\n              <SelectItem key=\"DE\">Germany</SelectItem>\n              <SelectItem key=\"UK\">United Kingdom</SelectItem>\n              <SelectItem key=\"US\">United States</SelectItem>\n            </Select>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <MapPin className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">{profile.personalInfo.country}</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bio</label>\n        {isEditing ? (\n          <Textarea\n            value={profile.personalInfo.bio || ''}\n            onChange={e => onFieldUpdate?.('bio', e.target.value)}\n            placeholder=\"Tell us about yourself and your professional background...\"\n            variant=\"bordered\"\n            minRows={4}\n          />\n        ) : (\n          <div className=\"text-gray-900\">{profile.personalInfo.bio || 'No bio provided'}</div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderCommunicationPreferences = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Preferred Contact Method\n          </label>\n          {isEditing ? (\n            <Select\n              value={localData.communication?.preferredContactMethod || ''}\n              onChange={value =>\n                handleFieldChange('communication', {\n                  ...localData.communication,\n                  preferredContactMethod: value,\n                })\n              }\n              placeholder=\"Select contact method\"\n              variant=\"bordered\"\n            >\n              <SelectItem key=\"email\">Email</SelectItem>\n              <SelectItem key=\"phone\">Phone</SelectItem>\n              <SelectItem key=\"platform\">Platform Messaging</SelectItem>\n              <SelectItem key=\"any\">Any Method</SelectItem>\n            </Select>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localData.communication?.preferredContactMethod || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Response Time Commitment\n          </label>\n          {isEditing ? (\n            <Select\n              value={localData.communication?.responseTimeCommitment || ''}\n              onChange={value =>\n                handleFieldChange('communication', {\n                  ...localData.communication,\n                  responseTimeCommitment: value,\n                })\n              }\n              placeholder=\"Select response time\"\n              variant=\"bordered\"\n            >\n              <SelectItem key=\"immediate\">Immediate (within hours)</SelectItem>\n              <SelectItem key=\"24-hours\">Within 24 hours</SelectItem>\n              <SelectItem key=\"48-hours\">Within 48 hours</SelectItem>\n              <SelectItem key=\"1-week\">Within 1 week</SelectItem>\n              <SelectItem key=\"flexible\">Flexible</SelectItem>\n            </Select>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Bell className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {localData.communication?.responseTimeCommitment || 'Not specified'}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Language Preferences</label>\n        {isEditing ? (\n          <Select\n            value={localData.communication?.languagePreferences || []}\n            onChange={value =>\n              handleFieldChange('communication', {\n                ...localData.communication,\n                languagePreferences: value,\n              })\n            }\n            placeholder=\"Select languages\"\n            variant=\"bordered\"\n            selectionMode=\"multiple\"\n          >\n            <SelectItem key=\"en\">English</SelectItem>\n            <SelectItem key=\"nl\">Dutch</SelectItem>\n            <SelectItem key=\"fr\">French</SelectItem>\n            <SelectItem key=\"de\">German</SelectItem>\n            <SelectItem key=\"es\">Spanish</SelectItem>\n            <SelectItem key=\"it\">Italian</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex flex-wrap gap-2\">\n            {localData.communication?.languagePreferences?.map(lang => (\n              <span key={lang} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded\">\n                {lang.toUpperCase()}\n              </span>\n            )) || <span className=\"text-gray-500 text-sm\">No languages specified</span>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderPrivacySettings = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Profile Visibility</label>\n        {isEditing ? (\n          <Select\n            value={localData.privacy?.profileVisibility || ''}\n            onChange={value =>\n              handleFieldChange('privacy', {\n                ...localData.privacy,\n                profileVisibility: value,\n              })\n            }\n            placeholder=\"Select visibility\"\n            variant=\"bordered\"\n          >\n            <SelectItem key=\"public\">Public (everyone)</SelectItem>\n            <SelectItem key=\"verified-only\">Verified users only</SelectItem>\n            <SelectItem key=\"private\">Private (invite only)</SelectItem>\n          </Select>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <Globe className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-900\">\n              {localData.privacy?.profileVisibility || 'Not specified'}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Show Email Address</label>\n            <p className=\"text-xs text-gray-500\">Allow others to see your email</p>\n          </div>\n          <Switch\n            isSelected={localData.privacy?.showEmail || false}\n            onValueChange={value =>\n              handleFieldChange('privacy', {\n                ...localData.privacy,\n                showEmail: value,\n              })\n            }\n            isDisabled={!isEditing}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Show Phone Number</label>\n            <p className=\"text-xs text-gray-500\">Allow others to see your phone</p>\n          </div>\n          <Switch\n            isSelected={localData.privacy?.showPhone || false}\n            onValueChange={value =>\n              handleFieldChange('privacy', {\n                ...localData.privacy,\n                showPhone: value,\n              })\n            }\n            isDisabled={!isEditing}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Allow Direct Messages</label>\n            <p className=\"text-xs text-gray-500\">Let others send you messages</p>\n          </div>\n          <Switch\n            isSelected={localData.privacy?.allowMessages || false}\n            onValueChange={value =>\n              handleFieldChange('privacy', {\n                ...localData.privacy,\n                allowMessages: value,\n              })\n            }\n            isDisabled={!isEditing}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Make Profile Searchable</label>\n            <p className=\"text-xs text-gray-500\">Allow your profile to appear in searches</p>\n          </div>\n          <Switch\n            isSelected={localData.privacy?.searchable || false}\n            onValueChange={value =>\n              handleFieldChange('privacy', {\n                ...localData.privacy,\n                searchable: value,\n              })\n            }\n            isDisabled={!isEditing}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <Card className={`border border-gray-200 shadow-sm ${className}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <User className=\"w-5 h-5 text-purple-600\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Personal Information</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Your basic profile information and preferences\n              </p>\n            </div>\n          </div>\n          {isEditing && (\n            <Button variant=\"primary\" color=\"primary\" size=\"sm\" onPress={handleSave}>\n              Save Changes\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardBody className=\"pt-0\">\n        <div className=\"space-y-8\">\n          {/* Personal Information */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Basic Information</h4>\n            {renderPersonalInfo()}\n          </div>\n\n          {/* Communication Preferences */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Communication Preferences</h4>\n            {renderCommunicationPreferences()}\n          </div>\n\n          {/* Privacy Settings */}\n          <div>\n            <h4 className=\"text-md font-semibold text-gray-900 mb-4\">Privacy Settings</h4>\n            {renderPrivacySettings()}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default SharedProfile;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/RoleBasedProfilePage.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'setIsEditing' is assigned a value but never used.","line":43,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsEditing' is assigned a value but never used.","line":43,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎯 Role-Based Profile Page\n *\n * Optimized profile page that emphasizes common professional backgrounds\n * while maintaining role-specific differences\n */\n\nimport { Card, CardBody, CardHeader, Tab, Tabs } from '@heroui/react';\nimport { Briefcase, Building2, MessageCircle, Settings, Target, Users } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { Profile } from '../types/profile.types';\nimport { getRoleConfig } from '../types/roleBased.types';\nimport { CommunicationPreferences } from './CommunicationPreferences';\nimport { ProfileEditFullscreenModal } from './ProfileEditFullscreenModal';\nimport { ProfileHeaderMinimal } from './ProfileHeaderMinimal';\nimport { BusinessOwnerProfile } from './ProfileSections/BusinessOwnerProfile';\nimport { InvestorProfile } from './ProfileSections/InvestorProfile';\nimport { ProfessionalBackground } from './ProfileSections/ProfessionalBackground';\nimport { SharedProfile } from './ProfileSections/SharedProfile';\n\n// =============================================================================\n// COMPONENT INTERFACE\n// =============================================================================\n\ninterface RoleBasedProfilePageProps {\n  profile: Profile;\n  isOwnProfile?: boolean;\n  onProfileUpdate?: () => void;\n  className?: string;\n}\n\n// =============================================================================\n// ROLE-BASED PROFILE PAGE COMPONENT\n// =============================================================================\n\nexport const RoleBasedProfilePage: React.FC<RoleBasedProfilePageProps> = ({\n  profile,\n  isOwnProfile = false,\n  onProfileUpdate,\n  className = '',\n}) => {\n  const [activeTab, setActiveTab] = useState<string>('overview');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n\n  // Get role configuration\n  const roleConfig = getRoleConfig(profile.role);\n\n  // =============================================================================\n  // EFFECTS\n  // =============================================================================\n\n  useEffect(() => {\n    // Set default tab based on role\n    if (profile.role === 'seller') {\n      setActiveTab('business');\n    } else if (profile.role === 'buyer') {\n      setActiveTab('investment');\n    } else {\n      setActiveTab('overview');\n    }\n  }, [profile.role]);\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handleProfileSectionUpdate = async () => {\n    try {\n      // Update profile section\n      onProfileUpdate?.();\n    } catch {\n      // TODO: Add error notification\n      // Error handling for profile section update\n    }\n  };\n\n  const handleProfileUpdate = async () => {\n    try {\n      onProfileUpdate?.();\n      setShowEditModal(false);\n    } catch {\n      // TODO: Add error notification\n      // Error handling for profile update\n    }\n  };\n\n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n\n  const renderRoleHeader = () => {\n    const IconComponent = getIconComponent(roleConfig.icon);\n\n    return (\n      <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-6 mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <div className={`bg-${roleConfig.color}-100 p-3 rounded-full`}>\n            <IconComponent className={`w-6 h-6 text-${roleConfig.color}-600`} />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">{roleConfig.displayName}</h2>\n            <p className=\"text-gray-600\">{roleConfig.description}</p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderProfileTabs = () => {\n    const tabs = [\n      {\n        id: 'overview',\n        label: 'Overview',\n        icon: Briefcase,\n        description: 'Professional background and experience',\n      },\n      {\n        id: 'business',\n        label: 'Business',\n        icon: Building2,\n        description: 'Business information and exit strategy',\n        show: profile.role === 'seller' || profile.role === 'both',\n      },\n      {\n        id: 'investment',\n        label: 'Investment',\n        icon: Target,\n        description: 'Investment profile and preferences',\n        show: profile.role === 'buyer' || profile.role === 'both',\n      },\n      {\n        id: 'communication',\n        label: 'Communication',\n        icon: MessageCircle,\n        description: 'Communication preferences and availability',\n      },\n      {\n        id: 'settings',\n        label: 'Settings',\n        icon: Settings,\n        description: 'Privacy and platform settings',\n        show: isOwnProfile,\n      },\n    ].filter(tab => tab.show !== false);\n\n    return (\n      <Tabs\n        selectedKey={activeTab}\n        onSelectionChange={key => setActiveTab(key as string)}\n        className=\"mb-6\"\n        variant=\"underlined\"\n        color=\"primary\"\n      >\n        {tabs.map(tab => (\n          <Tab\n            key={tab.id}\n            title={\n              <div className=\"flex items-center space-x-2\">\n                <tab.icon className=\"w-4 h-4\" />\n                <span>{tab.label}</span>\n              </div>\n            }\n          />\n        ))}\n      </Tabs>\n    );\n  };\n\n  const renderOverviewTab = () => {\n    return (\n      <div className=\"space-y-6\">\n        {/* Professional Background - Always shown */}\n        <ProfessionalBackground\n          profile={profile}\n          isEditing={isEditing}\n          onUpdate={() => handleProfileSectionUpdate()}\n          onFieldUpdate={() => handleProfileSectionUpdate()}\n        />\n\n        {/* Role-specific overview content */}\n        {profile.role === 'seller' && (\n          <Card className=\"border border-gray-200\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-3\">\n                <Building2 className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Business Overview</h3>\n                  <p className=\"text-gray-600 text-sm\">Current business and exit strategy</p>\n                </div>\n              </div>\n            </CardHeader>\n            <CardBody>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {profile.businessOwnerData?.revenueRange || 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Revenue Range</div>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {profile.businessOwnerData?.employeeCount || 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Employees</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {profile.businessOwnerData?.businessAge || 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Years in Business</div>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n        )}\n\n        {profile.role === 'buyer' && (\n          <Card className=\"border border-gray-200\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-3\">\n                <Target className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Investment Overview</h3>\n                  <p className=\"text-gray-600 text-sm\">Investment capacity and focus</p>\n                </div>\n              </div>\n            </CardHeader>\n            <CardBody>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {profile.investorData?.investmentCapacity?.preferredRange || 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Investment Range</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {profile.investorData?.investmentExperience?.totalDeals || 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Deals</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {profile.investorData?.investmentExperience?.successfulExits || 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Successful Exits</div>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n        )}\n\n        {profile.role === 'both' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"border border-gray-200\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <Building2 className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Current Business</h3>\n                    <p className=\"text-gray-600 text-sm\">Business information</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Revenue:</span>\n                    <span className=\"font-medium\">\n                      {profile.businessOwnerData?.revenueRange || 'N/A'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Employees:</span>\n                    <span className=\"font-medium\">\n                      {profile.businessOwnerData?.employeeCount || 'N/A'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Years:</span>\n                    <span className=\"font-medium\">\n                      {profile.businessOwnerData?.businessAge || 'N/A'}\n                    </span>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            <Card className=\"border border-gray-200\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <Target className=\"w-5 h-5 text-green-600\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Investment Profile</h3>\n                    <p className=\"text-gray-600 text-sm\">Investment capacity</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Range:</span>\n                    <span className=\"font-medium\">\n                      {profile.investorData?.investmentCapacity?.preferredRange || 'N/A'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Deals:</span>\n                    <span className=\"font-medium\">\n                      {profile.investorData?.investmentExperience?.totalDeals || 'N/A'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Exits:</span>\n                    <span className=\"font-medium\">\n                      {profile.investorData?.investmentExperience?.successfulExits || 'N/A'}\n                    </span>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderActiveTabContent = () => {\n    switch (activeTab) {\n      case 'overview':\n        return renderOverviewTab();\n      case 'business':\n        return (\n          <BusinessOwnerProfile\n            profile={profile}\n            isEditing={isEditing}\n            onUpdate={() => handleProfileSectionUpdate()}\n            onFieldUpdate={() => handleProfileSectionUpdate()}\n          />\n        );\n      case 'investment':\n        return (\n          <InvestorProfile\n            profile={profile}\n            isEditing={isEditing}\n            onUpdate={() => handleProfileSectionUpdate()}\n            onFieldUpdate={() => handleProfileSectionUpdate()}\n          />\n        );\n      case 'communication':\n        return (\n          <CommunicationPreferences\n            preferences={profile.sharedData.communication}\n            onUpdate={() => handleProfileSectionUpdate()}\n          />\n        );\n      case 'settings':\n        return (\n          <div className=\"space-y-6\">\n            <SharedProfile\n              profile={profile}\n              isEditing={isEditing}\n              onUpdate={() => handleProfileSectionUpdate()}\n              onFieldUpdate={() => handleProfileSectionUpdate()}\n            />\n          </div>\n        );\n      default:\n        return renderOverviewTab();\n    }\n  };\n\n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n\n  return (\n    <div className={`max-w-6xl mx-auto px-4 py-8 ${className}`}>\n      {/* Profile Header - Minimalistic */}\n      <ProfileHeaderMinimal\n        profile={profile}\n        isOwnProfile={isOwnProfile}\n        onEditProfile={() => setShowEditModal(true)}\n        className=\"mb-8\"\n      />\n\n      {/* Role Header */}\n      {renderRoleHeader()}\n\n      {/* Profile Tabs */}\n      {renderProfileTabs()}\n\n      {/* Active Tab Content */}\n      {renderActiveTabContent()}\n\n      {/* Profile Edit Fullscreen Modal */}\n      {isOwnProfile && (\n        <ProfileEditFullscreenModal\n          isOpen={showEditModal}\n          onClose={() => setShowEditModal(false)}\n          profile={profile}\n          onSave={handleProfileUpdate}\n        />\n      )}\n    </div>\n  );\n};\n\n// =============================================================================\n// HELPER FUNCTIONS\n// =============================================================================\n\nconst getIconComponent = (iconName: string) => {\n  const icons: Record<string, React.ComponentType<{ className?: string }>> = {\n    Building2,\n    Target,\n    Users,\n    Shield: Users, // Fallback\n  };\n\n  return icons[iconName] || Briefcase;\n};\n\nexport default RoleBasedProfilePage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/components/TimelineFilters.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'filters' is defined but never used.","line":16,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Timeline Filters Component\n * Allows filtering timeline events by type, date, status, etc.\n */\n\nimport React, { useState } from 'react';\nimport {\n  BusinessTimelineEventStatus,\n  BusinessTimelineEventType,\n  BusinessTimelineFilters,\n  EVENT_TYPE_CONFIGS,\n} from '../types/timeline.types';\n\ninterface TimelineFiltersProps {\n  filters: BusinessTimelineFilters;\n  onFiltersChange: (filters: BusinessTimelineFilters) => void;\n  className?: string;\n}\n\nconst TimelineFilters: React.FC<TimelineFiltersProps> = ({\n  filters,\n  onFiltersChange,\n  className = '',\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleTypeChange = (type: BusinessTimelineEventType, checked: boolean) => {\n    const currentTypes = filters.types || [];\n    const newTypes = checked ? [...currentTypes, type] : currentTypes.filter(t => t !== type);\n\n    onFiltersChange({\n      ...filters,\n      types: newTypes.length > 0 ? newTypes : undefined,\n    });\n  };\n\n  const handleStatusChange = (status: BusinessTimelineEventStatus, checked: boolean) => {\n    const currentStatuses = filters.status || [];\n    const newStatuses = checked\n      ? [...currentStatuses, status]\n      : currentStatuses.filter(s => s !== status);\n\n    onFiltersChange({\n      ...filters,\n      status: newStatuses.length > 0 ? newStatuses : undefined,\n    });\n  };\n\n  const handleDateRangeChange = (field: 'start' | 'end', value: string) => {\n    const currentRange = filters.dateRange || { start: '', end: '' };\n    const newRange = { ...currentRange, [field]: value };\n\n    onFiltersChange({\n      ...filters,\n      dateRange: newRange.start || newRange.end ? newRange : undefined,\n    });\n  };\n\n  const handleIndustryChange = (industry: string, checked: boolean) => {\n    const currentIndustries = filters.industries || [];\n    const newIndustries = checked\n      ? [...currentIndustries, industry]\n      : currentIndustries.filter(i => i !== industry);\n\n    onFiltersChange({\n      ...filters,\n      industries: newIndustries.length > 0 ? newIndustries : undefined,\n    });\n  };\n\n  const clearFilters = () => {\n    onFiltersChange({});\n  };\n\n  const hasActiveFilters = () => {\n    return !!(\n      filters.types?.length ||\n      filters.status?.length ||\n      filters.dateRange ||\n      filters.industries?.length ||\n      filters.tags?.length\n    );\n  };\n\n  const commonIndustries = [\n    'Technology',\n    'Healthcare',\n    'Finance',\n    'Real Estate',\n    'Manufacturing',\n    'Retail',\n    'Food & Beverage',\n    'Consulting',\n    'Education',\n    'Energy',\n  ];\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg ${className}`}>\n      {/* Filter Toggle */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Filters</h3>\n          <div className=\"flex items-center space-x-2\">\n            {hasActiveFilters() && (\n              <button onClick={clearFilters} className=\"text-sm text-blue-600 hover:text-blue-700\">\n                Clear All\n              </button>\n            )}\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"p-2 text-gray-400 hover:text-gray-600\"\n            >\n              <svg\n                className={`w-5 h-5 transform transition-transform ${isOpen ? 'rotate-180' : ''}`}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Filter Content */}\n      {isOpen && (\n        <div className=\"p-4 space-y-6\">\n          {/* Event Types */}\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Event Types</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {EVENT_TYPE_CONFIGS.map(config => (\n                <label key={config.type} className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.types?.includes(config.type) || false}\n                    onChange={e => handleTypeChange(config.type, e.target.checked)}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700 flex items-center\">\n                    <span className=\"mr-1\">{config.icon}</span>\n                    {config.label}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Status */}\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Status</h4>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {(\n                [\n                  'active',\n                  'completed',\n                  'ongoing',\n                  'cancelled',\n                  'pending',\n                ] as BusinessTimelineEventStatus[]\n              ).map(status => (\n                <label key={status} className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.status?.includes(status) || false}\n                    onChange={e => handleStatusChange(status, e.target.checked)}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700 capitalize\">{status}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Date Range */}\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Date Range</h4>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-xs text-gray-600 mb-1\">From</label>\n                <input\n                  type=\"date\"\n                  value={filters.dateRange?.start || ''}\n                  onChange={e => handleDateRangeChange('start', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-xs text-gray-600 mb-1\">To</label>\n                <input\n                  type=\"date\"\n                  value={filters.dateRange?.end || ''}\n                  onChange={e => handleDateRangeChange('end', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Industries */}\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Industries</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {commonIndustries.map(industry => (\n                <label key={industry} className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.industries?.includes(industry) || false}\n                    onChange={e => handleIndustryChange(industry, e.target.checked)}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700\">{industry}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Quick Date Filters */}\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Quick Filters</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {[\n                { label: 'Last Year', months: 12 },\n                { label: 'Last 2 Years', months: 24 },\n                { label: 'Last 5 Years', months: 60 },\n              ].map(({ label, months }) => {\n                const startDate = new Date();\n                startDate.setMonth(startDate.getMonth() - months);\n\n                return (\n                  <button\n                    key={label}\n                    onClick={() =>\n                      handleDateRangeChange('start', startDate.toISOString().split('T')[0])\n                    }\n                    className=\"px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200\"\n                  >\n                    {label}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimelineFilters;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/constants/profileFields.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/constants/profileTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/hooks/useLinkedIn.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":12,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":13,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'accessToken' is defined but never used.","line":31,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔗 LinkedIn Integration Hook\n *\n * Custom hook for managing LinkedIn profile integration\n */\n\nimport { useCallback, useState } from 'react';\nimport { LinkedInProfile, linkedinService } from '../services/linkedinService';\nimport { BusinessOwnerProfile, InvestorProfile, PersonalInfo } from '../types/profile.types';\n\ninterface UseLinkedInOptions {\n  onSuccess?: (data: LinkedInImportData) => void;\n  onError?: (error: Error) => void;\n}\n\ninterface LinkedInImportData {\n  personalInfo: Partial<PersonalInfo>;\n  businessData?: Partial<BusinessOwnerProfile>;\n  investorData?: Partial<InvestorProfile>;\n}\n\ninterface UseLinkedInReturn {\n  // State\n  isLoading: boolean;\n  isConnected: boolean;\n  error: Error | null;\n  profile: LinkedInProfile | null;\n\n  // Actions\n  connectLinkedIn: () => void;\n  importProfile: (accessToken: string) => Promise<LinkedInImportData>;\n  disconnectLinkedIn: () => void;\n  clearError: () => void;\n}\n\nexport const useLinkedIn = (options: UseLinkedInOptions = {}): UseLinkedInReturn => {\n  const { onSuccess, onError } = options;\n\n  // =============================================================================\n  // STATE\n  // =============================================================================\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [profile, setProfile] = useState<LinkedInProfile | null>(null);\n\n  // =============================================================================\n  // ACTIONS\n  // =============================================================================\n\n  /**\n   * Connect to LinkedIn (redirect to authorization)\n   */\n  const connectLinkedIn = useCallback(() => {\n    try {\n      const authUrl = linkedinService.getAuthorizationUrl();\n      window.location.href = authUrl;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to connect to LinkedIn');\n      setError(error);\n      onError?.(error);\n    }\n  }, [onError]);\n\n  /**\n   * Import profile data from LinkedIn\n   */\n  const importProfile = useCallback(\n    async (accessToken: string): Promise<LinkedInImportData> => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const importData = await linkedinService.importProfile(accessToken);\n\n        // Get full profile for display\n        const fullProfile = await linkedinService.getProfile(accessToken);\n        setProfile(fullProfile);\n        setIsConnected(true);\n\n        onSuccess?.(importData);\n        return importData;\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error('Failed to import LinkedIn profile');\n        setError(error);\n        onError?.(error);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [onSuccess, onError]\n  );\n\n  /**\n   * Disconnect LinkedIn integration\n   */\n  const disconnectLinkedIn = useCallback(() => {\n    setIsConnected(false);\n    setProfile(null);\n    setError(null);\n  }, []);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // =============================================================================\n  // RETURN\n  // =============================================================================\n\n  return {\n    // State\n    isLoading,\n    isConnected,\n    error,\n    profile,\n\n    // Actions\n    connectLinkedIn,\n    importProfile,\n    disconnectLinkedIn,\n    clearError,\n  };\n};\n\nexport default useLinkedIn;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/hooks/useProfile.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":29,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":30,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'section' is defined but never used.","line":31,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":31,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":35,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'visibility' is defined but never used.","line":39,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'preferences' is defined but never used.","line":40,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1498,1501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1498,1501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'settings' is defined but never used.","line":41,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1557,1560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1557,1560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'filters' is defined but never used.","line":49,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1742,1745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1742,1745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'format' is defined but never used.","line":53,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3966,3969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3966,3969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7935,7938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7935,7938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":313,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8607,8610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8607,8610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10138,10141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10138,10141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎣 useProfile Hook - Profile Management\n *\n * Custom React hook for managing profile state and operations\n */\n\nimport { useAuth } from '@/app/providers/auth-provider';\nimport { useCallback, useEffect, useState } from 'react';\nimport { mockProfileService } from '../services/mockProfileService';\nimport { profileService } from '../services/profileService';\nimport { CreateProfileRequest, Profile, UpdateProfileRequest } from '../types/profile.types';\n\n// Use mock service for development/testing\nconst isDevelopment =\n  import.meta.env.MODE === 'development' || import.meta.env.VITE_USE_MOCK === 'true';\nconst service = isDevelopment ? mockProfileService : profileService;\n\n// =============================================================================\n// HOOK INTERFACE\n// =============================================================================\n\ninterface UseProfileReturn {\n  // Profile Data\n  profile: Profile | null;\n  loading: boolean;\n  error: string | null;\n\n  // Profile Operations\n  createProfile: (data: CreateProfileRequest) => Promise<void>;\n  updateProfile: (data: UpdateProfileRequest) => Promise<void>;\n  updateProfileSection: (section: string, data: any) => Promise<void>;\n  deleteProfile: () => Promise<void>;\n\n  // Profile Image Operations\n  uploadProfileImage: (file: File) => Promise<void>;\n  deleteProfileImage: () => Promise<void>;\n\n  // Profile Settings\n  updateVisibility: (visibility: string) => Promise<void>;\n  updateCommunicationPreferences: (preferences: any) => Promise<void>;\n  updatePrivacySettings: (settings: any) => Promise<void>;\n\n  // Profile Status\n  refreshProfile: () => Promise<void>;\n  hasProfile: boolean;\n  isProfileComplete: boolean;\n\n  // Profile Search\n  searchProfiles: (filters: any) => Promise<Profile[]>;\n  getProfileRecommendations: () => Promise<Profile[]>;\n\n  // Profile Export\n  exportProfileData: (format: 'json' | 'pdf') => Promise<Blob>;\n}\n\n// =============================================================================\n// USE PROFILE HOOK\n// =============================================================================\n\nexport const useProfile = (): UseProfileReturn => {\n  const { user, isAuthenticated } = useAuth();\n\n  // State\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // =============================================================================\n  // PROFILE OPERATIONS\n  // =============================================================================\n\n  /**\n   * Create new profile\n   */\n  const createProfile = useCallback(\n    async (data: CreateProfileRequest): Promise<void> => {\n      if (!isAuthenticated) {\n        throw new Error('User must be authenticated to create profile');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const newProfile = await service.createProfile(data);\n        setProfile(newProfile);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to create profile';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [isAuthenticated]\n  );\n\n  /**\n   * Update profile\n   */\n  const updateProfile = useCallback(\n    async (data: UpdateProfileRequest): Promise<void> => {\n      if (!profile) {\n        throw new Error('No profile to update');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const updatedProfile = await service.updateProfile(data);\n        setProfile(updatedProfile);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to update profile';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [profile]\n  );\n\n  /**\n   * Update specific profile section\n   */\n  const updateProfileSection = useCallback(\n    async (section: string, data: any): Promise<void> => {\n      if (!profile) {\n        throw new Error('No profile to update');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const updatedProfile = await service.updateProfileSection(section, data);\n        setProfile(updatedProfile);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Failed to update profile section';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [profile]\n  );\n\n  /**\n   * Delete profile\n   */\n  const deleteProfile = useCallback(async (): Promise<void> => {\n    if (!profile) {\n      throw new Error('No profile to delete');\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      await service.deleteProfile();\n      setProfile(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete profile';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [profile]);\n\n  // =============================================================================\n  // PROFILE IMAGE OPERATIONS\n  // =============================================================================\n\n  /**\n   * Upload profile image\n   */\n  const uploadProfileImage = useCallback(\n    async (file: File): Promise<void> => {\n      if (!profile) {\n        throw new Error('No profile to update');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await service.uploadProfileImage(file);\n\n        // Update profile with new image URL\n        setProfile(prev =>\n          prev\n            ? {\n                ...prev,\n                personalInfo: {\n                  ...prev.personalInfo,\n                  avatarUrl: 'imageUrl' in result ? result.imageUrl : result.url,\n                },\n              }\n            : null\n        );\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to upload profile image';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [profile]\n  );\n\n  /**\n   * Delete profile image\n   */\n  const deleteProfileImage = useCallback(async (): Promise<void> => {\n    if (!profile) {\n      throw new Error('No profile to update');\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      await service.deleteProfileImage();\n\n      // Update profile to remove image\n      setProfile(prev =>\n        prev\n          ? {\n              ...prev,\n              personalInfo: {\n                ...prev.personalInfo,\n                avatar: undefined,\n                avatarUrl: undefined,\n              },\n            }\n          : null\n      );\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete profile image';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [profile]);\n\n  // =============================================================================\n  // PROFILE SETTINGS OPERATIONS\n  // =============================================================================\n\n  /**\n   * Update profile visibility\n   */\n  const updateVisibility = useCallback(\n    async (visibility: string): Promise<void> => {\n      if (!profile) {\n        throw new Error('No profile to update');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const updatedProfile = await service.updateProfileVisibility(visibility);\n        setProfile(updatedProfile);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to update visibility';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [profile]\n  );\n\n  /**\n   * Update communication preferences\n   */\n  const updateCommunicationPreferences = useCallback(\n    async (preferences: any): Promise<void> => {\n      if (!profile) {\n        throw new Error('No profile to update');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const updatedProfile = await service.updateCommunicationPreferences(preferences);\n        setProfile(updatedProfile);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Failed to update communication preferences';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [profile]\n  );\n\n  /**\n   * Update privacy settings\n   */\n  const updatePrivacySettings = useCallback(\n    async (settings: any): Promise<void> => {\n      if (!profile) {\n        throw new Error('No profile to update');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const updatedProfile = await service.updatePrivacySettings(settings);\n        setProfile(updatedProfile);\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Failed to update privacy settings';\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [profile]\n  );\n\n  // =============================================================================\n  // PROFILE STATUS OPERATIONS\n  // =============================================================================\n\n  /**\n   * Refresh profile data\n   */\n  const refreshProfile = useCallback(async (): Promise<void> => {\n    if (!isAuthenticated) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const profileData = await service.getProfile();\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch profile';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated]);\n\n  // =============================================================================\n  // PROFILE SEARCH OPERATIONS\n  // =============================================================================\n\n  /**\n   * Search profiles\n   */\n  const searchProfiles = useCallback(async (filters: any): Promise<Profile[]> => {\n    try {\n      const result = await service.searchProfiles(filters);\n      return Array.isArray(result) ? result : result.data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to search profiles';\n      setError(errorMessage);\n      throw err;\n    }\n  }, []);\n\n  /**\n   * Get profile recommendations\n   */\n  const getProfileRecommendations = useCallback(async (): Promise<Profile[]> => {\n    try {\n      return await service.getProfileRecommendations();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get recommendations';\n      setError(errorMessage);\n      throw err;\n    }\n  }, []);\n\n  // =============================================================================\n  // PROFILE EXPORT OPERATIONS\n  // =============================================================================\n\n  /**\n   * Export profile data\n   */\n  const exportProfileData = useCallback(\n    async (format: 'json' | 'pdf'): Promise<Blob> => {\n      if (!profile) {\n        throw new Error('No profile to export');\n      }\n\n      try {\n        return await service.exportProfileData(format);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to export profile';\n        setError(errorMessage);\n        throw err;\n      }\n    },\n    [profile]\n  );\n\n  // =============================================================================\n  // COMPUTED VALUES\n  // =============================================================================\n\n  const hasProfile = Boolean(profile);\n  const isProfileComplete = profile ? true : false; // Simplified - always complete if profile exists\n\n  // =============================================================================\n  // EFFECTS\n  // =============================================================================\n\n  /**\n   * Load profile on mount and when user changes\n   */\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      refreshProfile();\n    } else {\n      setProfile(null);\n      setError(null);\n    }\n  }, [isAuthenticated, user, refreshProfile]);\n\n  // =============================================================================\n  // RETURN HOOK INTERFACE\n  // =============================================================================\n\n  return {\n    // Profile Data\n    profile,\n    loading,\n    error,\n\n    // Profile Operations\n    createProfile,\n    updateProfile,\n    updateProfileSection,\n    deleteProfile,\n\n    // Profile Image Operations\n    uploadProfileImage,\n    deleteProfileImage,\n\n    // Profile Settings\n    updateVisibility,\n    updateCommunicationPreferences,\n    updatePrivacySettings,\n\n    // Profile Status\n    refreshProfile,\n    hasProfile,\n    isProfileComplete,\n\n    // Profile Search\n    searchProfiles,\n    getProfileRecommendations,\n\n    // Profile Export\n    exportProfileData,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/hooks/useTimeline.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'page' is defined but never used.","line":45,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'newFilters' is defined but never used.","line":45,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":68},{"ruleId":"no-unused-vars","severity":1,"message":"'filters' is defined but never used.","line":48,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'eventData' is defined but never used.","line":49,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'eventId' is defined but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'eventData' is defined but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'eventId' is defined but never used.","line":54,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'query' is defined but never used.","line":55,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchStats'. Either include it or remove the dependency array.","line":148,"column":5,"nodeType":"ArrayExpression","endLine":148,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchStats, userId]","fix":{"range":[4404,4412],"text":"[fetchStats, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchStats'. Either include it or remove the dependency array.","line":194,"column":5,"nodeType":"ArrayExpression","endLine":194,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchStats, userId]","fix":{"range":[5610,5618],"text":"[fetchStats, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6361,6415],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Business Timeline Hook\n * Manages timeline state and operations\n */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { mockTimelineService } from '../services/mockTimelineService';\nimport { timelineService } from '../services/timelineService';\nimport {\n  BusinessTimelineEvent,\n  BusinessTimelineFilters,\n  BusinessTimelineStats,\n  CreateTimelineEventRequest,\n  UpdateTimelineEventRequest,\n} from '../types/timeline.types';\n\n// Use mock service for development/testing\nconst isDevelopment =\n  import.meta.env.MODE === 'development' || import.meta.env.VITE_USE_MOCK === 'true';\nconst service = isDevelopment ? mockTimelineService : timelineService;\n\ninterface UseTimelineOptions {\n  userId: string;\n  autoFetch?: boolean;\n  initialFilters?: BusinessTimelineFilters;\n  pageSize?: number;\n}\n\ninterface UseTimelineReturn {\n  // Data\n  events: BusinessTimelineEvent[];\n  stats: BusinessTimelineStats | null;\n  loading: boolean;\n  error: string | null;\n\n  // Pagination\n  currentPage: number;\n  totalPages: number;\n  hasMore: boolean;\n\n  // Filters\n  filters: BusinessTimelineFilters;\n\n  // Actions\n  fetchEvents: (page?: number, newFilters?: BusinessTimelineFilters) => Promise<void>;\n  loadMore: () => Promise<void>;\n  refresh: () => Promise<void>;\n  setFilters: (filters: BusinessTimelineFilters) => void;\n  createEvent: (eventData: CreateTimelineEventRequest) => Promise<BusinessTimelineEvent>;\n  updateEvent: (\n    eventId: string,\n    eventData: UpdateTimelineEventRequest\n  ) => Promise<BusinessTimelineEvent>;\n  deleteEvent: (eventId: string) => Promise<void>;\n  searchEvents: (query: string) => Promise<BusinessTimelineEvent[]>;\n\n  // Stats\n  fetchStats: () => Promise<void>;\n}\n\nexport const useTimeline = (options: UseTimelineOptions): UseTimelineReturn => {\n  const { userId, autoFetch = true, initialFilters = {}, pageSize = 20 } = options;\n\n  // State\n  const [events, setEvents] = useState<BusinessTimelineEvent[]>([]);\n  const [stats, setStats] = useState<BusinessTimelineStats | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [hasMore, setHasMore] = useState(false);\n  const [filters, setFiltersState] = useState<BusinessTimelineFilters>(initialFilters);\n\n  // Fetch events\n  const fetchEvents = useCallback(\n    async (page: number = 1, newFilters?: BusinessTimelineFilters) => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const activeFilters = newFilters || filters;\n        const response = await service.getTimeline(userId, activeFilters, page, pageSize);\n\n        if (page === 1) {\n          setEvents(response.events);\n        } else {\n          setEvents(prev => [...prev, ...response.events]);\n        }\n\n        setCurrentPage(page);\n        setTotalPages(Math.ceil(response.pagination.total / pageSize));\n        setHasMore(response.pagination.hasMore);\n\n        if (newFilters) {\n          setFiltersState(newFilters);\n        }\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch timeline events');\n      } finally {\n        setLoading(false);\n      }\n    },\n    [userId, filters, pageSize]\n  );\n\n  // Load more events\n  const loadMore = useCallback(async () => {\n    if (hasMore && !loading) {\n      await fetchEvents(currentPage + 1);\n    }\n  }, [fetchEvents, currentPage, hasMore, loading]);\n\n  // Refresh events\n  const refresh = useCallback(async () => {\n    await fetchEvents(1);\n  }, [fetchEvents]);\n\n  // Set filters\n  const setFilters = useCallback(\n    (newFilters: BusinessTimelineFilters) => {\n      setFiltersState(newFilters);\n      fetchEvents(1, newFilters);\n    },\n    [fetchEvents]\n  );\n\n  // Create event\n  const createEvent = useCallback(\n    async (eventData: CreateTimelineEventRequest): Promise<BusinessTimelineEvent> => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const newEvent = await service.createEvent(userId, eventData);\n        setEvents(prev => [newEvent, ...prev]);\n\n        // Refresh stats\n        await fetchStats();\n\n        return newEvent;\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to create timeline event');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [userId]\n  );\n\n  // Update event\n  const updateEvent = useCallback(\n    async (\n      eventId: string,\n      eventData: UpdateTimelineEventRequest\n    ): Promise<BusinessTimelineEvent> => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const updatedEvent = await service.updateEvent(userId, eventId, eventData);\n        setEvents(prev => prev.map(event => (event.id === eventId ? updatedEvent : event)));\n\n        return updatedEvent;\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to update timeline event');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [userId]\n  );\n\n  // Delete event\n  const deleteEvent = useCallback(\n    async (eventId: string): Promise<void> => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        await service.deleteEvent(userId, eventId);\n        setEvents(prev => prev.filter(event => event.id !== eventId));\n\n        // Refresh stats\n        await fetchStats();\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to delete timeline event');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [userId]\n  );\n\n  // Search events\n  const searchEvents = useCallback(\n    async (query: string): Promise<BusinessTimelineEvent[]> => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const results = await service.searchEvents(userId, query, filters);\n        return Array.isArray(results) ? results : results.events;\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to search timeline events');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [userId, filters]\n  );\n\n  // Fetch stats\n  const fetchStats = useCallback(async () => {\n    try {\n      const statsData = await service.getTimelineStats(userId);\n      setStats(statsData);\n    } catch (err) {\n      console.error('Failed to fetch timeline stats:', err);\n    }\n  }, [userId]);\n\n  // Auto-fetch on mount\n  useEffect(() => {\n    if (autoFetch && userId) {\n      fetchEvents(1);\n      fetchStats();\n    }\n  }, [autoFetch, userId, fetchEvents, fetchStats]);\n\n  return {\n    // Data\n    events,\n    stats,\n    loading,\n    error,\n\n    // Pagination\n    currentPage,\n    totalPages,\n    hasMore,\n\n    // Filters\n    filters,\n\n    // Actions\n    fetchEvents,\n    loadMore,\n    refresh,\n    setFilters,\n    createEvent,\n    updateEvent,\n    deleteEvent,\n    searchEvents,\n\n    // Stats\n    fetchStats,\n  };\n};\n\nexport default useTimeline;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/services/linkedinService.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'previousPositions' is assigned a value but never used.","line":299,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":299,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'previousPositions' is assigned a value but never used.","line":299,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔗 LinkedIn Integration Service\n *\n * Service for integrating with LinkedIn API to import profile data\n */\n\nimport {\n  BusinessOwnerProfile,\n  Certification,\n  Credential,\n  InvestmentExperience,\n  InvestmentFocus,\n  InvestorProfile,\n  PersonalInfo,\n} from '../types/profile.types';\n\n// =============================================================================\n// LINKEDIN API TYPES\n// =============================================================================\n\nexport interface LinkedInProfile {\n  id: string;\n  firstName: string;\n  lastName: string;\n  headline?: string;\n  summary?: string;\n  location?: {\n    name: string;\n    country: string;\n  };\n  profilePicture?: {\n    displayImage: string;\n  };\n  industry?: string;\n  positions?: LinkedInPosition[];\n  educations?: LinkedInEducation[];\n  skills?: LinkedInSkill[];\n  languages?: LinkedInLanguage[];\n  contactInfo?: {\n    emailAddress?: string;\n    phoneNumbers?: Array<{\n      number: string;\n      type: string;\n    }>;\n  };\n}\n\nexport interface LinkedInPosition {\n  id: string;\n  title: string;\n  companyName: string;\n  companyId?: string;\n  location?: string;\n  description?: string;\n  startDate?: {\n    year: number;\n    month?: number;\n  };\n  endDate?: {\n    year: number;\n    month?: number;\n  };\n  isCurrent: boolean;\n}\n\nexport interface LinkedInEducation {\n  id: string;\n  schoolName: string;\n  degreeName?: string;\n  fieldOfStudy?: string;\n  startDate?: {\n    year: number;\n  };\n  endDate?: {\n    year: number;\n  };\n}\n\nexport interface LinkedInSkill {\n  id: string;\n  name: string;\n}\n\nexport interface LinkedInLanguage {\n  id: string;\n  name: string;\n  proficiency?: string;\n}\n\n// =============================================================================\n// LINKEDIN SERVICE CLASS\n// =============================================================================\n\nclass LinkedInService {\n  private baseUrl = 'https://api.linkedin.com/v2';\n  private clientId: string;\n  private redirectUri: string;\n\n  constructor() {\n    this.clientId = import.meta.env.VITE_LINKEDIN_CLIENT_ID || '';\n    this.redirectUri = `${window.location.origin}/auth/linkedin/callback`;\n  }\n\n  /**\n   * Get LinkedIn authorization URL\n   */\n  getAuthorizationUrl(): string {\n    const scopes = [\n      'r_liteprofile',\n      'r_emailaddress',\n      'r_basicprofile',\n      'r_fullprofile',\n      'r_organization_social',\n      'w_organization_social',\n    ].join(' ');\n\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n      state: this.generateState(),\n      scope: scopes,\n    });\n\n    return `https://www.linkedin.com/oauth/v2/authorization?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForToken(code: string): Promise<string> {\n    const response = await fetch('/api/auth/linkedin/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to exchange code for token');\n    }\n\n    const data = await response.json();\n    return data.access_token;\n  }\n\n  /**\n   * Get LinkedIn profile data\n   */\n  async getProfile(accessToken: string): Promise<LinkedInProfile> {\n    const fields = [\n      'id',\n      'firstName',\n      'lastName',\n      'headline',\n      'summary',\n      'location',\n      'profilePicture(displayImage~:playableStreams)',\n      'industry',\n      'positions',\n      'educations',\n      'skills',\n      'languages',\n      'contactInfo',\n    ].join(',');\n\n    const response = await fetch(`${this.baseUrl}/people/~:(${fields})`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'X-Restli-Protocol-Version': '2.0.0',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch LinkedIn profile');\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Import LinkedIn profile data to our profile format\n   */\n  async importProfile(accessToken: string): Promise<{\n    personalInfo: Partial<PersonalInfo>;\n    businessData?: Partial<BusinessOwnerProfile>;\n    investorData?: Partial<InvestorProfile>;\n  }> {\n    const linkedinProfile = await this.getProfile(accessToken);\n\n    // Map LinkedIn data to our PersonalInfo format\n    const personalInfo: Partial<PersonalInfo> = {\n      firstName: linkedinProfile.firstName,\n      lastName: linkedinProfile.lastName,\n      professionalTitle: linkedinProfile.headline,\n      bio: linkedinProfile.summary,\n      industry: linkedinProfile.industry,\n      avatarUrl: linkedinProfile.profilePicture?.displayImage,\n      city: linkedinProfile.location?.name,\n      country: linkedinProfile.location?.country || 'Netherlands',\n      email: linkedinProfile.contactInfo?.emailAddress,\n      phone: linkedinProfile.contactInfo?.phoneNumbers?.[0]?.number,\n    };\n\n    // Extract company information from current position\n    const currentPosition = linkedinProfile.positions?.find(pos => pos.isCurrent);\n    if (currentPosition) {\n      personalInfo.company = currentPosition.companyName;\n      personalInfo.professionalTitle = currentPosition.title;\n    }\n\n    // Create professional summary from LinkedIn summary and positions\n    if (linkedinProfile.summary || linkedinProfile.positions) {\n      personalInfo.professionalSummary = this.createProfessionalSummary(\n        linkedinProfile.summary,\n        linkedinProfile.positions || []\n      );\n    }\n\n    // Determine if this is a business owner or investor based on profile data\n    const isBusinessOwner = this.isBusinessOwnerProfile(linkedinProfile);\n    const isInvestor = this.isInvestorProfile(linkedinProfile);\n\n    let businessData: Partial<BusinessOwnerProfile> | undefined;\n    let investorData: Partial<InvestorProfile> | undefined;\n\n    if (isBusinessOwner) {\n      businessData = this.mapToBusinessOwnerProfile(linkedinProfile);\n    }\n\n    if (isInvestor) {\n      investorData = this.mapToInvestorProfile(linkedinProfile);\n    }\n\n    return {\n      personalInfo,\n      businessData,\n      investorData,\n    };\n  }\n\n  /**\n   * Check if profile indicates business ownership\n   */\n  private isBusinessOwnerProfile(profile: LinkedInProfile): boolean {\n    const businessOwnerKeywords = [\n      'founder',\n      'ceo',\n      'owner',\n      'entrepreneur',\n      'startup',\n      'co-founder',\n      'managing director',\n      'president',\n      'director',\n      'executive',\n    ];\n\n    const headline = profile.headline?.toLowerCase() || '';\n    const summary = profile.summary?.toLowerCase() || '';\n    const positions = profile.positions?.map(pos => pos.title.toLowerCase()).join(' ') || '';\n\n    const text = `${headline} ${summary} ${positions}`;\n    return businessOwnerKeywords.some(keyword => text.includes(keyword));\n  }\n\n  /**\n   * Check if profile indicates investment activity\n   */\n  private isInvestorProfile(profile: LinkedInProfile): boolean {\n    const investorKeywords = [\n      'investor',\n      'investment',\n      'venture capital',\n      'private equity',\n      'angel',\n      'portfolio',\n      'fund',\n      'capital',\n      'acquisition',\n      'merger',\n      'm&a',\n    ];\n\n    const headline = profile.headline?.toLowerCase() || '';\n    const summary = profile.summary?.toLowerCase() || '';\n    const positions = profile.positions?.map(pos => pos.title.toLowerCase()).join(' ') || '';\n\n    const text = `${headline} ${summary} ${positions}`;\n    return investorKeywords.some(keyword => text.includes(keyword));\n  }\n\n  /**\n   * Map LinkedIn profile to BusinessOwnerProfile\n   */\n  private mapToBusinessOwnerProfile(profile: LinkedInProfile): Partial<BusinessOwnerProfile> {\n    const currentPosition = profile.positions?.find(pos => pos.isCurrent);\n    const previousPositions = profile.positions?.filter(pos => !pos.isCurrent) || [];\n\n    return {\n      businessName: currentPosition?.companyName || '',\n      currentRole: currentPosition?.title || '',\n      industry: profile.industry || '',\n      yearsInBusiness: this.calculateYearsInBusiness(profile.positions || []),\n      yearsInIndustry: this.calculateYearsInIndustry(profile.positions || [], profile.industry),\n      industryExpertise: this.extractIndustryExpertise(profile),\n      professionalCertifications: this.mapEducationsToCertifications(profile.educations || []),\n    };\n  }\n\n  /**\n   * Map LinkedIn profile to InvestorProfile\n   */\n  private mapToInvestorProfile(profile: LinkedInProfile): Partial<InvestorProfile> {\n    return {\n      investmentExperience: this.calculateInvestmentExperience(profile.positions || []),\n      professionalCredentials: this.mapEducationsToCredentials(profile.educations || []),\n      investmentFocus: this.extractIndustryFocus(profile),\n    };\n  }\n\n  /**\n   * Create professional summary from LinkedIn data\n   */\n  private createProfessionalSummary(summary?: string, positions: LinkedInPosition[] = []): string {\n    let professionalSummary = summary || '';\n\n    if (positions.length > 0) {\n      const currentPosition = positions.find(pos => pos.isCurrent);\n      if (currentPosition) {\n        professionalSummary += `\\n\\nCurrent Role: ${currentPosition.title} at ${currentPosition.companyName}`;\n        if (currentPosition.description) {\n          professionalSummary += `\\n\\n${currentPosition.description}`;\n        }\n      }\n    }\n\n    return professionalSummary.trim();\n  }\n\n  /**\n   * Calculate years in business\n   */\n  private calculateYearsInBusiness(positions: LinkedInPosition[]): number {\n    if (positions.length === 0) return 0;\n\n    const earliestPosition = positions.reduce((earliest, current) => {\n      const currentStart = current.startDate?.year || 0;\n      const earliestStart = earliest.startDate?.year || 0;\n      return currentStart < earliestStart ? current : earliest;\n    });\n\n    const startYear = earliestPosition.startDate?.year || new Date().getFullYear();\n    return new Date().getFullYear() - startYear;\n  }\n\n  /**\n   * Calculate years in industry\n   */\n  private calculateYearsInIndustry(positions: LinkedInPosition[], industry?: string): number {\n    if (!industry) return 0;\n\n    const industryPositions = positions.filter(\n      pos =>\n        pos.companyName.toLowerCase().includes(industry.toLowerCase()) ||\n        pos.title.toLowerCase().includes(industry.toLowerCase())\n    );\n\n    if (industryPositions.length === 0) return 0;\n\n    return this.calculateYearsInBusiness(industryPositions);\n  }\n\n  /**\n   * Extract industry expertise from profile\n   */\n  private extractIndustryExpertise(profile: LinkedInProfile): string[] {\n    const expertise: string[] = [];\n\n    if (profile.industry) {\n      expertise.push(profile.industry);\n    }\n\n    // Extract from positions\n    const industries = profile.positions?.map(pos => pos.companyName).filter(Boolean) || [];\n    expertise.push(...industries);\n\n    // Extract from skills\n    const skills = profile.skills?.map(skill => skill.name) || [];\n    expertise.push(...skills);\n\n    return [...new Set(expertise)]; // Remove duplicates\n  }\n\n  /**\n   * Map educations to certifications\n   */\n  private mapEducationsToCertifications(educations: LinkedInEducation[]): Certification[] {\n    return educations.map(edu => ({\n      id: `cert-${edu.schoolName}-${edu.endDate?.year || 'unknown'}`,\n      name: edu.degreeName || 'Degree',\n      issuer: edu.schoolName,\n      dateObtained: edu.endDate?.year ? `${edu.endDate.year}-01-01` : '2020-01-01',\n    }));\n  }\n\n  /**\n   * Calculate investment experience\n   */\n  private calculateInvestmentExperience(positions: LinkedInPosition[]): InvestmentExperience {\n    const investmentPositions = positions.filter(\n      pos =>\n        pos.title.toLowerCase().includes('investor') ||\n        pos.title.toLowerCase().includes('investment') ||\n        pos.title.toLowerCase().includes('venture') ||\n        pos.title.toLowerCase().includes('capital')\n    );\n\n    const yearsActive = this.calculateYearsInBusiness(investmentPositions);\n\n    return {\n      yearsActive,\n      totalDeals: Math.floor(yearsActive * 2), // Estimate based on years\n      successfulExits: Math.floor(yearsActive * 1.5),\n      averageDealSize: 250000,\n      investmentPhilosophy: 'Focus on technology companies with strong growth potential',\n      riskTolerance: 'moderate' as const,\n    };\n  }\n\n  /**\n   * Map educations to credentials\n   */\n  private mapEducationsToCredentials(educations: LinkedInEducation[]): Credential[] {\n    return educations.map(edu => ({\n      id: `cred-${edu.schoolName}-${edu.endDate?.year || 'unknown'}`,\n      type: 'education' as const,\n      name: `${edu.degreeName || 'Degree'} from ${edu.schoolName}`,\n      issuer: edu.schoolName,\n      dateObtained: edu.endDate?.year ? `${edu.endDate.year}-01-01` : '2020-01-01',\n    }));\n  }\n\n  /**\n   * Extract industry focus from profile\n   */\n  private extractIndustryFocus(profile: LinkedInProfile): InvestmentFocus {\n    const industries: string[] = [];\n    const businessSizes: string[] = [];\n    const businessStages: string[] = [];\n    const geographicRegions: string[] = [];\n    const businessModels: string[] = [];\n    const specializations: string[] = [];\n\n    if (profile.industry) {\n      industries.push(profile.industry);\n    }\n\n    // Extract from positions\n    const positionIndustries = profile.positions?.map(pos => pos.companyName).filter(Boolean) || [];\n    industries.push(...positionIndustries);\n\n    // Default values\n    businessSizes.push('€100K-€500K', '€500K-€1M');\n    businessStages.push('growth', 'expansion');\n    geographicRegions.push(profile.location?.country || 'Netherlands');\n    businessModels.push('SaaS', 'E-commerce');\n\n    return {\n      industries: [...new Set(industries)],\n      businessSizes,\n      businessStages,\n      geographicRegions,\n      businessModels,\n      specializations: [...new Set(specializations)],\n    };\n  }\n\n  /**\n   * Generate random state for OAuth\n   */\n  private generateState(): string {\n    return (\n      Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n    );\n  }\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport const linkedinService = new LinkedInService();\nexport default linkedinService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/services/mockProfileService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":382,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11585,11588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11585,11588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":383,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11649,11652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11649,11652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11703,11706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11703,11706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":385,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11753,11756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11753,11756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12863,12866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12863,12866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":426,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13039,13042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13039,13042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13502,13505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13502,13505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14043,14046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14043,14046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14137,14140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14137,14140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":472,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":472,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":472,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":472,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":514,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":514,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15741,15744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15741,15744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":530,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":530,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16105,16108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16105,16108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":559,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16853,16856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16853,16856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'filters' is defined but never used.","line":588,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":588,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filters' is defined but never used.","line":588,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":588,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":588,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":588,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17586,17589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17586,17589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":638,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":638,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19093,19096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19093,19096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🧪 Mock Profile Service - Development & Testing\n *\n * Mock service for testing the profile feature without backend integration\n */\n\nimport { UserRole } from '@/shared/types';\nimport {\n    CreateProfileRequest,\n    Profile,\n    ProfileListResponse,\n    UpdateProfileRequest,\n} from '../types/profile.types';\n\n// =============================================================================\n// MOCK DATA\n// =============================================================================\n\nconst mockProfile: Profile = {\n  id: 'profile-123',\n  userId: 'user-123',\n  role: 'both' as UserRole,\n\n  personalInfo: {\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@example.com',\n    phone: '+31 6 12345678',\n    professionalTitle: 'CEO & Founder',\n    company: 'Tech Innovations BV',\n    industry: 'Technology',\n    city: 'Amsterdam',\n    country: 'Netherlands',\n    timezone: 'Europe/Amsterdam',\n    avatar: 'avatar-123',\n    avatarUrl:\n      'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n    bio: 'Experienced entrepreneur with a passion for technology and innovation.',\n    professionalSummary:\n      'John is a seasoned entrepreneur with over 10 years of experience in the technology sector. He founded Tech Innovations BV in 2018 and has successfully grown the company to 25 employees with €2M annual revenue.',\n  },\n\n  businessOwnerData: {\n    businessName: 'Tech Innovations BV',\n    businessType: 'B.V.',\n    businessModel: 'SaaS platform for small businesses',\n    industry: 'Technology',\n    yearsInBusiness: 6,\n    yearsInIndustry: 12,\n    currentRole: 'CEO & Founder',\n    responsibilities: ['Strategic planning', 'Business development', 'Team leadership'],\n    previousVentures: [\n      {\n        id: 'venture-1',\n        name: 'Digital Solutions Ltd',\n        role: 'Co-founder',\n        duration: '2015-2018',\n        outcome: 'Acquired by larger company',\n        description: 'Built a digital marketing platform for SMEs',\n        industry: 'Technology',\n      },\n    ],\n    professionalCertifications: [\n      {\n        id: 'cert-1',\n        name: 'Certified Business Analyst',\n        issuer: 'International Business Analysis Institute',\n        dateObtained: '2020-01-01',\n        credentialId: 'CBA-2020-001',\n      },\n    ],\n    industryExpertise: ['SaaS', 'Digital Marketing', 'Business Development', 'Team Leadership'],\n    keyAchievements: [\n      {\n        id: 'achievement-1',\n        title: 'Company Growth',\n        description: 'Grew company from 2 to 25 employees in 3 years',\n        date: '2021-01-01',\n        impact: 'high',\n        category: 'business' as const,\n      },\n    ],\n    industryAwards: [\n      {\n        id: 'award-1',\n        name: 'Best Tech Startup 2022',\n        issuer: 'Amsterdam Tech Awards',\n        date: '2022-01-01',\n        category: 'Technology',\n      },\n    ],\n    professionalNetwork: 'Active in Amsterdam startup community, member of TechNL',\n    exitTimeline: {\n      timeframe: '1-year' as const,\n      urgency: 'medium' as const,\n      flexibility: 'moderate' as const,\n      notes: 'Looking for new challenges and opportunities',\n    },\n    reasonForSelling: 'Ready to explore new ventures and opportunities',\n    preferredExitType: 'share',\n    revenueRange: '€1M - €5M',\n    employeeCount: 25,\n    businessAge: 6,\n    growthRate: 35,\n  },\n\n  investorData: {\n    investmentCapacity: {\n      minAmount: 100000,\n      maxAmount: 500000,\n      preferredRange: '€100K-€500K',\n      currency: 'EUR',\n      availableCapital: 1000000,\n      investmentFrequency: 'ongoing' as const,\n    },\n    investmentFocus: {\n      industries: ['Technology', 'SaaS', 'E-commerce'],\n      businessSizes: ['€100K-€500K', '€500K-€1M'],\n      businessStages: ['growth', 'expansion'],\n      geographicRegions: ['Netherlands', 'Belgium', 'Germany'],\n      businessModels: ['SaaS', 'E-commerce'],\n      specializations: ['Technology', 'Digital Marketing'],\n    },\n    dealPreferences: {\n      dealSize: '€100K-€500K',\n      dealStructure: ['acquisition', 'investment'],\n      ownershipPercentage: {\n        min: 10,\n        max: 100,\n      },\n      involvementLevel: 'active' as const,\n      exitStrategy: ['IPO', 'Strategic Sale'],\n      dealTimeline: '6-12 months',\n    },\n    investmentExperience: {\n      yearsActive: 8,\n      totalDeals: 5,\n      successfulExits: 3,\n      averageDealSize: 300000,\n      investmentPhilosophy: 'Focus on technology companies with strong growth potential',\n      riskTolerance: 'moderate' as const,\n    },\n    previousDeals: [\n      {\n        id: 'deal-1',\n        companyName: 'Digital Solutions Ltd',\n        industry: 'Technology',\n        dealSize: 250000,\n        role: 'Co-founder',\n        outcome: 'successful' as const,\n        year: 2018,\n        description: 'Co-founded and later sold the company',\n      },\n    ],\n    professionalCredentials: [\n      {\n        id: 'cred-1',\n        type: 'education' as const,\n        name: 'MBA from Rotterdam School of Management',\n        issuer: 'Rotterdam School of Management',\n        dateObtained: '2015-01-01',\n      },\n      {\n        id: 'cred-2',\n        type: 'certification' as const,\n        name: 'Certified Investment Professional',\n        issuer: 'Investment Management Institute',\n        dateObtained: '2016-01-01',\n      },\n    ],\n    teamInfo: {\n      teamSize: 3,\n      keyMembers: [\n        {\n          name: 'John Doe',\n          role: 'Managing Partner',\n          expertise: ['Technology', 'Business Development'],\n          experience: 10,\n        },\n      ],\n      expertiseAreas: ['Technology', 'Business Development', 'Operations'],\n      externalAdvisors: ['Legal Advisor', 'Financial Advisor'],\n      decisionMakingProcess:\n        'Consensus-based decision making with final approval from managing partner',\n    },\n    decisionProcess: {\n      decisionTimeline: '2-4 weeks',\n      decisionMakers: ['Managing Partner', 'Investment Committee'],\n      approvalProcess: 'Investment committee approval required for deals over €250K',\n      dueDiligenceRequirements: ['Financial analysis', 'Legal review', 'Market research'],\n      keyCriteria: ['Growth potential', 'Market size', 'Team quality', 'Financial metrics'],\n    },\n    dueDiligenceCapabilities: {\n      financialAnalysis: true,\n      marketAnalysis: true,\n      legalReview: true,\n      operationalReview: true,\n      technicalAssessment: true,\n      externalAdvisors: ['Legal Advisor', 'Financial Advisor'],\n      typicalTimeline: '30 days',\n    },\n    timelineExpectations: {\n      initialResponse: '48 hours',\n      dueDiligencePeriod: '30 days',\n      decisionTimeline: '45 days',\n      closingTimeline: '60 days',\n      flexibility: 'moderate' as const,\n    },\n    financialCapacity: {\n      liquidCapital: 1000000,\n      totalAssets: 2000000,\n      debtCapacity: 500000,\n      fundingPartners: ['Bank of Amsterdam', 'Investment Partners'],\n      proofOfFunds: true,\n      lastUpdated: '2024-01-01',\n    },\n    fundingSource: {\n      source: 'personal' as const,\n      fundName: 'Personal Investment Fund',\n      fundSize: 1000000,\n      limitedPartners: ['Family Office', 'Investment Partners'],\n      investmentCommittee: ['Managing Partner', 'Investment Committee'],\n    },\n    investmentStructure: {\n      preferredStructure: ['equity', 'convertible debt'],\n      taxConsiderations: ['Capital gains tax', 'Corporate tax structure'],\n      legalStructure: ['LLC', 'Corporation'],\n      reportingRequirements: ['Quarterly reports', 'Annual audits'],\n    },\n  },\n\n  sharedData: {\n    communication: {\n      preferredContactMethod: 'email',\n      responseTimeCommitment: '24-hours',\n      availabilitySchedule: {\n        timezone: 'Europe/Amsterdam',\n        workingHours: {\n          start: '09:00',\n          end: '17:00',\n          days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n        },\n        unavailablePeriods: [],\n        emergencyContact: true,\n      },\n      languagePreferences: ['English', 'Dutch'],\n      communicationStyle: 'professional',\n      meetingPreferences: {\n        preferredFormat: ['video', 'in-person'],\n        preferredTimes: ['morning', 'afternoon'],\n        calendarIntegration: true,\n        meetingDuration: '60 minutes',\n        preparationRequired: true,\n      },\n      notificationSettings: {\n        emailNotifications: true,\n        pushNotifications: true,\n        smsNotifications: false,\n        marketingEmails: false,\n        listingUpdates: true,\n        messageNotifications: true,\n        priceAlerts: false,\n        weeklyDigest: true,\n      },\n    },\n\n    professionalNetwork: {\n      linkedinUrl: 'https://linkedin.com/in/johndoe',\n      professionalAssociations: ['TechNL', 'Amsterdam Startup Community'],\n      industryConnections: 150,\n      referralNetwork: ['John Smith', 'Jane Doe', 'Bob Johnson'],\n      mentorship: {\n        offering: true,\n        seeking: false,\n        areas: ['Technology', 'Business Development'],\n      },\n    },\n\n    privacy: {\n      profileVisibility: 'public' as const,\n      showEmail: true,\n      showPhone: false,\n      showLocation: true,\n      allowMessages: true,\n      allowInquiries: true,\n      dataSharing: true,\n      anonymousProfile: false,\n      searchable: true,\n    },\n\n    platformActivity: {\n      memberSince: '2020-03-15T10:30:00Z',\n      lastActiveAt: '2024-12-19T14:30:00Z',\n      profileViews: 1247,\n      messagesSent: 45,\n      messagesReceived: 38,\n      listingsViewed: 156,\n      inquiriesSent: 23,\n      inquiriesReceived: 18,\n      transactionsCompleted: 3,\n      averageResponseTime: 4.5,\n      userRating: 4.8,\n      reviewCount: 12,\n    },\n  },\n\n\n  strength: {\n    overallScore: 85,\n    factors: {\n      completeness: 85,\n      verification: 70,\n      activity: 90,\n      quality: 80,\n    },\n    level: 'advanced' as const,\n    improvements: [\n      'Add more certifications',\n      'Include industry awards',\n      'Expand investment criteria',\n    ],\n    lastCalculated: '2024-12-19T14:30:00Z',\n  },\n\n  createdAt: '2020-03-15T10:30:00Z',\n  updatedAt: '2024-12-19T14:30:00Z',\n  lastActiveAt: '2024-12-19T14:30:00Z',\n};\n\n// =============================================================================\n// MOCK PROFILE SERVICE CLASS\n// =============================================================================\n\nclass MockProfileService {\n  private profiles: Map<string, Profile> = new Map();\n  private currentProfile: Profile | null = null;\n\n  constructor() {\n    // Initialize with mock data\n    this.profiles.set('profile-123', mockProfile);\n    this.currentProfile = mockProfile;\n  }\n\n  /**\n   * Get current user's profile\n   */\n  async getProfile(): Promise<Profile> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    if (!this.currentProfile) {\n      throw new Error('Profile not found');\n    }\n\n    return { ...this.currentProfile };\n  }\n\n  /**\n   * Get profile by ID (public profile)\n   */\n  async getProfileById(profileId: string): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    const profile = this.profiles.get(profileId);\n    if (!profile) {\n      throw new Error('Profile not found');\n    }\n\n    return { ...profile };\n  }\n\n  /**\n   * Create new profile\n   */\n  async createProfile(data: CreateProfileRequest): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    const newProfile: Profile = {\n      id: `profile-${Date.now()}`,\n      userId: 'user-123', // Mock user ID\n      role: data.role,\n      personalInfo: data.personalInfo || ({} as any),\n      businessOwnerData: data.businessOwnerData || ({} as any),\n      investorData: data.investorData || ({} as any),\n      sharedData: data.sharedData || ({} as any),\n      strength: {\n        overallScore: 0,\n        factors: {\n          completeness: 0,\n          verification: 0,\n          activity: 0,\n          quality: 0,\n        },\n        level: 'beginner' as const,\n        improvements: [],\n        lastCalculated: new Date().toISOString(),\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      lastActiveAt: new Date().toISOString(),\n    };\n\n    this.profiles.set(newProfile.id, newProfile);\n    this.currentProfile = newProfile;\n\n    return { ...newProfile };\n  }\n\n  /**\n   * Update profile\n   */\n  async updateProfile(data: UpdateProfileRequest): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 600));\n\n    if (!this.currentProfile) {\n      throw new Error('Profile not found');\n    }\n\n    const updatedProfile: Profile = {\n      ...this.currentProfile,\n      personalInfo: { ...this.currentProfile.personalInfo, ...(data.personalInfo || {}) },\n      businessOwnerData: data.businessOwnerData\n        ? ({ ...(this.currentProfile.businessOwnerData || {}), ...data.businessOwnerData } as any)\n        : this.currentProfile.businessOwnerData,\n      investorData: data.investorData\n        ? ({ ...(this.currentProfile.investorData || {}), ...data.investorData } as any)\n        : this.currentProfile.investorData,\n      sharedData: { ...this.currentProfile.sharedData, ...(data.sharedData || {}) },\n      updatedAt: new Date().toISOString(),\n      lastActiveAt: new Date().toISOString(),\n    };\n\n    this.profiles.set(updatedProfile.id, updatedProfile);\n    this.currentProfile = updatedProfile;\n\n    return { ...updatedProfile };\n  }\n\n  /**\n   * Update profile section\n   */\n  async updateProfileSection(section: string, data: any): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 400));\n\n    if (!this.currentProfile) {\n      throw new Error('Profile not found');\n    }\n\n    const updatedProfile: Profile = {\n      ...this.currentProfile,\n      [section]: {\n        ...(this.currentProfile[section as keyof Profile] &&\n        typeof this.currentProfile[section as keyof Profile] === 'object' &&\n        !Array.isArray(this.currentProfile[section as keyof Profile])\n          ? (this.currentProfile[section as keyof Profile] as Record<string, any>)\n          : {}),\n        ...(data && typeof data === 'object' ? (data as Record<string, any>) : {}),\n      },\n      updatedAt: new Date().toISOString(),\n      lastActiveAt: new Date().toISOString(),\n    };\n\n    this.profiles.set(updatedProfile.id, updatedProfile);\n    this.currentProfile = updatedProfile;\n\n    return { ...updatedProfile };\n  }\n\n  /**\n   * Upload profile image\n   */\n  async uploadProfileImage(file: File): Promise<{ imageUrl: string }> {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Simulate image upload\n    const imageUrl = `https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face&t=${Date.now()}`;\n\n    if (this.currentProfile) {\n      this.currentProfile.personalInfo.avatarUrl = imageUrl;\n      this.currentProfile.updatedAt = new Date().toISOString();\n    }\n\n    return { imageUrl };\n  }\n\n  /**\n   * Delete profile image\n   */\n  async deleteProfileImage(): Promise<void> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    if (this.currentProfile) {\n      this.currentProfile.personalInfo.avatarUrl = undefined;\n      this.currentProfile.updatedAt = new Date().toISOString();\n    }\n  }\n\n  /**\n   * Update profile visibility\n   */\n  async updateProfileVisibility(visibility: string): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    if (!this.currentProfile) {\n      throw new Error('Profile not found');\n    }\n\n    const updatedProfile: Profile = {\n      ...this.currentProfile,\n      sharedData: {\n        ...this.currentProfile.sharedData,\n        privacy: {\n          ...this.currentProfile.sharedData.privacy,\n          profileVisibility: visibility as any,\n        },\n      },\n      updatedAt: new Date().toISOString(),\n      lastActiveAt: new Date().toISOString(),\n    };\n\n    this.profiles.set(updatedProfile.id, updatedProfile);\n    this.currentProfile = updatedProfile;\n\n    return { ...updatedProfile };\n  }\n\n  /**\n   * Update communication preferences\n   */\n  async updateCommunicationPreferences(preferences: any): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 400));\n\n    if (!this.currentProfile) {\n      throw new Error('Profile not found');\n    }\n\n    const updatedProfile: Profile = {\n      ...this.currentProfile,\n      sharedData: {\n        ...this.currentProfile.sharedData,\n        communication: {\n          ...this.currentProfile.sharedData.communication,\n          ...preferences,\n        },\n      },\n      updatedAt: new Date().toISOString(),\n      lastActiveAt: new Date().toISOString(),\n    };\n\n    this.profiles.set(updatedProfile.id, updatedProfile);\n    this.currentProfile = updatedProfile;\n\n    return { ...updatedProfile };\n  }\n\n  /**\n   * Update privacy settings\n   */\n  async updatePrivacySettings(settings: any): Promise<Profile> {\n    await new Promise(resolve => setTimeout(resolve, 400));\n\n    if (!this.currentProfile) {\n      throw new Error('Profile not found');\n    }\n\n    const updatedProfile: Profile = {\n      ...this.currentProfile,\n      sharedData: {\n        ...this.currentProfile.sharedData,\n        privacy: {\n          ...this.currentProfile.sharedData.privacy,\n          ...settings,\n        },\n      },\n      updatedAt: new Date().toISOString(),\n      lastActiveAt: new Date().toISOString(),\n    };\n\n    this.profiles.set(updatedProfile.id, updatedProfile);\n    this.currentProfile = updatedProfile;\n\n    return { ...updatedProfile };\n  }\n\n  /**\n   * Search profiles\n   */\n  async searchProfiles(query: string, filters?: any): Promise<ProfileListResponse> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    const allProfiles = Array.from(this.profiles.values());\n    const filteredProfiles = allProfiles.filter(\n      profile =>\n        profile.personalInfo.firstName.toLowerCase().includes(query.toLowerCase()) ||\n        profile.personalInfo.lastName.toLowerCase().includes(query.toLowerCase()) ||\n        profile.personalInfo.company?.toLowerCase().includes(query.toLowerCase()) ||\n        profile.personalInfo.industry?.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return {\n      success: true,\n      data: filteredProfiles,\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: filteredProfiles.length,\n        totalPages: Math.ceil(filteredProfiles.length / 10),\n      },\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Get profile recommendations\n   */\n  async getProfileRecommendations(): Promise<Profile[]> {\n    await new Promise(resolve => setTimeout(resolve, 600));\n\n    const allProfiles = Array.from(this.profiles.values());\n    return allProfiles.slice(0, 5); // Return first 5 profiles as recommendations\n  }\n\n  /**\n   * Delete profile\n   */\n  async deleteProfile(): Promise<void> {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    if (this.currentProfile) {\n      this.profiles.delete(this.currentProfile.id);\n      this.currentProfile = null;\n    }\n  }\n\n  /**\n   * Get profile analytics\n   */\n  async getProfileAnalytics(): Promise<any> {\n    await new Promise(resolve => setTimeout(resolve, 400));\n\n    return {\n      profileViews: 1247,\n      searchAppearances: 89,\n      clickThroughRate: 12.5,\n      messageResponseRate: 85.2,\n      inquiryConversionRate: 23.1,\n      transactionSuccessRate: 78.5,\n      profileStrengthScore: 4.2,\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Export profile data\n   */\n  async exportProfileData(format: 'json' | 'pdf'): Promise<Blob> {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    const data = JSON.stringify(this.currentProfile, null, 2);\n    return new Blob([data], { type: format === 'json' ? 'application/json' : 'application/pdf' });\n  }\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport const mockProfileService = new MockProfileService();\nexport default mockProfileService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/services/mockTimelineService.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":524,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":524,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":524,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":524,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🧪 Mock Timeline Service - Development & Testing\n *\n * Mock service for testing the business timeline feature without backend integration\n */\n\nimport {\n  BusinessTimelineEvent,\n  BusinessTimelineEventType,\n  BusinessTimelineFilters,\n  BusinessTimelineResponse,\n  BusinessTimelineStats,\n  CreateTimelineEventRequest,\n  UpdateTimelineEventRequest,\n} from '../types/timeline.types';\n\n// =============================================================================\n// MOCK DATA\n// =============================================================================\n\nconst mockTimelineEvents: BusinessTimelineEvent[] = [\n  {\n    id: 'event-1',\n    type: 'business_founded',\n    title: 'Founded Tech Innovations BV',\n    subtitle: 'CEO & Founder',\n    description:\n      'Started the company with a vision to revolutionize small business technology solutions.',\n    date: '2018-03-15',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1552664730-d307ca884978?w=400&h=300&fit=crop',\n    metadata: {\n      industry: 'Technology',\n      investmentAmount: 50000,\n      employees: 3,\n    },\n    status: 'completed',\n    createdAt: '2018-03-15T10:00:00Z',\n    updatedAt: '2018-03-15T10:00:00Z',\n  },\n  {\n    id: 'event-2',\n    type: 'funding_raised',\n    title: 'Series A Funding Round',\n    subtitle: '€500K raised',\n    description:\n      'Successfully raised Series A funding to accelerate product development and market expansion.',\n    date: '2019-06-20',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=400&h=300&fit=crop',\n    metadata: {\n      investmentAmount: 500000,\n      valuation: 2000000,\n    },\n    status: 'completed',\n    createdAt: '2019-06-20T14:30:00Z',\n    updatedAt: '2019-06-20T14:30:00Z',\n  },\n  {\n    id: 'event-3',\n\n    type: 'business_milestone',\n    title: 'Reached 1000 Customers',\n    subtitle: 'Customer Milestone',\n    description: 'Achieved the milestone of 1000 active customers using our SaaS platform.',\n    date: '2020-09-10',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1553877522-43269d4ea984?w=400&h=300&fit=crop',\n    metadata: {\n      revenue: 1200000,\n      employees: 15,\n    },\n    status: 'completed',\n    createdAt: '2020-09-10T16:45:00Z',\n    updatedAt: '2020-09-10T16:45:00Z',\n  },\n  {\n    id: 'event-4',\n\n    type: 'investment_made',\n    title: 'Invested in Digital Solutions Ltd',\n    subtitle: 'Angel Investment',\n    description:\n      'Made an angel investment in Digital Solutions Ltd, a promising digital marketing startup.',\n    date: '2021-02-15',\n    location: 'Rotterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=400&h=300&fit=crop',\n    metadata: {\n      investmentAmount: 25000,\n      equityPercentage: 5,\n      industry: 'Digital Marketing',\n    },\n    status: 'completed',\n    createdAt: '2021-02-15T11:20:00Z',\n    updatedAt: '2021-02-15T11:20:00Z',\n  },\n  {\n    id: 'event-5',\n\n    type: 'business_milestone',\n    title: 'Team Expansion to 25 Employees',\n    subtitle: 'Team Growth',\n    description:\n      'Successfully expanded the team to 25 employees across development, sales, and operations.',\n    date: '2021-08-30',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=400&h=300&fit=crop',\n    metadata: {\n      employees: 25,\n    },\n    status: 'completed',\n    createdAt: '2021-08-30T09:15:00Z',\n    updatedAt: '2021-08-30T09:15:00Z',\n  },\n  {\n    id: 'event-6',\n\n    type: 'award_received',\n    title: 'Best Tech Startup 2022',\n    subtitle: 'Amsterdam Tech Awards',\n    description:\n      'Received the Best Tech Startup award at the Amsterdam Tech Awards for innovation and growth.',\n    date: '2022-05-12',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1511795409834-ef04bbd61622?w=400&h=300&fit=crop',\n    metadata: {\n      industry: 'Technology',\n    },\n    status: 'completed',\n    createdAt: '2022-05-12T19:30:00Z',\n    updatedAt: '2022-05-12T19:30:00Z',\n  },\n  {\n    id: 'event-7',\n\n    type: 'business_milestone',\n    title: '€2M Annual Revenue',\n    subtitle: 'Revenue Milestone',\n    description:\n      'Achieved €2M in annual recurring revenue, marking a significant milestone in company growth.',\n    date: '2022-12-31',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=400&h=300&fit=crop',\n    metadata: {\n      revenue: 2000000,\n    },\n    status: 'completed',\n    createdAt: '2022-12-31T23:59:00Z',\n    updatedAt: '2022-12-31T23:59:00Z',\n  },\n  {\n    id: 'event-8',\n\n    type: 'investment_made',\n    title: 'Invested in E-commerce Platform',\n    subtitle: 'Strategic Investment',\n    description: 'Made a strategic investment in an e-commerce platform to expand our portfolio.',\n    date: '2023-04-18',\n    location: 'Utrecht, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=400&h=300&fit=crop',\n    metadata: {\n      investmentAmount: 100000,\n      equityPercentage: 10,\n      industry: 'E-commerce',\n    },\n    status: 'completed',\n    createdAt: '2023-04-18T13:45:00Z',\n    updatedAt: '2023-04-18T13:45:00Z',\n  },\n  {\n    id: 'event-9',\n\n    type: 'business_milestone',\n    title: 'International Expansion',\n    subtitle: 'Belgium & Germany',\n    description:\n      'Successfully expanded operations to Belgium and Germany, serving customers across three countries.',\n    date: '2023-09-05',\n    location: 'Brussels, Belgium',\n    imageUrl: 'https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=400&h=300&fit=crop',\n    metadata: {\n      industry: 'Technology',\n    },\n    status: 'completed',\n    createdAt: '2023-09-05T10:30:00Z',\n    updatedAt: '2023-09-05T10:30:00Z',\n  },\n  {\n    id: 'event-10',\n\n    type: 'business_milestone',\n    title: 'Platform Upgrade v3.0',\n    subtitle: 'Major Product Release',\n    description:\n      'Launched major platform upgrade with AI-powered features and enhanced user experience.',\n    date: '2024-01-15',\n    location: 'Amsterdam, Netherlands',\n    imageUrl: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=300&fit=crop',\n    metadata: {\n      industry: 'Technology',\n    },\n    status: 'completed',\n    createdAt: '2024-01-15T12:00:00Z',\n    updatedAt: '2024-01-15T12:00:00Z',\n  },\n];\n\nconst mockTimelineStats: BusinessTimelineStats = {\n  totalEvents: 10,\n  businessesFounded: 1,\n  businessesSold: 0,\n  investmentsMade: 2,\n  totalDealValue: 625000,\n  averageDealSize: 312500,\n  yearsActive: 6,\n  industries: [\n    { name: 'Technology', count: 8 },\n    { name: 'Digital Marketing', count: 1 },\n    { name: 'E-commerce', count: 1 },\n  ],\n  recentActivity: {\n    lastEvent: mockTimelineEvents[0],\n    eventsThisYear: 1,\n    eventsThisMonth: 0,\n  },\n};\n\n// =============================================================================\n// MOCK TIMELINE SERVICE CLASS\n// =============================================================================\n\nclass MockTimelineService {\n  private events: Map<string, BusinessTimelineEvent> = new Map();\n  private stats: BusinessTimelineStats = mockTimelineStats;\n\n  constructor() {\n    // Initialize with mock data\n    mockTimelineEvents.forEach(event => {\n      this.events.set(event.id, event);\n    });\n  }\n\n  /**\n   * Get timeline events for a user\n   */\n  async getTimeline(\n    userId: string,\n    filters?: BusinessTimelineFilters\n  ): Promise<BusinessTimelineResponse> {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    let filteredEvents = Array.from(this.events.values()).filter(event => event.id === userId);\n\n    // Apply filters\n    if (filters) {\n      if (filters.types) {\n        filteredEvents = filteredEvents.filter(event => filters.types!.includes(event.type));\n      }\n      if (filters.status) {\n        filteredEvents = filteredEvents.filter(event => filters.status!.includes(event.status));\n      }\n      if (filters.dateRange) {\n        filteredEvents = filteredEvents.filter(\n          event => event.date >= filters.dateRange!.start && event.date <= filters.dateRange!.end\n        );\n      }\n      if (filters.industries) {\n        filteredEvents = filteredEvents.filter(\n          event => event.metadata?.industry && filters.industries!.includes(event.metadata.industry)\n        );\n      }\n    }\n\n    // Sort by date (newest first)\n    filteredEvents.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    // Apply pagination (default to first 10 events)\n    const paginatedEvents = filteredEvents.slice(0, 10);\n\n    return {\n      events: paginatedEvents,\n      stats: await this.getTimelineStats(userId),\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: filteredEvents.length,\n        hasMore: filteredEvents.length > 10,\n      },\n    };\n  }\n\n  /**\n   * Get timeline statistics\n   */\n  async getTimelineStats(userId: string): Promise<BusinessTimelineStats> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    const userEvents = Array.from(this.events.values()).filter(event => event.id === userId);\n\n    // Calculate stats from user events\n    let businessesFounded = 0;\n    let businessesSold = 0;\n    let investmentsMade = 0;\n    let totalDealValue = 0;\n    const industries: { [key: string]: number } = {};\n    const currentYear = new Date().getFullYear();\n    const currentMonth = new Date().getMonth();\n    let eventsThisYear = 0;\n    let eventsThisMonth = 0;\n    let lastEvent: BusinessTimelineEvent | null = null;\n\n    userEvents.forEach(event => {\n      // Count by type\n      if (event.type === 'business_founded') {\n        businessesFounded++;\n      } else if (event.type === 'business_sold') {\n        businessesSold++;\n      } else if (event.type === 'investment_made') {\n        investmentsMade++;\n        if (event.metadata?.investmentAmount) {\n          totalDealValue += event.metadata.investmentAmount;\n        }\n      }\n\n      // Count industries\n      if (event.metadata?.industry) {\n        industries[event.metadata.industry] = (industries[event.metadata.industry] || 0) + 1;\n      }\n\n      // Count events by time\n      const eventDate = new Date(event.date);\n      if (eventDate.getFullYear() === currentYear) {\n        eventsThisYear++;\n        if (eventDate.getMonth() === currentMonth) {\n          eventsThisMonth++;\n        }\n      }\n\n      // Track last event\n      if (!lastEvent || new Date(event.date) > new Date(lastEvent.date)) {\n        lastEvent = event;\n      }\n    });\n\n    // Calculate business age\n    const foundedEvent = userEvents.find(event => event.type === 'business_founded');\n    let yearsActive = 0;\n    if (foundedEvent) {\n      const foundedDate = new Date(foundedEvent.date);\n      const now = new Date();\n      yearsActive = Math.floor(\n        (now.getTime() - foundedDate.getTime()) / (1000 * 60 * 60 * 24 * 365)\n      );\n    }\n\n    const stats: BusinessTimelineStats = {\n      totalEvents: userEvents.length,\n      businessesFounded,\n      businessesSold,\n      investmentsMade,\n      totalDealValue,\n      averageDealSize: investmentsMade > 0 ? totalDealValue / investmentsMade : 0,\n      yearsActive,\n      industries: Object.entries(industries).map(([name, count]) => ({ name, count })),\n      recentActivity: {\n        lastEvent,\n        eventsThisYear,\n        eventsThisMonth,\n      },\n    };\n\n    return stats;\n  }\n\n  /**\n   * Create timeline event\n   */\n  async createEvent(\n    userId: string,\n    data: CreateTimelineEventRequest\n  ): Promise<BusinessTimelineEvent> {\n    await new Promise(resolve => setTimeout(resolve, 600));\n\n    const newEvent: BusinessTimelineEvent = {\n      id: `event-${Date.now()}`,\n      type: data.type,\n      title: data.title,\n      subtitle: data.subtitle,\n      description: data.description,\n      date: data.date,\n      location: data.location,\n      imageUrl: data.imageUrl,\n      metadata: data.metadata,\n      status: 'completed',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    this.events.set(newEvent.id, newEvent);\n    return { ...newEvent };\n  }\n\n  /**\n   * Update timeline event\n   */\n  async updateEvent(\n    userId: string,\n    eventId: string,\n    data: UpdateTimelineEventRequest\n  ): Promise<BusinessTimelineEvent> {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    const existingEvent = this.events.get(eventId);\n    if (!existingEvent) {\n      throw new Error('Event not found');\n    }\n\n    const updatedEvent: BusinessTimelineEvent = {\n      ...existingEvent,\n      ...data,\n      updatedAt: new Date().toISOString(),\n    };\n\n    this.events.set(eventId, updatedEvent);\n    return { ...updatedEvent };\n  }\n\n  /**\n   * Delete timeline event\n   */\n  async deleteEvent(userId: string, eventId: string): Promise<void> {\n    await new Promise(resolve => setTimeout(resolve, 400));\n\n    const event = this.events.get(eventId);\n    if (!event) {\n      throw new Error('Event not found');\n    }\n\n    this.events.delete(eventId);\n  }\n\n  /**\n   * Search timeline events\n   */\n  async searchEvents(\n    userId: string,\n    query: string,\n    filters?: BusinessTimelineFilters\n  ): Promise<BusinessTimelineResponse> {\n    await new Promise(resolve => setTimeout(resolve, 600));\n\n    // Get all events for the user\n    let filteredEvents = Array.from(this.events.values()).filter(event => event.id === userId);\n\n    // Apply text search\n    const searchTerm = query.toLowerCase();\n    filteredEvents = filteredEvents.filter(\n      event =>\n        event.title.toLowerCase().includes(searchTerm) ||\n        event.subtitle?.toLowerCase().includes(searchTerm) ||\n        event.description?.toLowerCase().includes(searchTerm)\n    );\n\n    // Apply additional filters\n    if (filters) {\n      if (filters.types) {\n        filteredEvents = filteredEvents.filter(event => filters.types!.includes(event.type));\n      }\n      if (filters.status) {\n        filteredEvents = filteredEvents.filter(event => filters.status!.includes(event.status));\n      }\n      if (filters.dateRange) {\n        filteredEvents = filteredEvents.filter(\n          event => event.date >= filters.dateRange!.start && event.date <= filters.dateRange!.end\n        );\n      }\n      if (filters.industries) {\n        filteredEvents = filteredEvents.filter(\n          event => event.metadata?.industry && filters.industries!.includes(event.metadata.industry)\n        );\n      }\n    }\n\n    // Sort by date (newest first)\n    filteredEvents.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    // Apply pagination (default to first 10 events)\n    const paginatedEvents = filteredEvents.slice(0, 10);\n\n    return {\n      events: paginatedEvents,\n      stats: await this.getTimelineStats(userId),\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: filteredEvents.length,\n        hasMore: filteredEvents.length > 10,\n      },\n    };\n  }\n\n  /**\n   * Get events by type\n   */\n  async getEventsByType(\n    userId: string,\n    type: BusinessTimelineEventType\n  ): Promise<BusinessTimelineEvent[]> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    const events = Array.from(this.events.values())\n      .filter(event => event.type === type)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    return events;\n  }\n\n  /**\n   * Upload event image\n   */\n  async uploadEventImage(\n    userId: string,\n    eventId: string,\n    file: File\n  ): Promise<{ imageUrl: string }> {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Simulate image upload\n    const imageUrl = `https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=300&fit=crop&t=${Date.now()}`;\n\n    const event = this.events.get(eventId);\n    if (event) {\n      event.imageUrl = imageUrl;\n      event.updatedAt = new Date().toISOString();\n    }\n\n    return { imageUrl };\n  }\n\n  /**\n   * Export timeline data\n   */\n  async exportTimelineData(userId: string): Promise<{ data: string; filename: string }> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    const events = Array.from(this.events.values()).sort(\n      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n\n    const exportData = {\n      userId,\n      exportDate: new Date().toISOString(),\n      totalEvents: events.length,\n      events: events.map(event => ({\n        title: event.title,\n        subtitle: event.subtitle,\n        date: event.date,\n        type: event.type,\n        description: event.description,\n        location: event.location,\n      })),\n    };\n\n    return {\n      data: JSON.stringify(exportData, null, 2),\n      filename: `timeline-export-${userId}-${new Date().toISOString().split('T')[0]}.json`,\n    };\n  }\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport const mockTimelineService = new MockTimelineService();\nexport default mockTimelineService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/services/profileService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1094,1142],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1698,1752],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2392,2440],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3075,3123],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3255,3258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3255,3258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3806,3862],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4514,4569],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5025,5079],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6299,6349],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6965,7028],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7693,7752],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7885,7888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7885,7888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8456,8522],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8634,8637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8634,8637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":332,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":332,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9184,9241],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9381,9384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9381,9384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":358,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":358,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9838,9894],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":379,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":379,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10323,10371],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10903,10952],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔧 Profile Service - API Integration\n *\n * Service for managing profile-related API operations\n */\n\nimport { UserRole } from '@/shared/types';\nimport {\n    CreateProfileRequest,\n    Profile,\n    ProfileListResponse,\n    ProfileResponse,\n    UpdateProfileRequest,\n} from '../types/profile.types';\n\n// =============================================================================\n// PROFILE SERVICE CLASS\n// =============================================================================\n\nclass ProfileService {\n  private baseUrl = '/api/users/profile';\n\n  /**\n   * Get current user's profile\n   */\n  async getProfile(): Promise<Profile> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch profile: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get profile by ID (public profile)\n   */\n  async getProfileById(profileId: string): Promise<Profile> {\n    try {\n      const response = await fetch(`${this.baseUrl}/${profileId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch profile: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error fetching profile by ID:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create new profile\n   */\n  async createProfile(profileData: CreateProfileRequest): Promise<Profile> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: JSON.stringify(profileData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to create profile: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error creating profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update profile\n   */\n  async updateProfile(profileData: UpdateProfileRequest): Promise<Profile> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: JSON.stringify(profileData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update profile: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update specific profile section\n   */\n  async updateProfileSection(section: string, data: any): Promise<Profile> {\n    try {\n      const response = await fetch(`${this.baseUrl}/section/${section}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update profile section: ${response.statusText}`);\n      }\n\n      const result: ProfileResponse = await response.json();\n      return result.data;\n    } catch (error) {\n      console.error('Error updating profile section:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload profile image\n   */\n  async uploadProfileImage(file: File): Promise<{ url: string; key: string }> {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch(`${this.baseUrl}/upload-image`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to upload image: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error uploading profile image:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete profile image\n   */\n  async deleteProfileImage(): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseUrl}/delete-image`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete image: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting profile image:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search profiles\n   */\n  async searchProfiles(filters: ProfileSearchFilters): Promise<Profile[]> {\n    try {\n      const queryParams = new URLSearchParams();\n\n      if (filters.role) queryParams.append('role', filters.role);\n      if (filters.industry) queryParams.append('industry', filters.industry);\n      if (filters.country) queryParams.append('country', filters.country);\n      if (filters.city) queryParams.append('city', filters.city);\n      if (filters.verified) queryParams.append('verified', filters.verified.toString());\n      if (filters.search) queryParams.append('search', filters.search);\n      if (filters.page) queryParams.append('page', filters.page.toString());\n      if (filters.limit) queryParams.append('limit', filters.limit.toString());\n\n      const response = await fetch(`${this.baseUrl}/search?${queryParams}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to search profiles: ${response.statusText}`);\n      }\n\n      const data: ProfileListResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error searching profiles:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get profile recommendations\n   */\n  async getProfileRecommendations(): Promise<Profile[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/recommendations`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get recommendations: ${response.statusText}`);\n      }\n\n      const data: ProfileListResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error getting profile recommendations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update profile visibility\n   */\n  async updateProfileVisibility(visibility: string): Promise<Profile> {\n    try {\n      const response = await fetch(`${this.baseUrl}/visibility`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: JSON.stringify({ visibility }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update visibility: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error updating profile visibility:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update communication preferences\n   */\n  async updateCommunicationPreferences(preferences: any): Promise<Profile> {\n    try {\n      const response = await fetch(`${this.baseUrl}/communication-preferences`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: JSON.stringify(preferences),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update communication preferences: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error updating communication preferences:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update privacy settings\n   */\n  async updatePrivacySettings(settings: any): Promise<Profile> {\n    try {\n      const response = await fetch(`${this.baseUrl}/privacy-settings`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n        body: JSON.stringify(settings),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update privacy settings: ${response.statusText}`);\n      }\n\n      const data: ProfileResponse = await response.json();\n      return data.data;\n    } catch (error) {\n      console.error('Error updating privacy settings:', error);\n      throw error;\n    }\n  }\n\n\n  /**\n   * Get profile strength score\n   */\n  async getProfileStrength(): Promise<{ score: number; factors: any }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/strength`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get strength score: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error getting profile strength:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete profile\n   */\n  async deleteProfile(): Promise<void> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete profile: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Export profile data\n   */\n  async exportProfileData(format: 'json' | 'pdf' = 'json'): Promise<Blob> {\n    try {\n      const response = await fetch(`${this.baseUrl}/export?format=${format}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.getAuthToken()}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to export profile: ${response.statusText}`);\n      }\n\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get authentication token\n   */\n  private getAuthToken(): string {\n    // This should be implemented based on your auth system\n    // For now, returning empty string - implement based on your auth context\n    return localStorage.getItem('authToken') || '';\n  }\n}\n\n// =============================================================================\n// PROFILE SEARCH FILTERS INTERFACE\n// =============================================================================\n\nexport interface ProfileSearchFilters {\n  role?: UserRole;\n  industry?: string;\n  country?: string;\n  city?: string;\n  verified?: boolean;\n  search?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: 'relevance' | 'date' | 'name' | 'rating';\n  sortOrder?: 'asc' | 'desc';\n}\n\n// =============================================================================\n// EXPORT SERVICE INSTANCE\n// =============================================================================\n\nexport const profileService = new ProfileService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/services/timelineService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/types/profile.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/types/roleBased.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[888,891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[888,891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎯 Role-Based Profile Types\n *\n * Optimized type definitions that emphasize common professional backgrounds\n * while maintaining role-specific differences\n */\n\nimport { UserRole } from '@/shared/types';\nimport { Achievement, Award, Certification, PreviousDeal, PreviousVenture } from './profile.types';\n\n// =============================================================================\n// ROLE CONFIGURATION\n// =============================================================================\n\nexport interface RoleConfig {\n  id: UserRole;\n  displayName: string;\n  description: string;\n  icon: string;\n  color: string;\n  sections: ProfileSectionConfig[];\n  commonSections: string[];\n}\n\nexport interface ProfileSectionConfig {\n  id: string;\n  title: string;\n  description: string;\n  required: boolean;\n  order: number;\n  fields: string[];\n  conditional?: {\n    field: string;\n    value: any;\n  };\n}\n\n// =============================================================================\n// ROLE CONFIGURATIONS\n// =============================================================================\n\nexport const ROLE_CONFIGS: Record<UserRole, RoleConfig> = {\n  seller: {\n    id: 'seller',\n    displayName: 'Business Owner',\n    description: 'Selling or planning to sell a business',\n    icon: 'Building2',\n    color: 'blue',\n    commonSections: ['professional-background', 'business-experience', 'achievements', 'network'],\n    sections: [\n      {\n        id: 'business-details',\n        title: 'Business Information',\n        description: 'Current business details and metrics',\n        required: true,\n        order: 1,\n        fields: ['businessName', 'businessType', 'industry', 'revenueRange', 'employeeCount'],\n      },\n      {\n        id: 'exit-strategy',\n        title: 'Exit Strategy',\n        description: 'Your exit timeline and preferences',\n        required: true,\n        order: 2,\n        fields: ['exitTimeline', 'reasonForSelling', 'preferredExitType'],\n      },\n    ],\n  },\n  buyer: {\n    id: 'buyer',\n    displayName: 'Investor',\n    description: 'Looking to acquire or invest in businesses',\n    icon: 'Target',\n    color: 'green',\n    commonSections: ['professional-background', 'business-experience', 'achievements', 'network'],\n    sections: [\n      {\n        id: 'investment-profile',\n        title: 'Investment Profile',\n        description: 'Your investment capacity and preferences',\n        required: true,\n        order: 1,\n        fields: ['investmentCapacity', 'investmentFocus', 'dealPreferences'],\n      },\n      {\n        id: 'decision-process',\n        title: 'Decision Process',\n        description: 'How you evaluate and decide on investments',\n        required: true,\n        order: 2,\n        fields: ['decisionProcess', 'dueDiligenceCapabilities', 'timelineExpectations'],\n      },\n    ],\n  },\n  both: {\n    id: 'both',\n    displayName: 'Business Owner & Investor',\n    description: 'Both selling and investing in businesses',\n    icon: 'Users',\n    color: 'purple',\n    commonSections: ['professional-background', 'business-experience', 'achievements', 'network'],\n    sections: [\n      {\n        id: 'business-details',\n        title: 'Current Business',\n        description: 'Your current business information',\n        required: true,\n        order: 1,\n        fields: ['businessName', 'businessType', 'industry', 'revenueRange'],\n      },\n      {\n        id: 'investment-profile',\n        title: 'Investment Profile',\n        description: 'Your investment capacity and preferences',\n        required: true,\n        order: 2,\n        fields: ['investmentCapacity', 'investmentFocus', 'dealPreferences'],\n      },\n      {\n        id: 'exit-strategy',\n        title: 'Exit Strategy',\n        description: 'Your exit timeline and preferences',\n        required: false,\n        order: 3,\n        fields: ['exitTimeline', 'reasonForSelling', 'preferredExitType'],\n      },\n    ],\n  },\n  admin: {\n    id: 'admin',\n    displayName: 'Administrator',\n    description: 'Platform administrator',\n    icon: 'Shield',\n    color: 'gray',\n    commonSections: ['professional-background'],\n    sections: [],\n  },\n};\n\n// =============================================================================\n// COMMON PROFESSIONAL BACKGROUND\n// =============================================================================\n\nexport interface CommonProfessionalBackground {\n  // Core Professional Identity\n  currentRole: string;\n  yearsOfExperience: number;\n  industryExpertise: string[];\n  professionalTitle: string;\n\n  // Business Experience (Common to both roles)\n  previousVentures: PreviousVenture[];\n  businessExperience: BusinessExperience[];\n  keyAchievements: Achievement[];\n  professionalCertifications: Certification[];\n\n  // Professional Network & Recognition\n  professionalNetwork: string;\n  industryAwards: Award[];\n  speakingEngagements: SpeakingEngagement[];\n  publications: Publication[];\n\n  // Skills & Expertise\n  coreSkills: string[];\n  industryKnowledge: string[];\n  leadershipExperience: LeadershipExperience[];\n}\n\nexport interface BusinessExperience {\n  id: string;\n  companyName: string;\n  role: string;\n  industry: string;\n  startDate: string;\n  endDate?: string;\n  description: string;\n  keyResponsibilities: string[];\n  achievements: string[];\n  companySize?: string;\n  revenue?: string;\n  exitOutcome?: 'IPO' | 'Acquisition' | 'Merger' | 'Still Active' | 'Closed';\n}\n\nexport interface SpeakingEngagement {\n  id: string;\n  eventName: string;\n  topic: string;\n  date: string;\n  audience: string;\n  location: string;\n  description?: string;\n}\n\nexport interface Publication {\n  id: string;\n  title: string;\n  type: 'Article' | 'Book' | 'Research Paper' | 'Blog Post' | 'Interview';\n  publication: string;\n  date: string;\n  url?: string;\n  description?: string;\n}\n\nexport interface LeadershipExperience {\n  id: string;\n  role: string;\n  organization: string;\n  startDate: string;\n  endDate?: string;\n  description: string;\n  teamSize?: number;\n  budget?: string;\n  achievements: string[];\n}\n\n// =============================================================================\n// ROLE-SPECIFIC EXTENSIONS\n// =============================================================================\n\nexport interface BusinessOwnerExtensions {\n  // Current Business Focus\n  currentBusiness: CurrentBusiness;\n  exitStrategy: ExitStrategy;\n  businessMetrics: BusinessMetrics;\n}\n\nexport interface InvestorExtensions {\n  // Investment Focus\n  investmentProfile: InvestmentProfile;\n  dealExperience: DealExperience;\n  decisionFramework: DecisionFramework;\n}\n\nexport interface CurrentBusiness {\n  businessName: string;\n  businessType: string;\n  businessModel: string;\n  industry: string;\n  yearsInBusiness: number;\n  revenueRange: string;\n  employeeCount: number;\n  growthRate?: number;\n  marketPosition: string;\n  competitiveAdvantages: string[];\n}\n\nexport interface ExitStrategy {\n  timeframe: 'immediate' | '6-months' | '1-year' | '2-years' | 'flexible';\n  urgency: 'low' | 'medium' | 'high';\n  reason: string;\n  preferredExitType: 'asset' | 'share' | 'both';\n  valuationExpectations?: string;\n  dealStructure?: string[];\n}\n\nexport interface BusinessMetrics {\n  revenue: {\n    current: string;\n    growth: number;\n    projections: string;\n  };\n  profitability: {\n    margin: number;\n    trend: 'increasing' | 'stable' | 'decreasing';\n  };\n  marketShare?: string;\n  customerMetrics?: {\n    count: number;\n    retention: number;\n    acquisition: number;\n  };\n}\n\nexport interface InvestmentProfile {\n  capacity: {\n    minAmount: number;\n    maxAmount: number;\n    preferredRange: string;\n    availableCapital: number;\n  };\n  focus: {\n    industries: string[];\n    businessStages: string[];\n    geographicRegions: string[];\n    dealSizes: string[];\n  };\n  preferences: {\n    dealStructure: string[];\n    ownershipPercentage: { min: number; max: number };\n    involvementLevel: 'passive' | 'active' | 'operational';\n    exitStrategy: string[];\n  };\n}\n\nexport interface DealExperience {\n  totalDeals: number;\n  successfulExits: number;\n  averageDealSize: number;\n  investmentPhilosophy: string;\n  riskTolerance: 'conservative' | 'moderate' | 'aggressive';\n  previousDeals: PreviousDeal[];\n}\n\nexport interface DecisionFramework {\n  process: {\n    timeline: string;\n    keyCriteria: string[];\n    decisionMakers: string[];\n    approvalProcess: string;\n  };\n  dueDiligence: {\n    capabilities: string[];\n    typicalTimeline: string;\n    externalAdvisors: string[];\n  };\n  expectations: {\n    initialResponse: string;\n    dueDiligencePeriod: string;\n    closingTimeline: string;\n  };\n}\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\nexport type ProfileSection =\n  | 'professional-background'\n  | 'business-experience'\n  | 'achievements'\n  | 'network'\n  | 'business-details'\n  | 'exit-strategy'\n  | 'investment-profile'\n  | 'decision-process';\n\nexport interface RoleBasedProfile {\n  role: UserRole;\n  commonBackground: CommonProfessionalBackground;\n  roleExtensions:\n    | BusinessOwnerExtensions\n    | InvestorExtensions\n    | (BusinessOwnerExtensions & InvestorExtensions);\n}\n\n// =============================================================================\n// HELPER FUNCTIONS\n// =============================================================================\n\nexport const getRoleConfig = (role: UserRole): RoleConfig => {\n  return ROLE_CONFIGS[role];\n};\n\nexport const getCommonSections = (role: UserRole): string[] => {\n  return ROLE_CONFIGS[role].commonSections;\n};\n\nexport const getRoleSpecificSections = (role: UserRole): ProfileSectionConfig[] => {\n  return ROLE_CONFIGS[role].sections;\n};\n\nexport const shouldShowSection = (sectionId: string, role: UserRole): boolean => {\n  const config = getRoleConfig(role);\n  return config.commonSections.includes(sectionId) || config.sections.some(s => s.id === sectionId);\n};\n\nexport const getSectionOrder = (sectionId: string, role: UserRole): number => {\n  const config = getRoleConfig(role);\n  const commonIndex = config.commonSections.indexOf(sectionId);\n  if (commonIndex !== -1) return commonIndex;\n\n  const specificSection = config.sections.find(s => s.id === sectionId);\n  return specificSection?.order || 999;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/types/timeline.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/utils/profileHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11610,11613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11610,11613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":391,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11670,11673],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11670,11673],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11965,11968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11965,11968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":398,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12038,12041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12038,12041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🛠️ Profile Helper Functions\n *\n * Utility functions for profile management and validation\n */\n\nimport { FIELD_VALIDATION_RULES, PROFILE_FIELDS } from '../constants';\nimport { Profile, UserRole } from '../types/profile.types';\n\n// =============================================================================\n// PROFILE VALIDATION\n// =============================================================================\n\n/**\n * Validate profile field\n */\nexport const validateProfileField = (\n  fieldId: string,\n  value: unknown\n): { isValid: boolean; error?: string } => {\n  const field = PROFILE_FIELDS.find(f => f.id === fieldId);\n\n  if (!field) {\n    return { isValid: false, error: 'Field not found' };\n  }\n\n  // Check required fields\n  if (field.required && (!value || value === '')) {\n    return { isValid: false, error: `${field.label} is required` };\n  }\n\n  // Skip validation if value is empty and field is not required\n  if (!value || value === '') {\n    return { isValid: true };\n  }\n\n  // Type-specific validation\n  switch (field.type) {\n    case 'email': {\n      const stringValue = String(value);\n      if (!FIELD_VALIDATION_RULES.email.pattern.test(stringValue)) {\n        return { isValid: false, error: FIELD_VALIDATION_RULES.email.message };\n      }\n      break;\n    }\n\n    case 'phone': {\n      const stringValue = String(value);\n      if (!FIELD_VALIDATION_RULES.phone.pattern.test(stringValue)) {\n        return { isValid: false, error: FIELD_VALIDATION_RULES.phone.message };\n      }\n      break;\n    }\n\n    case 'url': {\n      const stringValue = String(value);\n      if (!FIELD_VALIDATION_RULES.url.pattern.test(stringValue)) {\n        return { isValid: false, error: FIELD_VALIDATION_RULES.url.message };\n      }\n      break;\n    }\n\n    case 'text':\n    case 'textarea': {\n      const stringValue = String(value);\n      if (field.validation?.minLength && stringValue.length < field.validation.minLength) {\n        return {\n          isValid: false,\n          error: `Must be at least ${field.validation.minLength} characters long`,\n        };\n      }\n      if (field.validation?.maxLength && stringValue.length > field.validation.maxLength) {\n        return {\n          isValid: false,\n          error: `Must be no more than ${field.validation.maxLength} characters long`,\n        };\n      }\n      break;\n    }\n\n    case 'number': {\n      const numValue = Number(value);\n      if (isNaN(numValue)) {\n        return { isValid: false, error: 'Must be a valid number' };\n      }\n      if (field.validation?.min && numValue < field.validation.min) {\n        return { isValid: false, error: `Must be at least ${field.validation.min}` };\n      }\n      if (field.validation?.max && numValue > field.validation.max) {\n        return { isValid: false, error: `Must be no more than ${field.validation.max}` };\n      }\n      break;\n    }\n\n    case 'date': {\n      const dateValue = new Date(String(value));\n      if (isNaN(dateValue.getTime())) {\n        return { isValid: false, error: 'Must be a valid date' };\n      }\n      break;\n    }\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Validate entire profile\n */\nexport const validateProfile = (\n  profile: Profile\n): { isValid: boolean; errors: Record<string, string> } => {\n  const errors: Record<string, string> = {};\n  let isValid = true;\n\n  // Validate personal info\n  Object.entries(profile.personalInfo).forEach(([key, value]) => {\n    const validation = validateProfileField(key, value);\n    if (!validation.isValid && validation.error) {\n      errors[key] = validation.error;\n      isValid = false;\n    }\n  });\n\n  // Validate business owner data\n  if (profile.businessOwnerData) {\n    Object.entries(profile.businessOwnerData).forEach(([key, value]) => {\n      const validation = validateProfileField(key, value);\n      if (!validation.isValid && validation.error) {\n        errors[`businessOwnerData.${key}`] = validation.error;\n        isValid = false;\n      }\n    });\n  }\n\n  // Validate investor data\n  if (profile.investorData) {\n    Object.entries(profile.investorData).forEach(([key, value]) => {\n      const validation = validateProfileField(key, value);\n      if (!validation.isValid && validation.error) {\n        errors[`investorData.${key}`] = validation.error;\n        isValid = false;\n      }\n    });\n  }\n\n  return { isValid, errors };\n};\n\n// =============================================================================\n// PROFILE STRENGTH CALCULATION\n// =============================================================================\n\n/**\n * Calculate profile strength score\n */\nexport const calculateProfileStrength = (profile: Profile): number => {\n  let score = 0;\n  const maxScore = 100;\n\n  // Basic information completeness (20 points)\n  const basicFields = [\n    'firstName',\n    'lastName',\n    'email',\n    'phone',\n    'professionalTitle',\n    'company',\n    'industry',\n    'city',\n    'country',\n  ];\n  const basicCompleted = basicFields.filter(field => {\n    const value = profile.personalInfo[field as keyof typeof profile.personalInfo];\n    return value && value !== '';\n  }).length;\n  score += (basicCompleted / basicFields.length) * 20;\n\n  // Bio and professional summary (15 points)\n  if (profile.personalInfo.bio && profile.personalInfo.bio.length > 50) {\n    score += 10;\n  }\n  if (\n    profile.personalInfo.professionalSummary &&\n    profile.personalInfo.professionalSummary.length > 50\n  ) {\n    score += 5;\n  }\n\n  // Profile image (10 points)\n  if (profile.personalInfo.avatar || profile.personalInfo.avatarUrl) {\n    score += 10;\n  }\n\n  // Role-specific information (30 points)\n  if (profile.role === 'seller' || profile.role === 'both') {\n    if (profile.businessOwnerData) {\n      const businessFields = [\n        'businessName',\n        'businessType',\n        'yearsInBusiness',\n        'revenueRange',\n        'employeeCount',\n      ];\n      const businessCompleted = businessFields.filter(field => {\n        const value = profile.businessOwnerData![field as keyof typeof profile.businessOwnerData];\n        return value && value !== '';\n      }).length;\n      score += (businessCompleted / businessFields.length) * 15;\n    }\n  }\n\n  if (profile.role === 'buyer' || profile.role === 'both') {\n    if (profile.investorData) {\n      const investorFields = [\n        'investmentCapacityMin',\n        'investmentCapacityMax',\n        'investmentFocus',\n        'investmentExperience',\n      ];\n      const investorCompleted = investorFields.filter(field => {\n        const value = profile.investorData![field as keyof typeof profile.investorData];\n        if (typeof value === 'object' && value !== null) {\n          return Object.keys(value).length > 0;\n        }\n        if (Array.isArray(value)) {\n          return value.length > 0;\n        }\n        return (\n          value !== undefined && value !== null && (typeof value === 'string' ? value !== '' : true)\n        );\n      }).length;\n      score += (investorCompleted / investorFields.length) * 15;\n    }\n  }\n\n  // Communication preferences (10 points)\n  if (profile.sharedData.communication) {\n    const commFields = ['preferredContactMethod', 'responseTimeCommitment', 'languagePreferences'];\n    const commCompleted = commFields.filter(field => {\n      const value =\n        profile.sharedData.communication[field as keyof typeof profile.sharedData.communication];\n      return value && value !== '';\n    }).length;\n    score += (commCompleted / commFields.length) * 10;\n  }\n\n  // Privacy settings (5 points)\n  if (profile.sharedData.privacy) {\n    score += 5;\n  }\n\n  // Professional network (10 points)\n  if (profile.sharedData.professionalNetwork) {\n    const networkFields = ['linkedinUrl', 'professionalAssociations'];\n    const networkCompleted = networkFields.filter(field => {\n      const value =\n        profile.sharedData.professionalNetwork[\n          field as keyof typeof profile.sharedData.professionalNetwork\n        ];\n      return value && value !== '';\n    }).length;\n    score += (networkCompleted / networkFields.length) * 10;\n  }\n\n  return Math.min(Math.round(score), maxScore);\n};\n\n\n/**\n * Get required fields for role\n */\nexport const getRequiredFieldsForRole = (role: UserRole): string[] => {\n  const requiredFields: Record<UserRole, string[]> = {\n    buyer: [\n      'firstName',\n      'lastName',\n      'email',\n      'industry',\n      'country',\n      'investmentCapacityMin',\n      'investmentCapacityMax',\n      'investmentFocus',\n    ],\n    seller: [\n      'firstName',\n      'lastName',\n      'email',\n      'industry',\n      'country',\n      'businessName',\n      'businessType',\n      'yearsInBusiness',\n    ],\n    both: [\n      'firstName',\n      'lastName',\n      'email',\n      'industry',\n      'country',\n      'businessName',\n      'businessType',\n      'yearsInBusiness',\n      'investmentCapacityMin',\n      'investmentCapacityMax',\n      'investmentFocus',\n    ],\n    admin: ['firstName', 'lastName', 'email', 'country'],\n  };\n\n  return requiredFields[role] || [];\n};\n\n/**\n * Get field value from profile\n */\nexport const getFieldValue = (profile: Profile, fieldId: string): unknown => {\n  // Check personal info first\n  if (profile.personalInfo[fieldId as keyof typeof profile.personalInfo] !== undefined) {\n    return profile.personalInfo[fieldId as keyof typeof profile.personalInfo];\n  }\n\n  // Check business owner data\n  if (\n    profile.businessOwnerData &&\n    profile.businessOwnerData[fieldId as keyof typeof profile.businessOwnerData] !== undefined\n  ) {\n    return profile.businessOwnerData[fieldId as keyof typeof profile.businessOwnerData];\n  }\n\n  // Check investor data\n  if (\n    profile.investorData &&\n    profile.investorData[fieldId as keyof typeof profile.investorData] !== undefined\n  ) {\n    return profile.investorData[fieldId as keyof typeof profile.investorData];\n  }\n\n  // Check shared data\n  if (profile.sharedData[fieldId as keyof typeof profile.sharedData] !== undefined) {\n    return profile.sharedData[fieldId as keyof typeof profile.sharedData];\n  }\n\n  return undefined;\n};\n\n// =============================================================================\n// PROFILE FORMATTING\n// =============================================================================\n\n/**\n * Format profile data for display\n */\nexport const formatProfileData = (profile: Profile): Record<string, unknown> => {\n  return {\n    ...profile,\n    personalInfo: {\n      ...profile.personalInfo,\n      fullName: `${profile.personalInfo.firstName} ${profile.personalInfo.lastName}`,\n      displayTitle:\n        profile.personalInfo.professionalTitle || profile.personalInfo.company || 'Professional',\n    },\n    businessOwnerData: profile.businessOwnerData\n      ? {\n          ...profile.businessOwnerData,\n          displayBusinessAge: `${profile.businessOwnerData.yearsInBusiness} years`,\n          displayEmployeeCount: `${profile.businessOwnerData.employeeCount} employees`,\n        }\n      : undefined,\n    investorData: profile.investorData\n      ? {\n          ...profile.investorData,\n          displayInvestmentRange: `€${profile.investorData.investmentCapacity.minAmount.toLocaleString()} - €${profile.investorData.investmentCapacity.maxAmount.toLocaleString()}`,\n          displayExperience: `${profile.investorData.investmentExperience.yearsActive} years`,\n        }\n      : undefined,\n  };\n};\n\n/**\n * Format profile for search\n */\nexport const formatProfileForSearch = (profile: Profile): Record<string, unknown> => {\n  const formatted = formatProfileData(profile);\n\n  return {\n    id: profile.id,\n    userId: profile.userId,\n    role: profile.role,\n    fullName: (formatted.personalInfo as any).fullName,\n    displayTitle: (formatted.personalInfo as any).displayTitle,\n    industry: profile.personalInfo.industry,\n    country: profile.personalInfo.country,\n    city: profile.personalInfo.city,\n    avatar: profile.personalInfo.avatarUrl,\n    businessName: profile.businessOwnerData?.businessName,\n    investmentRange: (formatted.investorData as any)?.displayInvestmentRange,\n    experience: (formatted.investorData as any)?.displayExperience,\n    strength: profile.strength.overallScore,\n    verified: false, // Verification system removed from MVP\n    lastActiveAt: profile.lastActiveAt,\n  };\n};\n\n// =============================================================================\n// PROFILE UTILITIES\n// =============================================================================\n\n/**\n * Get profile display name\n */\nexport const getProfileDisplayName = (profile: Profile): string => {\n  const { firstName, lastName, company, professionalTitle } = profile.personalInfo;\n\n  if (firstName && lastName) {\n    return `${firstName} ${lastName}`;\n  }\n\n  if (company) {\n    return company;\n  }\n\n  if (professionalTitle) {\n    return professionalTitle;\n  }\n\n  return 'Anonymous User';\n};\n\n/**\n * Get profile role display name\n */\nexport const getProfileRoleDisplayName = (role: UserRole): string => {\n  const roleNames: Record<UserRole, string> = {\n    buyer: 'Investor',\n    seller: 'Business Owner',\n    both: 'Business Owner & Investor',\n    admin: 'Administrator',\n  };\n\n  return roleNames[role] || 'User';\n};\n\n/**\n * Get profile industry display name\n */\nexport const getProfileIndustryDisplayName = (industry: string): string => {\n  const industryNames: Record<string, string> = {\n    technology: 'Technology',\n    manufacturing: 'Manufacturing',\n    retail: 'Retail',\n    services: 'Services',\n    healthcare: 'Healthcare',\n    finance: 'Finance',\n    'real-estate': 'Real Estate',\n    construction: 'Construction',\n    'food-beverage': 'Food & Beverage',\n    education: 'Education',\n    consulting: 'Consulting',\n  };\n\n  return industryNames[industry] || industry;\n};\n\n/**\n * Get profile location display name\n */\nexport const getProfileLocationDisplayName = (profile: Profile): string => {\n  const { city, country } = profile.personalInfo;\n\n  if (city && country) {\n    return `${city}, ${country}`;\n  }\n\n  if (country) {\n    return country;\n  }\n\n  return 'Location not specified';\n};\n\n/**\n * Check if profile is public\n */\nexport const isProfilePublic = (profile: Profile): boolean => {\n  return profile.sharedData.privacy.profileVisibility === 'public';\n};\n\n/**\n * Check if profile is searchable\n */\nexport const isProfileSearchable = (profile: Profile): boolean => {\n  return profile.sharedData.privacy.searchable;\n};\n\n/**\n * Get profile visibility level\n */\nexport const getProfileVisibilityLevel = (profile: Profile): string => {\n  return profile.sharedData.privacy.profileVisibility;\n};\n\n// =============================================================================\n// PROFILE COMPARISON\n// =============================================================================\n\n/**\n * Compare profiles\n */\nexport const compareProfiles = (profile1: Profile, profile2: Profile): Record<string, unknown> => {\n  const comparison = {\n    basicInfo: {\n      profile1: {\n        name: getProfileDisplayName(profile1),\n        role: getProfileRoleDisplayName(profile1.role),\n        industry: getProfileIndustryDisplayName(profile1.personalInfo.industry || ''),\n        location: getProfileLocationDisplayName(profile1),\n      },\n      profile2: {\n        name: getProfileDisplayName(profile2),\n        role: getProfileRoleDisplayName(profile2.role),\n        industry: getProfileIndustryDisplayName(profile2.personalInfo.industry || ''),\n        location: getProfileLocationDisplayName(profile2),\n      },\n    },\n    strength: {\n      profile1: profile1.strength.overallScore,\n      profile2: profile2.strength.overallScore,\n    },\n    verification: {\n      profile1: false, // Verification system removed from MVP\n      profile2: false, // Verification system removed from MVP\n    },\n  };\n\n  return comparison;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/utils/profileStrength.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'profile' is defined but never used.","line":159,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is defined but never used.","line":159,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":494,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":494,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13680,13683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13680,13683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":526,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14839,14842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14839,14842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💪 Profile Strength Calculation\n *\n * Utilities for calculating and managing profile strength scores\n */\n\nimport { Profile } from '../types/profile.types';\n\n// =============================================================================\n// STRENGTH CALCULATION TYPES\n// =============================================================================\n\nexport interface StrengthFactors {\n  completeness: number;\n  verification: number;\n  activity: number;\n  quality: number;\n}\n\nexport interface StrengthLevel {\n  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  score: number;\n  color: string;\n  description: string;\n  benefits: string[];\n}\n\n// =============================================================================\n// STRENGTH CALCULATION\n// =============================================================================\n\n/**\n * Calculate profile strength score\n */\nexport const calculateProfileStrength = (profile: Profile): StrengthFactors => {\n  const factors: StrengthFactors = {\n    completeness: calculateCompletenessScore(profile),\n    verification: calculateVerificationScore(profile),\n    activity: calculateActivityScore(profile),\n    quality: calculateQualityScore(profile),\n  };\n\n  return factors;\n};\n\n/**\n * Calculate overall strength score\n */\nexport const calculateOverallStrength = (factors: StrengthFactors): number => {\n  const weights = {\n    completeness: 0.4,\n    verification: 0.3,\n    activity: 0.2,\n    quality: 0.1,\n  };\n\n  const weightedSum =\n    factors.completeness * weights.completeness +\n    factors.verification * weights.verification +\n    factors.activity * weights.activity +\n    factors.quality * weights.quality;\n\n  return Math.round(weightedSum);\n};\n\n/**\n * Calculate completeness score\n */\nexport const calculateCompletenessScore = (profile: Profile): number => {\n  const role = profile.role;\n  let score = 0;\n  const maxScore = 100;\n\n  // Basic information (30 points)\n  const basicFields = [\n    'firstName',\n    'lastName',\n    'email',\n    'phone',\n    'professionalTitle',\n    'company',\n    'industry',\n    'city',\n    'country',\n  ];\n  const basicCompleted = basicFields.filter(field => {\n    const value = profile.personalInfo[field as keyof typeof profile.personalInfo];\n    return value && value !== '';\n  }).length;\n  score += (basicCompleted / basicFields.length) * 30;\n\n  // Bio and professional summary (20 points)\n  if (profile.personalInfo.bio && profile.personalInfo.bio.length > 50) {\n    score += 15;\n  }\n  if (\n    profile.personalInfo.professionalSummary &&\n    profile.personalInfo.professionalSummary.length > 50\n  ) {\n    score += 5;\n  }\n\n  // Profile image (10 points)\n  if (profile.personalInfo.avatar || profile.personalInfo.avatarUrl) {\n    score += 10;\n  }\n\n  // Role-specific information (40 points)\n  if (role === 'seller' || role === 'both') {\n    if (profile.businessOwnerData) {\n      const businessFields = [\n        'businessName',\n        'businessType',\n        'yearsInBusiness',\n        'revenueRange',\n        'employeeCount',\n        'exitTimeline',\n      ];\n      const businessCompleted = businessFields.filter(field => {\n        const value = profile.businessOwnerData![field as keyof typeof profile.businessOwnerData];\n        return value && value !== '';\n      }).length;\n      score += (businessCompleted / businessFields.length) * 20;\n    }\n  }\n\n  if (role === 'buyer' || role === 'both') {\n    if (profile.investorData) {\n      const investorFields = [\n        'investmentCapacityMin',\n        'investmentCapacityMax',\n        'investmentFocus',\n        'investmentExperience',\n        'totalDeals',\n        'decisionTimeline',\n      ];\n      const investorCompleted = investorFields.filter(field => {\n        const value = profile.investorData![field as keyof typeof profile.investorData];\n        if (typeof value === 'object' && value !== null) {\n          return Object.keys(value).length > 0;\n        }\n        if (Array.isArray(value)) {\n          return value.length > 0;\n        }\n        return (\n          value !== undefined && value !== null && (typeof value === 'string' ? value !== '' : true)\n        );\n      }).length;\n      score += (investorCompleted / investorFields.length) * 20;\n    }\n  }\n\n  return Math.min(Math.round(score), maxScore);\n};\n\n/**\n * Calculate verification score\n */\nexport const calculateVerificationScore = (profile: Profile): number => {\n  let score = 0;\n  const maxScore = 100;\n\n  // Verification system removed from MVP - no points awarded\n\n  return Math.min(Math.round(score), maxScore);\n};\n\n/**\n * Calculate activity score\n */\nexport const calculateActivityScore = (profile: Profile): number => {\n  let score = 0;\n  const maxScore = 100;\n\n  const activity = profile.sharedData.platformActivity;\n\n  // Profile views (20 points)\n  if (activity.profileViews > 100) {\n    score += 20;\n  } else if (activity.profileViews > 50) {\n    score += 15;\n  } else if (activity.profileViews > 20) {\n    score += 10;\n  } else if (activity.profileViews > 0) {\n    score += 5;\n  }\n\n  // Messages sent (20 points)\n  if (activity.messagesSent > 50) {\n    score += 20;\n  } else if (activity.messagesSent > 20) {\n    score += 15;\n  } else if (activity.messagesSent > 10) {\n    score += 10;\n  } else if (activity.messagesSent > 0) {\n    score += 5;\n  }\n\n  // Inquiries sent (20 points)\n  if (activity.inquiriesSent > 20) {\n    score += 20;\n  } else if (activity.inquiriesSent > 10) {\n    score += 15;\n  } else if (activity.inquiriesSent > 5) {\n    score += 10;\n  } else if (activity.inquiriesSent > 0) {\n    score += 5;\n  }\n\n  // Transactions completed (20 points)\n  if (activity.transactionsCompleted > 5) {\n    score += 20;\n  } else if (activity.transactionsCompleted > 2) {\n    score += 15;\n  } else if (activity.transactionsCompleted > 0) {\n    score += 10;\n  }\n\n  // Response rate (20 points)\n  if (activity.averageResponseTime < 2) {\n    score += 20;\n  } else if (activity.averageResponseTime < 24) {\n    score += 15;\n  } else if (activity.averageResponseTime < 72) {\n    score += 10;\n  } else if (activity.averageResponseTime > 0) {\n    score += 5;\n  }\n\n  return Math.min(Math.round(score), maxScore);\n};\n\n/**\n * Calculate quality score\n */\nexport const calculateQualityScore = (profile: Profile): number => {\n  let score = 0;\n  const maxScore = 100;\n\n  // Bio quality (25 points)\n  if (profile.personalInfo.bio) {\n    const bioLength = profile.personalInfo.bio.length;\n    if (bioLength > 200) {\n      score += 25;\n    } else if (bioLength > 100) {\n      score += 20;\n    } else if (bioLength > 50) {\n      score += 15;\n    } else {\n      score += 10;\n    }\n  }\n\n  // Professional summary quality (20 points)\n  if (profile.personalInfo.professionalSummary) {\n    const summaryLength = profile.personalInfo.professionalSummary.length;\n    if (summaryLength > 150) {\n      score += 20;\n    } else if (summaryLength > 100) {\n      score += 15;\n    } else if (summaryLength > 50) {\n      score += 10;\n    } else {\n      score += 5;\n    }\n  }\n\n  // User rating (25 points)\n  const rating = profile.sharedData.platformActivity.userRating;\n  if (rating >= 4.5) {\n    score += 25;\n  } else if (rating >= 4.0) {\n    score += 20;\n  } else if (rating >= 3.5) {\n    score += 15;\n  } else if (rating >= 3.0) {\n    score += 10;\n  } else if (rating > 0) {\n    score += 5;\n  }\n\n  // Review count (15 points)\n  const reviewCount = profile.sharedData.platformActivity.reviewCount;\n  if (reviewCount > 20) {\n    score += 15;\n  } else if (reviewCount > 10) {\n    score += 12;\n  } else if (reviewCount > 5) {\n    score += 8;\n  } else if (reviewCount > 0) {\n    score += 5;\n  }\n\n  // Professional network (15 points)\n  if (profile.sharedData.professionalNetwork.linkedinUrl) {\n    score += 10;\n  }\n  if (profile.sharedData.professionalNetwork.professionalAssociations.length > 0) {\n    score += 5;\n  }\n\n  return Math.min(Math.round(score), maxScore);\n};\n\n// =============================================================================\n// STRENGTH LEVELS\n// =============================================================================\n\n/**\n * Get strength level based on score\n */\nexport const getStrengthLevel = (score: number): StrengthLevel => {\n  if (score >= 90) {\n    return {\n      level: 'expert',\n      score,\n      color: '#10B981', // green\n      description: 'Expert Profile',\n      benefits: [\n        'Maximum visibility in searches',\n        'Priority in recommendations',\n        'Access to premium features',\n        'Expert verification badge',\n      ],\n    };\n  } else if (score >= 75) {\n    return {\n      level: 'advanced',\n      score,\n      color: '#3B82F6', // blue\n      description: 'Advanced Profile',\n      benefits: [\n        'High visibility in searches',\n        'Enhanced credibility',\n        'Access to advanced features',\n        'Advanced verification badge',\n      ],\n    };\n  } else if (score >= 50) {\n    return {\n      level: 'intermediate',\n      score,\n      color: '#F59E0B', // amber\n      description: 'Intermediate Profile',\n      benefits: [\n        'Good visibility in searches',\n        'Standard credibility',\n        'Access to standard features',\n        'Intermediate verification badge',\n      ],\n    };\n  } else {\n    return {\n      level: 'beginner',\n      score,\n      color: '#EF4444', // red\n      description: 'Beginner Profile',\n      benefits: [\n        'Basic visibility in searches',\n        'Limited credibility',\n        'Access to basic features',\n        'Beginner verification badge',\n      ],\n    };\n  }\n};\n\n/**\n * Get strength level for profile\n */\nexport const getProfileStrengthLevel = (profile: Profile): StrengthLevel => {\n  const factors = calculateProfileStrength(profile);\n  const overallScore = calculateOverallStrength(factors);\n  return getStrengthLevel(overallScore);\n};\n\n// =============================================================================\n// STRENGTH IMPROVEMENTS\n// =============================================================================\n\n/**\n * Get strength improvement recommendations\n */\nexport const getStrengthImprovements = (profile: Profile): string[] => {\n  const factors = calculateProfileStrength(profile);\n  const improvements: string[] = [];\n\n  // Completeness improvements\n  if (factors.completeness < 70) {\n    improvements.push('Complete your profile information');\n    improvements.push('Add a professional photo');\n    improvements.push('Write a detailed bio');\n  }\n\n  // Verification improvements\n  if (factors.verification < 50) {\n    improvements.push('Verify your email address');\n    improvements.push('Verify your phone number');\n    improvements.push('Complete identity verification');\n  }\n\n  // Activity improvements\n  if (factors.activity < 50) {\n    improvements.push('Increase your platform activity');\n    improvements.push('Respond to messages quickly');\n    improvements.push('Send more inquiries');\n  }\n\n  // Quality improvements\n  if (factors.quality < 70) {\n    improvements.push('Improve your bio quality');\n    improvements.push('Add more professional details');\n    improvements.push('Build your professional network');\n  }\n\n  return improvements;\n};\n\n/**\n * Get specific field improvements\n */\nexport const getFieldImprovements = (profile: Profile): Record<string, string[]> => {\n  const improvements: Record<string, string[]> = {};\n\n  // Personal info improvements\n  if (!profile.personalInfo.avatar && !profile.personalInfo.avatarUrl) {\n    improvements.personalInfo = [...(improvements.personalInfo || []), 'Add a professional photo'];\n  }\n  if (!profile.personalInfo.bio || profile.personalInfo.bio.length < 50) {\n    improvements.personalInfo = [...(improvements.personalInfo || []), 'Write a detailed bio'];\n  }\n  if (!profile.personalInfo.professionalTitle) {\n    improvements.personalInfo = [\n      ...(improvements.personalInfo || []),\n      'Add your professional title',\n    ];\n  }\n\n  // Business owner improvements\n  if (profile.role === 'seller' || profile.role === 'both') {\n    if (profile.businessOwnerData) {\n      if (!profile.businessOwnerData.revenueRange) {\n        improvements.businessOwnerData = [\n          ...(improvements.businessOwnerData || []),\n          'Add revenue range',\n        ];\n      }\n      if (!profile.businessOwnerData.exitTimeline) {\n        improvements.businessOwnerData = [\n          ...(improvements.businessOwnerData || []),\n          'Set exit timeline',\n        ];\n      }\n      if (!profile.businessOwnerData.reasonForSelling) {\n        improvements.businessOwnerData = [\n          ...(improvements.businessOwnerData || []),\n          'Explain reason for selling',\n        ];\n      }\n    }\n  }\n\n  // Investor improvements\n  if (profile.role === 'buyer' || profile.role === 'both') {\n    if (profile.investorData) {\n      if (!profile.investorData.investmentExperience) {\n        improvements.investorData = [\n          ...(improvements.investorData || []),\n          'Add investment experience',\n        ];\n      }\n      if (!profile.investorData.investmentExperience?.totalDeals) {\n        improvements.investorData = [\n          ...(improvements.investorData || []),\n          'Add total deals completed',\n        ];\n      }\n      if (!profile.investorData.decisionProcess?.decisionTimeline) {\n        improvements.investorData = [...(improvements.investorData || []), 'Set decision timeline'];\n      }\n    }\n  }\n\n  return improvements;\n};\n\n// =============================================================================\n// STRENGTH COMPARISON\n// =============================================================================\n\n/**\n * Compare profile strength with others\n */\nexport const compareProfileStrength = (profile: Profile, comparisonProfiles: Profile[]): any => {\n  const profileStrength = calculateOverallStrength(calculateProfileStrength(profile));\n  const comparisonStrengths = comparisonProfiles.map(p =>\n    calculateOverallStrength(calculateProfileStrength(p))\n  );\n\n  const averageStrength =\n    comparisonStrengths.reduce((sum, strength) => sum + strength, 0) / comparisonStrengths.length;\n  const percentile =\n    (comparisonStrengths.filter(s => s < profileStrength).length / comparisonStrengths.length) *\n    100;\n\n  return {\n    profileStrength,\n    averageStrength: Math.round(averageStrength),\n    percentile: Math.round(percentile),\n    comparison: {\n      aboveAverage: profileStrength > averageStrength,\n      percentile: Math.round(percentile),\n      rank: comparisonStrengths.filter(s => s < profileStrength).length + 1,\n      total: comparisonStrengths.length,\n    },\n  };\n};\n\n// =============================================================================\n// STRENGTH TRACKING\n// =============================================================================\n\n/**\n * Track strength changes over time\n */\nexport const trackStrengthChanges = (currentProfile: Profile, previousProfile: Profile): any => {\n  const currentStrength = calculateOverallStrength(calculateProfileStrength(currentProfile));\n  const previousStrength = calculateOverallStrength(calculateProfileStrength(previousProfile));\n\n  const change = currentStrength - previousStrength;\n  const changePercentage = previousStrength > 0 ? (change / previousStrength) * 100 : 0;\n\n  return {\n    current: currentStrength,\n    previous: previousStrength,\n    change,\n    changePercentage: Math.round(changePercentage),\n    trend: change > 0 ? 'improving' : change < 0 ? 'declining' : 'stable',\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase1/profile/utils/profileValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[936,939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[936,939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3179,3182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3179,3182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3753,3756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3753,3756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3788,3791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3788,3791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4700,4703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4700,4703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4732,4735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4732,4735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8286,8289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8286,8289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10556,10559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10556,10559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10990,10993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10990,10993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11385,11388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11385,11388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11405,11408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11405,11408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ✅ Profile Validation Utilities\n *\n * Validation functions for profile data and form inputs\n */\n\nimport { FIELD_VALIDATION_RULES, PROFILE_FIELDS } from '../constants';\nimport { Profile, UserRole } from '../types/profile.types';\n\n// =============================================================================\n// VALIDATION TYPES\n// =============================================================================\n\nexport interface ValidationResult {\n  isValid: boolean;\n  error?: string;\n  field?: string;\n}\n\nexport interface ProfileValidationResult {\n  isValid: boolean;\n  errors: Record<string, string>;\n  warnings: Record<string, string>;\n}\n\n// =============================================================================\n// FIELD VALIDATION\n// =============================================================================\n\n/**\n * Validate individual profile field\n */\nexport const validateField = (\n  fieldId: string,\n  value: any,\n  required: boolean = false\n): ValidationResult => {\n  const field = PROFILE_FIELDS.find(f => f.id === fieldId);\n\n  if (!field) {\n    return { isValid: false, error: 'Field not found', field: fieldId };\n  }\n\n  // Check required fields\n  if (required && (!value || value === '')) {\n    return { isValid: false, error: `${field.label} is required`, field: fieldId };\n  }\n\n  // Skip validation if value is empty and field is not required\n  if (!value || value === '') {\n    return { isValid: true, field: fieldId };\n  }\n\n  // Type-specific validation\n  switch (field.type) {\n    case 'email':\n      return validateEmail(value, fieldId);\n\n    case 'phone':\n      return validatePhone(value, fieldId);\n\n    case 'url':\n      return validateUrl(value, fieldId);\n\n    case 'text':\n    case 'textarea':\n      return validateText(value, fieldId, field.validation);\n\n    case 'number':\n      return validateNumber(value, fieldId, field.validation);\n\n    case 'date':\n      return validateDate(value, fieldId);\n\n    case 'select':\n    case 'multiselect':\n      return validateSelect(value, fieldId, field.options);\n\n    default:\n      return { isValid: true, field: fieldId };\n  }\n};\n\n/**\n * Validate email field\n */\nexport const validateEmail = (value: string, fieldId: string): ValidationResult => {\n  if (!FIELD_VALIDATION_RULES.email.pattern.test(value)) {\n    return { isValid: false, error: FIELD_VALIDATION_RULES.email.message, field: fieldId };\n  }\n  return { isValid: true, field: fieldId };\n};\n\n/**\n * Validate phone field\n */\nexport const validatePhone = (value: string, fieldId: string): ValidationResult => {\n  if (!FIELD_VALIDATION_RULES.phone.pattern.test(value)) {\n    return { isValid: false, error: FIELD_VALIDATION_RULES.phone.message, field: fieldId };\n  }\n  return { isValid: true, field: fieldId };\n};\n\n/**\n * Validate URL field\n */\nexport const validateUrl = (value: string, fieldId: string): ValidationResult => {\n  if (!FIELD_VALIDATION_RULES.url.pattern.test(value)) {\n    return { isValid: false, error: FIELD_VALIDATION_RULES.url.message, field: fieldId };\n  }\n  return { isValid: true, field: fieldId };\n};\n\n/**\n * Validate text field\n */\nexport const validateText = (\n  value: string,\n  fieldId: string,\n  validation?: any\n): ValidationResult => {\n  if (validation?.minLength && value.length < validation.minLength) {\n    return {\n      isValid: false,\n      error: `Must be at least ${validation.minLength} characters long`,\n      field: fieldId,\n    };\n  }\n  if (validation?.maxLength && value.length > validation.maxLength) {\n    return {\n      isValid: false,\n      error: `Must be no more than ${validation.maxLength} characters long`,\n      field: fieldId,\n    };\n  }\n  return { isValid: true, field: fieldId };\n};\n\n/**\n * Validate number field\n */\nexport const validateNumber = (value: any, fieldId: string, validation?: any): ValidationResult => {\n  const numValue = Number(value);\n  if (isNaN(numValue)) {\n    return { isValid: false, error: 'Must be a valid number', field: fieldId };\n  }\n  if (validation?.min && numValue < validation.min) {\n    return { isValid: false, error: `Must be at least ${validation.min}`, field: fieldId };\n  }\n  if (validation?.max && numValue > validation.max) {\n    return { isValid: false, error: `Must be no more than ${validation.max}`, field: fieldId };\n  }\n  return { isValid: true, field: fieldId };\n};\n\n/**\n * Validate date field\n */\nexport const validateDate = (value: string, fieldId: string): ValidationResult => {\n  const dateValue = new Date(value);\n  if (isNaN(dateValue.getTime())) {\n    return { isValid: false, error: 'Must be a valid date', field: fieldId };\n  }\n  return { isValid: true, field: fieldId };\n};\n\n/**\n * Validate select field\n */\nexport const validateSelect = (value: any, fieldId: string, options?: any[]): ValidationResult => {\n  if (!options) {\n    return { isValid: true, field: fieldId };\n  }\n\n  const validValues = options.map(option => option.value);\n  if (Array.isArray(value)) {\n    // Multi-select validation\n    const invalidValues = value.filter(v => !validValues.includes(v));\n    if (invalidValues.length > 0) {\n      return {\n        isValid: false,\n        error: `Invalid selection: ${invalidValues.join(', ')}`,\n        field: fieldId,\n      };\n    }\n  } else {\n    // Single select validation\n    if (!validValues.includes(value)) {\n      return { isValid: false, error: 'Invalid selection', field: fieldId };\n    }\n  }\n\n  return { isValid: true, field: fieldId };\n};\n\n// =============================================================================\n// PROFILE VALIDATION\n// =============================================================================\n\n/**\n * Validate entire profile\n */\nexport const validateProfile = (profile: Profile): ProfileValidationResult => {\n  const errors: Record<string, string> = {};\n  const warnings: Record<string, string> = {};\n  let isValid = true;\n\n  // Validate personal info\n  Object.entries(profile.personalInfo).forEach(([key, value]) => {\n    const field = PROFILE_FIELDS.find(f => f.id === key);\n    const required = field?.required || false;\n    const validation = validateField(key, value, required);\n\n    if (!validation.isValid && validation.error) {\n      errors[key] = validation.error;\n      isValid = false;\n    }\n  });\n\n  // Validate business owner data\n  if (profile.businessOwnerData) {\n    Object.entries(profile.businessOwnerData).forEach(([key, value]) => {\n      const field = PROFILE_FIELDS.find(f => f.id === key);\n      const required = field?.required || false;\n      const validation = validateField(key, value, required);\n\n      if (!validation.isValid && validation.error) {\n        errors[`businessOwnerData.${key}`] = validation.error;\n        isValid = false;\n      }\n    });\n  }\n\n  // Validate investor data\n  if (profile.investorData) {\n    Object.entries(profile.investorData).forEach(([key, value]) => {\n      const field = PROFILE_FIELDS.find(f => f.id === key);\n      const required = field?.required || false;\n      const validation = validateField(key, value, required);\n\n      if (!validation.isValid && validation.error) {\n        errors[`investorData.${key}`] = validation.error;\n        isValid = false;\n      }\n    });\n  }\n\n  // Validate shared data\n  Object.entries(profile.sharedData).forEach(([key, value]) => {\n    const field = PROFILE_FIELDS.find(f => f.id === key);\n    const required = field?.required || false;\n    const validation = validateField(key, value, required);\n\n    if (!validation.isValid && validation.error) {\n      errors[`sharedData.${key}`] = validation.error;\n      isValid = false;\n    }\n  });\n\n  // Completion validation removed - no longer tracking completion percentage\n\n  if (!profile.personalInfo.avatar && !profile.personalInfo.avatarUrl) {\n    warnings.avatar = 'Adding a professional photo can increase trust and engagement.';\n  }\n\n  if (!profile.personalInfo.bio || profile.personalInfo.bio.length < 50) {\n    warnings.bio = 'A detailed bio helps others understand your background and expertise.';\n  }\n\n  return { isValid, errors, warnings };\n};\n\n// =============================================================================\n// FORM VALIDATION\n// =============================================================================\n\n/**\n * Validate form data\n */\nexport const validateFormData = (\n  formData: Record<string, any>,\n  requiredFields: string[]\n): ProfileValidationResult => {\n  const errors: Record<string, string> = {};\n  const warnings: Record<string, string> = {};\n  let isValid = true;\n\n  // Validate required fields\n  requiredFields.forEach(fieldId => {\n    const value = formData[fieldId];\n    const field = PROFILE_FIELDS.find(f => f.id === fieldId);\n    const required = field?.required || false;\n    const validation = validateField(fieldId, value, required);\n\n    if (!validation.isValid && validation.error) {\n      errors[fieldId] = validation.error;\n      isValid = false;\n    }\n  });\n\n  // Validate all form fields\n  Object.entries(formData).forEach(([key, value]) => {\n    const field = PROFILE_FIELDS.find(f => f.id === key);\n    if (field) {\n      const required = field.required || false;\n      const validation = validateField(key, value, required);\n\n      if (!validation.isValid && validation.error) {\n        errors[key] = validation.error;\n        isValid = false;\n      }\n    }\n  });\n\n  return { isValid, errors, warnings };\n};\n\n// =============================================================================\n// VALIDATION HELPERS\n// =============================================================================\n\n/**\n * Check if field is required for role\n */\nexport const isFieldRequiredForRole = (fieldId: string, role: UserRole): boolean => {\n  const requiredFields: Record<UserRole, string[]> = {\n    buyer: [\n      'firstName',\n      'lastName',\n      'email',\n      'industry',\n      'country',\n      'investmentCapacityMin',\n      'investmentCapacityMax',\n      'investmentFocus',\n    ],\n    seller: [\n      'firstName',\n      'lastName',\n      'email',\n      'industry',\n      'country',\n      'businessName',\n      'businessType',\n      'yearsInBusiness',\n    ],\n    both: [\n      'firstName',\n      'lastName',\n      'email',\n      'industry',\n      'country',\n      'businessName',\n      'businessType',\n      'yearsInBusiness',\n      'investmentCapacityMin',\n      'investmentCapacityMax',\n      'investmentFocus',\n    ],\n    admin: ['firstName', 'lastName', 'email', 'country'],\n  };\n\n  return requiredFields[role]?.includes(fieldId) || false;\n};\n\n/**\n * Get validation rules for field\n */\nexport const getValidationRules = (fieldId: string): any => {\n  const field = PROFILE_FIELDS.find(f => f.id === fieldId);\n  return field?.validation || {};\n};\n\n/**\n * Get field error message\n */\nexport const getFieldErrorMessage = (fieldId: string, error: string): string => {\n  const field = PROFILE_FIELDS.find(f => f.id === fieldId);\n  const fieldName = field?.label || fieldId;\n  return `${fieldName}: ${error}`;\n};\n\n/**\n * Check if value is empty\n */\nexport const isEmpty = (value: any): boolean => {\n  if (value === null || value === undefined) {\n    return true;\n  }\n  if (typeof value === 'string') {\n    return value.trim() === '';\n  }\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  if (typeof value === 'object') {\n    return Object.keys(value).length === 0;\n  }\n  return false;\n};\n\n/**\n * Sanitize input value\n */\nexport const sanitizeInput = (value: any, type: string): any => {\n  if (typeof value === 'string') {\n    // Remove leading/trailing whitespace\n    value = value.trim();\n\n    // Type-specific sanitization\n    switch (type) {\n      case 'email':\n        return value.toLowerCase();\n      case 'phone':\n        return value.replace(/[^\\d+\\-\\s()]/g, '');\n      case 'url':\n        return value.toLowerCase();\n      default:\n        return value;\n    }\n  }\n\n  return value;\n};\n\n// =============================================================================\n// VALIDATION CONSTANTS\n// =============================================================================\n\nexport const VALIDATION_MESSAGES = {\n  REQUIRED: 'This field is required',\n  INVALID_EMAIL: 'Please enter a valid email address',\n  INVALID_PHONE: 'Please enter a valid phone number',\n  INVALID_URL: 'Please enter a valid URL',\n  INVALID_NUMBER: 'Please enter a valid number',\n  INVALID_DATE: 'Please enter a valid date',\n  MIN_LENGTH: 'Must be at least {min} characters long',\n  MAX_LENGTH: 'Must be no more than {max} characters long',\n  MIN_VALUE: 'Must be at least {min}',\n  MAX_VALUE: 'Must be no more than {max}',\n  INVALID_SELECTION: 'Please select a valid option',\n};\n\nexport const VALIDATION_PATTERNS = {\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  PHONE: /^\\+?[1-9]\\d{1,14}$/,\n  URL: /^https?:\\/\\/.+/,\n  ALPHANUMERIC: /^[a-zA-Z0-9]+$/,\n  ALPHABETIC: /^[a-zA-Z\\s]+$/,\n  NUMERIC: /^\\d+$/,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase2/analytics/LiquidationComparison.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_showCalculator' is assigned a value but never used.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showCalculator' is assigned a value but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'_setShowCalculator' is assigned a value but never used.","line":37,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowCalculator' is assigned a value but never used.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":72,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { authService } from '@/shared/services/auth';\nimport { User as UserType } from '@/shared/types';\nimport { Card, CardBody, CardHeader, Progress } from '@heroui/react';\nimport { AlertTriangle, ArrowRight, Calculator, CheckCircle, Clock, Target, X } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Navigation and sidebar are provided by DashboardLayout\nimport FinancialDisclaimer from '@/shared/components/disclaimers/FinancialDisclaimer';\n\ninterface LiquidationAnalysis {\n  strategicSaleValue: number; // Current valuation from business overview\n  liquidationValue: number; // Asset disposal estimate\n  valueLoss: number; // Difference in euros\n  valueLossPercentage: number; // Percentage destroyed\n  employeeSeveranceCost: number; // Severance obligations\n  netLiquidationProceeds: number; // After all costs\n  dailyValueLoss: number; // Value lost per day of delay\n  timeToLiquidate: number; // Months to complete liquidation\n}\n\ninterface SuccessStory {\n  businessName: string;\n  sector: string;\n  strategicSale: number;\n  potentialLiquidation: number;\n  timeframe: string;\n  keyFactor: string;\n}\n\nconst LiquidationComparison = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<UserType | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [liquidationData, setLiquidationData] = useState<LiquidationAnalysis | null>(null);\n  const [daysSinceValuation, setDaysSinceValuation] = useState(0);\n  const [_showCalculator, _setShowCalculator] = useState(false);\n\n  useEffect(() => {\n    const initializePage = async () => {\n      setIsLoading(true);\n      try {\n        const authResult = await authService.checkAuthentication();\n        if (authResult.isAuthenticated && authResult.user) {\n          setUser(authResult.user);\n\n          // TODO: Replace with actual API calls\n          // Mock data for Café Delice Brussels\n          const mockAnalysis = calculateLiquidationAnalysis({\n            currentValuation: 850000, // €850K from valuation\n            assetValue: 320000, // €320K in tangible assets\n            inventory: 25000, // €25K inventory\n            equipment: 180000, // €180K equipment\n            employeeCount: 8, // 8 employees\n            averageSalary: 35000, // €35K average salary\n            monthsOfSeverance: 3, // 3 months severance\n            liquidationCosts: 45000, // Legal, auction, administrative costs\n            sector: 'Food & Beverage',\n          });\n\n          setLiquidationData(mockAnalysis);\n\n          // Calculate days since last valuation (mock)\n          const valuationDate = new Date('2024-01-14');\n          const today = new Date();\n          const diffTime = Math.abs(today.getTime() - valuationDate.getTime());\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          setDaysSinceValuation(diffDays);\n        } else {\n          navigate('/');\n        }\n      } catch (error) {\n        navigate('/');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializePage();\n  }, [navigate]);\n\n  const calculateLiquidationAnalysis = (data: {\n    currentValuation: number;\n    assetValue: number;\n    inventory: number;\n    equipment: number;\n    employeeCount: number;\n    averageSalary: number;\n    monthsOfSeverance: number;\n    liquidationCosts: number;\n    sector: string;\n  }): LiquidationAnalysis => {\n    // Liquidation typically recovers 15-25% of assets due to fire sale conditions\n    const assetRecoveryRate = 0.2; // 20% recovery\n    const inventoryRecoveryRate = 0.1; // 10% for perishable/restaurant inventory\n    const equipmentRecoveryRate = 0.25; // 25% for used restaurant equipment\n\n    const assetRecovery = data.assetValue * assetRecoveryRate;\n    const inventoryRecovery = data.inventory * inventoryRecoveryRate;\n    const equipmentRecovery = data.equipment * equipmentRecoveryRate;\n\n    const totalAssetRecovery = assetRecovery + inventoryRecovery + equipmentRecovery;\n\n    // Calculate severance costs\n    const severanceCost = data.employeeCount * (data.averageSalary / 12) * data.monthsOfSeverance;\n\n    // Net liquidation proceeds after costs\n    const netProceeds = totalAssetRecovery - severanceCost - data.liquidationCosts;\n\n    // Value loss calculations\n    const valueLoss = data.currentValuation - Math.max(0, netProceeds);\n    const valueLossPercentage = (valueLoss / data.currentValuation) * 100;\n\n    // Daily value loss (assumes declining business value over time)\n    const dailyValueLoss = data.currentValuation * 0.002; // 0.2% per day\n\n    return {\n      strategicSaleValue: data.currentValuation,\n      liquidationValue: Math.max(0, netProceeds),\n      valueLoss,\n      valueLossPercentage,\n      employeeSeveranceCost: severanceCost,\n      netLiquidationProceeds: Math.max(0, netProceeds),\n      dailyValueLoss,\n      timeToLiquidate: 6, // 6 months typical liquidation time\n    };\n  };\n\n  const successStories: SuccessStory[] = [\n    {\n      businessName: 'Café Milano',\n      sector: 'Italian Restaurant',\n      strategicSale: 1200000,\n      potentialLiquidation: 180000,\n      timeframe: '4 months',\n      keyFactor: 'Loyal customer base and prime location',\n    },\n    {\n      businessName: 'TechStart Solutions',\n      sector: 'Software Development',\n      strategicSale: 2800000,\n      potentialLiquidation: 320000,\n      timeframe: '6 months',\n      keyFactor: 'Intellectual property and recurring revenue',\n    },\n    {\n      businessName: 'Green Gardens Nursery',\n      sector: 'Garden Center',\n      strategicSale: 650000,\n      potentialLiquidation: 95000,\n      timeframe: '8 months',\n      keyFactor: 'Established supplier relationships and customer loyalty',\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-primary-500 border-t-transparent mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading liquidation analysis...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || !liquidationData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">Please log in to access liquidation analysis.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const cumulativeValueLoss = liquidationData.dailyValueLoss * daysSinceValuation;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation and sidebar provided by DashboardLayout */}\n      <div className=\"max-w-7xl mx-auto px-8 py-8 space-y-8\">\n        {/* Header with Urgency */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Liquidation vs Strategic Sale</h1>\n          </div>\n          <p className=\"text-gray-600 text-lg\">\n            See the shocking difference between strategic sale and liquidation value\n          </p>\n        </div>\n\n        {/* Critical Disclaimer */}\n        <FinancialDisclaimer type=\"liquidation\" variant=\"banner\" className=\"mb-8\" />\n\n        {/* Shocking Value Comparison */}\n        <Card className=\"border border-gray-200 shadow-sm\">\n          <CardBody className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-center text-gray-900 mb-8\">\n              Your Business Value Comparison\n            </h2>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {/* Strategic Sale */}\n              <div className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n                <div className=\"text-center\">\n                  <CheckCircle className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Strategic Sale</h3>\n                  <div className=\"text-5xl font-bold text-gray-900 mb-4\">\n                    €{liquidationData.strategicSaleValue.toLocaleString()}\n                  </div>\n                  <ul className=\"text-sm text-gray-700 space-y-2 text-left\">\n                    <li>✅ Full business value realized</li>\n                    <li>✅ Buyer values customer relationships</li>\n                    <li>✅ Equipment sold at fair market value</li>\n                    <li>✅ Goodwill and brand value included</li>\n                    <li>✅ Orderly transition process</li>\n                    <li>✅ Employees often retained</li>\n                  </ul>\n                </div>\n              </div>\n\n              {/* Liquidation */}\n              <div className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n                <div className=\"text-center\">\n                  <X className=\"w-12 h-12 text-red-600 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Forced Liquidation</h3>\n                  <div className=\"text-5xl font-bold text-gray-900 mb-4\">\n                    €{liquidationData.netLiquidationProceeds.toLocaleString()}\n                  </div>\n                  <ul className=\"text-sm text-gray-700 space-y-2 text-left\">\n                    <li>❌ Fire sale prices (15-25% of value)</li>\n                    <li>❌ Customer relationships lost</li>\n                    <li>❌ Equipment sold at auction prices</li>\n                    <li>❌ No goodwill or intangible value</li>\n                    <li>❌ Rushed, distressed sale process</li>\n                    <li>❌ All employees terminated</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            {/* Dramatic Loss Visualization */}\n            <div className=\"mt-8 p-6 bg-white rounded-xl border border-gray-200\">\n              <div className=\"text-center\">\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Value Destruction</h3>\n                <div className=\"flex items-center justify-center space-x-4 mb-4\">\n                  <span className=\"text-4xl font-bold text-red-600\">\n                    -€{liquidationData.valueLoss.toLocaleString()}\n                  </span>\n                  <span className=\"text-2xl text-gray-600\">\n                    ({liquidationData.valueLossPercentage.toFixed(0)}% lost!)\n                  </span>\n                </div>\n                <Progress\n                  value={liquidationData.valueLossPercentage}\n                  color=\"danger\"\n                  className=\"w-full max-w-lg mx-auto\"\n                  size=\"lg\"\n                />\n                <p className=\"text-gray-600 mt-4\">\n                  Liquidation destroys{' '}\n                  <strong>{liquidationData.valueLossPercentage.toFixed(0)}%</strong> of your\n                  business value\n                </p>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Daily Value Loss Counter */}\n        <Card className=\"border border-gray-200 shadow-sm\">\n          <CardBody className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <Clock className=\"w-6 h-6 text-gray-600\" />\n                  <h3 className=\"text-xl font-bold text-gray-900\">Time is Money</h3>\n                </div>\n                <p className=\"text-gray-700 mb-4\">\n                  Every day without strategic planning costs your business value\n                </p>\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <div className=\"text-sm text-gray-600\">Daily Value Loss</div>\n                    <div className=\"text-2xl font-bold text-gray-900\">\n                      €{liquidationData.dailyValueLoss.toLocaleString()}/day\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-gray-600\">\n                      Lost Since Last Valuation ({daysSinceValuation} days ago)\n                    </div>\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      €{Math.round(cumulativeValueLoss).toLocaleString()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"text-center\">\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onPress={() => navigate('/business/valuation')}\n                  className=\"px-8\"\n                  endContent={<ArrowRight className=\"w-5 h-5\" />}\n                >\n                  Update Your Valuation\n                </Button>\n                <p className=\"text-xs text-gray-500 mt-2\">Start strategic planning today</p>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Liquidation Cost Breakdown */}\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Cost Breakdown */}\n          <Card className=\"border border-gray-200\">\n            <CardHeader>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Liquidation Cost Breakdown</h3>\n            </CardHeader>\n            <CardBody>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <span className=\"text-gray-700\">Asset Recovery (20% of value)</span>\n                  <span className=\"font-semibold text-green-600\">\n                    +€{(liquidationData.strategicSaleValue * 0.4 * 0.2).toLocaleString()}\n                  </span>\n                </div>\n\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <span className=\"text-gray-700\">Employee Severance</span>\n                  <span className=\"font-semibold text-red-600\">\n                    -€{liquidationData.employeeSeveranceCost.toLocaleString()}\n                  </span>\n                </div>\n\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <span className=\"text-gray-700\">Legal & Administrative Costs</span>\n                  <span className=\"font-semibold text-red-600\">-€45,000</span>\n                </div>\n\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <span className=\"text-gray-700\">Auction & Marketing Fees</span>\n                  <span className=\"font-semibold text-red-600\">-€15,000</span>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <div className=\"flex justify-between items-center text-lg font-bold\">\n                    <span>Net Liquidation Proceeds</span>\n                    <span className=\"text-red-600\">\n                      €{liquidationData.netLiquidationProceeds.toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n\n          {/* Timeline Comparison */}\n          <Card className=\"border border-gray-200\">\n            <CardHeader>\n              <h3 className=\"text-xl font-semibold text-gray-900\">Process Comparison</h3>\n            </CardHeader>\n            <CardBody>\n              <div className=\"space-y-6\">\n                <div>\n                  <h4 className=\"font-medium text-green-700 mb-3\">Strategic Sale Process</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Preparation & Marketing</span>\n                      <span className=\"text-green-600\">2-3 months</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Due Diligence</span>\n                      <span className=\"text-green-600\">1-2 months</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Negotiation & Closing</span>\n                      <span className=\"text-green-600\">1 month</span>\n                    </div>\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>Total Timeline</span>\n                      <span className=\"text-green-600\">4-6 months</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium text-red-700 mb-3\">Liquidation Process</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Legal Proceedings</span>\n                      <span className=\"text-red-600\">1-2 months</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Asset Inventory & Appraisal</span>\n                      <span className=\"text-red-600\">2-3 months</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Auction & Asset Sales</span>\n                      <span className=\"text-red-600\">2-3 months</span>\n                    </div>\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>Total Timeline</span>\n                      <span className=\"text-red-600\">5-8 months</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n        </div>\n\n        {/* Success Stories */}\n        <Card className=\"border border-gray-200\">\n          <CardHeader>\n            <h3 className=\"text-xl font-semibold text-gray-900\">\n              Success Stories: Strategic Sales vs Potential Liquidations\n            </h3>\n          </CardHeader>\n          <CardBody>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {successStories.map((story, index) => (\n                <div key={index} className=\"p-4 border border-gray-200 rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">{story.businessName}</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">{story.sector}</p>\n\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-green-700\">Strategic Sale:</span>\n                      <span className=\"font-semibold text-green-700\">\n                        €{story.strategicSale.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-red-700\">Liquidation Est:</span>\n                      <span className=\"font-semibold text-red-700\">\n                        €{story.potentialLiquidation.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between border-t pt-2\">\n                      <span className=\"text-sm font-medium\">Value Saved:</span>\n                      <span className=\"font-bold text-green-600\">\n                        €{(story.strategicSale - story.potentialLiquidation).toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-gray-600\">\n                    <p>\n                      <strong>Timeline:</strong> {story.timeframe}\n                    </p>\n                    <p>\n                      <strong>Key Factor:</strong> {story.keyFactor}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Call to Action */}\n        <Card className=\"border border-gray-200 shadow-sm\">\n          <CardBody className=\"p-8 text-center\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Don't Let Your Life's Work Be Sold for Scrap\n            </h3>\n            <p className=\"text-gray-700 text-lg mb-6 max-w-3xl mx-auto\">\n              Every successful business deserves a strategic exit. Start planning today to preserve\n              and maximize the value you've built over years of hard work.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <Button\n                variant=\"primary\"\n                size=\"lg\"\n                onPress={() => navigate('/business/valuation')}\n                className=\"px-8\"\n                endContent={<Calculator className=\"w-5 h-5\" />}\n              >\n                Get Strategic Valuation\n              </Button>\n              <Button\n                variant=\"tertiary\"\n                size=\"lg\"\n                onPress={() => navigate('/business/listings')}\n                className=\"px-8\"\n                endContent={<Target className=\"w-5 h-5\" />}\n              >\n                Plan Your Exit Strategy\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default LiquidationComparison;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase2/analytics/SolvencyIntelligence.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_showLoanCalculator' is assigned a value but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showLoanCalculator' is assigned a value but never used.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":79,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { authService } from '@/shared/services/auth';\nimport { User as UserType } from '@/shared/types';\nimport { Card, CardBody, CardHeader } from '@heroui/react';\nimport {\n  BarChart3,\n  Bell,\n  Calculator,\n  CheckCircle,\n  Info,\n  Target,\n  TrendingUp,\n  Wallet,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Navigation and sidebar are provided by DashboardLayout\nimport FinancialDisclaimer from '@/shared/components/disclaimers/FinancialDisclaimer';\n\ninterface SolvencyMetrics {\n  currentRatio: number; // Current Assets / Current Liabilities\n  quickRatio: number; // (Current Assets - Inventory) / Current Liabilities\n  debtToEquity: number; // Total Debt / Total Equity\n  workingCapital: number; // Current Assets - Current Liabilities (in €)\n  cashFlow: number; // Monthly cash flow trend (in €)\n  solvencyScore: number; // 0-100 calculated score\n  bankLoanEligibility: 'excellent' | 'good' | 'fair' | 'poor';\n  industryRanking: number; // Percentile vs industry (0-100)\n}\n\ninterface BusinessFinancials {\n  currentAssets: number;\n  currentLiabilities: number;\n  inventory: number;\n  totalDebt: number;\n  totalEquity: number;\n  monthlyCashFlow: number;\n  sector: string;\n}\n\nconst SolvencyIntelligence = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<UserType | null>(null);\n  // Loading states removed for smooth UX\n  const [solvencyData, setSolvencyData] = useState<SolvencyMetrics | null>(null);\n  const [maxLoanAmount, setMaxLoanAmount] = useState<number>(0);\n  const [_showLoanCalculator, __setShowLoanCalculator] = useState(false);\n\n  useEffect(() => {\n    const initializePage = async () => {\n      // Instant data loading - no loading state\n      try {\n        const authResult = await authService.checkAuthentication();\n        if (authResult.isAuthenticated && authResult.user) {\n          setUser(authResult.user);\n\n          // TODO: Replace with actual API calls\n          // Mock financial data for Café Delice Brussels\n          const mockFinancials: BusinessFinancials = {\n            currentAssets: 185000, // €185K in current assets\n            currentLiabilities: 95000, // €95K in current liabilities\n            inventory: 25000, // €25K inventory\n            totalDebt: 120000, // €120K total debt\n            totalEquity: 280000, // €280K equity\n            monthlyCashFlow: 12500, // €12.5K monthly positive cash flow\n            sector: 'Food & Beverage',\n          };\n\n          // Calculate solvency metrics\n          const metrics = calculateSolvencyMetrics(mockFinancials);\n          setSolvencyData(metrics);\n\n          // Calculate max loan amount based on solvency\n          const loanAmount = calculateMaxLoanAmount(metrics, mockFinancials);\n          setMaxLoanAmount(loanAmount);\n        } else {\n          navigate('/');\n        }\n      } catch (error) {\n        navigate('/');\n      } finally {\n        // No loading state to manage\n      }\n    };\n\n    initializePage();\n  }, [navigate]);\n\n  const calculateSolvencyMetrics = (financials: BusinessFinancials): SolvencyMetrics => {\n    const currentRatio = financials.currentAssets / financials.currentLiabilities;\n    const quickRatio =\n      (financials.currentAssets - financials.inventory) / financials.currentLiabilities;\n    const debtToEquity = financials.totalDebt / financials.totalEquity;\n    const workingCapital = financials.currentAssets - financials.currentLiabilities;\n\n    // Calculate overall solvency score (0-100)\n    let score = 0;\n\n    // Current ratio scoring (25 points max)\n    if (currentRatio >= 2.0) score += 25;\n    else if (currentRatio >= 1.5) score += 20;\n    else if (currentRatio >= 1.2) score += 15;\n    else if (currentRatio >= 1.0) score += 10;\n\n    // Quick ratio scoring (25 points max)\n    if (quickRatio >= 1.5) score += 25;\n    else if (quickRatio >= 1.0) score += 20;\n    else if (quickRatio >= 0.8) score += 15;\n    else if (quickRatio >= 0.6) score += 10;\n\n    // Debt-to-equity scoring (25 points max) - lower is better\n    if (debtToEquity <= 0.3) score += 25;\n    else if (debtToEquity <= 0.4) score += 20;\n    else if (debtToEquity <= 0.6) score += 15;\n    else if (debtToEquity <= 1.0) score += 10;\n\n    // Cash flow scoring (25 points max)\n    if (financials.monthlyCashFlow > 10000) score += 25;\n    else if (financials.monthlyCashFlow > 5000) score += 20;\n    else if (financials.monthlyCashFlow > 1000) score += 15;\n    else if (financials.monthlyCashFlow > 0) score += 10;\n\n    // Bank loan eligibility\n    let eligibility: 'excellent' | 'good' | 'fair' | 'poor' = 'poor';\n    if (score >= 80) eligibility = 'excellent';\n    else if (score >= 65) eligibility = 'good';\n    else if (score >= 50) eligibility = 'fair';\n\n    // Mock industry ranking (better than X% of businesses)\n    const industryRanking = Math.min(95, score + Math.random() * 10);\n\n    return {\n      currentRatio,\n      quickRatio,\n      debtToEquity,\n      workingCapital,\n      cashFlow: financials.monthlyCashFlow,\n      solvencyScore: score,\n      bankLoanEligibility: eligibility,\n      industryRanking,\n    };\n  };\n\n  const calculateMaxLoanAmount = (\n    metrics: SolvencyMetrics,\n    financials: BusinessFinancials\n  ): number => {\n    // Conservative loan calculation based on working capital and cash flow\n    const workingCapitalLoan = metrics.workingCapital * 0.7; // 70% of working capital\n    const cashFlowLoan = financials.monthlyCashFlow * 24; // 24 months of cash flow\n\n    // Take the lower of the two for conservative estimate\n    const baseLoan = Math.min(workingCapitalLoan, cashFlowLoan);\n\n    // Adjust based on solvency score\n    const multiplier = metrics.solvencyScore / 100;\n    return Math.round(baseLoan * multiplier);\n  };\n\n  const getSolvencyColor = (score: number) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 65) return 'text-gray-900';\n    if (score >= 50) return 'text-gray-700';\n    return 'text-red-600';\n  };\n\n  const getSolvencyBgColor = (score: number) => {\n    if (score >= 80) return 'bg-gray-50 border-gray-300';\n    if (score >= 65) return 'bg-gray-50 border-gray-300';\n    if (score >= 50) return 'bg-gray-50 border-gray-300';\n    return 'bg-gray-50 border-gray-300';\n  };\n\n  const isInSweetSpot = (ratio: number, type: 'current' | 'quick' | 'debt') => {\n    if (type === 'current') return ratio >= 1.2 && ratio <= 2.5;\n    if (type === 'quick') return ratio >= 1.0 && ratio <= 2.0;\n    if (type === 'debt') return ratio >= 0.25 && ratio <= 0.45;\n    return false;\n  };\n\n  // Loading screens removed for smooth user experience\n\n  if (!user || !solvencyData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">Please log in to access solvency intelligence.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation and sidebar provided by DashboardLayout */}\n      <div className=\"max-w-7xl mx-auto px-8 py-8 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Solvency Intelligence Hub</h1>\n          <p className=\"text-gray-600\">\n            Monitor your business financial health and bank loan eligibility\n          </p>\n        </div>\n\n        {/* Financial Analysis Disclaimer */}\n        <FinancialDisclaimer\n          type=\"solvency\"\n          variant=\"banner\"\n          isCollapsible={true}\n          className=\"mb-6\"\n        />\n\n        {/* Overall Score Card */}\n        <Card className={`border-2 ${getSolvencyBgColor(solvencyData.solvencyScore)}`}>\n          <CardBody className=\"p-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Overall Solvency Score</h2>\n                <div className=\"flex items-center space-x-4\">\n                  <span\n                    className={`text-5xl font-bold ${getSolvencyColor(solvencyData.solvencyScore)}`}\n                  >\n                    {solvencyData.solvencyScore}/100\n                  </span>\n                  <div>\n                    <span\n                      className={`px-3 py-1 text-sm font-semibold rounded-full bg-gray-100 ${\n                        solvencyData.bankLoanEligibility === 'excellent'\n                          ? 'text-green-600'\n                          : solvencyData.bankLoanEligibility === 'good'\n                            ? 'text-gray-900'\n                            : solvencyData.bankLoanEligibility === 'fair'\n                              ? 'text-gray-700'\n                              : 'text-red-600'\n                      }`}\n                    >\n                      {solvencyData.bankLoanEligibility.toUpperCase()} RATING\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"text-right\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <BarChart3 className=\"w-5 h-5 text-gray-600\" />\n                  <span className=\"text-lg font-semibold text-gray-900\">\n                    Better than {Math.round(solvencyData.industryRanking)}% of{' '}\n                    {user.business_type || 'Food & Beverage'} businesses\n                  </span>\n                </div>\n                <div className=\"w-64\">\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-gray-900 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${Math.min(solvencyData.industryRanking, 100)}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Key Ratios Grid */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {/* Current Ratio */}\n          <Card className=\"border border-gray-200 shadow-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between w-full\">\n                <h3 className=\"font-semibold text-gray-900\">Current Ratio</h3>\n                {isInSweetSpot(solvencyData.currentRatio, 'current') && (\n                  <Target className=\"w-5 h-5 text-green-600\" />\n                )}\n              </div>\n            </CardHeader>\n            <CardBody>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {solvencyData.currentRatio.toFixed(2)}\n                </div>\n                <div className=\"text-sm text-gray-600 mb-4\">\n                  Current Assets ÷ Current Liabilities\n                </div>\n                {isInSweetSpot(solvencyData.currentRatio, 'current') && (\n                  <div className=\"bg-gray-100 text-green-600 text-xs font-medium px-3 py-1 rounded-full\">\n                    🎯 Bank Loan Sweet Spot (1.2-2.5)\n                  </div>\n                )}\n                <div className=\"mt-3 text-xs text-gray-500\">\n                  Working Capital: €{solvencyData.workingCapital.toLocaleString()}\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n\n          {/* Quick Ratio */}\n          <Card className=\"border border-gray-200 shadow-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between w-full\">\n                <h3 className=\"font-semibold text-gray-900\">Quick Ratio</h3>\n                {isInSweetSpot(solvencyData.quickRatio, 'quick') && (\n                  <Target className=\"w-5 h-5 text-green-600\" />\n                )}\n              </div>\n            </CardHeader>\n            <CardBody>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {solvencyData.quickRatio.toFixed(2)}\n                </div>\n                <div className=\"text-sm text-gray-600 mb-4\">\n                  (Current Assets - Inventory) ÷ Current Liabilities\n                </div>\n                {isInSweetSpot(solvencyData.quickRatio, 'quick') && (\n                  <div className=\"bg-gray-100 text-green-600 text-xs font-medium px-3 py-1 rounded-full\">\n                    🎯 Bank Loan Sweet Spot (1.0-2.0)\n                  </div>\n                )}\n              </div>\n            </CardBody>\n          </Card>\n\n          {/* Debt-to-Equity */}\n          <Card className=\"border border-gray-200 shadow-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between w-full\">\n                <h3 className=\"font-semibold text-gray-900\">Debt-to-Equity</h3>\n                {isInSweetSpot(solvencyData.debtToEquity, 'debt') && (\n                  <Target className=\"w-5 h-5 text-green-600\" />\n                )}\n              </div>\n            </CardHeader>\n            <CardBody>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {(solvencyData.debtToEquity * 100).toFixed(0)}%\n                </div>\n                <div className=\"text-sm text-gray-600 mb-4\">Total Debt ÷ Total Equity</div>\n                {isInSweetSpot(solvencyData.debtToEquity, 'debt') && (\n                  <div className=\"bg-gray-100 text-green-600 text-xs font-medium px-3 py-1 rounded-full\">\n                    🎯 Healthy Range (25-45%)\n                  </div>\n                )}\n              </div>\n            </CardBody>\n          </Card>\n        </div>\n\n        {/* Bank Loan Eligibility */}\n        <Card className=\"border border-gray-200 shadow-sm\">\n          <CardBody className=\"p-8\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <Wallet className=\"w-8 h-8 text-gray-600\" />\n                  <h3 className=\"text-2xl font-bold text-gray-900\">Bank Loan Calculator</h3>\n                </div>\n                <p className=\"text-gray-700 mb-6\">\n                  Based on your current solvency ratios, you can qualify for:\n                </p>\n                <div className=\"bg-gray-50 rounded-xl p-6 border border-gray-200\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold text-gray-900 mb-2\">\n                      €{maxLoanAmount.toLocaleString()}\n                    </div>\n                    <div className=\"text-gray-600 font-medium mb-4\">Maximum Loan Amount</div>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Interest Rate Range:</span>\n                        <div className=\"font-semibold\">\n                          {solvencyData.bankLoanEligibility === 'excellent'\n                            ? '2.5% - 4.5%'\n                            : solvencyData.bankLoanEligibility === 'good'\n                              ? '4.5% - 6.5%'\n                              : solvencyData.bankLoanEligibility === 'fair'\n                                ? '6.5% - 9.5%'\n                                : '9.5%+'}\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Approval Probability:</span>\n                        <div\n                          className={`font-semibold ${\n                            solvencyData.bankLoanEligibility === 'excellent'\n                              ? 'text-green-600'\n                              : 'text-gray-900'\n                          }`}\n                        >\n                          {solvencyData.bankLoanEligibility === 'excellent'\n                            ? '85-95%'\n                            : solvencyData.bankLoanEligibility === 'good'\n                              ? '70-85%'\n                              : solvencyData.bankLoanEligibility === 'fair'\n                                ? '45-70%'\n                                : '15-45%'}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"ml-8\">\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onPress={() => __setShowLoanCalculator(true)}\n                  className=\"px-8\"\n                  startContent={<Calculator className=\"w-5 h-5\" />}\n                >\n                  Get Pre-Qualification\n                </Button>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Monthly Alerts */}\n        <Card className=\"border border-gray-200 shadow-sm\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Bell className=\"w-6 h-6 text-gray-600\" />\n              <h3 className=\"text-xl font-semibold text-gray-900\">Smart Alerts & Monitoring</h3>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-900\">Recent Alerts</h4>\n\n                <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      Current ratio improved to {solvencyData.currentRatio.toFixed(2)}\n                    </p>\n                    <p className=\"text-xs text-green-600\">\n                      Your ratio is now in the bank loan sweet spot! 2 days ago\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <TrendingUp className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      Cash flow increased by €2,400 last month\n                    </p>\n                    <p className=\"text-xs text-green-600\">\n                      This improves your loan eligibility • 1 week ago\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                  <Info className=\"w-5 h-5 text-gray-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      Industry benchmark update available\n                    </p>\n                    <p className=\"text-xs text-gray-600\">\n                      See how you compare to other Food & Beverage businesses • 3 days ago\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-900\">Improvement Recommendations</h4>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h5 className=\"font-medium text-gray-900 mb-2\">Quick Wins</h5>\n                  <ul className=\"text-sm text-gray-700 space-y-1\">\n                    <li>• Reduce inventory by €5K to improve quick ratio</li>\n                    <li>• Pay down €10K of current debt to boost score</li>\n                    <li>• Maintain current cash flow trend</li>\n                  </ul>\n                </div>\n\n                <div className=\"p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                  <h5 className=\"font-medium text-gray-900 mb-2\">Strategic Actions</h5>\n                  <ul className=\"text-sm text-gray-700 space-y-1\">\n                    <li>• Consider equipment financing vs cash purchase</li>\n                    <li>• Optimize payment terms with suppliers</li>\n                    <li>• Schedule quarterly solvency reviews</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default SolvencyIntelligence;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase2/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/features/phase2/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/FAQ/FAQAccordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/FAQ/FAQBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/FAQ/FAQCategory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/FAQ/FAQItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/FAQ/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/FAQ/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/business/BusinessProfileCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/business/ValuationCard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💰 Valuation Card Component\n * Location: src/shared/components/business/ValuationCard.tsx\n * Purpose: Minimalistic valuation report card for listing valuations\n *\n * Features:\n * - Compact design with valuation range visualization\n * - Key metrics display\n * - Action buttons\n * - Professional styling\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Card, CardBody, CardHeader } from '@heroui/react';\nimport { Calendar, Download, Eye, Rocket, Share2 } from 'lucide-react';\nimport React from 'react';\n\ninterface ValuationCardProps {\n  id: string;\n  date: string;\n  businessValue: number;\n  method: string;\n  confidence: 'high' | 'medium' | 'low';\n  lowRange: number;\n  highRange: number;\n  revenueMultiple: number;\n  ebitdaMultiple: number;\n  industryAverage: number;\n  monthsValid: number;\n  onView?: () => void;\n  onDownload?: () => void;\n  onShare?: () => void;\n  onUpdate?: () => void;\n  onCreateListing?: () => void;\n  className?: string;\n}\n\nconst ValuationCard: React.FC<ValuationCardProps> = ({\n  id,\n  date,\n  businessValue,\n  method,\n  confidence,\n  lowRange,\n  highRange,\n  revenueMultiple,\n  ebitdaMultiple,\n  industryAverage,\n  monthsValid,\n  onView,\n  onDownload,\n  onShare,\n  onUpdate,\n  onCreateListing,\n  className = '',\n}) => {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'EUR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getConfidenceColor = (confidence: string) => {\n    switch (confidence) {\n      case 'high':\n        return 'bg-green-100 text-green-700';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'low':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  // Calculate the position of the market value on the range slider\n  const rangeWidth = highRange - lowRange;\n  const marketPosition = ((businessValue - lowRange) / rangeWidth) * 100;\n  const sliderPosition = Math.max(0, Math.min(100, marketPosition));\n\n  return (\n    <Card\n      className={`border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 ${className}`}\n    >\n      <CardHeader className=\"flex p-3 z-10 w-full justify-start items-center shrink-0 overflow-inherit color-inherit subpixel-antialiased rounded-t-large pb-3\">\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center\">\n              <Calendar className=\"w-4 h-4 text-primary-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">Business Valuation</h3>\n              <p className=\"text-sm text-gray-500\">{formatDate(date)}</p>\n            </div>\n          </div>\n          <div\n            className={`px-2 py-1 rounded-full text-xs font-medium ${getConfidenceColor(confidence)}`}\n          >\n            {confidence.toUpperCase()}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardBody className=\"relative flex w-full p-3 flex-auto flex-col place-content-inherit align-items-inherit h-auto break-words text-left overflow-y-auto subpixel-antialiased pt-0\">\n        {/* Valuation Range Visualization */}\n        <div className=\"text-center mb-6 p-4 border border-gray-100 rounded-lg\">\n          <div className=\"text-3xl font-semibold text-gray-900 mb-2\">\n            {formatCurrency(businessValue)}\n          </div>\n          <p className=\"text-sm text-gray-600 mb-4\">Estimated Market Value</p>\n\n          {/* Range Slider */}\n          <div className=\"max-w-sm mx-auto\">\n            <div className=\"flex justify-between text-xs text-gray-500 mb-2\">\n              <span>Conservative</span>\n              <span>Market</span>\n              <span>Optimistic</span>\n            </div>\n            <div className=\"relative h-2 bg-gray-200 rounded-full\">\n              <div\n                className=\"absolute h-full bg-gray-900 rounded-full\"\n                style={{ width: '60%', left: '20%' }}\n              ></div>\n              <div\n                className=\"absolute w-3 h-3 bg-gray-900 rounded-full\"\n                style={{ left: `calc(${sliderPosition}% - 6px)`, top: '-2px' }}\n              ></div>\n            </div>\n            <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n              <span>{formatCurrency(lowRange)}</span>\n              <span>{formatCurrency(highRange)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-3 gap-3 mb-4\">\n          <div className=\"text-center p-3 border border-gray-100 rounded-lg\">\n            <div className=\"text-lg font-semibold text-gray-900 mb-1\">{revenueMultiple}x</div>\n            <div className=\"text-xs text-gray-500\">Revenue</div>\n          </div>\n          <div className=\"text-center p-3 border border-gray-100 rounded-lg\">\n            <div className=\"text-lg font-semibold text-gray-900 mb-1\">{ebitdaMultiple}x</div>\n            <div className=\"text-xs text-gray-500\">EBITDA</div>\n          </div>\n          <div className=\"text-center p-3 border border-gray-100 rounded-lg\">\n            <div className=\"text-lg font-semibold text-gray-900 mb-1\">{industryAverage}x</div>\n            <div className=\"text-xs text-gray-500\">Industry</div>\n          </div>\n        </div>\n\n        {/* Method and Validity */}\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-gray-600 mb-1\">\n            <span className=\"font-medium\">Method:</span> {method}\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            <span className=\"font-medium\">Valid for:</span> {monthsValid} months\n          </p>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n          <div className=\"flex items-center space-x-2\">\n            {onView && (\n              <Button\n                variant=\"tertiary\"\n                size=\"sm\"\n                startContent={<Eye className=\"w-4 h-4\" />}\n                onPress={onView}\n              >\n                View\n              </Button>\n            )}\n            {onDownload && (\n              <Button\n                variant=\"tertiary\"\n                size=\"sm\"\n                startContent={<Download className=\"w-4 h-4\" />}\n                onPress={onDownload}\n              >\n                Download\n              </Button>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {onCreateListing && (\n              <Button\n                variant=\"primary\"\n                size=\"sm\"\n                startContent={<Rocket className=\"w-4 h-4\" />}\n                onPress={onCreateListing}\n              >\n                Create Listing\n              </Button>\n            )}\n            {onUpdate && (\n              <Button variant=\"tertiary\" size=\"sm\" onPress={onUpdate}>\n                Update\n              </Button>\n            )}\n            {onShare && (\n              <Button variant=\"tertiary\" size=\"sm\" isIconOnly onPress={onShare}>\n                <Share2 className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ValuationCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/DangerButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/HostButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/LinkButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/PrimaryButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/SecondaryButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/SubtleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/SuccessButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/SupportiveButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/TertiaryButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buttons/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buyer/SaveSearchModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'searchData' is defined but never used.","line":59,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3982,4027],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport {\n  Card,\n  CardBody,\n  Chip,\n  Divider,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Select,\n  SelectItem,\n  Switch,\n} from '@heroui/react';\nimport {\n  AlertCircle,\n  Bell,\n  Bookmark,\n  Building2,\n  Calendar,\n  CheckCircle,\n  Euro,\n  Filter,\n  Mail,\n  MapPin,\n  Search,\n  Users,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface SearchCriteria {\n  searchQuery?: string;\n  sector?: string;\n  country?: string;\n  region?: string;\n  priceRange?: [number, number];\n  revenueRange?: [number, number];\n  employeeRange?: [number, number];\n  businessAge?: [number, number];\n  requiresNda?: boolean;\n  anonymous?: boolean;\n  featured?: boolean;\n}\n\ninterface SavedSearch {\n  id?: string;\n  name: string;\n  criteria: SearchCriteria;\n  alert_frequency: 'immediate' | 'daily' | 'weekly' | 'off';\n  email_enabled: boolean;\n  is_active: boolean;\n}\n\ninterface SaveSearchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (searchData: SavedSearch) => Promise<void>;\n  initialCriteria?: SearchCriteria;\n  existingSearch?: SavedSearch;\n  mode: 'create' | 'edit';\n}\n\nconst SaveSearchModal: React.FC<SaveSearchModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  initialCriteria,\n  existingSearch,\n  mode,\n}) => {\n  const [searchData, setSearchData] = useState<SavedSearch>({\n    name: '',\n    criteria: initialCriteria || {},\n    alert_frequency: 'daily',\n    email_enabled: true,\n    is_active: true,\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [step, setStep] = useState<'criteria' | 'settings'>('criteria');\n\n  useEffect(() => {\n    if (existingSearch) {\n      setSearchData(existingSearch);\n    } else if (initialCriteria) {\n      setSearchData(prev => ({\n        ...prev,\n        criteria: initialCriteria,\n        name: generateSearchName(initialCriteria),\n      }));\n    }\n  }, [existingSearch, initialCriteria]);\n\n  const generateSearchName = (criteria: SearchCriteria): string => {\n    const parts = [];\n\n    if (criteria.sector) parts.push(criteria.sector);\n    if (criteria.country) parts.push(criteria.country);\n    if (criteria.region) parts.push(criteria.region);\n\n    if (criteria.priceRange) {\n      const [min, max] = criteria.priceRange;\n      if (min > 0 || max < 50000000) {\n        parts.push(`€${(min / 1000000).toFixed(1)}M-${(max / 1000000).toFixed(1)}M`);\n      }\n    }\n\n    return parts.length > 0 ? parts.join(' ') : 'New Search Alert';\n  };\n\n  const formatPrice = (value: number) => {\n    if (value >= 1000000) {\n      return `€${(value / 1000000).toFixed(1)}M`;\n    }\n    return `€${(value / 1000).toFixed(0)}K`;\n  };\n\n  const formatCriteriaText = (criteria: SearchCriteria): string => {\n    const parts = [];\n\n    if (criteria.searchQuery) parts.push(`\"${criteria.searchQuery}\"`);\n    if (criteria.sector) parts.push(criteria.sector);\n    if (criteria.country) parts.push(criteria.country);\n    if (criteria.region) parts.push(criteria.region);\n\n    if (criteria.priceRange) {\n      const [min, max] = criteria.priceRange;\n      parts.push(`${formatPrice(min)} - ${formatPrice(max)}`);\n    }\n\n    if (criteria.employeeRange) {\n      const [min, max] = criteria.employeeRange;\n      parts.push(`${min}-${max} employees`);\n    }\n\n    if (criteria.businessAge) {\n      const [min, max] = criteria.businessAge;\n      parts.push(`${min}-${max} years old`);\n    }\n\n    const filters = [];\n    if (criteria.requiresNda) filters.push('NDA Required');\n    if (criteria.anonymous) filters.push('Anonymous');\n    if (criteria.featured) filters.push('Featured');\n\n    return parts.concat(filters).join(' • ') || 'All businesses';\n  };\n\n  const validateForm = (): boolean => {\n    return searchData.name.trim().length > 0;\n  };\n\n  const handleSave = async () => {\n    if (!validateForm()) return;\n\n    setIsSubmitting(true);\n    try {\n      await onSave(searchData);\n      onClose();\n    } catch (error) {\n      console.error('Error saving search:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    setStep('criteria');\n    setSearchData({\n      name: '',\n      criteria: initialCriteria || {},\n      alert_frequency: 'daily',\n      email_enabled: true,\n      is_active: true,\n    });\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose} size=\"2xl\" scrollBehavior=\"inside\">\n      <ModalContent>\n        <ModalHeader className=\"flex flex-col gap-1\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-purple-100\">\n              <Bookmark className=\"w-5 h-5 text-purple-600\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-gray-900\">\n                {mode === 'create' ? 'Save Search Alert' : 'Edit Search Alert'}\n              </h2>\n              <p className=\"text-sm text-gray-600\">\n                Get notified when new businesses match your criteria\n              </p>\n            </div>\n          </div>\n        </ModalHeader>\n\n        <ModalBody className=\"pb-6\">\n          {step === 'criteria' && (\n            <div className=\"space-y-6\">\n              {/* Search Name */}\n              <div>\n                <Input\n                  label=\"Search Name\"\n                  placeholder=\"e.g., Tech Companies Belgium €1-5M\"\n                  value={searchData.name}\n                  onChange={e => setSearchData(prev => ({ ...prev, name: e.target.value }))}\n                  startContent={<Search className=\"w-4 h-4 text-gray-400\" />}\n                  variant=\"flat\"\n                  isRequired\n                />\n              </div>\n\n              {/* Criteria Summary */}\n              <Card className=\"border border-gray-200\">\n                <CardBody className=\"p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"p-2 rounded-lg bg-blue-100\">\n                      <Filter className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Search Criteria</h4>\n                      <p className=\"text-gray-600 text-sm mb-3\">\n                        {formatCriteriaText(searchData.criteria)}\n                      </p>\n\n                      {/* Criteria Details */}\n                      <div className=\"flex flex-wrap gap-2\">\n                        {searchData.criteria.searchQuery && (\n                          <Chip size=\"sm\" variant=\"flat\" color=\"primary\">\n                            <Search className=\"w-3 h-3 mr-1\" />\"{searchData.criteria.searchQuery}\"\n                          </Chip>\n                        )}\n                        {searchData.criteria.sector && (\n                          <Chip size=\"sm\" variant=\"flat\">\n                            <Building2 className=\"w-3 h-3 mr-1\" />\n                            {searchData.criteria.sector}\n                          </Chip>\n                        )}\n                        {searchData.criteria.country && (\n                          <Chip size=\"sm\" variant=\"flat\">\n                            <MapPin className=\"w-3 h-3 mr-1\" />\n                            {searchData.criteria.country}\n                          </Chip>\n                        )}\n                        {searchData.criteria.priceRange && (\n                          <Chip size=\"sm\" variant=\"flat\">\n                            <Euro className=\"w-3 h-3 mr-1\" />\n                            {formatPrice(searchData.criteria.priceRange[0])} -{' '}\n                            {formatPrice(searchData.criteria.priceRange[1])}\n                          </Chip>\n                        )}\n                        {searchData.criteria.employeeRange && (\n                          <Chip size=\"sm\" variant=\"flat\">\n                            <Users className=\"w-3 h-3 mr-1\" />\n                            {searchData.criteria.employeeRange[0]}-\n                            {searchData.criteria.employeeRange[1]} employees\n                          </Chip>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm text-gray-600\">\n                  You can modify these criteria by going back to the search page\n                </p>\n                <Button\n                  variant=\"primary\"\n                  onPress={() => setStep('settings')}\n                  endContent={<Bell className=\"w-4 h-4\" />}\n                >\n                  Configure Alerts\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {step === 'settings' && (\n            <div className=\"space-y-6\">\n              {/* Alert Frequency */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Alert Frequency\n                </label>\n                <Select\n                  placeholder=\"Choose frequency\"\n                  selectedKeys={[searchData.alert_frequency]}\n                  onSelectionChange={keys => {\n                    const frequency = Array.from(keys)[0] as SavedSearch['alert_frequency'];\n                    setSearchData(prev => ({ ...prev, alert_frequency: frequency }));\n                  }}\n                  variant=\"flat\"\n                >\n                  <SelectItem key=\"immediate\" startContent={<Bell className=\"w-4 h-4\" />}>\n                    <div>\n                      <div className=\"font-medium\">Immediate</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Get notified as soon as new matches are found\n                      </div>\n                    </div>\n                  </SelectItem>\n                  <SelectItem key=\"daily\" startContent={<Calendar className=\"w-4 h-4\" />}>\n                    <div>\n                      <div className=\"font-medium\">Daily</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Receive a daily summary of new matches\n                      </div>\n                    </div>\n                  </SelectItem>\n                  <SelectItem key=\"weekly\" startContent={<Calendar className=\"w-4 h-4\" />}>\n                    <div>\n                      <div className=\"font-medium\">Weekly</div>\n                      <div className=\"text-xs text-gray-500\">Get a weekly digest every Monday</div>\n                    </div>\n                  </SelectItem>\n                  <SelectItem key=\"off\" startContent={<Bell className=\"w-4 h-4 opacity-50\" />}>\n                    <div>\n                      <div className=\"font-medium\">No Alerts</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Save search but don't send notifications\n                      </div>\n                    </div>\n                  </SelectItem>\n                </Select>\n              </div>\n\n              <Divider />\n\n              {/* Email Notifications */}\n              <div className=\"flex items-start justify-between gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <Mail className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium text-gray-900\">Email Notifications</span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Send email notifications when new businesses match your criteria\n                  </p>\n                </div>\n                <Switch\n                  isSelected={searchData.email_enabled}\n                  onValueChange={value =>\n                    setSearchData(prev => ({ ...prev, email_enabled: value }))\n                  }\n                  isDisabled={searchData.alert_frequency === 'off'}\n                />\n              </div>\n\n              {/* Search Status */}\n              <div className=\"flex items-start justify-between gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <CheckCircle className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium text-gray-900\">Active Search</span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Enable this search to start receiving notifications\n                  </p>\n                </div>\n                <Switch\n                  isSelected={searchData.is_active}\n                  onValueChange={value => setSearchData(prev => ({ ...prev, is_active: value }))}\n                />\n              </div>\n\n              {/* Alert Preview */}\n              {searchData.is_active && searchData.alert_frequency !== 'off' && (\n                <Card className=\"border border-blue-200 bg-blue-50\">\n                  <CardBody className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <AlertCircle className=\"w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5\" />\n                      <div>\n                        <h4 className=\"font-medium text-blue-900 mb-1\">Alert Preview</h4>\n                        <p className=\"text-sm text-blue-700\">\n                          You'll receive {searchData.alert_frequency} notifications\n                          {searchData.email_enabled ? ' via email' : ' in the app'} when businesses\n                          matching \"{searchData.name}\" criteria are found.\n                        </p>\n                      </div>\n                    </div>\n                  </CardBody>\n                </Card>\n              )}\n            </div>\n          )}\n        </ModalBody>\n\n        <ModalFooter>\n          <div className=\"flex items-center justify-between w-full\">\n            {step === 'settings' && (\n              <Button variant=\"secondary\" onPress={() => setStep('criteria')}>\n                Back to Details\n              </Button>\n            )}\n\n            <div className=\"flex gap-2 ml-auto\">\n              <Button variant=\"secondary\" onPress={handleClose}>\n                Cancel\n              </Button>\n\n              {step === 'criteria' ? (\n                <Button\n                  variant=\"primary\"\n                  onPress={() => setStep('settings')}\n                  isDisabled={!validateForm()}\n                >\n                  Next: Configure Alerts\n                </Button>\n              ) : (\n                <Button\n                  variant=\"primary\"\n                  onPress={handleSave}\n                  isLoading={isSubmitting}\n                  startContent={<Bookmark className=\"w-4 h-4\" />}\n                >\n                  {mode === 'create' ? 'Save Search Alert' : 'Update Search Alert'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default SaveSearchModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/buyer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/cards/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/cards/EmptyStateCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/cards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/disclaimers/FinancialDisclaimer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/disclaimers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/DueDiligenceChecklist.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChecklist'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadChecklist, processId]","fix":{"range":[1240,1251],"text":"[loadChecklist, processId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Checklist\n * Location: src/shared/components/due-diligence/DueDiligenceChecklist.tsx\n * Purpose: Interactive checklist for due diligence items\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { CustomCheckbox } from '@/shared/components/forms';\nimport {\n  DueDiligenceChecklist as DueDiligenceChecklistType,\n  DueDiligenceItem,\n} from '@/shared/types/due-diligence';\nimport { logger } from '@/shared/utils/logger';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  Building2,\n  CheckCircle,\n  ChevronDown,\n  ChevronRight,\n  Clock,\n  DollarSign,\n  FileText,\n  Scale,\n  Shield,\n  TrendingUp,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface DueDiligenceChecklistProps {\n  processId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n}\n\nconst DueDiligenceChecklist: React.FC<DueDiligenceChecklistProps> = ({ processId, userRole }) => {\n  const [checklist, setChecklist] = useState<DueDiligenceChecklistType | null>(null);\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadChecklist();\n  }, [processId]);\n\n  const loadChecklist = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await dueDiligenceService.getChecklist(processId);\n      // setChecklist(response.data);\n\n      // Mock data for now\n      const mockChecklist: DueDiligenceChecklistType = {\n        id: 'checklist-1',\n        processId,\n        categories: [\n          {\n            id: 'financial',\n            name: 'Financial Due Diligence',\n            description: 'Review financial statements, cash flow, and financial health',\n            icon: 'DollarSign',\n            color: 'text-green-600',\n            progress: 80,\n            priority: 'high',\n            status: 'in_progress',\n            items: [\n              {\n                id: 'fin-1',\n                categoryId: 'financial',\n                title: 'Audited Financial Statements',\n                description: 'Review audited financial statements for past 3-5 years',\n                status: 'completed',\n                assignedTo: 'buyer-1',\n                dueDate: '2024-01-20',\n                completedDate: '2024-01-18',\n                priority: 'high',\n                documents: ['doc-1', 'doc-2'],\n                comments: [],\n                verificationRequired: true,\n                verificationStatus: 'verified',\n              },\n              {\n                id: 'fin-2',\n                categoryId: 'financial',\n                title: 'Cash Flow Analysis',\n                description: 'Analyze cash flow statements and projections',\n                status: 'in_progress',\n                assignedTo: 'buyer-1',\n                dueDate: '2024-01-25',\n                priority: 'high',\n                documents: ['doc-3'],\n                comments: [],\n                verificationRequired: true,\n                verificationStatus: 'pending',\n              },\n              {\n                id: 'fin-3',\n                categoryId: 'financial',\n                title: 'Debt Schedule Review',\n                description: 'Review all outstanding debts and loan agreements',\n                status: 'pending',\n                assignedTo: 'buyer-1',\n                dueDate: '2024-01-30',\n                priority: 'medium',\n                documents: [],\n                comments: [],\n                verificationRequired: false,\n              },\n            ],\n          },\n          {\n            id: 'legal',\n            name: 'Legal Due Diligence',\n            description: 'Review legal documents, contracts, and compliance',\n            icon: 'Scale',\n            color: 'text-blue-600',\n            progress: 60,\n            priority: 'high',\n            status: 'in_progress',\n            items: [\n              {\n                id: 'leg-1',\n                categoryId: 'legal',\n                title: 'Corporate Structure Review',\n                description: 'Review corporate structure and ownership documents',\n                status: 'completed',\n                assignedTo: 'advisor-1',\n                dueDate: '2024-01-22',\n                completedDate: '2024-01-20',\n                priority: 'high',\n                documents: ['doc-4'],\n                comments: [],\n                verificationRequired: true,\n                verificationStatus: 'verified',\n              },\n              {\n                id: 'leg-2',\n                categoryId: 'legal',\n                title: 'Material Contracts',\n                description: 'Review all material contracts and agreements',\n                status: 'in_progress',\n                assignedTo: 'advisor-1',\n                dueDate: '2024-01-28',\n                priority: 'high',\n                documents: ['doc-5', 'doc-6'],\n                comments: [],\n                verificationRequired: true,\n                verificationStatus: 'pending',\n              },\n            ],\n          },\n          {\n            id: 'operational',\n            name: 'Operational Due Diligence',\n            description: 'Review business operations, processes, and key personnel',\n            icon: 'Building2',\n            color: 'text-purple-600',\n            progress: 45,\n            priority: 'medium',\n            status: 'in_progress',\n            items: [\n              {\n                id: 'ops-1',\n                categoryId: 'operational',\n                title: 'Organization Chart Review',\n                description: 'Review organizational structure and key personnel',\n                status: 'pending',\n                assignedTo: 'buyer-1',\n                dueDate: '2024-02-05',\n                priority: 'medium',\n                documents: [],\n                comments: [],\n                verificationRequired: false,\n              },\n            ],\n          },\n        ],\n        overallProgress: 65,\n        lastUpdated: '2024-01-20',\n      };\n\n      setChecklist(mockChecklist);\n    } catch (error) {\n      logger.error('Error loading checklist:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleCategory = (categoryId: string) => {\n    setExpandedCategories(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(categoryId)) {\n        newSet.delete(categoryId);\n      } else {\n        newSet.add(categoryId);\n      }\n      return newSet;\n    });\n  };\n\n  const updateItemStatus = async (itemId: string, status: DueDiligenceItem['status']) => {\n    try {\n      // TODO: Replace with actual API call\n      // await dueDiligenceService.updateItemStatus(processId, itemId, status);\n\n      // Update local state\n      setChecklist(prev => {\n        if (!prev) return prev;\n\n        const updatedCategories = prev.categories.map(category => ({\n          ...category,\n          items: category.items.map(item => (item.id === itemId ? { ...item, status } : item)),\n        }));\n\n        // Recalculate category progress\n        const updatedCategoriesWithProgress = updatedCategories.map(category => {\n          const completedItems = category.items.filter(item => item.status === 'completed').length;\n          const totalItems = category.items.length;\n          const progress = totalItems > 0 ? (completedItems / totalItems) * 100 : 0;\n\n          return { ...category, progress };\n        });\n\n        // Recalculate overall progress\n        const totalCompletedItems = updatedCategoriesWithProgress.reduce(\n          (sum, category) =>\n            sum + category.items.filter(item => item.status === 'completed').length,\n          0\n        );\n        const totalItems = updatedCategoriesWithProgress.reduce(\n          (sum, category) => sum + category.items.length,\n          0\n        );\n        const overallProgress = totalItems > 0 ? (totalCompletedItems / totalItems) * 100 : 0;\n\n        return {\n          ...prev,\n          categories: updatedCategoriesWithProgress,\n          overallProgress,\n        };\n      });\n    } catch (error) {\n      logger.error('Error loading checklist:', error);\n    }\n  };\n\n  const getStatusIcon = (status: DueDiligenceItem['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'in_progress':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      case 'blocked':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: DueDiligenceItem['status']) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'blocked':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'danger';\n      case 'medium':\n        return 'warning';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const getCategoryIcon = (iconName: string) => {\n    switch (iconName) {\n      case 'DollarSign':\n        return <DollarSign className=\"w-5 h-5\" />;\n      case 'Scale':\n        return <Scale className=\"w-5 h-5\" />;\n      case 'Building2':\n        return <Building2 className=\"w-5 h-5\" />;\n      case 'TrendingUp':\n        return <TrendingUp className=\"w-5 h-5\" />;\n      case 'FileText':\n        return <FileText className=\"w-5 h-5\" />;\n      case 'Users':\n        return <Users className=\"w-5 h-5\" />;\n      default:\n        return <Shield className=\"w-5 h-5\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading checklist...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!checklist) {\n    return (\n      <div className=\"text-center py-8\">\n        <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No checklist found</h3>\n        <p className=\"text-gray-600\">Unable to load the due diligence checklist.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overall Progress */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <h3 className=\"text-lg font-semibold\">Overall Progress</h3>\n            <Chip color=\"primary\" variant=\"flat\">\n              {checklist.overallProgress.toFixed(0)}% Complete\n            </Chip>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <Progress value={checklist.overallProgress} className=\"mb-4\" color=\"primary\" size=\"lg\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">\n                {checklist.categories.reduce(\n                  (sum, cat) => sum + cat.items.filter(item => item.status === 'completed').length,\n                  0\n                )}\n              </div>\n              <div className=\"text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">\n                {checklist.categories.reduce(\n                  (sum, cat) =>\n                    sum + cat.items.filter(item => item.status === 'in_progress').length,\n                  0\n                )}\n              </div>\n              <div className=\"text-gray-600\">In Progress</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">\n                {checklist.categories.reduce(\n                  (sum, cat) => sum + cat.items.filter(item => item.status === 'pending').length,\n                  0\n                )}\n              </div>\n              <div className=\"text-gray-600\">Pending</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Categories */}\n      <div className=\"space-y-4\">\n        {checklist.categories.map(category => {\n          const isExpanded = expandedCategories.has(category.id);\n          const completedItems = category.items.filter(item => item.status === 'completed').length;\n          const totalItems = category.items.length;\n\n          return (\n            <Card key={category.id} className=\"border border-gray-200\">\n              <CardBody className=\"p-0\">\n                {/* Category Header */}\n                <button\n                  onClick={() => toggleCategory(category.id)}\n                  className=\"w-full p-6 text-left hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-200 focus:ring-inset\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className={`p-3 bg-gray-100 rounded-xl flex-shrink-0`}>\n                        {getCategoryIcon(category.icon)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900\">{category.name}</h3>\n                          <Chip\n                            size=\"sm\"\n                            color={getPriorityColor(category.priority)}\n                            variant=\"flat\"\n                          >\n                            {category.priority}\n                          </Chip>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-2\">{category.description}</p>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"text-sm text-gray-500\">\n                            {completedItems}/{totalItems} items completed\n                          </div>\n                          <div className=\"flex-1 max-w-32\">\n                            <Progress value={category.progress} size=\"sm\" color=\"primary\" />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex-shrink-0 ml-4\">\n                      {isExpanded ? (\n                        <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                      ) : (\n                        <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </button>\n\n                {/* Category Items */}\n                {isExpanded && (\n                  <div className=\"px-6 pb-6 border-t border-gray-100\">\n                    <div className=\"pt-4 space-y-3\">\n                      {category.items.map(item => (\n                        <div\n                          key={item.id}\n                          className=\"flex items-start gap-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n                        >\n                          <div className=\"flex-shrink-0 mt-1\">{getStatusIcon(item.status)}</div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div>\n                                <h4 className=\"font-medium text-gray-900 mb-1\">{item.title}</h4>\n                                <p className=\"text-sm text-gray-600 mb-2\">{item.description}</p>\n                                <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                                  <span>Due: {new Date(item.dueDate).toLocaleDateString()}</span>\n                                  <span>•</span>\n                                  <span>Assigned to: {item.assignedTo}</span>\n                                  {item.verificationRequired && (\n                                    <>\n                                      <span>•</span>\n                                      <span>\n                                        Verification: {item.verificationStatus || 'pending'}\n                                      </span>\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Chip\n                                  size=\"sm\"\n                                  color={getPriorityColor(item.priority)}\n                                  variant=\"flat\"\n                                >\n                                  {item.priority}\n                                </Chip>\n                                <Chip size=\"sm\" color={getStatusColor(item.status)} variant=\"flat\">\n                                  {item.status.replace('_', ' ')}\n                                </Chip>\n                              </div>\n                            </div>\n\n                            {/* Action Buttons */}\n                            {userRole === 'buyer' && item.assignedTo === 'buyer-1' && (\n                              <div className=\"flex items-center gap-2\">\n                                <CustomCheckbox\n                                  label=\"Mark as completed\"\n                                  checked={item.status === 'completed'}\n                                  onChange={() => {\n                                    updateItemStatus(\n                                      item.id,\n                                      item.status === 'completed' ? 'pending' : 'completed'\n                                    );\n                                  }}\n                                  name={`item-${item.id}`}\n                                />\n                                {item.status === 'completed' && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"secondary\"\n                                    onPress={() => updateItemStatus(item.id, 'in_progress')}\n                                  >\n                                    Reopen\n                                  </Button>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DueDiligenceChecklist;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/DueDiligenceDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboard'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboard, processId]","fix":{"range":[1398,1409],"text":"[loadDashboard, processId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4431,4480],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Dashboard\n * Location: src/shared/components/due-diligence/DueDiligenceDashboard.tsx\n * Purpose: Main dashboard for managing due diligence process\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { DueDiligenceDashboard as DueDiligenceDashboardType } from '@/shared/types/due-diligence';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  AlertTriangle,\n  Calendar,\n  CheckCircle,\n  Clock,\n  FileText,\n  MessageSquare,\n  Shield,\n  TrendingUp,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport DueDiligenceChecklist from './DueDiligenceChecklist';\nimport DueDiligenceDocuments from './DueDiligenceDocuments';\nimport DueDiligenceMessages from './DueDiligenceMessages';\nimport DueDiligenceReports from './DueDiligenceReports';\nimport DueDiligenceTimeline from './DueDiligenceTimeline';\n\ninterface DueDiligenceDashboardProps {\n  processId: string;\n  listingId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n}\n\nconst DueDiligenceDashboard: React.FC<DueDiligenceDashboardProps> = ({\n  processId,\n  listingId,\n  userRole,\n}) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [dashboard, setDashboard] = useState<DueDiligenceDashboardType | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadDashboard();\n  }, [processId]);\n\n  const loadDashboard = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await dueDiligenceService.getDashboard(processId);\n      // setDashboard(response.data);\n\n      // Mock data for now\n      const mockDashboard: DueDiligenceDashboardType = {\n        process: {\n          id: processId,\n          listingId,\n          buyerId: 'buyer-1',\n          sellerId: 'seller-1',\n          status: 'in_progress',\n          startDate: '2024-01-15',\n          estimatedCompletionDate: '2024-03-15',\n          progress: 65,\n          checklist: {\n            id: 'checklist-1',\n            processId,\n            categories: [],\n            overallProgress: 65,\n            lastUpdated: '2024-01-20',\n          },\n          documents: [],\n          communications: [],\n          reports: [],\n          team: [],\n        },\n        recentActivity: [\n          {\n            id: '1',\n            type: 'document_uploaded',\n            description: 'Financial statements uploaded',\n            timestamp: '2024-01-20T10:30:00Z',\n            userId: 'seller-1',\n            userName: 'John Seller',\n          },\n          {\n            id: '2',\n            type: 'item_completed',\n            description: 'Financial review completed',\n            timestamp: '2024-01-19T15:45:00Z',\n            userId: 'buyer-1',\n            userName: 'Jane Buyer',\n          },\n        ],\n        upcomingDeadlines: [\n          {\n            id: '1',\n            title: 'Legal document review',\n            dueDate: '2024-01-25',\n            type: 'item',\n            priority: 'high',\n            isOverdue: false,\n            assignedTo: 'buyer-1',\n          },\n          {\n            id: '2',\n            title: 'Operational assessment',\n            dueDate: '2024-01-30',\n            type: 'item',\n            priority: 'medium',\n            isOverdue: false,\n            assignedTo: 'advisor-1',\n          },\n        ],\n        teamStatus: [\n          {\n            userId: 'buyer-1',\n            name: 'Jane Buyer',\n            role: 'Buyer',\n            isOnline: true,\n            lastActive: '2024-01-20T14:30:00Z',\n            pendingTasks: 3,\n            completedTasks: 8,\n          },\n          {\n            userId: 'seller-1',\n            name: 'John Seller',\n            role: 'Seller',\n            isOnline: false,\n            lastActive: '2024-01-20T12:15:00Z',\n            pendingTasks: 2,\n            completedTasks: 5,\n          },\n        ],\n        progressMetrics: {\n          overallProgress: 65,\n          categoryProgress: {\n            financial: 80,\n            legal: 60,\n            operational: 45,\n            commercial: 70,\n            technical: 30,\n            hr: 50,\n          },\n          itemsCompleted: 13,\n          itemsTotal: 20,\n          documentsUploaded: 8,\n          documentsPending: 3,\n          daysRemaining: 25,\n          onTrack: true,\n        },\n      };\n\n      setDashboard(mockDashboard);\n    } catch (error) {\n      console.error('Error loading dashboard:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'cancelled':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'in_progress':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'cancelled':\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading due diligence dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboard) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Unable to load dashboard</h3>\n        <p className=\"text-gray-600 mb-4\">There was an error loading the due diligence process.</p>\n        <Button variant=\"primary\" onPress={loadDashboard}>\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  const { process, progressMetrics, upcomingDeadlines, teamStatus } = dashboard;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <Shield className=\"w-6 h-6 text-blue-600\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Due Diligence Process</h2>\n                <p className=\"text-gray-600\">Listing ID: {listingId}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Chip\n                variant=\"flat\"\n                color={getStatusColor(process.status)}\n                startContent={getStatusIcon(process.status)}\n              >\n                {process.status.replace('_', ' ')}\n              </Chip>\n              <Chip variant=\"flat\" color=\"primary\">\n                <Users className=\"w-3 h-3 mr-1\" />\n                {teamStatus.length} Team Members\n              </Chip>\n            </div>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary-600 mb-1\">\n                {progressMetrics.overallProgress}%\n              </div>\n              <div className=\"text-sm text-gray-600\">Overall Progress</div>\n              <Progress\n                value={progressMetrics.overallProgress}\n                className=\"mt-2\"\n                color=\"primary\"\n                size=\"sm\"\n              />\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-1\">\n                {progressMetrics.itemsCompleted}/{progressMetrics.itemsTotal}\n              </div>\n              <div className=\"text-sm text-gray-600\">Items Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n                {progressMetrics.documentsUploaded}\n              </div>\n              <div className=\"text-sm text-gray-600\">Documents Uploaded</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-1\">\n                {progressMetrics.daysRemaining}\n              </div>\n              <div className=\"text-sm text-gray-600\">Days Remaining</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        {[\n          { id: 'overview', label: 'Overview', icon: <TrendingUp className=\"w-4 h-4\" /> },\n          { id: 'checklist', label: 'Checklist', icon: <CheckCircle className=\"w-4 h-4\" /> },\n          { id: 'documents', label: 'Documents', icon: <FileText className=\"w-4 h-4\" /> },\n          { id: 'messages', label: 'Messages', icon: <MessageSquare className=\"w-4 h-4\" /> },\n          { id: 'reports', label: 'Reports', icon: <FileText className=\"w-4 h-4\" /> },\n          { id: 'timeline', label: 'Timeline', icon: <Calendar className=\"w-4 h-4\" /> },\n        ].map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n              activeTab === tab.id\n                ? 'bg-white text-primary-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n            }`}\n          >\n            {tab.icon}\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"mt-6\">\n        {activeTab === 'overview' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Upcoming Deadlines */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Upcoming Deadlines\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {upcomingDeadlines.map(deadline => (\n                    <div\n                      key={deadline.id}\n                      className={`p-3 rounded-lg border ${\n                        deadline.isOverdue\n                          ? 'border-red-200 bg-red-50'\n                          : 'border-gray-200 bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{deadline.title}</h4>\n                          <p className=\"text-sm text-gray-600\">\n                            Due: {new Date(deadline.dueDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Chip\n                          size=\"sm\"\n                          color={deadline.priority === 'high' ? 'danger' : 'warning'}\n                          variant=\"flat\"\n                        >\n                          {deadline.priority}\n                        </Chip>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Team Status */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Team Status\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {teamStatus.map(member => (\n                    <div\n                      key={member.userId}\n                      className=\"flex items-center justify-between p-3 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className={`w-3 h-3 rounded-full ${\n                            member.isOnline ? 'bg-green-500' : 'bg-gray-400'\n                          }`}\n                        />\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{member.name}</h4>\n                          <p className=\"text-sm text-gray-600\">{member.role}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {member.completedTasks} completed\n                        </div>\n                        <div className=\"text-xs text-gray-600\">{member.pendingTasks} pending</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'checklist' && (\n          <DueDiligenceChecklist processId={processId} userRole={userRole} />\n        )}\n\n        {activeTab === 'documents' && (\n          <DueDiligenceDocuments processId={processId} userRole={userRole} />\n        )}\n\n        {activeTab === 'messages' && (\n          <DueDiligenceMessages processId={processId} userRole={userRole} />\n        )}\n\n        {activeTab === 'reports' && (\n          <DueDiligenceReports processId={processId} userRole={userRole} />\n        )}\n\n        {activeTab === 'timeline' && (\n          <DueDiligenceTimeline processId={processId} userRole={userRole} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DueDiligenceDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/DueDiligenceDocuments.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDocuments'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadDocuments, processId]","fix":{"range":[1803,1814],"text":"[loadDocuments, processId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4854,4903],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleFileUpload' is assigned a value but never used.","line":151,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFileUpload' is assigned a value but never used.","line":151,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5460,5463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5460,5463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6019,6068],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6490,6539],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Documents\n * Location: src/shared/components/due-diligence/DueDiligenceDocuments.tsx\n * Purpose: Document management for due diligence process\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { CustomFileInput } from '@/shared/components/forms';\nimport { DueDiligenceDocument } from '@/shared/types/due-diligence';\nimport {\n  Card,\n  CardBody,\n  Chip,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from '@heroui/react';\nimport { Download, Eye, FileText, MoreHorizontal, Search, Upload, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface DueDiligenceDocumentsProps {\n  processId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n}\n\nconst DueDiligenceDocuments: React.FC<DueDiligenceDocumentsProps> = ({ processId, userRole }) => {\n  const [documents, setDocuments] = useState<DueDiligenceDocument[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedDocument, setSelectedDocument] = useState<DueDiligenceDocument | null>(null);\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [uploading, setUploading] = useState(false);\n\n  const categories = [\n    { value: 'all', label: 'All Documents' },\n    { value: 'financial', label: 'Financial' },\n    { value: 'legal', label: 'Legal' },\n    { value: 'operational', label: 'Operational' },\n    { value: 'commercial', label: 'Commercial' },\n    { value: 'technical', label: 'Technical' },\n    { value: 'hr', label: 'HR' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  useEffect(() => {\n    loadDocuments();\n  }, [processId]);\n\n  const loadDocuments = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await dueDiligenceService.getDocuments(processId);\n      // setDocuments(response.data);\n\n      // Mock data for now\n      const mockDocuments: DueDiligenceDocument[] = [\n        {\n          id: 'doc-1',\n          processId,\n          name: 'Financial Statements 2023.pdf',\n          description: 'Audited financial statements for the year 2023',\n          category: 'financial',\n          type: 'financial',\n          fileType: 'pdf',\n          size: 2457600, // 2.4 MB\n          uploadedBy: 'seller-1',\n          uploadedAt: '2024-01-15T10:30:00Z',\n          status: 'approved',\n          version: 1,\n          isLatest: true,\n          downloadUrl: '/api/documents/doc-1/download',\n          previewUrl: '/api/documents/doc-1/preview',\n          tags: ['audited', '2023', 'statements'],\n          comments: [],\n          accessLevel: 'both',\n        },\n        {\n          id: 'doc-2',\n          processId,\n          name: 'Customer Contracts.pdf',\n          description: 'Key customer contracts and agreements',\n          category: 'legal',\n          type: 'legal',\n          fileType: 'pdf',\n          size: 1843200, // 1.8 MB\n          uploadedBy: 'seller-1',\n          uploadedAt: '2024-01-14T14:15:00Z',\n          status: 'reviewed',\n          version: 1,\n          isLatest: true,\n          downloadUrl: '/api/documents/doc-2/download',\n          previewUrl: '/api/documents/doc-2/preview',\n          tags: ['contracts', 'customers'],\n          comments: [],\n          accessLevel: 'both',\n        },\n        {\n          id: 'doc-3',\n          processId,\n          name: 'Cash Flow Analysis.xlsx',\n          description: 'Monthly cash flow analysis and projections',\n          category: 'financial',\n          type: 'financial',\n          fileType: 'xlsx',\n          size: 512000, // 512 KB\n          uploadedBy: 'seller-1',\n          uploadedAt: '2024-01-16T09:45:00Z',\n          status: 'pending',\n          version: 1,\n          isLatest: true,\n          downloadUrl: '/api/documents/doc-3/download',\n          tags: ['cash-flow', 'analysis', 'projections'],\n          comments: [],\n          accessLevel: 'buyer',\n        },\n        {\n          id: 'doc-4',\n          processId,\n          name: 'Organization Chart.pdf',\n          description: 'Current organizational structure and reporting lines',\n          category: 'operational',\n          type: 'operational',\n          fileType: 'pdf',\n          size: 256000, // 256 KB\n          uploadedBy: 'seller-1',\n          uploadedAt: '2024-01-17T11:20:00Z',\n          status: 'reviewed',\n          version: 1,\n          isLatest: true,\n          downloadUrl: '/api/documents/doc-4/download',\n          previewUrl: '/api/documents/doc-4/preview',\n          tags: ['organization', 'structure'],\n          comments: [],\n          accessLevel: 'both',\n        },\n      ];\n\n      setDocuments(mockDocuments);\n    } catch (error) {\n      console.error('Error loading documents:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFileUpload = async (file: File, category: string, description?: string) => {\n    setUploading(true);\n    try {\n      // TODO: Replace with actual API call\n      // await dueDiligenceService.uploadDocument(processId, file, category, description);\n\n      // Mock upload success\n      const newDocument: DueDiligenceDocument = {\n        id: `doc-${Date.now()}`,\n        processId,\n        name: file.name,\n        description: description || '',\n        category,\n        type: category as any,\n        fileType: file.name.split('.').pop() || '',\n        size: file.size,\n        uploadedBy: userRole === 'buyer' ? 'buyer-1' : 'seller-1',\n        uploadedAt: new Date().toISOString(),\n        status: 'pending',\n        version: 1,\n        isLatest: true,\n        downloadUrl: `/api/documents/doc-${Date.now()}/download`,\n        tags: [],\n        comments: [],\n        accessLevel: userRole === 'buyer' ? 'buyer' : 'both',\n      };\n\n      setDocuments(prev => [newDocument, ...prev]);\n      setIsUploadModalOpen(false);\n    } catch (error) {\n      console.error('Error loading documents:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleDownload = async (doc: DueDiligenceDocument) => {\n    try {\n      // TODO: Replace with actual API call\n      // await dueDiligenceService.downloadDocument(doc.id);\n\n      // Mock download\n      const link = document.createElement('a');\n      link.href = doc.downloadUrl;\n      link.download = doc.name;\n      link.click();\n    } catch (error) {\n      console.error('Error loading documents:', error);\n    }\n  };\n\n  const handleView = (doc: DueDiligenceDocument) => {\n    setSelectedDocument(doc);\n    setIsViewModalOpen(true);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'success';\n      case 'reviewed':\n        return 'primary';\n      case 'pending':\n        return 'warning';\n      case 'rejected':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return '✓';\n      case 'reviewed':\n        return '👁';\n      case 'pending':\n        return '⏳';\n      case 'rejected':\n        return '✗';\n      default:\n        return '?';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const filteredDocuments = documents.filter(doc => {\n    const matchesSearch =\n      doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      doc.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || doc.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading documents...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Documents ({documents.length})</h3>\n          <p className=\"text-sm text-gray-600\">Manage and review due diligence documents</p>\n        </div>\n        <Button\n          variant=\"primary\"\n          onPress={() => setIsUploadModalOpen(true)}\n          startContent={<Upload className=\"w-4 h-4\" />}\n        >\n          Upload Document\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardBody>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search documents...\"\n                  value={searchQuery}\n                  onChange={e => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"md:w-48\">\n              <select\n                value={selectedCategory}\n                onChange={e => setSelectedCategory(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                {categories.map(category => (\n                  <option key={category.value} value={category.value}>\n                    {category.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Documents List */}\n      <Card>\n        <CardBody>\n          <div className=\"space-y-3\">\n            {filteredDocuments.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No documents found</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {searchQuery || selectedCategory !== 'all'\n                    ? 'Try adjusting your search or filter criteria.'\n                    : 'Upload your first document to get started.'}\n                </p>\n                {!searchQuery && selectedCategory === 'all' && (\n                  <Button\n                    variant=\"primary\"\n                    onPress={() => setIsUploadModalOpen(true)}\n                    startContent={<Upload className=\"w-4 h-4\" />}\n                  >\n                    Upload Document\n                  </Button>\n                )}\n              </div>\n            ) : (\n              filteredDocuments.map(doc => (\n                <div\n                  key={doc.id}\n                  className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-2 bg-blue-100 rounded-lg\">\n                      <FileText className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h4 className=\"font-medium text-gray-900\">{doc.name}</h4>\n                        {doc.isLatest && (\n                          <Chip size=\"sm\" color=\"primary\" variant=\"flat\">\n                            Latest\n                          </Chip>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-1\">\n                        {doc.description || 'No description provided'}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>{formatFileSize(doc.size)}</span>\n                        <span>•</span>\n                        <span>{doc.category}</span>\n                        <span>•</span>\n                        <span>Uploaded by {doc.uploadedBy}</span>\n                        <span>•</span>\n                        <span>{new Date(doc.uploadedAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Chip\n                      size=\"sm\"\n                      color={getStatusColor(doc.status)}\n                      variant=\"flat\"\n                      startContent={getStatusIcon(doc.status)}\n                    >\n                      {doc.status}\n                    </Chip>\n                    <div className=\"flex items-center gap-1\">\n                      {doc.previewUrl && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          isIconOnly\n                          onPress={() => handleView(doc)}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        size=\"sm\"\n                        variant=\"secondary\"\n                        isIconOnly\n                        onPress={() => handleDownload(doc)}\n                      >\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"secondary\" isIconOnly>\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Upload Modal */}\n      <Modal isOpen={isUploadModalOpen} onClose={() => setIsUploadModalOpen(false)} size=\"2xl\">\n        <ModalContent>\n          <ModalHeader>\n            <h3 className=\"text-lg font-semibold\">Upload Document</h3>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"space-y-4\">\n              <CustomFileInput\n                label=\"Select File\"\n                accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.jpg,.jpeg,.png\"\n                onChange={file => {\n                  if (file) {\n                    // Handle file selection\n                  }\n                }}\n                name=\"document\"\n              />\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Category</label>\n                <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\">\n                  {categories.slice(1).map(category => (\n                    <option key={category.value} value={category.value}>\n                      {category.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Description (Optional)\n                </label>\n                <textarea\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                  rows={3}\n                  placeholder=\"Brief description of the document...\"\n                />\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"secondary\" onPress={() => setIsUploadModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              onPress={() => {\n                // Handle upload\n                setIsUploadModalOpen(false);\n              }}\n              isLoading={uploading}\n            >\n              {uploading ? 'Uploading...' : 'Upload'}\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      {/* View Modal */}\n      <Modal isOpen={isViewModalOpen} onClose={() => setIsViewModalOpen(false)} size=\"4xl\">\n        <ModalContent>\n          <ModalHeader>\n            <div className=\"flex items-center justify-between w-full\">\n              <h3 className=\"text-lg font-semibold\">{selectedDocument?.name}</h3>\n              <Button variant=\"secondary\" isIconOnly onPress={() => setIsViewModalOpen(false)}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </ModalHeader>\n          <ModalBody>\n            {selectedDocument && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-100 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-600 mb-2\">\n                    {selectedDocument.description || 'No description provided'}\n                  </p>\n                  <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                    <span>{formatFileSize(selectedDocument.size)}</span>\n                    <span>•</span>\n                    <span>{selectedDocument.category}</span>\n                    <span>•</span>\n                    <span>Version {selectedDocument.version}</span>\n                  </div>\n                </div>\n                <div className=\"border border-gray-200 rounded-lg p-8 text-center\">\n                  <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 mb-4\">\n                    Document preview not available for this file type.\n                  </p>\n                  <Button\n                    variant=\"primary\"\n                    onPress={() => handleDownload(selectedDocument)}\n                    startContent={<Download className=\"w-4 h-4\" />}\n                  >\n                    Download Document\n                  </Button>\n                </div>\n              </div>\n            )}\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n\nexport default DueDiligenceDocuments;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/DueDiligenceMessages.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMessages'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadMessages, processId]","fix":{"range":[1342,1353],"text":"[loadMessages, processId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3886,3934],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4995,5043],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Messages\n * Location: src/shared/components/due-diligence/DueDiligenceMessages.tsx\n * Purpose: Communication system for due diligence process\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { AnimatedTextarea } from '@/shared/components/forms';\nimport { DueDiligenceCommunication } from '@/shared/types/due-diligence';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport { AlertTriangle, MessageSquare, Paperclip, Send, User } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface DueDiligenceMessagesProps {\n  processId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n}\n\nconst DueDiligenceMessages: React.FC<DueDiligenceMessagesProps> = ({ processId, userRole }) => {\n  const [messages, setMessages] = useState<DueDiligenceCommunication[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [newMessage, setNewMessage] = useState('');\n  const [selectedRecipients, setSelectedRecipients] = useState<string[]>([]);\n  const [messageSubject, setMessageSubject] = useState('');\n\n  const teamMembers = [\n    { id: 'buyer-1', name: 'Jane Buyer', role: 'Buyer' },\n    { id: 'seller-1', name: 'John Seller', role: 'Seller' },\n    { id: 'advisor-1', name: 'Mike Advisor', role: 'Advisor' },\n  ];\n\n  useEffect(() => {\n    loadMessages();\n  }, [processId]);\n\n  const loadMessages = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await dueDiligenceService.getMessages(processId);\n      // setMessages(response.data);\n\n      // Mock data for now\n      const mockMessages: DueDiligenceCommunication[] = [\n        {\n          id: 'msg-1',\n          processId,\n          type: 'message',\n          from: 'buyer-1',\n          to: ['seller-1'],\n          subject: 'Financial Statements Review',\n          content:\n            'I have reviewed the financial statements and everything looks good. I have a few questions about the cash flow projections for Q4.',\n          timestamp: '2024-01-20T10:30:00Z',\n          isRead: true,\n          priority: 'medium',\n          attachments: ['doc-1'],\n          relatedItemId: 'fin-1',\n        },\n        {\n          id: 'msg-2',\n          processId,\n          type: 'response',\n          from: 'seller-1',\n          to: ['buyer-1'],\n          subject: 'Re: Financial Statements Review',\n          content:\n            'Thank you for the feedback. I will provide the Q4 cash flow projections by tomorrow. The numbers should be very positive based on our current pipeline.',\n          timestamp: '2024-01-20T14:15:00Z',\n          isRead: true,\n          priority: 'medium',\n          attachments: [],\n          relatedItemId: 'fin-1',\n        },\n        {\n          id: 'msg-3',\n          processId,\n          type: 'request',\n          from: 'advisor-1',\n          to: ['seller-1'],\n          subject: 'Legal Documents Needed',\n          content:\n            'We need the following legal documents to complete the legal due diligence: 1) Corporate structure documents, 2) Material contracts, 3) IP portfolio documentation.',\n          timestamp: '2024-01-19T16:45:00Z',\n          isRead: false,\n          priority: 'high',\n          attachments: [],\n          relatedItemId: 'leg-2',\n          actionRequired: true,\n          actionDeadline: '2024-01-25',\n        },\n        {\n          id: 'msg-4',\n          processId,\n          type: 'alert',\n          from: 'system',\n          to: ['buyer-1', 'seller-1'],\n          subject: 'Deadline Reminder',\n          content: 'Reminder: Legal document review is due in 3 days (January 25, 2024).',\n          timestamp: '2024-01-22T09:00:00Z',\n          isRead: false,\n          priority: 'high',\n          attachments: [],\n          relatedItemId: 'leg-2',\n        },\n      ];\n\n      setMessages(mockMessages);\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || selectedRecipients.length === 0) return;\n\n    try {\n      // TODO: Replace with actual API call\n      // await dueDiligenceService.sendMessage(processId, {\n      //   to: selectedRecipients,\n      //   subject: messageSubject,\n      //   content: newMessage,\n      //   priority: 'medium',\n      // });\n\n      const newMsg: DueDiligenceCommunication = {\n        id: `msg-${Date.now()}`,\n        processId,\n        type: 'message',\n        from: userRole === 'buyer' ? 'buyer-1' : userRole === 'seller' ? 'seller-1' : 'advisor-1',\n        to: selectedRecipients,\n        subject: messageSubject || 'New Message',\n        content: newMessage,\n        timestamp: new Date().toISOString(),\n        isRead: false,\n        priority: 'medium',\n        attachments: [],\n      };\n\n      setMessages(prev => [newMsg, ...prev]);\n      setNewMessage('');\n      setMessageSubject('');\n      setSelectedRecipients([]);\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'danger';\n      case 'high':\n        return 'warning';\n      case 'medium':\n        return 'primary';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'request':\n        return '📋';\n      case 'response':\n        return '💬';\n      case 'alert':\n        return '⚠️';\n      case 'reminder':\n        return '⏰';\n      default:\n        return '💬';\n    }\n  };\n\n  const getSenderName = (senderId: string) => {\n    const member = teamMembers.find(m => m.id === senderId);\n    return member ? member.name : senderId;\n  };\n\n  const getSenderRole = (senderId: string) => {\n    const member = teamMembers.find(m => m.id === senderId);\n    return member ? member.role : 'Unknown';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading messages...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Messages ({messages.length})</h3>\n          <p className=\"text-sm text-gray-600\">Communicate with your due diligence team</p>\n        </div>\n      </div>\n\n      {/* Messages List */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Recent Messages</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {messages.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <MessageSquare className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No messages yet</h3>\n                <p className=\"text-gray-600\">Start a conversation with your team members.</p>\n              </div>\n            ) : (\n              messages.map(message => (\n                <div\n                  key={message.id}\n                  className={`p-4 border rounded-lg ${\n                    !message.isRead ? 'bg-blue-50 border-blue-200' : 'bg-gray-50 border-gray-200'\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <User className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <h5 className=\"font-medium text-gray-900\">\n                            {getSenderName(message.from)}\n                          </h5>\n                          <Chip size=\"sm\" color=\"default\" variant=\"flat\">\n                            {getSenderRole(message.from)}\n                          </Chip>\n                          <span className=\"text-lg\">{getTypeIcon(message.type)}</span>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">\n                          {new Date(message.timestamp).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Chip size=\"sm\" color={getPriorityColor(message.priority)} variant=\"flat\">\n                        {message.priority}\n                      </Chip>\n                      {message.actionRequired && (\n                        <Chip size=\"sm\" color=\"warning\" variant=\"flat\">\n                          Action Required\n                        </Chip>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"mb-3\">\n                    <h6 className=\"font-medium text-gray-900 mb-1\">{message.subject}</h6>\n                    <p className=\"text-sm text-gray-700\">{message.content}</p>\n                  </div>\n\n                  {message.actionRequired && message.actionDeadline && (\n                    <div className=\"flex items-center gap-2 p-2 bg-yellow-100 rounded-lg mb-3\">\n                      <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                      <span className=\"text-sm text-yellow-800\">\n                        Action required by: {new Date(message.actionDeadline).toLocaleDateString()}\n                      </span>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                      <span>To: {message.to.map(id => getSenderName(id)).join(', ')}</span>\n                      {message.attachments.length > 0 && (\n                        <>\n                          <span>•</span>\n                          <span>{message.attachments.length} attachment(s)</span>\n                        </>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {message.attachments.length > 0 && (\n                        <Button size=\"sm\" variant=\"secondary\" isIconOnly>\n                          <Paperclip className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                      <Button size=\"sm\" variant=\"secondary\">\n                        Reply\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Send Message */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Send Message</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Recipients</label>\n              <div className=\"flex flex-wrap gap-2\">\n                {teamMembers\n                  .filter(\n                    member =>\n                      member.id !==\n                      (userRole === 'buyer'\n                        ? 'buyer-1'\n                        : userRole === 'seller'\n                          ? 'seller-1'\n                          : 'advisor-1')\n                  )\n                  .map(member => (\n                    <button\n                      key={member.id}\n                      onClick={() => {\n                        setSelectedRecipients(prev =>\n                          prev.includes(member.id)\n                            ? prev.filter(id => id !== member.id)\n                            : [...prev, member.id]\n                        );\n                      }}\n                      className={`px-3 py-1 rounded-full text-sm border transition-colors ${\n                        selectedRecipients.includes(member.id)\n                          ? 'bg-primary-100 border-primary-300 text-primary-700'\n                          : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                      }`}\n                    >\n                      {member.name} ({member.role})\n                    </button>\n                  ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Subject</label>\n              <input\n                type=\"text\"\n                value={messageSubject}\n                onChange={e => setMessageSubject(e.target.value)}\n                placeholder=\"Message subject...\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              />\n            </div>\n\n            <AnimatedTextarea\n              label=\"Message\"\n              placeholder=\"Type your message here...\"\n              value={newMessage}\n              onChange={e => setNewMessage(e.target.value)}\n              onBlur={() => {}}\n              name=\"message\"\n              minRows={4}\n            />\n\n            <div className=\"flex justify-end\">\n              <Button\n                variant=\"primary\"\n                onPress={handleSendMessage}\n                isDisabled={!newMessage.trim() || selectedRecipients.length === 0}\n                startContent={<Send className=\"w-4 h-4\" />}\n              >\n                Send Message\n              </Button>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default DueDiligenceMessages;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/DueDiligenceReports.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReports'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadReports, processId]","fix":{"range":[979,990],"text":"[loadReports, processId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4794,4841],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6051,6098],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6559,6606],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Reports\n * Location: src/shared/components/due-diligence/DueDiligenceReports.tsx\n * Purpose: Report generation and management for due diligence process\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { DueDiligenceReport } from '@/shared/types/due-diligence';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport {\n  AlertTriangle,\n  CheckCircle,\n  Download,\n  FileText,\n  Plus,\n  TrendingDown,\n  TrendingUp,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface DueDiligenceReportsProps {\n  processId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n}\n\nconst DueDiligenceReports: React.FC<DueDiligenceReportsProps> = ({ processId, userRole }) => {\n  const [reports, setReports] = useState<DueDiligenceReport[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  useEffect(() => {\n    loadReports();\n  }, [processId]);\n\n  const loadReports = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await dueDiligenceService.getReports(processId);\n      // setReports(response.data);\n\n      // Mock data for now\n      const mockReports: DueDiligenceReport[] = [\n        {\n          id: 'report-1',\n          processId,\n          type: 'interim',\n          title: 'Financial Due Diligence - Interim Report',\n          content: 'This interim report covers the financial analysis completed to date...',\n          generatedBy: 'advisor-1',\n          generatedAt: '2024-01-20T15:30:00Z',\n          status: 'approved',\n          findings: [\n            {\n              id: 'finding-1',\n              category: 'financial',\n              title: 'Strong Revenue Growth',\n              description: 'Revenue has grown consistently over the past 3 years with 15% CAGR.',\n              severity: 'low',\n              impact: 'positive',\n              evidence: ['doc-1', 'doc-2'],\n              recommendations: ['Continue current growth strategy'],\n            },\n            {\n              id: 'finding-2',\n              category: 'financial',\n              title: 'High Customer Concentration',\n              description:\n                'Top 3 customers represent 45% of total revenue, creating concentration risk.',\n              severity: 'medium',\n              impact: 'negative',\n              evidence: ['doc-3'],\n              recommendations: ['Diversify customer base', 'Implement customer retention programs'],\n            },\n          ],\n          recommendations: [\n            {\n              id: 'rec-1',\n              title: 'Customer Diversification Strategy',\n              description: 'Develop a plan to reduce customer concentration risk',\n              priority: 'high',\n              category: 'financial',\n              estimatedCost: 50000,\n              estimatedTimeframe: '6 months',\n              responsibleParty: 'buyer',\n            },\n          ],\n          riskAssessment: {\n            overallRisk: 'medium',\n            financialRisk: 'medium',\n            operationalRisk: 'low',\n            legalRisk: 'low',\n            marketRisk: 'medium',\n            risks: [\n              {\n                id: 'risk-1',\n                title: 'Customer Concentration Risk',\n                description: 'High dependence on top customers',\n                category: 'financial',\n                probability: 'medium',\n                impact: 'high',\n                severity: 'medium',\n              },\n            ],\n            mitigations: [\n              {\n                id: 'mit-1',\n                riskId: 'risk-1',\n                title: 'Customer Diversification',\n                description: 'Expand customer base to reduce concentration',\n                effectiveness: 'high',\n                cost: 'medium',\n                timeframe: '6-12 months',\n              },\n            ],\n          },\n          attachments: ['doc-1', 'doc-2', 'doc-3'],\n        },\n        {\n          id: 'report-2',\n          processId,\n          type: 'summary',\n          title: 'Legal Due Diligence - Summary Report',\n          content: 'Legal review completed with no major issues identified...',\n          generatedBy: 'advisor-1',\n          generatedAt: '2024-01-18T12:00:00Z',\n          status: 'review',\n          findings: [],\n          recommendations: [],\n          riskAssessment: {\n            overallRisk: 'low',\n            financialRisk: 'low',\n            operationalRisk: 'low',\n            legalRisk: 'low',\n            marketRisk: 'low',\n            risks: [],\n            mitigations: [],\n          },\n          attachments: ['doc-4', 'doc-5'],\n        },\n      ];\n\n      setReports(mockReports);\n    } catch (error) {\n      console.error('Error loading reports:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateReport = async (type: 'interim' | 'final' | 'summary') => {\n    setIsGenerating(true);\n    try {\n      // TODO: Replace with actual API call\n      // await dueDiligenceService.generateReport(processId, type);\n\n      // Mock report generation\n      const newReport: DueDiligenceReport = {\n        id: `report-${Date.now()}`,\n        processId,\n        type,\n        title: `${type.charAt(0).toUpperCase() + type.slice(1)} Due Diligence Report`,\n        content: `This ${type} report has been generated based on the current due diligence progress...`,\n        generatedBy:\n          userRole === 'buyer' ? 'buyer-1' : userRole === 'seller' ? 'seller-1' : 'advisor-1',\n        generatedAt: new Date().toISOString(),\n        status: 'draft',\n        findings: [],\n        recommendations: [],\n        riskAssessment: {\n          overallRisk: 'low',\n          financialRisk: 'low',\n          operationalRisk: 'low',\n          legalRisk: 'low',\n          marketRisk: 'low',\n          risks: [],\n          mitigations: [],\n        },\n        attachments: [],\n      };\n\n      setReports(prev => [newReport, ...prev]);\n    } catch (error) {\n      console.error('Error loading reports:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const downloadReport = async (report: DueDiligenceReport) => {\n    try {\n      // TODO: Replace with actual API call\n      // await dueDiligenceService.downloadReport(report.id);\n\n      // Mock download\n      const link = document.createElement('a');\n      link.href = `/api/reports/${report.id}/download`;\n      link.download = `${report.title}.pdf`;\n      link.click();\n    } catch (error) {\n      console.error('Error loading reports:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'success';\n      case 'review':\n        return 'warning';\n      case 'draft':\n        return 'default';\n      case 'published':\n        return 'primary';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'review':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'draft':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'published':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low':\n        return 'success';\n      case 'medium':\n        return 'warning';\n      case 'high':\n        return 'danger';\n      case 'critical':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getRiskIcon = (risk: string) => {\n    switch (risk) {\n      case 'low':\n        return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'medium':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />;\n      case 'high':\n      case 'critical':\n        return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <AlertTriangle className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading reports...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Reports ({reports.length})</h3>\n          <p className=\"text-sm text-gray-600\">Generate and manage due diligence reports</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"secondary\"\n            onPress={() => generateReport('summary')}\n            isLoading={isGenerating}\n            startContent={<Plus className=\"w-4 h-4\" />}\n          >\n            Summary Report\n          </Button>\n          <Button\n            variant=\"primary\"\n            onPress={() => generateReport('interim')}\n            isLoading={isGenerating}\n            startContent={<Plus className=\"w-4 h-4\" />}\n          >\n            Generate Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Reports List */}\n      <div className=\"space-y-4\">\n        {reports.length === 0 ? (\n          <Card>\n            <CardBody>\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No reports yet</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Generate your first due diligence report to get started.\n                </p>\n                <Button\n                  variant=\"primary\"\n                  onPress={() => generateReport('summary')}\n                  startContent={<Plus className=\"w-4 h-4\" />}\n                >\n                  Generate Summary Report\n                </Button>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          reports.map(report => (\n            <Card key={report.id} className=\"border border-gray-200\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between w-full\">\n                  <div className=\"flex items-center gap-3\">\n                    <FileText className=\"w-5 h-5 text-blue-600\" />\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-gray-900\">{report.title}</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Generated by {report.generatedBy} on{' '}\n                        {new Date(report.generatedAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Chip\n                      color={getStatusColor(report.status)}\n                      variant=\"flat\"\n                      startContent={getStatusIcon(report.status)}\n                    >\n                      {report.status}\n                    </Chip>\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onPress={() => downloadReport(report)}\n                      startContent={<Download className=\"w-4 h-4\" />}\n                    >\n                      Download\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  <p className=\"text-gray-700\">{report.content}</p>\n\n                  {/* Risk Assessment Summary */}\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h5 className=\"font-semibold text-gray-900 mb-3\">Risk Assessment</h5>\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center mb-1\">\n                          {getRiskIcon(report.riskAssessment.overallRisk)}\n                        </div>\n                        <div className=\"text-sm font-medium text-gray-900\">Overall</div>\n                        <Chip\n                          size=\"sm\"\n                          color={getRiskColor(report.riskAssessment.overallRisk)}\n                          variant=\"flat\"\n                        >\n                          {report.riskAssessment.overallRisk}\n                        </Chip>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center mb-1\">\n                          {getRiskIcon(report.riskAssessment.financialRisk)}\n                        </div>\n                        <div className=\"text-sm font-medium text-gray-900\">Financial</div>\n                        <Chip\n                          size=\"sm\"\n                          color={getRiskColor(report.riskAssessment.financialRisk)}\n                          variant=\"flat\"\n                        >\n                          {report.riskAssessment.financialRisk}\n                        </Chip>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center mb-1\">\n                          {getRiskIcon(report.riskAssessment.operationalRisk)}\n                        </div>\n                        <div className=\"text-sm font-medium text-gray-900\">Operational</div>\n                        <Chip\n                          size=\"sm\"\n                          color={getRiskColor(report.riskAssessment.operationalRisk)}\n                          variant=\"flat\"\n                        >\n                          {report.riskAssessment.operationalRisk}\n                        </Chip>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center mb-1\">\n                          {getRiskIcon(report.riskAssessment.legalRisk)}\n                        </div>\n                        <div className=\"text-sm font-medium text-gray-900\">Legal</div>\n                        <Chip\n                          size=\"sm\"\n                          color={getRiskColor(report.riskAssessment.legalRisk)}\n                          variant=\"flat\"\n                        >\n                          {report.riskAssessment.legalRisk}\n                        </Chip>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"flex justify-center mb-1\">\n                          {getRiskIcon(report.riskAssessment.marketRisk)}\n                        </div>\n                        <div className=\"text-sm font-medium text-gray-900\">Market</div>\n                        <Chip\n                          size=\"sm\"\n                          color={getRiskColor(report.riskAssessment.marketRisk)}\n                          variant=\"flat\"\n                        >\n                          {report.riskAssessment.marketRisk}\n                        </Chip>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Key Findings */}\n                  {report.findings.length > 0 && (\n                    <div>\n                      <h5 className=\"font-semibold text-gray-900 mb-3\">Key Findings</h5>\n                      <div className=\"space-y-2\">\n                        {report.findings.slice(0, 3).map(finding => (\n                          <div\n                            key={finding.id}\n                            className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\"\n                          >\n                            <div className=\"flex-shrink-0 mt-1\">\n                              {finding.impact === 'positive' ? (\n                                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                              ) : finding.impact === 'negative' ? (\n                                <XCircle className=\"w-4 h-4 text-red-600\" />\n                              ) : (\n                                <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1\">\n                              <h6 className=\"font-medium text-gray-900\">{finding.title}</h6>\n                              <p className=\"text-sm text-gray-600\">{finding.description}</p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Chip\n                                  size=\"sm\"\n                                  color={getRiskColor(finding.severity)}\n                                  variant=\"flat\"\n                                >\n                                  {finding.severity} severity\n                                </Chip>\n                                <Chip\n                                  size=\"sm\"\n                                  color={\n                                    finding.impact === 'positive'\n                                      ? 'success'\n                                      : finding.impact === 'negative'\n                                        ? 'danger'\n                                        : 'warning'\n                                  }\n                                  variant=\"flat\"\n                                >\n                                  {finding.impact} impact\n                                </Chip>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                        {report.findings.length > 3 && (\n                          <p className=\"text-sm text-gray-500 text-center\">\n                            +{report.findings.length - 3} more findings\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Recommendations */}\n                  {report.recommendations.length > 0 && (\n                    <div>\n                      <h5 className=\"font-semibold text-gray-900 mb-3\">Recommendations</h5>\n                      <div className=\"space-y-2\">\n                        {report.recommendations.slice(0, 2).map(rec => (\n                          <div\n                            key={rec.id}\n                            className=\"flex items-start gap-3 p-3 bg-blue-50 rounded-lg\"\n                          >\n                            <div className=\"flex-shrink-0 mt-1\">\n                              <CheckCircle className=\"w-4 h-4 text-blue-600\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <h6 className=\"font-medium text-gray-900\">{rec.title}</h6>\n                              <p className=\"text-sm text-gray-600\">{rec.description}</p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Chip size=\"sm\" color={getRiskColor(rec.priority)} variant=\"flat\">\n                                  {rec.priority} priority\n                                </Chip>\n                                {rec.estimatedCost && (\n                                  <span className=\"text-xs text-gray-500\">\n                                    Est. cost: €{rec.estimatedCost.toLocaleString()}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                        {report.recommendations.length > 2 && (\n                          <p className=\"text-sm text-gray-500 text-center\">\n                            +{report.recommendations.length - 2} more recommendations\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Attachments */}\n                  {report.attachments.length > 0 && (\n                    <div>\n                      <h5 className=\"font-semibold text-gray-900 mb-2\">Attachments</h5>\n                      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                        <FileText className=\"w-4 h-4\" />\n                        <span>{report.attachments.length} document(s) attached</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardBody>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DueDiligenceReports;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/DueDiligenceTimeline.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":25,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":25,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":89},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTimeline'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadTimeline, processId]","fix":{"range":[968,979],"text":"[loadTimeline, processId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4595,4643],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":304,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":304,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":304,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":304,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Timeline\n * Location: src/shared/components/due-diligence/DueDiligenceTimeline.tsx\n * Purpose: Timeline and progress tracking for due diligence process\n */\n\nimport { DueDiligenceActivity, DueDiligenceProcess } from '@/shared/types/due-diligence';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  Calendar,\n  CheckCircle,\n  Clock,\n  FileText,\n  MessageSquare,\n  Upload,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface DueDiligenceTimelineProps {\n  processId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n}\n\nconst DueDiligenceTimeline: React.FC<DueDiligenceTimelineProps> = ({ processId, userRole }) => {\n  const [process, setProcess] = useState<DueDiligenceProcess | null>(null);\n  const [activities, setActivities] = useState<DueDiligenceActivity[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadTimeline();\n  }, [processId]);\n\n  const loadTimeline = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await dueDiligenceService.getTimeline(processId);\n      // setProcess(response.data.process);\n      // setActivities(response.data.activities);\n\n      // Mock data for now\n      const mockProcess: DueDiligenceProcess = {\n        id: processId,\n        listingId: 'listing-1',\n        buyerId: 'buyer-1',\n        sellerId: 'seller-1',\n        status: 'in_progress',\n        startDate: '2024-01-15',\n        estimatedCompletionDate: '2024-03-15',\n        progress: 65,\n        checklist: {\n          id: 'checklist-1',\n          processId,\n          categories: [],\n          overallProgress: 65,\n          lastUpdated: '2024-01-20',\n        },\n        documents: [],\n        communications: [],\n        reports: [],\n        team: [],\n      };\n\n      const mockActivities: DueDiligenceActivity[] = [\n        {\n          id: 'activity-1',\n          type: 'status_changed',\n          description: 'Due diligence process initiated',\n          timestamp: '2024-01-15T09:00:00Z',\n          userId: 'buyer-1',\n          userName: 'Jane Buyer',\n          metadata: { status: 'initiated' },\n        },\n        {\n          id: 'activity-2',\n          type: 'document_uploaded',\n          description: 'Financial statements uploaded',\n          timestamp: '2024-01-15T10:30:00Z',\n          userId: 'seller-1',\n          userName: 'John Seller',\n          metadata: { documentName: 'Financial Statements 2023.pdf' },\n        },\n        {\n          id: 'activity-3',\n          type: 'item_completed',\n          description: 'Financial review completed',\n          timestamp: '2024-01-18T14:15:00Z',\n          userId: 'buyer-1',\n          userName: 'Jane Buyer',\n          metadata: { itemName: 'Audited Financial Statements' },\n        },\n        {\n          id: 'activity-4',\n          type: 'document_uploaded',\n          description: 'Customer contracts uploaded',\n          timestamp: '2024-01-19T11:20:00Z',\n          userId: 'seller-1',\n          userName: 'John Seller',\n          metadata: { documentName: 'Customer Contracts.pdf' },\n        },\n        {\n          id: 'activity-5',\n          type: 'message_sent',\n          description: 'Message sent about legal documents',\n          timestamp: '2024-01-19T16:45:00Z',\n          userId: 'advisor-1',\n          userName: 'Mike Advisor',\n          metadata: { messageType: 'request' },\n        },\n        {\n          id: 'activity-6',\n          type: 'report_generated',\n          description: 'Interim financial report generated',\n          timestamp: '2024-01-20T15:30:00Z',\n          userId: 'advisor-1',\n          userName: 'Mike Advisor',\n          metadata: {\n            reportType: 'interim',\n            reportTitle: 'Financial Due Diligence - Interim Report',\n          },\n        },\n        {\n          id: 'activity-7',\n          type: 'item_completed',\n          description: 'Legal document review completed',\n          timestamp: '2024-01-21T09:30:00Z',\n          userId: 'buyer-1',\n          userName: 'Jane Buyer',\n          metadata: { itemName: 'Corporate Structure Review' },\n        },\n        {\n          id: 'activity-8',\n          type: 'document_uploaded',\n          description: 'Organization chart uploaded',\n          timestamp: '2024-01-22T13:45:00Z',\n          userId: 'seller-1',\n          userName: 'John Seller',\n          metadata: { documentName: 'Organization Chart.pdf' },\n        },\n      ];\n\n      setProcess(mockProcess);\n      setActivities(mockActivities);\n    } catch (error) {\n      console.error('Error loading timeline:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'document_uploaded':\n        return <Upload className=\"w-4 h-4\" />;\n      case 'item_completed':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'message_sent':\n        return <MessageSquare className=\"w-4 h-4\" />;\n      case 'report_generated':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'status_changed':\n        return <Clock className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'document_uploaded':\n        return 'text-blue-600 bg-blue-100';\n      case 'item_completed':\n        return 'text-green-600 bg-green-100';\n      case 'message_sent':\n        return 'text-purple-600 bg-purple-100';\n      case 'report_generated':\n        return 'text-orange-600 bg-orange-100';\n      case 'status_changed':\n        return 'text-gray-600 bg-gray-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getActivityDescription = (activity: DueDiligenceActivity) => {\n    switch (activity.type) {\n      case 'document_uploaded':\n        return `Uploaded document: ${activity.metadata?.documentName || 'Unknown document'}`;\n      case 'item_completed':\n        return `Completed: ${activity.metadata?.itemName || 'Unknown item'}`;\n      case 'message_sent':\n        return `Sent ${activity.metadata?.messageType || 'message'}`;\n      case 'report_generated':\n        return `Generated report: ${activity.metadata?.reportTitle || 'Unknown report'}`;\n      case 'status_changed':\n        return `Status changed to: ${activity.metadata?.status || 'Unknown status'}`;\n      default:\n        return activity.description;\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const activityTime = new Date(timestamp);\n    const diffInHours = Math.floor((now.getTime() - activityTime.getTime()) / (1000 * 60 * 60));\n\n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;\n    return activityTime.toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading timeline...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!process) {\n    return (\n      <div className=\"text-center py-8\">\n        <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No timeline found</h3>\n        <p className=\"text-gray-600\">Unable to load the due diligence timeline.</p>\n      </div>\n    );\n  }\n\n  const startDate = new Date(process.startDate);\n  const endDate = new Date(process.estimatedCompletionDate);\n  const today = new Date();\n  const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n  const daysElapsed = Math.ceil((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n  const daysRemaining = Math.max(0, totalDays - daysElapsed);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Process Overview */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <Calendar className=\"w-6 h-6 text-blue-600\" />\n              <div>\n                <h3 className=\"text-lg font-semibold\">Process Timeline</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Started {startDate.toLocaleDateString()} • Est. completion{' '}\n                  {endDate.toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n            <Chip color=\"primary\" variant=\"flat\">\n              {process.progress.toFixed(0)}% Complete\n            </Chip>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <Progress value={process.progress} className=\"mb-4\" color=\"primary\" size=\"lg\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary-600\">{daysElapsed}</div>\n                <div className=\"text-sm text-gray-600\">Days Elapsed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">{daysRemaining}</div>\n                <div className=\"text-sm text-gray-600\">Days Remaining</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-600\">{totalDays}</div>\n                <div className=\"text-sm text-gray-600\">Total Duration</div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Timeline */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Activity Timeline</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            {activities.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No activities yet</h3>\n                <p className=\"text-gray-600\">\n                  Activities will appear here as the due diligence process progresses.\n                </p>\n              </div>\n            ) : (\n              <div className=\"relative\">\n                {/* Timeline line */}\n                <div className=\"absolute left-6 top-0 bottom-0 w-0.5 bg-gray-200\"></div>\n\n                {activities.map((activity, index) => (\n                  <div key={activity.id} className=\"relative flex items-start gap-4 pb-6\">\n                    {/* Timeline dot */}\n                    <div\n                      className={`relative z-10 flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${getActivityColor(activity.type)}`}\n                    >\n                      {getActivityIcon(activity.type)}\n                    </div>\n\n                    {/* Activity content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {getActivityDescription(activity)}\n                          </p>\n                          <p className=\"text-sm text-gray-600 mt-1\">by {activity.userName}</p>\n                        </div>\n                        <div className=\"flex-shrink-0 ml-4\">\n                          <span className=\"text-xs text-gray-500\">\n                            {formatTimeAgo(activity.timestamp)}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Activity metadata */}\n                      {activity.metadata && Object.keys(activity.metadata).length > 0 && (\n                        <div className=\"mt-2 p-2 bg-gray-50 rounded-lg\">\n                          <div className=\"text-xs text-gray-600\">\n                            {Object.entries(activity.metadata).map(([key, value]) => (\n                              <div key={key} className=\"flex justify-between\">\n                                <span className=\"font-medium\">{key}:</span>\n                                <span>{String(value)}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Milestones */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Key Milestones</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            {[\n              {\n                title: 'Process Initiated',\n                date: '2024-01-15',\n                status: 'completed',\n                description: 'Due diligence process officially started',\n              },\n              {\n                title: 'Financial Review Complete',\n                date: '2024-01-25',\n                status: 'in_progress',\n                description: 'All financial documents reviewed and approved',\n              },\n              {\n                title: 'Legal Review Complete',\n                date: '2024-02-05',\n                status: 'pending',\n                description: 'Legal due diligence completed',\n              },\n              {\n                title: 'Operational Review Complete',\n                date: '2024-02-15',\n                status: 'pending',\n                description: 'Operational assessment finished',\n              },\n              {\n                title: 'Final Report Ready',\n                date: '2024-03-01',\n                status: 'pending',\n                description: 'Comprehensive due diligence report completed',\n              },\n              {\n                title: 'Process Complete',\n                date: '2024-03-15',\n                status: 'pending',\n                description: 'Due diligence process officially completed',\n              },\n            ].map((milestone, index) => (\n              <div\n                key={index}\n                className=\"flex items-center gap-4 p-3 border border-gray-200 rounded-lg\"\n              >\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    milestone.status === 'completed'\n                      ? 'bg-green-100 text-green-600'\n                      : milestone.status === 'in_progress'\n                        ? 'bg-blue-100 text-blue-600'\n                        : 'bg-gray-100 text-gray-400'\n                  }`}\n                >\n                  {milestone.status === 'completed' ? (\n                    <CheckCircle className=\"w-4 h-4\" />\n                  ) : milestone.status === 'in_progress' ? (\n                    <Clock className=\"w-4 h-4\" />\n                  ) : (\n                    <XCircle className=\"w-4 h-4\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h5 className=\"font-medium text-gray-900\">{milestone.title}</h5>\n                    <span className=\"text-sm text-gray-500\">\n                      {new Date(milestone.date).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{milestone.description}</p>\n                </div>\n                <Chip\n                  size=\"sm\"\n                  color={\n                    milestone.status === 'completed'\n                      ? 'success'\n                      : milestone.status === 'in_progress'\n                        ? 'primary'\n                        : 'default'\n                  }\n                  variant=\"flat\"\n                >\n                  {milestone.status.replace('_', ' ')}\n                </Chip>\n              </div>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default DueDiligenceTimeline;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/due-diligence/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/filters/PriceRangeSlider.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":32,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\n\ninterface PriceRangeSliderProps {\n  /**\n   * Minimum value for the range\n   */\n  min?: number;\n\n  /**\n   * Maximum value for the range\n   */\n  max?: number;\n\n  /**\n   * Step size for the slider\n   */\n  step?: number;\n\n  /**\n   * Initial value range [min, max]\n   */\n  defaultValue?: [number, number];\n\n  /**\n   * Current value range [min, max]\n   */\n  value?: [number, number];\n\n  /**\n   * Callback when range changes\n   */\n  onChange?: (value: [number, number]) => void;\n\n  /**\n   * Currency symbol to display\n   */\n  currency?: string;\n\n  /**\n   * Whether to show value labels above thumbs\n   */\n  showValueLabels?: boolean;\n\n  /**\n   * Whether the slider is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n/**\n * PriceRangeSlider - A clean, professional dual-range slider for price selection\n *\n * Replaces complex HeroUI Slider with a simple, accessible implementation\n */\nconst PriceRangeSlider: React.FC<PriceRangeSliderProps> = ({\n  min = 0,\n  max = 5000000,\n  step = 100000,\n  defaultValue = [0, 5000000],\n  value,\n  onChange,\n  currency = '€',\n  showValueLabels = true,\n  disabled = false,\n  className = '',\n}) => {\n  // Use controlled or uncontrolled state\n  const [internalValue, setInternalValue] = useState<[number, number]>(defaultValue);\n  const currentValue = value || internalValue;\n\n  const handleMinChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newMin = Math.max(min, Math.min(max, parseInt(event.target.value)));\n      const clampedMax = Math.max(min, Math.min(max, currentValue[1]));\n      const newValue: [number, number] = [newMin, Math.max(newMin, clampedMax)];\n\n      if (!value) {\n        setInternalValue(newValue);\n      }\n      onChange?.(newValue);\n    },\n    [currentValue, value, onChange, min, max]\n  );\n\n  const handleMaxChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newMax = Math.max(min, Math.min(max, parseInt(event.target.value)));\n      const clampedMin = Math.max(min, Math.min(max, currentValue[0]));\n      const newValue: [number, number] = [Math.min(clampedMin, newMax), newMax];\n\n      if (!value) {\n        setInternalValue(newValue);\n      }\n      onChange?.(newValue);\n    },\n    [currentValue, value, onChange, min, max]\n  );\n\n  const formatPrice = (price: number): string => {\n    if (price >= 1000000) {\n      return `${currency}${(price / 1000000).toFixed(price % 1000000 === 0 ? 0 : 1)}M`;\n    } else if (price >= 1000) {\n      return `${currency}${(price / 1000).toFixed(price % 1000 === 0 ? 0 : 1)}K`;\n    } else {\n      return `${currency}${price.toLocaleString()}`;\n    }\n  };\n\n  const getPercentage = (value: number): number => {\n    const clampedValue = Math.max(min, Math.min(max, value));\n    return ((clampedValue - min) / (max - min)) * 100;\n  };\n\n  // Ensure current values are within bounds\n  const clampedCurrentValue: [number, number] = [\n    Math.max(min, Math.min(max, currentValue[0])),\n    Math.max(min, Math.min(max, currentValue[1])),\n  ];\n\n  const minPercent = getPercentage(clampedCurrentValue[0]);\n  const maxPercent = getPercentage(clampedCurrentValue[1]);\n\n  return (\n    <div className={`price-range-slider ${className}`}>\n      <div className=\"bg-white rounded-2xl p-6 border border-slate-200 shadow-sm hover:shadow-md transition-all\">\n        {/* Value Labels */}\n        {showValueLabels && (\n          <div className=\"flex justify-between items-center mb-4\">\n            <div className=\"text-sm font-medium text-slate-700\">\n              Min:{' '}\n              <span className=\"text-blue-600 font-semibold\">\n                {formatPrice(clampedCurrentValue[0])}\n              </span>\n            </div>\n            <div className=\"text-sm font-medium text-slate-700\">\n              Max:{' '}\n              <span className=\"text-blue-600 font-semibold\">\n                {formatPrice(clampedCurrentValue[1])}\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* Slider Container */}\n        <div className=\"relative mb-6\">\n          {/* Track Background */}\n          <div className=\"slider-track\">\n            {/* Active Range */}\n            <div\n              className=\"slider-range\"\n              style={{\n                left: `${minPercent}%`,\n                width: `${maxPercent - minPercent}%`,\n              }}\n            />\n          </div>\n\n          {/* Range Inputs */}\n          <input\n            type=\"range\"\n            min={min}\n            max={max}\n            step={step}\n            value={clampedCurrentValue[0]}\n            onChange={handleMinChange}\n            disabled={disabled}\n            className=\"slider-input slider-input-min\"\n            aria-label={`Minimum price: ${formatPrice(clampedCurrentValue[0])}`}\n          />\n          <input\n            type=\"range\"\n            min={min}\n            max={max}\n            step={step}\n            value={clampedCurrentValue[1]}\n            onChange={handleMaxChange}\n            disabled={disabled}\n            className=\"slider-input slider-input-max\"\n            aria-label={`Maximum price: ${formatPrice(clampedCurrentValue[1])}`}\n          />\n        </div>\n\n        {/* Price Markers */}\n        <div className=\"flex justify-between text-xs text-slate-500\">\n          <span>{formatPrice(0)}</span>\n          <span>{formatPrice(1000000)}</span>\n          <span>{formatPrice(2500000)}</span>\n          <span>{formatPrice(max)}+</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PriceRangeSlider;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/filters/PriceRangeSliderShowcase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/filters/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomCheckbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomDropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":38,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'isFilled' is assigned a value but never used.","line":98,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isFilled' is assigned a value but never used.","line":98,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📋 Custom Dropdown Component - Enhanced dropdown with floating label\n// Location: src/shared/components/forms/CustomDropdown.tsx\n// Purpose: Reusable dropdown component with HeroUI styling and floating label\n\nimport { ChevronDown } from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\n\ninterface DropdownOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\ninterface CustomDropdownProps {\n  /**\n   * Label for the dropdown\n   */\n  label: string;\n\n  /**\n   * Placeholder text when no option is selected\n   */\n  placeholder?: string;\n\n  /**\n   * Array of dropdown options\n   */\n  options: DropdownOption[];\n\n  /**\n   * Currently selected value\n   */\n  value?: string;\n\n  /**\n   * Callback when selection changes\n   */\n  onChange: (value: string) => void;\n\n  /**\n   * Whether the field is required\n   */\n  required?: boolean;\n\n  /**\n   * Whether the dropdown is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Whether the field has been touched (for validation)\n   */\n  touched?: boolean;\n\n  /**\n   * Name attribute for the dropdown\n   */\n  name?: string;\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Reference to the dropdown element\n   */\n  dropdownRef?: React.RefObject<HTMLDivElement>;\n}\n\nconst CustomDropdown: React.FC<CustomDropdownProps> = ({\n  label,\n  placeholder = 'Select an option',\n  options,\n  value,\n  onChange,\n  required = false,\n  disabled = false,\n  error,\n  touched = false,\n  name,\n  className = '',\n  dropdownRef,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const internalRef = useRef<HTMLDivElement>(null);\n  const ref = dropdownRef || internalRef;\n\n  // Find the selected option\n  const selectedOption = options.find(option => option.value === value);\n  const hasValue = !!selectedOption;\n  const isFilled = hasValue || isFocused;\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        setIsOpen(false);\n        setIsFocused(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [ref]);\n\n  // Close on escape key\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setIsOpen(false);\n        setIsFocused(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, []);\n\n  const handleToggle = () => {\n    if (!disabled) {\n      setIsOpen(!isOpen);\n      setIsFocused(!isOpen);\n    }\n  };\n\n  const handleOptionSelect = (optionValue: string) => {\n    onChange(optionValue);\n    setIsOpen(false);\n    setIsFocused(false);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleToggle();\n    }\n  };\n\n  return (\n    <div className={`relative ${className}`} ref={ref}>\n      <div className=\"relative\">\n        {/* Main Dropdown Button */}\n        <button\n          type=\"button\"\n          tabIndex={0}\n          onClick={handleToggle}\n          onKeyDown={handleKeyDown}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => {\n            // Delay to allow option selection\n            setTimeout(() => setIsFocused(false), 150);\n          }}\n          disabled={disabled}\n          name={name}\n          className={`\n            w-full h-14 px-4 pt-6 pb-2 text-base text-black bg-white \n            border border-gray-300 rounded-xl transition-all duration-200 \n            focus:outline-none focus:border-gray-900 focus:ring-0\n            hover:border-gray-500\n            ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n            ${error && touched ? 'border-red-400 focus:border-red-500' : ''}\n            flex-col items-start justify-center gap-0\n            text-gray-900\n          `}\n          aria-haspopup=\"listbox\"\n          aria-expanded={isOpen}\n          aria-labelledby={`${label}-label ${label}-value`}\n        >\n          {/* Fixed Label */}\n          <label\n            className={`\n            absolute left-4 top-2 text-xs text-gray-700 pointer-events-none font-medium\n            ${error && touched ? 'text-red-600' : ''}\n            ${disabled ? 'text-gray-400' : ''}\n            ${required ? \"after:content-['*'] after:text-red-500 after:ml-1\" : ''}\n          `}\n            id={`${label}-label`}\n          >\n            {label}\n          </label>\n\n          {/* Inner Content */}\n          <div className=\"flex items-center w-full h-full\">\n            <span\n              className={`\n              font-normal w-full text-start text-gray-900 truncate\n              ${!hasValue ? 'text-gray-400' : ''}\n            `}\n              id={`${label}-value`}\n            >\n              {selectedOption ? selectedOption.label : placeholder}\n            </span>\n          </div>\n\n          {/* Dropdown Icon */}\n          <ChevronDown\n            className={`\n            absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 transition-transform duration-150 ease\n            ${isOpen ? 'rotate-180' : ''}\n            ${disabled ? 'text-gray-400' : 'text-gray-500'}\n          `}\n            aria-hidden=\"true\"\n          />\n        </button>\n\n        {/* Dropdown Options */}\n        {isOpen && (\n          <div className=\"relative z-[9999] mt-0 w-full\">\n            <div className=\"absolute w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-auto\">\n              {options.map(option => (\n                <button\n                  key={option.value}\n                  type=\"button\"\n                  onClick={() => handleOptionSelect(option.value)}\n                  disabled={option.disabled}\n                  className={`\n                  w-full px-4 py-3 text-left text-gray-900 transition-colors\n                  ${\n                    option.disabled\n                      ? 'text-gray-400 cursor-not-allowed'\n                      : 'hover:bg-gray-50 cursor-pointer'\n                  }\n                  ${option.value === value ? 'bg-gray-100 text-gray-900' : ''}\n                `}\n                  role=\"option\"\n                  aria-selected={option.value === value}\n                >\n                  {option.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Error Message */}\n      </div>\n      {error && touched && (\n        <span className=\"block text-sm text-red-600 mt-2 font-medium\">{error}</span>\n      )}\n    </div>\n  );\n};\n\nexport default CustomDropdown;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomFileInput.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":12,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📝 Custom File Input - Enhanced file input with consistent styling\n// Location: src/shared/components/forms/CustomFileInput.tsx\n// Purpose: Reusable file input component with consistent design system\n\nimport { File, Upload, X } from 'lucide-react';\nimport React, { useRef, useState } from 'react';\n\nexport interface CustomFileInputProps {\n  label: string;\n  placeholder?: string;\n  onChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  name: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  fileInputRef?: React.RefObject<HTMLInputElement>;\n  required?: boolean;\n  disabled?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  maxSize?: number; // in MB\n  description?: string;\n}\n\nconst CustomFileInput: React.FC<CustomFileInputProps> = ({\n  label,\n  placeholder = 'Choose file or drag and drop',\n  onChange,\n  onBlur,\n  name,\n  className = '',\n  error,\n  touched,\n  fileInputRef,\n  required = false,\n  disabled = false,\n  accept,\n  multiple = false,\n  maxSize,\n  description,\n}) => {\n  const internalRef = useRef<HTMLInputElement>(null);\n  const ref = fileInputRef || internalRef;\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const hasError = error && touched;\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    setSelectedFiles(files);\n    onChange(e);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (disabled) return;\n    \n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      setSelectedFiles(files);\n      // Create a synthetic event for consistency\n      const syntheticEvent = {\n        ...e,\n        target: {\n          ...e.target,\n          files,\n          name,\n        },\n      } as unknown as React.ChangeEvent<HTMLInputElement>;\n      onChange(syntheticEvent);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    if (!selectedFiles) return;\n    \n    const dt = new DataTransfer();\n    for (let i = 0; i < selectedFiles.length; i++) {\n      if (i !== index) {\n        dt.items.add(selectedFiles[i]);\n      }\n    }\n    \n    setSelectedFiles(dt.files);\n    \n    // Create a synthetic event\n    const syntheticEvent = {\n      target: {\n        files: dt.files,\n        name,\n      },\n    } as React.ChangeEvent<HTMLInputElement>;\n    onChange(syntheticEvent);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={`mb-6 ${className}`}>\n      <label\n        className={`\n          block text-sm font-medium mb-2\n          ${hasError ? 'text-red-600' : 'text-gray-900'}\n        `}\n      >\n        {label}\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\n      </label>\n\n      <div\n        className={`\n          relative border-2 border-dashed rounded-xl p-6 text-center transition-all duration-200\n          ${isDragOver ? 'border-gray-900 bg-gray-50' : 'border-gray-300'}\n          ${hasError ? 'border-red-400' : ''}\n          ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:border-gray-500'}\n        `}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={() => !disabled && ref.current?.click()}\n      >\n        <input\n          ref={ref}\n          type=\"file\"\n          name={name}\n          onChange={handleFileChange}\n          onBlur={onBlur}\n          required={required}\n          disabled={disabled}\n          accept={accept}\n          multiple={multiple}\n          className=\"sr-only\"\n          aria-describedby={description ? `${name}-description` : undefined}\n          aria-invalid={hasError}\n        />\n\n        <div className=\"flex flex-col items-center\">\n          <Upload className={`w-8 h-8 mb-2 ${hasError ? 'text-red-500' : 'text-gray-400'}`} />\n          <p className={`text-sm ${hasError ? 'text-red-600' : 'text-gray-600'}`}>\n            {placeholder}\n          </p>\n          {maxSize && (\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Maximum file size: {maxSize}MB\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Selected Files */}\n      {selectedFiles && selectedFiles.length > 0 && (\n        <div className=\"mt-4 space-y-2\">\n          {Array.from(selectedFiles).map((file, index) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg border\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <File className=\"w-4 h-4 text-gray-500\" />\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">{file.name}</p>\n                  <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n                </div>\n              </div>\n              {!disabled && (\n                <button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeFile(index);\n                  }}\n                  className=\"p-1 text-gray-400 hover:text-red-500 transition-colors\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {description && (\n        <p\n          id={`${name}-description`}\n          className=\"text-xs text-gray-500 mt-2\"\n        >\n          {description}\n        </p>\n      )}\n\n      {hasError && (\n        <span className=\"block text-sm text-red-600 mt-2 font-medium\">\n          {error}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default CustomFileInput;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomInputField.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":12,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":13,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":14,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📝 Custom Input Field - Enhanced input with floating label\n// Location: src/shared/components/forms/CustomInputField.tsx\n// Purpose: Reusable input field with smooth animations and validation states\n\nimport React, { useState } from 'react';\n\nexport interface CustomInputFieldProps {\n  label?: string;\n  type?: string;\n  placeholder?: string;\n  value?: string;\n  onChange?: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  onFocus?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  name?: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  required?: boolean;\n  disabled?: boolean;\n  autoFocus?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  description?: string;\n  autoComplete?: string;\n  inputRef?: React.RefObject<HTMLInputElement>;\n}\n\nconst CustomInputField: React.FC<CustomInputFieldProps> = ({\n  label = '',\n  type = 'text',\n  placeholder = '',\n  value = '',\n  onChange = () => {},\n  onBlur = () => {},\n  onFocus,\n  name = '',\n  className = '',\n  error,\n  touched,\n  required = false,\n  disabled = false,\n  autoFocus = false,\n  leftIcon,\n  rightIcon,\n  description,\n  autoComplete,\n  inputRef,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(true);\n    onFocus?.(e);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(false);\n    onBlur(e);\n  };\n\n  const hasValue = value.length > 0;\n  const isLabelFloating = isFocused || hasValue;\n  const hasError = error && touched;\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"relative custom-input-group flex flex-col items-center border border-gray-900 bg-default-100 rounded-xl shadow-sm\">\n        {leftIcon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\">\n            {leftIcon}\n          </div>\n        )}\n        \n        <input\n          ref={inputRef}\n          type={type}\n          name={name}\n          value={value}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={isLabelFloating ? placeholder : ''}\n          required={required}\n          disabled={disabled}\n          autoFocus={autoFocus}\n          autoComplete={autoComplete}\n          className={`\n            w-full h-16 px-4 pb-0 text-md text-foreground-500 focus:outline-none focus-visible:outline-none border-none rounded-xl focus:ring-2 focus:ring-black custom-input bg-filled text-md pt-4 pl-4 transition-all duration-200 ease-in-out\n            ${leftIcon ? 'pl-10' : ''}\n            ${rightIcon ? 'pr-10' : ''}\n            ${hasError \n              ? 'border-red-500 bg-red-50 focus:border-red-500 focus:ring-red-500' \n              : 'border-gray-300 bg-white focus:border-gray-500 focus:ring-gray-500'\n            }\n            ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'hover:border-gray-400'}\n            focus:outline-none focus:ring-2 focus:ring-opacity-20\n            text-gray-900 placeholder-gray-400\n          `}\n        />\n        \n        {rightIcon && (\n          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\">\n            {rightIcon}\n          </div>\n        )}\n        \n        <label\n          className={`\n            absolute left-4 transition-all duration-200 ease-in-out pointer-events-none\n            ${isLabelFloating \n              ? 'top-3 text-xs text-gray-600' \n              : 'top-5 text-md text-gray-500'\n            }\n            ${hasError ? 'text-red-500' : ''}\n            ${disabled ? 'text-gray-400' : ''}\n          `}\n        >\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      </div>\n      \n      {description && (\n        <p className=\"mt-1 text-sm text-gray-600\">{description}</p>\n      )}\n      \n      {hasError && (\n        <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default CustomInputField;","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomNumberInputField.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":13,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'formatAsCurrency' is assigned a value but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatAsCurrency' is assigned a value but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔢 Custom Number Input Field - Number input with formatting and validation\n// Location: src/shared/components/forms/CustomNumberInputField.tsx\n// Purpose: Number input with formatting, min/max validation, and consistent styling\n\nimport React, { useEffect, useState } from 'react';\n\nexport interface CustomNumberInputFieldProps {\n  label: string;\n  placeholder: string;\n  value: string | number;\n  onChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  onFocus?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  name: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  inputRef?: React.RefObject<HTMLInputElement>;\n  required?: boolean;\n  disabled?: boolean;\n  min?: number;\n  max?: number;\n  step?: number;\n  prefix?: string;\n  suffix?: string;\n  allowDecimals?: boolean;\n  formatAsCurrency?: boolean;\n}\n\nconst CustomNumberInputField: React.FC<CustomNumberInputFieldProps> = ({\n  label,\n  placeholder,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  name,\n  className = '',\n  error,\n  touched,\n  inputRef,\n  required = false,\n  disabled = false,\n  min,\n  max,\n  step = 1,\n  prefix,\n  suffix,\n  allowDecimals = true,\n  formatAsCurrency = false,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasContent, setHasContent] = useState(false);\n\n  useEffect(() => {\n    setHasContent(!!value);\n  }, [value]);\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(true);\n    onFocus?.(e);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(false);\n    onBlur(e);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // Allow: backspace, delete, tab, escape, enter, decimal point, minus, comma\n    if (\n      [8, 9, 27, 13, 46, 110, 190, 189, 109, 188].indexOf(e.keyCode) !== -1 ||\n      // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n      (e.keyCode === 65 && e.ctrlKey === true) ||\n      (e.keyCode === 67 && e.ctrlKey === true) ||\n      (e.keyCode === 86 && e.ctrlKey === true) ||\n      (e.keyCode === 88 && e.ctrlKey === true) ||\n      // Allow: home, end, left, right, down, up\n      (e.keyCode >= 35 && e.keyCode <= 40)\n    ) {\n      return;\n    }\n    // Allow numbers (0-9) from both main keyboard and numpad\n    if ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105)) {\n      return;\n    }\n    // Allow decimal point if decimals are allowed\n    if (allowDecimals && (e.keyCode === 190 || e.keyCode === 110)) {\n      return;\n    }\n    // Allow comma for thousands separator\n    if (e.keyCode === 188) {\n      return;\n    }\n    // Block all other keys\n    e.preventDefault();\n  };\n\n  const hasError = error && touched;\n\n  return (\n    <div className={`mb-6 ${className}`}>\n      <div className=\"relative\">\n        {prefix && (\n          <span className=\"absolute left-4 top-1/2 -translate-y-1/2 text-gray-500 text-sm font-medium\">\n            {prefix}\n          </span>\n        )}\n        <input\n          ref={inputRef}\n          type=\"text\"\n          inputMode=\"numeric\"\n          pattern=\"[0-9]*\"\n          placeholder={placeholder}\n          className={`\n            w-full h-14 px-4 pt-6 pb-2 text-base text-black bg-white \n            border border-gray-300 rounded-xl transition-all duration-200 \n            focus:outline-none focus:border-gray-900 focus:ring-0\n            hover:border-gray-500\n            ${hasError ? 'border-red-400 focus:border-red-500' : ''}\n            ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\n            ${prefix ? 'pl-8' : ''}\n            ${suffix ? 'pr-8' : ''}\n            placeholder:text-gray-400\n          `}\n          aria-label={label}\n          value={value}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          name={name}\n          required={required}\n          disabled={disabled}\n          min={min}\n          max={max}\n          step={step}\n        />\n        {suffix && (\n          <span className=\"absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 text-sm font-medium\">\n            {suffix}\n          </span>\n        )}\n        <label\n          className={`\n            absolute left-4 transition-all duration-200 pointer-events-none font-medium\n            ${\n              hasContent || isFocused || value\n                ? 'top-2 text-xs text-gray-700'\n                : 'top-1/2 -translate-y-1/2 text-sm text-gray-500'\n            }\n            ${hasError ? 'text-red-600' : ''}\n            ${prefix ? 'left-8' : ''}\n          `}\n        >\n          {label}\n        </label>\n      </div>\n\n      {hasError && <span className=\"block text-sm text-red-600 mt-2 font-medium\">{error}</span>}\n    </div>\n  );\n};\n\nexport default CustomNumberInputField;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomPasswordInputField.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":12,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":13,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":14,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔐 Custom Password Input Field - Password input with visibility toggle\n// Location: src/shared/components/forms/CustomPasswordInputField.tsx\n// Purpose: Password input with show/hide functionality and validation\n\nimport { Eye, EyeOff } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\nexport interface CustomPasswordInputFieldProps {\n  label: string;\n  placeholder: string;\n  value: string;\n  onChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  onFocus?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  name: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  inputRef?: React.RefObject<HTMLInputElement>;\n  autoComplete?: string;\n  required?: boolean;\n  disabled?: boolean;\n  showPasswordStrength?: boolean;\n}\n\nconst CustomPasswordInputField: React.FC<CustomPasswordInputFieldProps> = ({\n  label,\n  placeholder,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  name,\n  className = '',\n  error,\n  touched,\n  inputRef,\n  autoComplete = 'current-password',\n  required = false,\n  disabled = false,\n  showPasswordStrength = false,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasContent, setHasContent] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  useEffect(() => {\n    setHasContent(!!value);\n  }, [value]);\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(true);\n    onFocus?.(e);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(false);\n    onBlur(e);\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const getPasswordStrength = (password: string) => {\n    if (!password) return { strength: 0, text: '', color: '' };\n\n    let strength = 0;\n    if (password.length >= 8) strength++;\n    if (/[a-z]/.test(password)) strength++;\n    if (/[A-Z]/.test(password)) strength++;\n    if (/[0-9]/.test(password)) strength++;\n    if (/[^A-Za-z0-9]/.test(password)) strength++;\n\n    const strengthMap = {\n      0: { text: 'Very Weak', color: 'bg-red-500' },\n      1: { text: 'Weak', color: 'bg-red-400' },\n      2: { text: 'Fair', color: 'bg-yellow-500' },\n      3: { text: 'Good', color: 'bg-yellow-400' },\n      4: { text: 'Strong', color: 'bg-green-500' },\n      5: { text: 'Very Strong', color: 'bg-green-600' },\n    };\n\n    return { strength, ...strengthMap[strength as keyof typeof strengthMap] };\n  };\n\n  const hasError = error && touched;\n  const passwordStrength = showPasswordStrength ? getPasswordStrength(value) : null;\n\n  return (\n    <div className={`mb-6 relative ${className}`}>\n      <div className=\"relative custom-input-group flex flex-col items-center border border-gray-900 bg-default-100 rounded-xl shadow-sm\">\n        <input\n          ref={inputRef}\n          type={showPassword ? 'text' : 'password'}\n          placeholder={placeholder}\n          className={`\n            w-full h-16 px-4 pb-0 text-md text-foreground-500 focus:outline-none focus-visible:outline-none border-none rounded-xl focus:ring-2 focus:ring-black custom-input bg-filled text-md pt-4 pl-4 transition-all duration-200 ease-in-out\n            ${hasError ? 'border-red-500 bg-red-50 focus:border-red-500 focus:ring-red-500' : ''}\n            ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'hover:border-gray-400'}\n            focus:outline-none focus:ring-2 focus:ring-opacity-20\n            text-gray-900 placeholder-gray-400\n          `}\n          aria-label={label}\n          value={value}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          name={name}\n          autoComplete={autoComplete}\n          required={required}\n          disabled={disabled}\n        />\n\n        <label\n          className={`\n              absolute left-4 transition-all duration-200 ease-in-out pointer-events-none\n            ${\n              hasContent || isFocused || value\n                ? 'top-3 text-xs text-gray-600'\n                : 'top-5 text-md text-gray-500'\n            }\n            ${hasError ? 'text-red-500' : ''}\n            ${disabled ? 'text-gray-400' : ''}\n          `}\n        >\n          {label}\n        </label>\n        <button\n          type=\"button\"\n          onClick={togglePasswordVisibility}\n          disabled={disabled}\n          className=\"absolute top-1/2 right-4 -translate-y-1/2 text-gray-500 hover:text-gray-900 transition-colors duration-200 p-1 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n        </button>\n      </div>\n\n      {/* Password Strength Indicator */}\n      {showPasswordStrength && value && (\n        <div className=\"mt-2\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <div className=\"flex-1 h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div\n                className={`h-full transition-all duration-300 ${passwordStrength?.color}`}\n                style={{ width: `${((passwordStrength?.strength || 0) / 5) * 100}%` }}\n              />\n            </div>\n            <span className=\"text-xs font-medium text-gray-600\">{passwordStrength?.text}</span>\n          </div>\n          <div className=\"text-xs text-gray-500\">\n            Use 8+ characters with a mix of letters, numbers & symbols\n          </div>\n        </div>\n      )}\n\n      {hasError && <span className=\"block text-sm text-red-600 mt-2 font-medium\">{error}</span>}\n    </div>\n  );\n};\n\nexport default CustomPasswordInputField;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomRadio.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":12,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📝 Custom Radio - Enhanced radio button with consistent styling\n// Location: src/shared/components/forms/CustomRadio.tsx\n// Purpose: Reusable radio button component with consistent design system\n\nimport React, { useRef } from 'react';\n\nexport interface CustomRadioProps {\n  label: string;\n  value: string;\n  checked: boolean;\n  onChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  name: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  radioRef?: React.RefObject<HTMLInputElement>;\n  required?: boolean;\n  disabled?: boolean;\n  description?: string;\n}\n\nconst CustomRadio: React.FC<CustomRadioProps> = ({\n  label,\n  value,\n  checked,\n  onChange,\n  onBlur,\n  name,\n  className = '',\n  error,\n  touched,\n  radioRef,\n  required = false,\n  disabled = false,\n  description,\n}) => {\n  const internalRef = useRef<HTMLInputElement>(null);\n  const ref = radioRef || internalRef;\n\n  const hasError = error && touched;\n\n  return (\n    <div className={`mb-4 ${className}`}>\n      <div className=\"flex items-start gap-3\">\n        <div className=\"relative flex items-center\">\n          <input\n            ref={ref}\n            type=\"radio\"\n            id={`${name}-${value}`}\n            name={name}\n            value={value}\n            checked={checked}\n            onChange={onChange}\n            onBlur={onBlur}\n            required={required}\n            disabled={disabled}\n            className={`\n              w-5 h-5 text-gray-900 bg-white border-2 border-gray-300\n              focus:ring-2 focus:ring-gray-500 focus:ring-offset-0\n              transition-all duration-200\n              ${hasError ? 'border-red-400 focus:ring-red-500' : ''}\n              ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n            `}\n            aria-describedby={description ? `${name}-${value}-description` : undefined}\n            aria-invalid={hasError}\n          />\n          {checked && (\n            <div\n              className=\"absolute w-2 h-2 bg-gray-900 rounded-full pointer-events-none\"\n              style={{ top: '6px', left: '6px' }}\n            />\n          )}\n        </div>\n\n        <div className=\"flex-1\">\n          <label\n            htmlFor={`${name}-${value}`}\n            className={`\n              text-sm font-medium cursor-pointer select-none\n              ${hasError ? 'text-red-600' : 'text-gray-900'}\n              ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\n            `}\n          >\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </label>\n\n          {description && (\n            <p\n              id={`${name}-${value}-description`}\n              className=\"text-xs text-gray-500 mt-1\"\n            >\n              {description}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {hasError && (\n        <span className=\"block text-sm text-red-600 mt-2 font-medium\">\n          {error}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default CustomRadio;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomSwitch.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":10,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":11,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📝 Custom Switch - Enhanced switch component with consistent styling\n// Location: src/shared/components/forms/CustomSwitch.tsx\n// Purpose: Reusable switch component with consistent design system\n\nimport React, { useRef } from 'react';\n\nexport interface CustomSwitchProps {\n  label: string;\n  checked: boolean;\n  onChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur?: (_e: React.FocusEvent<HTMLInputElement>) => void;\n  name: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  switchRef?: React.RefObject<HTMLInputElement>;\n  required?: boolean;\n  disabled?: boolean;\n  description?: string;\n}\n\nconst CustomSwitch: React.FC<CustomSwitchProps> = ({\n  label,\n  checked,\n  onChange,\n  onBlur,\n  name,\n  className = '',\n  error,\n  touched,\n  switchRef,\n  required = false,\n  disabled = false,\n  description,\n}) => {\n  const internalRef = useRef<HTMLInputElement>(null);\n  const ref = switchRef || internalRef;\n\n  const hasError = error && touched;\n\n  return (\n    <div className={`mb-6 ${className}`}>\n      <div className=\"flex items-start gap-3\">\n        <div className=\"relative flex items-center\">\n          <input\n            ref={ref}\n            type=\"checkbox\"\n            id={`${name}-switch`}\n            name={name}\n            checked={checked}\n            onChange={onChange}\n            onBlur={onBlur}\n            required={required}\n            disabled={disabled}\n            className=\"sr-only\"\n            aria-describedby={description ? `${name}-description` : undefined}\n            aria-invalid={hasError}\n          />\n          <label\n            htmlFor={`${name}-switch`}\n            className={`\n              relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-200\n              ${checked ? 'bg-gray-900' : 'bg-gray-300'}\n              ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n              ${hasError ? 'ring-2 ring-red-500 ring-offset-2' : ''}\n            `}\n          >\n            <span\n              className={`\n                inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200\n                ${checked ? 'translate-x-6' : 'translate-x-1'}\n              `}\n            />\n          </label>\n        </div>\n\n        <div className=\"flex-1\">\n          <label\n            htmlFor={`${name}-switch`}\n            className={`\n              text-sm font-medium cursor-pointer select-none\n              ${hasError ? 'text-red-600' : 'text-gray-900'}\n              ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\n            `}\n          >\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </label>\n\n          {description && (\n            <p\n              id={`${name}-description`}\n              className=\"text-xs text-gray-500 mt-1\"\n            >\n              {description}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {hasError && (\n        <span className=\"block text-sm text-red-600 mt-2 font-medium\">\n          {error}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default CustomSwitch;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/CustomTextarea.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":56},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":12,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":13,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":55},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'adjustHeight' function makes the dependencies of useEffect Hook (at line 90) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'adjustHeight' in its own useCallback() Hook.","line":76,"column":13,"nodeType":"VariableDeclarator","endLine":86,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📝 Custom Textarea - Enhanced textarea with floating label\n// Location: src/shared/components/forms/CustomTextarea.tsx\n// Purpose: Reusable textarea with smooth animations and validation states\n\nimport React, { useEffect, useRef, useState } from 'react';\n\nexport interface CustomTextareaProps {\n  label: string;\n  placeholder: string;\n  value: string;\n  onChange: (_e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onBlur: (_e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onFocus?: (_e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  name: string;\n  className?: string;\n  error?: string;\n  touched?: boolean;\n  textareaRef?: React.RefObject<HTMLTextAreaElement>;\n  required?: boolean;\n  disabled?: boolean;\n      rows?: number;\n      minHeight?: number;\n      maxHeight?: number;\n      autoResize?: boolean;\n      minRows?: number;\n      maxRows?: number;\n      characterLimit?: number;\n      description?: string;\n}\n\nconst CustomTextarea: React.FC<CustomTextareaProps> = ({\n  label,\n  placeholder,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  name,\n  className = '',\n  error,\n  touched,\n  textareaRef,\n  required = false,\n  disabled = false,\n      rows = 4,\n      minHeight = 120,\n      maxHeight,\n      autoResize = true,\n      minRows,\n      maxRows,\n      characterLimit,\n      description,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasContent, setHasContent] = useState(false);\n  const internalRef = useRef<HTMLTextAreaElement>(null);\n  const ref = textareaRef || internalRef;\n\n  useEffect(() => {\n    setHasContent(!!value);\n  }, [value]);\n\n  const handleFocus = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    setIsFocused(true);\n    onFocus?.(e);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    setIsFocused(false);\n    onBlur(e);\n  };\n\n  const hasError = error && touched;\n\n      // Auto-resize functionality\n      const adjustHeight = () => {\n        if (autoResize && ref.current) {\n          const textarea = ref.current;\n          textarea.style.height = 'auto';\n          const scrollHeight = textarea.scrollHeight;\n          const minHeightPx = minRows ? minRows * 24 : minHeight; // 24px per row\n          const maxHeightPx = maxRows ? maxRows * 24 : (maxHeight || minHeight * 3);\n          const newHeight = Math.min(Math.max(scrollHeight, minHeightPx), maxHeightPx);\n          textarea.style.height = `${newHeight}px`;\n        }\n      };\n\n  useEffect(() => {\n    adjustHeight();\n  }, [value, autoResize, minHeight, maxHeight, adjustHeight]);\n\n  return (\n    <div className={`mb-6 ${className}`}>\n      <div className=\"relative custom-input-group flex flex-col items-center border border-gray-900 bg-default-100 rounded-xl shadow-sm\">\n        <textarea\n          ref={ref}\n          placeholder={placeholder}\n          className={`\n            w-full px-4 pt-6 pb-2 text-base text-black bg-white \n            border border-gray-300 rounded-xl focus:outline-none focus-visible:outline-none border-none rounded-xl focus:ring-2 focus:ring-black custom-input bg-filled text-md pt-4 pl-4 transition-all duration-200 ease-in-out\n            ${hasError ? 'border-red-400 focus:border-red-500' : ''}\n            ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\n            placeholder:text-transparent resize-none\n          `}\n          aria-label={label}\n          value={value}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          name={name}\n          required={required}\n          disabled={disabled}\n          rows={autoResize ? undefined : rows}\n          style={{\n            minHeight: `${minHeight}px`,\n            maxHeight: maxHeight ? `${maxHeight}px` : 'none',\n          }}\n        />\n        <label\n          className={`\n               absolute left-4 transition-all duration-200 ease-in-out pointer-events-none\n            ${\n              hasContent || isFocused || value\n                ? 'top-3 text-xs text-gray-600' \n                : 'top-5 text-md text-gray-500'\n            }\n            ${hasError ? 'text-red-600' : ''}\n          `}\n        >\n          {label}\n        </label>\n      </div>\n\n          {hasError && <span className=\"block text-sm text-red-600 mt-2 font-medium\">{error}</span>}\n          \n          {/* Character limit and description */}\n          <div className=\"flex justify-between items-center mt-2\">\n            {description && <span className=\"text-sm text-gray-500\">{description}</span>}\n            {characterLimit && (\n              <span className={`text-sm ${value.length > characterLimit ? 'text-red-500' : 'text-gray-500'}`}>\n                {value.length}/{characterLimit}\n              </span>\n            )}\n          </div>\n        </div>\n      );\n    };\n\nexport default CustomTextarea;","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/FormField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/FormRecovery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/StandardInput.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":31,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":41,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📝 Standard Input - Unified form input with consistent styling\n// Location: src/shared/components/forms/StandardInput.tsx\n// Purpose: Standardized input component with floating label and consistent design\n\nimport React, { useEffect, useRef, useState } from 'react';\n\ninterface StandardInputProps {\n  /**\n   * Label for the input field\n   */\n  label: string;\n\n  /**\n   * Input type (text, email, password, etc.)\n   */\n  type?: string;\n\n  /**\n   * Placeholder text (should be a space for floating label effect)\n   */\n  placeholder?: string;\n\n  /**\n   * Current value\n   */\n  value: string;\n\n  /**\n   * Change handler\n   */\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n\n  /**\n   * Blur handler\n   */\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n\n  /**\n   * Focus handler\n   */\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;\n\n  /**\n   * Input name attribute\n   */\n  name: string;\n\n  /**\n   * Input id attribute\n   */\n  id?: string;\n\n  /**\n   * Whether the field is required\n   */\n  required?: boolean;\n\n  /**\n   * Whether the input is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Auto complete attribute\n   */\n  autoComplete?: string;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Whether the field has been touched (for validation)\n   */\n  touched?: boolean;\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Reference to the input element\n   */\n  inputRef?: React.RefObject<HTMLInputElement>;\n\n  /**\n   * Aria label for accessibility\n   */\n  ariaLabel?: string;\n}\n\nconst StandardInput: React.FC<StandardInputProps> = ({\n  label,\n  type = 'text',\n  placeholder = ' ',\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  name,\n  id,\n  required = false,\n  disabled = false,\n  autoComplete,\n  error,\n  touched = false,\n  className = '',\n  inputRef,\n  ariaLabel,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasContent, setHasContent] = useState(false);\n  const internalRef = useRef<HTMLInputElement>(null);\n  const ref = inputRef || internalRef;\n\n  // Generate unique IDs if not provided\n  const inputId = id || `${name}-input`;\n  const labelId = `${name}-label`;\n\n  useEffect(() => {\n    setHasContent(!!value);\n  }, [value]);\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(true);\n    onFocus?.(e);\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(false);\n    onBlur?.(e);\n  };\n\n  const isFilled = hasContent || isFocused;\n  const hasError = error && touched;\n\n  return (\n    <div className={`w-full flex flex-col ${className}`}>\n      {/* Input Container */}\n      <div className=\"relative w-full\">\n        {/* Input Element */}\n        <input\n          ref={ref}\n          type={type}\n          id={inputId}\n          name={name}\n          value={value}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          disabled={disabled}\n          required={required}\n          autoComplete={autoComplete}\n          aria-label={ariaLabel || label}\n          aria-labelledby={labelId}\n          className={`\n            w-full h-14 px-4 pt-6 pb-2 text-base text-black bg-white \n            border border-gray-300 rounded-xl transition-all duration-200 \n            focus:outline-none focus:border-gray-900 focus:ring-0\n            hover:border-gray-500\n            placeholder:text-transparent\n            ${hasError ? 'border-red-400 focus:border-red-500' : ''}\n            ${disabled ? 'opacity-50 cursor-not-allowed bg-gray-50' : 'cursor-text'}\n          `}\n        />\n\n        {/* Floating Label */}\n        <label\n          htmlFor={inputId}\n          className={`\n            absolute left-4 transition-all duration-200 ease-out pointer-events-none\n            ${isFilled ? 'top-2 text-xs text-gray-600' : 'top-4 text-base text-gray-500'}\n            ${hasError ? 'text-red-500' : ''}\n            ${required ? \"after:content-['*'] after:text-red-500 after:ml-1\" : ''}\n          `}\n          id={labelId}\n        >\n          {label}\n        </label>\n      </div>\n\n      {/* Error Message */}\n      {hasError && <span className=\"block text-sm text-red-600 mt-2 font-medium\">{error}</span>}\n    </div>\n  );\n};\n\nexport default StandardInput;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/forms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/container/Container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/footer/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/footer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/buyer/BuyerNavigation.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":24,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":24,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🧭 Buyer Navigation\n// Location: src/shared/components/layout/navigation/buyer/BuyerNavigation.tsx\n// Purpose: Clean navigation for buyer pages (like Airbnb guest mode)\n//\n// Features:\n// - Logo on the left\n// - User avatar/profile menu on the right\n// - No \"List your business\" button (buyers don't list)\n// - Clean, minimal design\n// - No center navigation items\n\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAuth } from '../../../../../app/providers/auth-provider';\nimport BuyerNavigationDesktop from './BuyerNavigationDesktop';\nimport BuyerNavigationMobile from './BuyerNavigationMobile';\n\ninterface BuyerNavigationProps {\n  className?: string;\n}\n\nconst BuyerNavigation: React.FC<BuyerNavigationProps> = ({ className = '' }) => {\n  const location = useLocation();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n  }, [location.pathname]);\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  return (\n    <>\n      {/* Desktop Navigation */}\n      <BuyerNavigationDesktop\n        user={user}\n        isCheckingAuth={isLoading}\n        onMobileMenuToggle={toggleMobileMenu}\n        className={className}\n      />\n\n      {/* Mobile Navigation */}\n      <BuyerNavigationMobile user={user} isOpen={isMobileMenuOpen} onToggle={toggleMobileMenu} />\n    </>\n  );\n};\n\nexport default BuyerNavigation;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/buyer/BuyerNavigationDesktop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/buyer/BuyerNavigationMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/buyer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dashboard/DashboardSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dashboard/DashboardSidebarMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dropdown/BuyerDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2080,2083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2080,2083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🛒 Buyer Dropdown - MVP Version\n// Location: src/shared/components/navigation/dropdown/BuyerDropdown.tsx\n// Purpose: Buyer-specific user avatar dropdown based on legacy user_avatar_dropdown.tsx\n//\n// Features:\n// - Buyer-focused navigation items\n// - Browse businesses, saved items, messages\n// - Account settings and help\n// - Logout functionality\n\nimport { AuthenticationService } from '@/shared/services/auth';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { User } from '../../../../types';\nimport {\n  createNavigationHandler,\n  getBuyerDropdownItems,\n  getUserDisplayRole,\n  getUserInitials,\n} from '../utils';\n\ninterface BuyerDropdownProps {\n  user: User;\n}\n\nconst BuyerDropdown: React.FC<BuyerDropdownProps> = ({ user }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const navigate = useNavigate();\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Initialize auth service and navigation handler\n  const authService = new AuthenticationService();\n  const navigationHandler = createNavigationHandler(navigate, authService);\n\n  // Close dropdown on click outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  // Close dropdown on escape key\n  useEffect(() => {\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isOpen]);\n\n  // Get menu items - exact copy from legacy\n  const menuItems = getBuyerDropdownItems();\n\n  const handleItemClick = (item: any) => {\n    if (item.isLogout) {\n      navigationHandler.handleLogout();\n    } else if (item.action) {\n      navigationHandler.handleMenuClick(item.action);\n    } else if (item.href) {\n      navigate(item.href);\n    }\n    setIsOpen(false);\n  };\n\n  return (\n    <div ref={dropdownRef} className=\"relative\">\n      {/* Avatar Button */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center justify-center w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white text-sm font-medium hover:opacity-90 transition-opacity duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n        aria-label={`${user.name || user.email} - Account Menu`}\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n      >\n        {getUserInitials(user)}\n      </button>\n\n      {/* Dropdown Menu */}\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div className=\"fixed inset-0 z-40\" onClick={() => setIsOpen(false)} aria-hidden=\"true\" />\n\n          {/* Dropdown */}\n          <div className=\"absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n            {/* User Profile Header */}\n            <div className=\"px-4 py-3 border-b border-gray-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-white text-sm font-medium\">{getUserInitials(user)}</span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate\">\n                    {user.name || 'User'}\n                  </div>\n                  <div className=\"text-xs text-gray-500 truncate\">{user.email}</div>\n                  <div className=\"text-xs text-gray-400 capitalize\">{getUserDisplayRole(user)}</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Menu Items */}\n            <div className=\"py-2\">\n              {menuItems.map((item, index) => {\n                if (item.divider) {\n                  return (\n                    <div key={index} className=\"my-2 border-t border-gray-200\" role=\"separator\" />\n                  );\n                }\n\n                const Icon = item.icon;\n                const isLogout = item.isLogout;\n\n                return (\n                  <button\n                    key={index}\n                    onClick={() => handleItemClick(item)}\n                    className={`w-full flex items-center gap-3 px-3 py-2.5 text-sm transition-colors duration-150 ${\n                      isLogout\n                        ? 'text-red-600 hover:text-red-700 hover:bg-red-50'\n                        : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                    }`}\n                    role=\"menuitem\"\n                  >\n                    <Icon className=\"w-4 h-4 flex-shrink-0\" />\n                    <span className=\"flex-1 text-left\">{item.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BuyerDropdown;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dropdown/SellerDropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2172,2175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2172,2175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏢 Seller Dropdown - MVP Version\n// Location: src/shared/components/navigation/dropdown/SellerDropdown.tsx\n// Purpose: Seller-specific user avatar dropdown based on legacy user_avatar_dropdown.tsx\n//\n// Features:\n// - Seller-focused navigation items\n// - Business dashboard, listings, valuation\n// - Performance tracking and analytics\n// - Account settings and help\n// - Logout functionality\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronDown } from 'lucide-react';\nimport { User } from '../../../../types';\nimport { AuthenticationService } from '@/shared/services/auth';\nimport {\n  getSellerDropdownItems,\n  createNavigationHandler,\n  getUserInitials,\n  getUserDisplayRole,\n} from '../utils';\n\ninterface SellerDropdownProps {\n  user: User;\n}\n\nconst SellerDropdown: React.FC<SellerDropdownProps> = ({ user }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const navigate = useNavigate();\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Initialize auth service and navigation handler\n  const authService = new AuthenticationService();\n  const navigationHandler = createNavigationHandler(navigate, authService);\n\n  // Close dropdown on click outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  // Close dropdown on escape key\n  useEffect(() => {\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isOpen]);\n\n  // Get menu items - exact copy from legacy\n  const menuItems = getSellerDropdownItems();\n\n  const handleItemClick = (item: any) => {\n    if (item.isLogout) {\n      navigationHandler.handleLogout();\n    } else if (item.action) {\n      navigationHandler.handleMenuClick(item.action);\n    } else if (item.href) {\n      navigate(item.href);\n    }\n    setIsOpen(false);\n  };\n\n  return (\n    <div ref={dropdownRef} className=\"relative\">\n      {/* Avatar Button */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center justify-center w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white text-sm font-medium hover:opacity-90 transition-opacity duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n        aria-label={`${user.name || user.email} - Account Menu`}\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n      >\n        {getUserInitials(user)}\n      </button>\n\n      {/* Dropdown Menu */}\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div className=\"fixed inset-0 z-40\" onClick={() => setIsOpen(false)} aria-hidden=\"true\" />\n\n          {/* Dropdown */}\n          <div className=\"absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n            {/* User Profile Header */}\n            <div className=\"px-4 py-3 border-b border-gray-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-white text-sm font-medium\">{getUserInitials(user)}</span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate\">\n                    {user.name || 'User'}\n                  </div>\n                  <div className=\"text-xs text-gray-500 truncate\">{user.email}</div>\n                  <div className=\"text-xs text-gray-400 capitalize\">{getUserDisplayRole(user)}</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Menu Items */}\n            <div className=\"py-2\">\n              {menuItems.map((item, index) => {\n                if (item.divider) {\n                  return (\n                    <div key={index} className=\"my-2 border-t border-gray-200\" role=\"separator\" />\n                  );\n                }\n\n                const Icon = item.icon;\n                const isLogout = item.isLogout;\n\n                return (\n                  <button\n                    key={index}\n                    onClick={() => handleItemClick(item)}\n                    className={`w-full flex items-center gap-3 px-3 py-2.5 text-sm transition-colors duration-150 ${\n                      isLogout\n                        ? 'text-red-600 hover:text-red-700 hover:bg-red-50'\n                        : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                    }`}\n                    role=\"menuitem\"\n                  >\n                    <Icon className=\"w-4 h-4 flex-shrink-0\" />\n                    <span className=\"flex-1 text-left\">{item.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SellerDropdown;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dropdown/UserAvatarDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'isBuyer' is assigned a value but never used.","line":117,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isBuyer' is assigned a value but never used.","line":117,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'getUserInitials' is assigned a value but never used.","line":214,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getUserInitials' is assigned a value but never used.","line":214,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { authService } from '@/shared/services/auth';\nimport {\n  Heart,\n  HelpCircle,\n  LayoutDashboard,\n  LogOut,\n  MessageCircle,\n  Plus,\n  Settings,\n} from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UrlGenerator } from '../../../../services/urls/urlGenerator';\nimport { User } from '../../../../types';\n\ninterface UserAvatarDropdownProps {\n  user: User;\n}\n\nconst UserAvatarDropdown: React.FC<UserAvatarDropdownProps> = ({ user }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const navigate = useNavigate();\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const avatarRef = useRef<HTMLImageElement>(null);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        avatarRef.current &&\n        !avatarRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Close on escape key\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, []);\n\n  const handleLogout = async () => {\n    try {\n      await authService.logout();\n      window.dispatchEvent(new CustomEvent('auth-logout'));\n      window.dispatchEvent(new CustomEvent('auth-change'));\n      navigate(UrlGenerator.root());\n    } catch (error) {\n      navigate(UrlGenerator.root());\n    }\n    setIsOpen(false);\n  };\n\n  const handleMenuClick = (action: string) => {\n    setIsOpen(false);\n\n    switch (action) {\n      // Buyer navigation\n      case 'browse-listings':\n        navigate(UrlGenerator.listings());\n        break;\n      case 'saved':\n        navigate(UrlGenerator.savedItems());\n        break;\n\n      // Business Owner navigation\n      case 'business-dashboard':\n      case 'my-business':\n        navigate(UrlGenerator.myBusiness());\n        break;\n      case 'my-listings':\n        navigate(UrlGenerator.myBusiness());\n        break;\n      case 'valuation':\n        navigate(UrlGenerator.businessValuations());\n        break;\n      case 'performance':\n        navigate(UrlGenerator.businessPerformance());\n        break;\n      case 'documents':\n        navigate(UrlGenerator.businessDocuments());\n        break;\n\n      // Common navigation\n      case 'messages':\n        navigate(UrlGenerator.messages());\n        break;\n      case 'profile-settings':\n        navigate(UrlGenerator.userSettings());\n        break;\n      case 'help-center':\n        navigate(UrlGenerator.help());\n        break;\n      case 'create-listing':\n        navigate(UrlGenerator.createNewListing());\n        break;\n      case 'logout':\n        handleLogout();\n        break;\n    }\n  };\n\n  const isSeller = user?.role === 'seller' || user?.role === 'both';\n  const isBuyer = user?.role === 'buyer' || user?.role === 'both';\n\n  const defaultAvatar =\n    'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&q=80';\n\n  const buyerMenuItems = [\n    {\n      key: 'browse-listings',\n      icon: LayoutDashboard,\n      label: 'Browse Businesses',\n      action: 'browse-listings',\n    },\n    {\n      key: 'saved',\n      icon: Heart,\n      label: 'Saved Items',\n      action: 'saved',\n    },\n    {\n      key: 'messages',\n      icon: MessageCircle,\n      label: 'Messages',\n      action: 'messages',\n    },\n    {\n      key: 'divider-1',\n      isDivider: true,\n    },\n    {\n      key: 'profile-settings',\n      icon: Settings,\n      label: 'Account Settings',\n      action: 'profile-settings',\n    },\n    {\n      key: 'help-center',\n      icon: HelpCircle,\n      label: 'Help Center',\n      action: 'help-center',\n    },\n    {\n      key: 'divider-2',\n      isDivider: true,\n    },\n    {\n      key: 'logout',\n      icon: LogOut,\n      label: 'Log Out',\n      action: 'logout',\n      isLogout: true,\n    },\n  ];\n\n  const businessOwnerMenuItems = [\n    {\n      key: 'business-dashboard',\n      icon: LayoutDashboard,\n      label: 'My Business',\n      action: 'business-dashboard',\n    },\n    {\n      key: 'divider-1',\n      isDivider: true,\n    },\n    {\n      key: 'profile-settings',\n      icon: Settings,\n      label: 'Account Settings',\n      action: 'profile-settings',\n    },\n    {\n      key: 'help-center',\n      icon: HelpCircle,\n      label: 'Get Help',\n      action: 'help-center',\n    },\n    {\n      key: 'create-listing',\n      icon: Plus,\n      label: 'Create a New Listing',\n      action: 'create-listing',\n    },\n    {\n      key: 'divider-2',\n      isDivider: true,\n    },\n    {\n      key: 'logout',\n      icon: LogOut,\n      label: 'Log Out',\n      action: 'logout',\n      isLogout: true,\n    },\n  ];\n\n  const menuItems = isSeller ? businessOwnerMenuItems : buyerMenuItems;\n\n  const getUserInitials = (user: User) => {\n    if (user.name) {\n      const parts = user.name.split(' ');\n      if (parts.length > 1) {\n        return `${parts[0].charAt(0)}${parts[1].charAt(0)}`.toUpperCase();\n      }\n      return parts[0].charAt(0).toUpperCase();\n    }\n    return user.email?.charAt(0).toUpperCase() || 'U';\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Clean Avatar - No borders, spacing, or effects */}\n      <img\n        ref={avatarRef}\n        src={user?.avatar || defaultAvatar}\n        alt={user?.name || 'User'}\n        className=\"w-8 h-8 rounded-full object-cover cursor-pointer select-none\"\n        onClick={() => setIsOpen(!isOpen)}\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={e => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            setIsOpen(!isOpen);\n          }\n        }}\n        aria-label=\"User menu\"\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n      />\n\n      {/* Custom Dropdown - Full control */}\n      {isOpen && (\n        <div\n          ref={dropdownRef}\n          className=\"absolute right-0 top-full mt-2 w-56 bg-white rounded-xl shadow-2xl border-0 z-50 overflow-hidden\"\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n          style={{\n            filter: 'drop-shadow(0 25px 25px rgb(0 0 0 / 0.15))',\n          }}\n        >\n          {menuItems.map((item, index) => {\n            if (item.isDivider) {\n              return <div key={item.key} className=\"h-px bg-gray-200 my-1\" role=\"separator\" />;\n            }\n\n            const Icon = item.icon!;\n            const isFirst = index === 0;\n            const isLast = index === menuItems.length - 1;\n\n            return (\n              <button\n                key={item.key}\n                className={`\n                  w-full flex items-center gap-3 px-4 py-3 text-sm font-medium text-gray-700 \n                  hover:bg-gray-50 transition-colors duration-150 text-left border-0 bg-transparent\n                  ${isFirst ? 'rounded-t-xl' : ''} \n                  ${isLast ? 'rounded-b-xl' : ''}\n                  ${item.isLogout ? 'text-gray-700 hover:bg-gray-50' : ''}\n                `}\n                onClick={() => handleMenuClick(item.action!)}\n                role=\"menuitem\"\n                tabIndex={0}\n              >\n                <Icon className=\"w-4 h-4 text-gray-500 flex-shrink-0\" />\n                <span className=\"flex-1\">{item.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserAvatarDropdown;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/dropdown/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/main/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/main/NavigationDesktop.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'hasToken' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasToken' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'authCheckComplete' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authCheckComplete' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'location' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'location' is assigned a value but never used.","line":37,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'handleSignup' is assigned a value but never used.","line":48,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSignup' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🖥️ Navigation Desktop - MVP Version\n// Location: src/shared/components/navigation/main/NavigationDesktop.tsx\n// Purpose: Desktop navigation bar based on legacy UnifiedNavigation.tsx\n//\n// Features:\n// - Desktop navigation with authentication\n// - User avatar dropdown integration\n// - Mobile menu toggle button\n// - Role-based navigation items\n\nimport { Button } from '@/shared/components/buttons';\nimport { Menu } from 'lucide-react';\nimport * as React from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../../../app/providers/auth-provider';\nimport { UrlGenerator } from '../../../../services';\nimport { User } from '../../../../types';\nimport UserAvatarDropdown from '../dropdown/UserAvatarDropdown';\n\ninterface NavigationDesktopProps {\n  user: User | null;\n  isCheckingAuth: boolean;\n  hasToken: boolean;\n  authCheckComplete: boolean;\n  onMobileMenuToggle: () => void;\n  className?: string;\n}\n\nconst NavigationDesktop: React.FC<NavigationDesktopProps> = ({\n  user,\n  isCheckingAuth,\n  hasToken,\n  authCheckComplete,\n  onMobileMenuToggle,\n  className = '',\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { openModal } = useAuth();\n\n  // Navigation items are now hardcoded to match legacy app\n\n  // Handle authentication actions\n  const handleLogin = () => {\n    openModal('login');\n  };\n\n  const handleSignup = () => {\n    openModal('signup');\n  };\n\n  const handleSellBusiness = () => {\n    if (user) {\n      navigate(UrlGenerator.myBusiness());\n    } else {\n      openModal('signup');\n    }\n  };\n\n  // Render user menu - using unified dropdown\n  const renderUserMenu = () => {\n    if (!user) return null;\n    return <UserAvatarDropdown user={user} />;\n  };\n\n  return (\n    <nav\n      className={`flex w-full h-auto items-center justify-center backdrop-blur-lg backdrop-saturate-150 bg-white border-b border-neutral-200 shadow-sm sticky top-0 z-30 py-4 ${className}`}\n      style={{ '--navbar-height': '4rem' } as React.CSSProperties}\n    >\n      <header className=\"z-40 flex px-6 gap-4 w-full flex-row relative flex-nowrap items-center justify-between h-[var(--navbar-height)] max-w-full\">\n        {/* Logo Section */}\n        <div className=\"flex basis-0 flex-row flex-grow flex-nowrap justify-start bg-transparent items-center no-underline text-medium whitespace-nowrap box-border\">\n          <Link to=\"/\" className=\"flex items-center space-x-3\">\n            <img\n              src=\"/upswitch_logo.svg?v=2024.1\"\n              alt=\"Upswitch - European SME M&A Platform\"\n              width=\"32\"\n              height=\"32\"\n              className=\"logo-image transition-opacity hover:opacity-80 w-8 h-8\"\n              loading=\"lazy\"\n              style={{\n                height: '32px',\n                objectFit: 'contain',\n                opacity: 1,\n                visibility: 'visible',\n                display: 'block',\n              }}\n            />\n            <span className=\"text-xl font-bold text-gray-900 ml-2\">Upswitch</span>\n          </Link>\n        </div>\n\n        {/* Center Navigation - Desktop */}\n        <div className=\"absolute left-1/2 transform -translate-x-1/2 hidden lg:block\">\n          <ul className=\"h-full flex-row flex-nowrap items-center flex gap-8\">\n            <li className=\"text-medium whitespace-nowrap box-border list-none\">\n              <Link\n                to=\"/for-sellers\"\n                className=\"text-neutral-700 hover:text-primary-600 transition-colors text-sm font-medium\"\n              >\n                How to Sell\n              </Link>\n            </li>\n            <li className=\"text-medium whitespace-nowrap box-border list-none\">\n              <Link\n                to=\"/search\"\n                className=\"text-neutral-700 hover:text-primary-600 transition-colors text-sm font-medium\"\n              >\n                Browse Businesses\n              </Link>\n            </li>\n            <li className=\"text-medium whitespace-nowrap box-border list-none\">\n              <Link\n                to=\"/resources/valuation-guide\"\n                className=\"text-neutral-700 hover:text-primary-600 transition-colors text-sm font-medium\"\n              >\n                Free Valuation\n              </Link>\n            </li>\n          </ul>\n        </div>\n\n        {/* Right Section */}\n        <div className=\"flex basis-0 flex-row flex-grow flex-nowrap justify-end bg-transparent items-center\">\n          <ul className=\"h-full flex-row flex-nowrap flex items-center gap-4\" data-justify=\"end\">\n            {/* Desktop Actions */}\n            <li className=\"text-medium whitespace-nowrap box-border list-none hidden lg:flex items-center gap-4\">\n              {user ? (\n                renderUserMenu()\n              ) : isCheckingAuth ? (\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center animate-pulse\">\n                    <span className=\"text-white text-sm font-medium\">•</span>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <Button variant=\"link\" size=\"sm\" onClick={handleLogin}>\n                    Log in\n                  </Button>\n                  <Button variant=\"primary\" size=\"sm\" onClick={handleSellBusiness}>\n                    List your business\n                  </Button>\n                </>\n              )}\n            </li>\n\n            {/* Mobile Actions */}\n            <li className=\"text-medium whitespace-nowrap box-border list-none flex lg:hidden items-center gap-2\">\n              {user ? (\n                <>\n                  {renderUserMenu()}\n                  <Button\n                    isIconOnly\n                    variant=\"tertiary\"\n                    onClick={onMobileMenuToggle}\n                    className=\"text-neutral-700\"\n                    aria-label=\"Open mobile menu\"\n                  >\n                    <Menu className=\"w-5 h-5 text-neutral-700\" />\n                  </Button>\n                </>\n              ) : isCheckingAuth ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center animate-pulse\">\n                    <span className=\"text-white text-sm font-medium\">•</span>\n                  </div>\n                  <Button\n                    isIconOnly\n                    variant=\"tertiary\"\n                    onClick={onMobileMenuToggle}\n                    className=\"text-neutral-700\"\n                    aria-label=\"Open mobile menu\"\n                  >\n                    <Menu className=\"w-5 h-5 text-neutral-700\" />\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  isIconOnly\n                  variant=\"tertiary\"\n                  onClick={onMobileMenuToggle}\n                  className=\"text-neutral-700\"\n                  aria-label=\"Open mobile menu\"\n                >\n                  <Menu className=\"w-5 h-5 text-neutral-700\" />\n                </Button>\n              )}\n            </li>\n          </ul>\n        </div>\n      </header>\n    </nav>\n  );\n};\n\nexport default NavigationDesktop;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/main/NavigationMobile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[974,977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[974,977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'NavSection' is defined but never used.","line":34,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NavSection' is defined but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'onToggle'. Either include it or remove the dependency array. If 'onToggle' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [location.pathname, onToggle]","fix":{"range":[1822,1841],"text":"[location.pathname, onToggle]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 📱 Navigation Mobile - MVP Version\n// Location: src/shared/components/navigation/main/NavigationMobile.tsx\n// Purpose: Mobile navigation sidebar based on legacy MobileNavigation.tsx\n//\n// Features:\n// - Mobile sidebar navigation\n// - Role-based navigation sections\n// - Smooth animations\n// - Body scroll prevention\n\nimport { Button } from '@/shared/components/buttons';\nimport { AuthenticationService } from '@/shared/services/auth';\nimport { ChevronRight, LogOut, X } from 'lucide-react';\nimport React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../../../app/providers/auth-provider';\nimport { User } from '../../../../types';\nimport { createNavigationHandler, getMobileNavigationSections } from '../utils';\n\ninterface NavigationMobileProps {\n  user?: User | null;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\ninterface NavItem {\n  label: string;\n  href: string;\n  icon: React.ComponentType<any>;\n  badge?: string;\n  isNew?: boolean;\n}\n\ninterface NavSection {\n  title?: string;\n  items: NavItem[];\n}\n\nconst NavigationMobile: React.FC<NavigationMobileProps> = ({ user, isOpen, onToggle }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { openModal } = useAuth();\n\n  // Initialize auth service and navigation handler\n  const authService = new AuthenticationService();\n  const navigationHandler = createNavigationHandler(navigate, authService);\n\n  // Prevent body scroll when sidebar is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n\n  // Close sidebar on route change\n  useEffect(() => {\n    onToggle();\n  }, [location.pathname]);\n\n  const handleLogout = async () => {\n    await navigationHandler.handleLogout();\n    onToggle();\n  };\n\n  // Get navigation sections - exact copy from legacy\n  const navigationSections = getMobileNavigationSections(user?.role);\n\n  const handleItemClick = (href: string) => {\n    navigate(href);\n    onToggle();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 lg:hidden\"\n        onClick={onToggle}\n      />\n\n      {/* Mobile Sidebar */}\n      <div\n        className={`fixed top-0 left-0 w-80 h-full bg-white shadow-2xl z-50 lg:hidden transform transition-transform duration-300 ease-out ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        }`}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">U</span>\n              </div>\n              <span className=\"text-lg font-semibold text-gray-900\">Upswitch</span>\n            </div>\n\n            <button\n              onClick={onToggle}\n              className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              aria-label=\"Close menu\"\n            >\n              <X className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n\n          {/* User Profile (if authenticated) */}\n          {user && (\n            <div className=\"p-4 border-b border-gray-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white text-sm font-medium\">\n                    {user.name?.charAt(0) || user.email?.charAt(0) || 'U'}\n                  </span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate\">\n                    {user.name || 'User'}\n                  </div>\n                  <div className=\"text-xs text-gray-500 truncate\">{user.email}</div>\n                  <div className=\"text-xs text-gray-400 capitalize\">{user.role}</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Navigation Sections */}\n          <div className=\"flex-1 overflow-y-auto py-4\">\n            {navigationSections.map((section, sectionIndex) => (\n              <div key={sectionIndex} className={sectionIndex > 0 ? 'mt-6' : ''}>\n                {section.title && (\n                  <h3 className=\"px-4 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3\">\n                    {section.title}\n                  </h3>\n                )}\n\n                <div className=\"space-y-1 px-2\">\n                  {section.items.map((item, itemIndex) => {\n                    const Icon = item.icon;\n                    const isActive = location.pathname === item.href;\n\n                    return (\n                      <button\n                        key={itemIndex}\n                        onClick={() => handleItemClick(item.href)}\n                        className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-all duration-200 ${\n                          isActive\n                            ? 'bg-primary-50 text-primary-700 border border-primary-200'\n                            : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                        }`}\n                      >\n                        <Icon\n                          className={`w-5 h-5 flex-shrink-0 ${\n                            isActive ? 'text-primary-600' : 'text-gray-500'\n                          }`}\n                        />\n                        <span className=\"flex-1 text-sm font-medium\">{item.label}</span>\n                        {item.badge && (\n                          <span className=\"text-xs bg-red-500 text-white px-2 py-1 rounded-full\">\n                            {item.badge}\n                          </span>\n                        )}\n                        {item.isNew && (\n                          <span className=\"text-xs bg-green-500 text-white px-2 py-1 rounded-full\">\n                            New\n                          </span>\n                        )}\n                        <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Footer */}\n          {user ? (\n            <div className=\"p-4 border-t border-gray-200\">\n              <button\n                onClick={handleLogout}\n                className=\"w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-colors text-red-600 hover:bg-red-50\"\n              >\n                <LogOut className=\"w-5 h-5\" />\n                <span className=\"text-sm font-medium\">Log Out</span>\n              </button>\n            </div>\n          ) : (\n            <div className=\"p-6 space-y-3\">\n              <Button\n                variant=\"link\"\n                className=\"w-full\"\n                onPress={() => {\n                  onToggle();\n                  openModal('login');\n                }}\n              >\n                Log in\n              </Button>\n              <button\n                onClick={() => {\n                  onToggle();\n                  openModal('signup');\n                }}\n                className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 px-4 py-3 text-sm font-semibold\"\n              >\n                List your business\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NavigationMobile;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/main/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/seller/SellerNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/seller/SellerNavigationDesktop.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'hasToken' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasToken' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'authCheckComplete' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authCheckComplete' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":37,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🖥️ Seller Desktop Navigation\n// Location: src/shared/components/layout/navigation/seller/SellerNavigationDesktop.tsx\n// Purpose: Desktop navigation bar for sellers (like Airbnb host mode)\n//\n// Features:\n// - Logo on the left\n// - Navigation items: Overview, Valuation, Data Room\n// - User avatar/profile menu on the right\n// - Based on MainLayout navigation structure\n\nimport { Button } from '@/shared/components/buttons';\nimport { Menu } from 'lucide-react';\nimport * as React from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../../../app/providers/auth-provider';\nimport { UrlGenerator } from '../../../../services';\nimport { User } from '../../../../types';\nimport UserAvatarDropdown from '../dropdown/UserAvatarDropdown';\n\ninterface SellerNavigationDesktopProps {\n  user: User | null;\n  isCheckingAuth: boolean;\n  hasToken: boolean;\n  authCheckComplete: boolean;\n  onMobileMenuToggle: () => void;\n  className?: string;\n}\n\nconst SellerNavigationDesktop: React.FC<SellerNavigationDesktopProps> = ({\n  user,\n  isCheckingAuth,\n  hasToken,\n  authCheckComplete,\n  onMobileMenuToggle,\n  className = '',\n}) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { openModal } = useAuth();\n\n  // Handle authentication actions\n  const handleLogin = () => {\n    openModal('login');\n  };\n\n  const handleSignup = () => {\n    openModal('signup');\n  };\n\n  // Navigation items for sellers\n  const navigationItems = [\n    {\n      label: 'Overview',\n      path: UrlGenerator.myBusiness(),\n      isActive: (pathname: string) =>\n        pathname === UrlGenerator.myBusiness() || pathname === '/my-business/overview',\n    },\n    {\n      label: 'Messages',\n      path: '/messages',\n      isActive: (pathname: string) => pathname.startsWith('/messages'),\n      badge: undefined, // TODO: Add unread count badge\n    },\n    {\n      label: 'Valuation',\n      path: '/my-business/valuations',\n      isActive: (pathname: string) => pathname.startsWith('/my-business/valuations'),\n    },\n    {\n      label: 'Documents',\n      path: UrlGenerator.businessDocuments(),\n      isActive: (pathname: string) => pathname.startsWith('/my-business/documents'),\n    },\n  ];\n\n  // Render user menu - using unified dropdown\n  const renderUserMenu = () => {\n    if (!user) return null;\n    return <UserAvatarDropdown user={user} />;\n  };\n\n  return (\n    <nav\n      className={`flex w-full h-auto items-center justify-center bg-white border-b border-neutral-200 shadow-sm sticky top-0 z-30 py-4 ${className}`}\n      style={{ '--navbar-height': '4rem' } as React.CSSProperties}\n    >\n      <header className=\"z-40 flex px-6 gap-4 w-full flex-row relative flex-nowrap items-center justify-between h-[var(--navbar-height)] max-w-full\">\n        {/* Logo Section */}\n        <div className=\"flex basis-0 flex-row flex-grow flex-nowrap justify-start bg-transparent items-center no-underline text-medium whitespace-nowrap box-border\">\n          <Link to=\"/\" className=\"flex items-center space-x-3\">\n            <img\n              src=\"/upswitch_logo.svg?v=2024.1\"\n              alt=\"Upswitch - European SME M&A Platform\"\n              width=\"32\"\n              height=\"32\"\n              className=\"logo-image transition-opacity hover:opacity-80 w-8 h-8\"\n              loading=\"lazy\"\n              style={{\n                height: '32px',\n                objectFit: 'contain',\n                opacity: 1,\n                visibility: 'visible',\n                display: 'block',\n              }}\n            />\n            <span className=\"text-xl font-bold text-gray-900 ml-2\">Upswitch</span>\n          </Link>\n        </div>\n\n        {/* Center Navigation Items */}\n        <div className=\"hidden lg:flex items-center space-x-8\">\n          {navigationItems.map(item => {\n            const isActive = item.isActive(location.pathname);\n            return (\n              <Link\n                key={item.path}\n                to={item.path}\n                className={`text-sm font-medium transition-colors hover:text-primary-600 relative ${\n                  isActive ? 'text-primary-600' : 'text-gray-700'\n                }`}\n              >\n                {item.label}\n                {item.badge && (\n                  <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {item.badge}\n                  </span>\n                )}\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* Right Section - User Menu */}\n        <div className=\"flex basis-0 flex-row flex-grow flex-nowrap justify-end bg-transparent items-center\">\n          <ul className=\"h-full flex-row flex-nowrap flex items-center gap-4\" data-justify=\"end\">\n            {/* Desktop Actions */}\n            <li className=\"text-medium whitespace-nowrap box-border list-none hidden lg:flex items-center gap-4\">\n              {user ? (\n                renderUserMenu()\n              ) : isCheckingAuth ? (\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center animate-pulse\">\n                    <span className=\"text-white text-sm font-medium\">•</span>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <Button variant=\"link\" size=\"sm\" onClick={handleLogin}>\n                    Log in\n                  </Button>\n                  <Button variant=\"primary\" size=\"sm\" onClick={handleSignup}>\n                    Sign up\n                  </Button>\n                </>\n              )}\n            </li>\n\n            {/* Mobile Actions */}\n            <li className=\"text-medium whitespace-nowrap box-border list-none flex lg:hidden items-center gap-2\">\n              {user ? (\n                <>\n                  {renderUserMenu()}\n                  <Button\n                    isIconOnly\n                    variant=\"tertiary\"\n                    onClick={onMobileMenuToggle}\n                    className=\"text-neutral-700\"\n                    aria-label=\"Open mobile menu\"\n                  >\n                    <Menu className=\"w-5 h-5 text-neutral-700\" />\n                  </Button>\n                </>\n              ) : isCheckingAuth ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center animate-pulse\">\n                    <span className=\"text-white text-sm font-medium\">•</span>\n                  </div>\n                  <Button\n                    isIconOnly\n                    variant=\"tertiary\"\n                    onClick={onMobileMenuToggle}\n                    className=\"text-neutral-700\"\n                    aria-label=\"Open mobile menu\"\n                  >\n                    <Menu className=\"w-5 h-5 text-neutral-700\" />\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  isIconOnly\n                  variant=\"tertiary\"\n                  onClick={onMobileMenuToggle}\n                  className=\"text-neutral-700\"\n                  aria-label=\"Open mobile menu\"\n                >\n                  <Menu className=\"w-5 h-5 text-neutral-700\" />\n                </Button>\n              )}\n            </li>\n          </ul>\n        </div>\n      </header>\n    </nav>\n  );\n};\n\nexport default SellerNavigationDesktop;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/seller/SellerNavigationMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/seller/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/utils/navigation-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[619,622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[619,622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[801,804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[801,804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🧭 Navigation Configuration - MVP Version\n// Location: src/shared/components/navigation/utils/navigation-config.ts\n// Purpose: Centralized navigation configuration matching legacy app exactly\n\nimport {\n    Building2,\n    Calculator,\n    DollarSign,\n    FileText,\n    Heart,\n    HelpCircle,\n    Home,\n    LayoutDashboard,\n    LogOut,\n    MessageCircle,\n    Plus,\n    Search,\n    Settings,\n    Shield,\n    TrendingUp,\n    Users,\n} from 'lucide-react';\nimport React from 'react';\nimport { normalizeUserRole } from './role-utils';\n\nexport interface NavItem {\n  label: string;\n  href: string;\n  icon: React.ComponentType<any>;\n  badge?: string;\n  isNew?: boolean;\n}\n\nexport interface NavSection {\n  title?: string;\n  items: NavItem[];\n}\n\nexport interface DropdownMenuItem {\n  icon?: React.ComponentType<any>;\n  label?: string;\n  href?: string;\n  action?: string;\n  divider?: boolean;\n  isLogout?: boolean;\n}\n\n/**\n * Desktop Navigation Items - Exact copy from legacy UnifiedNavigation.tsx\n */\nexport const getDesktopNavigationItems = (): NavItem[] => [\n  { label: 'How to Sell', href: '/for-sellers', icon: Building2 },\n  { label: 'Browse Businesses', href: '/search', icon: Search },\n  { label: 'Free Valuation', href: '/resources/valuation-guide', icon: Calculator },\n];\n\n/**\n * Mobile Navigation Sections - Exact copy from legacy MobileNavigation.tsx\n */\nexport const getMobileNavigationSections = (userRole?: string): NavSection[] => {\n  const publicSections: NavSection[] = [\n    {\n      title: 'Discover',\n      items: [\n        { label: 'Home', href: '/', icon: Home },\n        { label: 'Browse Businesses', href: '/search', icon: TrendingUp },\n        { label: 'How to Sell', href: '/for-sellers', icon: Building2 },\n      ],\n    },\n    {\n      title: 'Resources',\n      items: [{ label: 'Free Valuation', href: '/resources/valuation-guide', icon: DollarSign }],\n    },\n  ];\n\n  if (!userRole) {\n    return publicSections;\n  }\n\n  const normalizedRole = normalizeUserRole(userRole);\n\n  const authenticatedSections: NavSection[] = [\n    {\n      title: 'Dashboard',\n      items: [\n        {\n          label: normalizedRole === 'seller' ? 'My Business' : 'Browse Businesses',\n          href: normalizedRole === 'seller' ? '/my-business' : '/listings',\n          icon: Home,\n        },\n        {\n          label: normalizedRole === 'seller' ? 'My Listings' : 'Saved Items',\n          href: normalizedRole === 'seller' ? '/my-business/listings' : '/users/saved',\n          icon: Heart,\n        },\n        {\n          label: 'Messages',\n          href: '/messages',\n          icon: MessageCircle,\n          badge: normalizedRole === 'buyer' ? '2' : undefined,\n        },\n      ],\n    },\n  ];\n\n  if (normalizedRole === 'seller') {\n    authenticatedSections.push({\n      title: 'Business Management',\n      items: [\n        { label: 'My Listings', href: '/my-business/listings', icon: Building2 },\n        {\n          label: 'Create New Listing',\n          href: '/my-business/listings/new',\n          icon: FileText,\n          isNew: true,\n        },\n        { label: 'Business Valuations', href: '/my-business/valuations', icon: Users },\n        { label: 'Performance Analytics', href: '/my-business/performance', icon: TrendingUp },\n      ],\n    });\n  }\n\n  authenticatedSections.push({\n    title: 'Account',\n    items: [\n      { label: 'Account Settings', href: '/users/profile', icon: Settings },\n      { label: 'Billing & Subscription', href: '/users/billing', icon: Shield },\n      { label: 'Messages', href: '/messages', icon: MessageCircle },\n    ],\n  });\n\n  return [...authenticatedSections, ...publicSections];\n};\n\n/**\n * Buyer Dropdown Menu Items - Exact copy from legacy user_avatar_dropdown.tsx\n */\nexport const getBuyerDropdownItems = (): DropdownMenuItem[] => [\n  { icon: LayoutDashboard, label: 'Browse Businesses', href: '/listings' },\n  { icon: Heart, label: 'Saved Items', href: '/users/saved' },\n  { icon: MessageCircle, label: 'Messages', href: '/messages' },\n  { divider: true },\n  { icon: Settings, label: 'Account Settings', href: '/users/profile' },\n  { icon: Shield, label: 'Billing & Subscription', href: '/users/billing' },\n  { icon: HelpCircle, label: 'Help Center', href: '/help' },\n  { divider: true },\n  { icon: LogOut, label: 'Log Out', action: 'logout', isLogout: true },\n];\n\n/**\n * Seller Dropdown Menu Items - Exact copy from legacy user_avatar_dropdown.tsx\n */\nexport const getSellerDropdownItems = (): DropdownMenuItem[] => [\n  // Primary business management\n  { icon: LayoutDashboard, label: 'My Business', href: '/my-business' },\n  { divider: true },\n  // Account and support\n  { icon: Settings, label: 'Account Settings', href: '/users/profile' },\n  { icon: HelpCircle, label: 'Get Help', href: '/help' },\n  { icon: Plus, label: 'Create a New Listing', href: '/my-business/listings/new' },\n  { divider: true },\n  // Logout\n  { icon: LogOut, label: 'Log Out', action: 'logout', isLogout: true },\n];\n\n/**\n * Dashboard Sidebar Items - Based on legacy SellerSidebar.tsx\n */\nexport const getDashboardSidebarSections = () => [\n  {\n    title: 'Overview',\n    items: [\n      {\n        label: 'Dashboard',\n        href: '/my-business',\n        icon: LayoutDashboard,\n        description: 'Business overview and metrics',\n      },\n    ],\n  },\n  {\n    title: 'Valuation & Analysis',\n    items: [\n      {\n        label: 'Business Valuation',\n        href: '/my-business/valuations',\n        icon: Calculator,\n        description: 'Get your business valued',\n      },\n    ],\n  },\n  {\n    title: 'Documents & Compliance',\n    items: [\n      {\n        label: 'Document Vault',\n        href: '/my-business/documents',\n        icon: FileText,\n        description: 'Secure document storage',\n        comingSoon: true,\n      },\n    ],\n  },\n];\n\n// normalizeUserRole is now imported from role-utils\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/utils/navigation-handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":40,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3627,3630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3627,3630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🎯 Navigation Handlers - MVP Version\n// Location: src/shared/components/navigation/utils/navigation-handlers.ts\n// Purpose: Centralized navigation action handlers\n\nimport { AuthenticationService } from '@/shared/services/auth';\nimport { NavigateFunction } from 'react-router-dom';\n\n/**\n * Navigation Handler Class\n * Handles all navigation actions including logout, menu clicks, etc.\n */\nexport class NavigationHandler {\n  private navigate: NavigateFunction;\n  private authService: AuthenticationService;\n\n  constructor(navigate: NavigateFunction, authService: AuthenticationService) {\n    this.navigate = navigate;\n    this.authService = authService;\n  }\n\n  /**\n   * Handle logout - Exact copy from legacy user_avatar_dropdown.tsx\n   */\n  async handleLogout(): Promise<void> {\n    try {\n      // Set logout flag to prevent auth recheck during logout\n      sessionStorage.setItem('user_logged_out', 'true');\n\n      // Call backend logout\n      await this.authService.logout();\n\n      // Clear access_token cookie directly (like legacy)\n      document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n\n      // Dispatch events for navigation state synchronization (like legacy)\n      window.dispatchEvent(new CustomEvent('auth-logout'));\n      window.dispatchEvent(new CustomEvent('auth-change'));\n\n      this.navigate('/');\n    } catch (error) {\n      // Ensure logout flag is still set on error\n      sessionStorage.setItem('user_logged_out', 'true');\n      // Fallback: force navigation even if logout fails (like legacy)\n      this.navigate('/');\n    }\n  }\n\n  /**\n   * Handle dropdown menu clicks - Based on legacy user_avatar_dropdown.tsx\n   */\n  handleMenuClick(action: string): void {\n    switch (action) {\n      // Buyer navigation (SIMPLIFIED CTO MODEL)\n      case 'browse-listings':\n        this.navigate('/listings');\n        break;\n      case 'saved':\n        this.navigate('/users/saved'); // Saved items in user profile\n        break;\n\n      // Business Owner navigation (AIRBNB MODEL - /my-business/*)\n      case 'business-dashboard':\n        this.navigate('/my-business'); // Navigate to business overview\n        break;\n      case 'my-business':\n        this.navigate('/my-business'); // Navigate to business overview\n        break;\n      case 'my-listings':\n        this.navigate('/my-business/listings');\n        break;\n      case 'valuation':\n        this.navigate('/my-business/valuations');\n        break;\n      case 'performance':\n        this.navigate('/my-business/performance');\n        break;\n      case 'documents':\n        this.navigate('/my-business/documents');\n        break;\n\n      // Common navigation\n      case 'messages':\n        this.navigate('/messages');\n        break;\n      case 'profile-settings':\n        this.navigate('/users/profile');\n        break;\n      case 'billing':\n        this.navigate('/users/billing');\n        break;\n      case 'help-center':\n        this.navigate('/help');\n        break;\n      case 'create-listing':\n        this.navigate('/my-business/listings/new');\n        break;\n      case 'logout':\n        this.handleLogout();\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Handle navigation with delay for mobile (like legacy MobileNavigation)\n   */\n  handleNavigationWithDelay(href: string, onClose?: () => void): void {\n    if (onClose) {\n      onClose();\n    }\n    setTimeout(() => {\n      this.navigate(href);\n    }, 250);\n  }\n\n  /**\n   * Handle authentication actions\n   */\n  handleLogin(): void {\n    this.navigate('/login');\n  }\n\n  handleSignup(): void {\n    this.navigate('/register');\n  }\n\n  handleSellBusiness(user?: any): void {\n    if (user) {\n      this.navigate('/my-business/listings/new');\n    } else {\n      this.navigate('/register');\n    }\n  }\n}\n\n/**\n * Create navigation handler instance\n */\nexport const createNavigationHandler = (\n  navigate: NavigateFunction,\n  authService: AuthenticationService\n): NavigationHandler => {\n  return new NavigationHandler(navigate, authService);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/layout/navigation/utils/role-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/listings/ListingCard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":59,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":60,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'inquiryData' is defined but never used.","line":60,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { Card, CardBody, Tooltip } from '@heroui/react';\nimport {\n  Building2,\n  Calendar,\n  Eye,\n  Heart,\n  MapPin,\n  MessageSquare,\n  Shield,\n  TrendingUp,\n  Users,\n} from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport InquiryModal from '../modals/InquiryModal';\n\ninterface ListingCardProps {\n  listing: {\n    id: string;\n    title: string;\n    sector: string;\n    country: string;\n    region?: string;\n    asking_price?: number;\n    currency: string;\n    summary: string;\n    views: number;\n    inquiries: number;\n    published_at: string;\n    featured: boolean;\n    anonymous: boolean;\n    requires_nda: boolean;\n    status: string;\n    revenue_range?: {\n      min?: number;\n      max?: number;\n    };\n    ebitda_range?: {\n      min?: number;\n      max?: number;\n    };\n    employee_count?: number;\n    business_age?: number;\n    highlights?: string[];\n    images?: {\n      id: string;\n      storage_url: string;\n      thumbnail_url: string;\n      is_primary: boolean;\n      alt_text?: string;\n    }[];\n    organization?: {\n      name: string;\n      verified: boolean;\n    };\n  };\n  currentUserRole?: 'buyer' | 'seller' | 'admin';\n  onSave?: (listingId: string) => void;\n  onInquiry?: (listingId: string, inquiryData: unknown) => Promise<void>;\n  isSaved?: boolean;\n  viewMode?: 'card' | 'list';\n}\n\nconst ListingCard: React.FC<ListingCardProps> = ({\n  listing,\n  currentUserRole,\n  onSave,\n  onInquiry,\n  isSaved = false,\n  viewMode = 'card',\n}) => {\n  const navigate = useNavigate();\n  const [showInquiryModal, setShowInquiryModal] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const formatPrice = (price?: number, currency = 'EUR') => {\n    if (!price) return 'Price on request';\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const formatRange = (range?: { min?: number; max?: number }, currency = 'EUR') => {\n    if (!range || (!range.min && !range.max)) return 'Not disclosed';\n    if (range.min && range.max) {\n      return `${formatPrice(range.min, currency)} - ${formatPrice(range.max, currency)}`;\n    }\n    if (range.min) return `${formatPrice(range.min, currency)}+`;\n    if (range.max) return `Up to ${formatPrice(range.max, currency)}`;\n    return 'Not disclosed';\n  };\n\n  const getTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (days === 0) return 'Today';\n    if (days === 1) return 'Yesterday';\n    if (days < 7) return `${days} days ago`;\n    if (days < 30) return `${Math.floor(days / 7)} weeks ago`;\n    return `${Math.floor(days / 30)} months ago`;\n  };\n\n  const handleSave = async () => {\n    if (onSave) {\n      setIsProcessing(true);\n      try {\n        await onSave(listing.id);\n      } finally {\n        setIsProcessing(false);\n      }\n    }\n  };\n\n  const handleInquiry = async (inquiryData: unknown) => {\n    if (onInquiry) {\n      await onInquiry(listing.id, inquiryData);\n      setShowInquiryModal(false);\n    }\n  };\n\n  const handleViewDetails = () => {\n    navigate(`/listings/${listing.id}`);\n  };\n\n  const handleInquiryClick = () => {\n    setShowInquiryModal(true);\n  };\n\n  const canMakeInquiry = currentUserRole === 'buyer';\n  const canSave = currentUserRole === 'buyer';\n\n  if (viewMode === 'list') {\n    return (\n      <>\n        <Card className=\"group bg-gradient-to-br from-white to-slate-50 border border-slate-200 rounded-3xl shadow-lg hover:shadow-2xl hover:shadow-slate-200/50 hover:border-slate-300 transition-all duration-500 cursor-pointer transform hover:-translate-y-1\">\n          <CardBody className=\"p-6\" onClick={handleViewDetails}>\n            <div className=\"flex flex-col sm:flex-row gap-6\">\n              {/* Main Content */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <h3 className=\"font-bold text-xl text-slate-900 line-clamp-1 group-hover:text-blue-600 transition-colors\">\n                        {listing.anonymous ? 'Anonymous Business Listing' : listing.title}\n                      </h3>\n                      {listing.organization?.verified && (\n                        <Tooltip content=\"Verified business\">\n                          <div className=\"flex items-center gap-1 bg-gray-100 px-2 py-1 rounded text-gray-700\">\n                            <Shield className=\"w-3 h-3\" />\n                            <span className=\"text-xs font-medium\">Verified</span>\n                          </div>\n                        </Tooltip>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-wrap items-center gap-3 text-sm text-slate-600 mb-4\">\n                      <div className=\"flex items-center gap-1 bg-slate-100 px-3 py-1 rounded-full\">\n                        <Building2 className=\"w-3 h-3\" />\n                        <span className=\"font-medium\">{listing.sector}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1 bg-slate-100 px-3 py-1 rounded-full\">\n                        <MapPin className=\"w-3 h-3\" />\n                        <span>\n                          {listing.country}\n                          {listing.region && `, ${listing.region}`}\n                        </span>\n                      </div>\n                      {listing.employee_count && (\n                        <div className=\"flex items-center gap-1 bg-slate-100 px-3 py-1 rounded-full\">\n                          <Users className=\"w-3 h-3\" />\n                          <span>{listing.employee_count} employees</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center gap-1 bg-slate-100 px-3 py-1 rounded-full\">\n                        <Calendar className=\"w-3 h-3\" />\n                        <span>{getTimeAgo(listing.published_at)}</span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-slate-700 line-clamp-2 mb-4 leading-relaxed text-base\">\n                      {listing.summary}\n                    </p>\n\n                    {listing.highlights && listing.highlights.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {listing.highlights.slice(0, 3).map((highlight, index) => (\n                          <span\n                            key={index}\n                            className=\"bg-gray-100 px-2 py-1 rounded text-gray-700 text-xs font-medium\"\n                          >\n                            {highlight}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Price and Actions */}\n                  <div className=\"flex flex-col items-end gap-4 ml-6\">\n                    <div className=\"text-right bg-gradient-to-r from-slate-50 to-blue-50 rounded-2xl p-4 border border-slate-200\">\n                      <p className=\"text-2xl font-bold text-green-600\">\n                        {formatPrice(listing.asking_price, listing.currency)}\n                      </p>\n                      {listing.revenue_range && (\n                        <p className=\"text-sm text-slate-600 mt-1\">\n                          Revenue: {formatRange(listing.revenue_range, listing.currency)}\n                        </p>\n                      )}\n                      {listing.ebitda_range && (\n                        <p className=\"text-sm text-slate-600 mt-1\">\n                          EBITDA: {formatRange(listing.ebitda_range, listing.currency)}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center gap-4 text-sm text-slate-500\">\n                      <div className=\"flex items-center gap-1\">\n                        <Eye className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{listing.views}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <MessageSquare className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{listing.inquiries}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      {canSave && (\n                        <Button\n                          isIconOnly\n                          size=\"sm\"\n                          variant={isSaved ? 'danger' : 'secondary'}\n                          onPress={handleSave}\n                          isLoading={isProcessing}\n                          className=\"text-slate-400 hover:text-red-500 hover:bg-red-50 rounded-full transition-all duration-300 transform hover:scale-110\"\n                        >\n                          <Heart className={`w-4 h-4 ${isSaved ? 'fill-current' : ''}`} />\n                        </Button>\n                      )}\n                      {canMakeInquiry && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"primary\"\n                          onPress={handleInquiryClick}\n                          startContent={<MessageSquare className=\"w-4 h-4\" />}\n                        >\n                          Contact Seller\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Warning badges */}\n                <div className=\"flex items-center gap-2 mt-4 pt-4 border-t border-slate-200\">\n                  {listing.requires_nda && (\n                    <span className=\"flex items-center gap-1 bg-gray-100 px-2 py-1 rounded text-gray-700 text-xs font-medium\">\n                      <Shield className=\"w-3 h-3\" />\n                      NDA Required\n                    </span>\n                  )}\n                  {listing.anonymous && (\n                    <span className=\"bg-gray-100 px-2 py-1 rounded text-gray-700 text-xs font-medium\">\n                      Anonymous Listing\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        {/* Inquiry Modal */}\n        {showInquiryModal && (\n          <InquiryModal\n            isOpen={showInquiryModal}\n            onClose={() => setShowInquiryModal(false)}\n            listing={{\n              id: listing.id,\n              title: listing.title,\n              sector: listing.sector,\n              asking_price: listing.asking_price,\n              currency: listing.currency,\n              requires_nda: listing.requires_nda,\n            }}\n            onSubmit={handleInquiry}\n          />\n        )}\n      </>\n    );\n  }\n\n  // Get primary image or first image\n  const primaryImage = listing.images?.find(img => img.is_primary) || listing.images?.[0];\n\n  // Stock photo fallbacks by sector\n  const getSectorPlaceholder = (sector: string) => {\n    const sectorMap: Record<string, string> = {\n      'Food & Beverage':\n        'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n      Technology:\n        'https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n      Retail:\n        'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n      Manufacturing:\n        'https://images.unsplash.com/photo-1565514020179-026b92b84bb6?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n      Healthcare:\n        'https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n      'Professional Services':\n        'https://images.unsplash.com/photo-1497366811353-6870744d04b2?w=800&h=600&fit=crop&crop=center&auto=format&q=80',\n    };\n    return (\n      sectorMap[sector] ||\n      'https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=800&h=600&fit=crop&crop=center&auto=format&q=80'\n    );\n  };\n\n  const imageUrl = primaryImage?.storage_url || getSectorPlaceholder(listing.sector);\n\n  // Card view (default)\n  return (\n    <>\n      <Card\n        className=\"group bg-gradient-to-br from-white to-slate-50 border border-slate-200 rounded-3xl shadow-lg hover:shadow-2xl hover:shadow-slate-200/50 hover:border-slate-300 transition-all duration-500 h-full transform hover:-translate-y-2 cursor-pointer\"\n        isPressable\n        onPress={handleViewDetails}\n      >\n        <CardBody className=\"p-0\">\n          {/* Product Image */}\n          <div className=\"relative overflow-hidden rounded-t-3xl aspect-[16/10] mb-6\">\n            <img\n              src={imageUrl}\n              alt={primaryImage?.alt_text || `${listing.title} business image`}\n              className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-105\"\n              loading=\"lazy\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n\n            {/* Favorite button overlay */}\n            {canSave && (\n              <div className=\"absolute top-4 right-4\">\n                <Button\n                  isIconOnly\n                  radius=\"full\"\n                  size=\"sm\"\n                  variant=\"tertiary\"\n                  className=\"bg-white/90 backdrop-blur-sm text-slate-400 hover:text-red-500 hover:bg-red-50 transition-all duration-300 transform hover:scale-110 shadow-lg\"\n                  onPress={() => {\n                    handleSave();\n                  }}\n                  isLoading={isProcessing}\n                >\n                  <Heart className={`w-4 h-4 ${isSaved ? 'fill-red-500 text-red-500' : ''}`} />\n                </Button>\n              </div>\n            )}\n\n            {/* Featured badge */}\n            {listing.featured && (\n              <div className=\"absolute top-4 left-4\">\n                <div className=\"bg-blue-600 text-white text-xs font-bold px-3 py-1.5 rounded-full shadow-lg\">\n                  FEATURED\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"px-8 pb-8\">\n            {/* Header */}\n            <div className=\"flex items-start justify-between mb-6\">\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  {listing.organization?.verified && (\n                    <Tooltip content=\"Verified business\">\n                      <div className=\"flex items-center gap-1 bg-gray-100 px-2 py-1 rounded text-gray-700\">\n                        <Shield className=\"w-3 h-3\" />\n                        <span className=\"text-xs font-medium\">Verified</span>\n                      </div>\n                    </Tooltip>\n                  )}\n                </div>\n\n                <h3 className=\"font-bold text-slate-900 text-xl line-clamp-2 group-hover:text-blue-600 transition-colors mb-3 leading-tight\">\n                  {listing.anonymous ? 'Confidential Business' : listing.title}\n                </h3>\n\n                <div className=\"flex items-center gap-3 text-sm text-slate-600 mb-4\">\n                  <div className=\"inline-flex items-center gap-1.5 bg-slate-100 px-3 py-1.5 rounded-full min-w-0 flex-shrink-0\">\n                    <Building2 className=\"w-3 h-3 flex-shrink-0\" />\n                    <span className=\"font-medium text-slate-700 truncate\">{listing.sector}</span>\n                  </div>\n                  <div className=\"inline-flex items-center gap-1.5 bg-slate-100 px-3 py-1.5 rounded-full min-w-0 flex-shrink-0\">\n                    <MapPin className=\"w-3 h-3 flex-shrink-0\" />\n                    <span className=\"text-slate-700 truncate whitespace-nowrap\">\n                      {listing.country}\n                      {listing.region && `, ${listing.region}`}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Content Area */}\n            <div className=\"space-y-6\">\n              {/* Summary */}\n              <p className=\"text-slate-700 line-clamp-3 leading-relaxed text-base\">\n                {listing.summary}\n              </p>\n\n              {/* Highlights */}\n              {listing.highlights && listing.highlights.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {listing.highlights.slice(0, 2).map((highlight, index) => (\n                    <span\n                      key={index}\n                      className=\"inline-flex items-center gap-1.5 bg-gray-100 px-2.5 py-1.5 rounded-lg text-gray-700 text-xs font-medium whitespace-nowrap\"\n                    >\n                      <Shield className=\"w-3 h-3 flex-shrink-0\" />\n                      <span>{highlight}</span>\n                    </span>\n                  ))}\n                  {listing.business_age && (\n                    <span className=\"inline-flex items-center bg-gray-100 px-2.5 py-1.5 rounded-lg text-gray-700 text-xs font-medium whitespace-nowrap\">\n                      <span>{listing.business_age} years</span>\n                    </span>\n                  )}\n                </div>\n              )}\n\n              {/* Financial Info */}\n              <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 rounded-2xl p-4 border border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-bold text-green-600 text-2xl\">\n                      {formatPrice(listing.asking_price, listing.currency)}\n                    </p>\n                    {listing.revenue_range && (\n                      <p className=\"text-sm text-slate-600 mt-1\">\n                        Revenue:{' '}\n                        {typeof listing.revenue_range === 'string'\n                          ? listing.revenue_range\n                          : formatRange(listing.revenue_range, listing.currency)}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm text-slate-500\">\n                    <div className=\"flex items-center gap-1\">\n                      <Eye className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">{listing.views}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">{listing.inquiries}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Inquiry Modal */}\n      {showInquiryModal && (\n        <InquiryModal\n          isOpen={showInquiryModal}\n          onClose={() => setShowInquiryModal(false)}\n          listing={{\n            id: listing.id,\n            title: listing.title,\n            sector: listing.sector,\n            asking_price: listing.asking_price,\n            currency: listing.currency,\n            requires_nda: listing.requires_nda,\n          }}\n          onSubmit={handleInquiry}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ListingCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/listings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/loading/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/loading/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/logo/BrandLogo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/logo/flypLogo.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":121,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":121,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏢 Upswitch Logo Component - Exact legacy implementation\n// Location: src/shared/components/ui/upswitchLogo.tsx\n// Purpose: Reusable logo component matching legacy exactly\n\nimport * as React from 'react';\nimport { getLogoConfig, logos } from './logos';\n\ninterface UpswitchLogoProps {\n  /**\n   * Logo variant/context for different use cases\n   */\n  variant?: 'header' | 'footer' | 'sidebar' | 'mobile';\n\n  /**\n   * Custom width override\n   */\n  width?: number;\n\n  /**\n   * Custom height override\n   */\n  height?: number | 'auto';\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Custom alt text override\n   */\n  alt?: string;\n\n  /**\n   * Whether the logo should be clickable (link to home)\n   */\n  clickable?: boolean;\n\n  /**\n   * Custom onClick handler\n   */\n  onClick?: () => void;\n\n  /**\n   * Image priority for performance (Next.js style)\n   */\n  priority?: boolean;\n}\n\n/**\n * UpswitchLogo Component\n *\n * A reusable logo component that provides consistent branding across the platform.\n * Supports different variants for various contexts (header, footer, sidebar, mobile).\n *\n * @example\n * ```tsx\n * // Header usage\n * <UpswitchLogo variant=\"header\" clickable />\n *\n * // Footer usage\n * <UpswitchLogo variant=\"footer\" />\n *\n * // Custom size\n * <UpswitchLogo width={150} height=\"auto\" />\n * ```\n */\nconst UpswitchLogo: React.FC<UpswitchLogoProps> = ({\n  variant = 'header',\n  width,\n  height,\n  className = '',\n  alt,\n  clickable = false,\n  onClick,\n  priority = false,\n}) => {\n  // Get logo configuration based on variant\n  const logoConfig = getLogoConfig(variant);\n\n  // Determine final dimensions\n  const finalWidth = width ?? logoConfig.width;\n  const finalHeight = height ?? logoConfig.height;\n  const finalAlt = alt ?? logoConfig.alt;\n\n  // Determine styling based on variant\n  const getVariantClasses = () => {\n    switch (variant) {\n      case 'header':\n        return 'transition-opacity hover:opacity-80';\n      case 'footer':\n        return 'transition-all duration-200 hover:scale-105';\n      case 'sidebar':\n        return 'transition-transform hover:scale-105';\n      case 'mobile':\n        return 'transition-opacity hover:opacity-80';\n      default:\n        return '';\n    }\n  };\n\n  // Combined classes\n  const combinedClasses = `${getVariantClasses()} ${className}`.trim();\n\n  // Logo image element - using regular img tag for reliable visibility\n  const logoElement = (\n    <img\n      src={logos.main}\n      alt={finalAlt}\n      width={finalWidth}\n      height={finalHeight}\n      className={`logo-image ${combinedClasses}`}\n      loading={priority ? 'eager' : 'lazy'}\n      style={{\n        height: finalHeight,\n        objectFit: 'contain',\n        opacity: 1,\n        visibility: 'visible',\n        display: 'block',\n      }}\n      onError={e => {\n        // Fallback - could set a default or retry\n      }}\n    />\n  );\n\n  // Wrap in clickable element if needed\n  if (clickable || onClick) {\n    return (\n      <button\n        onClick={onClick}\n        className={`inline-flex items-center justify-center focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-500 focus-visible:ring-offset-2 rounded-lg ${\n          clickable ? 'cursor-pointer' : ''\n        }`}\n        aria-label={`${finalAlt} - Go to homepage`}\n        type=\"button\"\n      >\n        {logoElement}\n      </button>\n    );\n  }\n\n  return logoElement;\n};\n\nexport default UpswitchLogo;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/logo/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/logo/logos.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/logo/upswitchLogo.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":121,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":121,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🏢 Upswitch Logo Component - Exact legacy implementation\n// Location: src/shared/components/ui/upswitchLogo.tsx\n// Purpose: Reusable logo component matching legacy exactly\n\nimport * as React from 'react';\nimport { getLogoConfig, logos } from './logos';\n\ninterface UpswitchLogoProps {\n  /**\n   * Logo variant/context for different use cases\n   */\n  variant?: 'header' | 'footer' | 'sidebar' | 'mobile';\n\n  /**\n   * Custom width override\n   */\n  width?: number;\n\n  /**\n   * Custom height override\n   */\n  height?: number | 'auto';\n\n  /**\n   * Custom CSS classes\n   */\n  className?: string;\n\n  /**\n   * Custom alt text override\n   */\n  alt?: string;\n\n  /**\n   * Whether the logo should be clickable (link to home)\n   */\n  clickable?: boolean;\n\n  /**\n   * Custom onClick handler\n   */\n  onClick?: () => void;\n\n  /**\n   * Image priority for performance (Next.js style)\n   */\n  priority?: boolean;\n}\n\n/**\n * UpswitchLogo Component\n *\n * A reusable logo component that provides consistent branding across the platform.\n * Supports different variants for various contexts (header, footer, sidebar, mobile).\n *\n * @example\n * ```tsx\n * // Header usage\n * <UpswitchLogo variant=\"header\" clickable />\n *\n * // Footer usage\n * <UpswitchLogo variant=\"footer\" />\n *\n * // Custom size\n * <UpswitchLogo width={150} height=\"auto\" />\n * ```\n */\nconst UpswitchLogo: React.FC<UpswitchLogoProps> = ({\n  variant = 'header',\n  width,\n  height,\n  className = '',\n  alt,\n  clickable = false,\n  onClick,\n  priority = false,\n}) => {\n  // Get logo configuration based on variant\n  const logoConfig = getLogoConfig(variant);\n\n  // Determine final dimensions\n  const finalWidth = width ?? logoConfig.width;\n  const finalHeight = height ?? logoConfig.height;\n  const finalAlt = alt ?? logoConfig.alt;\n\n  // Determine styling based on variant\n  const getVariantClasses = () => {\n    switch (variant) {\n      case 'header':\n        return 'transition-opacity hover:opacity-80';\n      case 'footer':\n        return 'transition-all duration-200 hover:scale-105';\n      case 'sidebar':\n        return 'transition-transform hover:scale-105';\n      case 'mobile':\n        return 'transition-opacity hover:opacity-80';\n      default:\n        return '';\n    }\n  };\n\n  // Combined classes\n  const combinedClasses = `${getVariantClasses()} ${className}`.trim();\n\n  // Logo image element - using regular img tag for reliable visibility\n  const logoElement = (\n    <img\n      src={logos.main}\n      alt={finalAlt}\n      width={finalWidth}\n      height={finalHeight}\n      className={`logo-image ${combinedClasses}`}\n      loading={priority ? 'eager' : 'lazy'}\n      style={{\n        height: finalHeight,\n        objectFit: 'contain',\n        opacity: 1,\n        visibility: 'visible',\n        display: 'block',\n      }}\n      onError={e => {\n        // Fallback - could set a default or retry\n      }}\n    />\n  );\n\n  // Wrap in clickable element if needed\n  if (clickable || onClick) {\n    return (\n      <button\n        onClick={onClick}\n        className={`inline-flex items-center justify-center focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-500 focus-visible:ring-offset-2 rounded-lg ${\n          clickable ? 'cursor-pointer' : ''\n        }`}\n        aria-label={`${finalAlt} - Go to homepage`}\n        type=\"button\"\n      >\n        {logoElement}\n      </button>\n    );\n  }\n\n  return logoElement;\n};\n\nexport default UpswitchLogo;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/InquiryModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'inquiryData' is defined but never used.","line":20,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from '@/app/providers/auth-provider';\nimport {\n  Card,\n  CardBody,\n  Chip,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from '@heroui/react';\nimport { Building2, FileText, Lock, MessageSquare, UserPlus, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '../buttons/Button';\nimport { AnimatedTextarea, CustomCheckbox, CustomDropdown } from '../forms';\n\ninterface InquiryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (inquiryData: InquiryData) => void;\n  listing: {\n    id: string;\n    title: string;\n    sector: string;\n    asking_price?: number;\n    currency?: string;\n    requires_nda: boolean;\n  };\n  isLoading?: boolean;\n}\n\ninterface InquiryData {\n  buyerName: string;\n  buyerEmail: string;\n  buyerPhone: string;\n  companyName: string;\n  position: string;\n  investmentCapacity: string;\n  financingType: string;\n  timeframe: string;\n  experience: string;\n  message: string;\n  acceptedTerms: boolean;\n  subscribeUpdates: boolean;\n}\n\nconst InquiryModal: React.FC<InquiryModalProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  listing,\n  isLoading = false,\n}) => {\n  const { openModal, isAuthenticated, user } = useAuth();\n  const [inquiryData, setInquiryData] = useState<InquiryData>({\n    buyerName: '',\n    buyerEmail: '',\n    buyerPhone: '',\n    companyName: '',\n    position: '',\n    investmentCapacity: '',\n    financingType: '',\n    timeframe: '',\n    experience: '',\n    message: '',\n    acceptedTerms: false,\n    subscribeUpdates: true,\n  });\n\n  const [currentStep, setCurrentStep] = useState(2);\n\n  // Pre-populate form with user data when authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      setInquiryData(prev => ({\n        ...prev,\n        buyerName: user.name || '',\n        buyerEmail: user.email || '',\n        buyerPhone: user.phone || '',\n        companyName: user.company_name || 'Individual Investor', // Fallback for company name\n        position: '', // Position not available in User type\n      }));\n    }\n  }, [isAuthenticated, user]);\n\n  const formatPrice = (price?: number, currency = 'EUR') => {\n    if (!price) return 'Price on request';\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleNext = () => {\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 2) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      onSubmit(inquiryData);\n    }\n  };\n\n  const validateForm = () => {\n    const { buyerName, buyerEmail, message, acceptedTerms } = inquiryData;\n    return buyerName && buyerEmail && message && acceptedTerms;\n  };\n\n  const handleLogin = () => {\n    openModal('login', {\n      url: window.location.pathname,\n      state: { listingId: listing.id },\n    });\n  };\n\n  const handleSignup = () => {\n    openModal('signup', {\n      url: window.location.pathname,\n      state: { listingId: listing.id },\n    });\n  };\n\n  const renderAuthCTA = () => (\n    <div className=\"space-y-6\">\n      <Card className=\"border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-blue-100\">\n        <CardBody className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"inline-flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full mb-4\">\n              <UserPlus className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-blue-900 mb-2\">Account Required</h3>\n            <p className=\"text-blue-700 text-sm\">\n              Create an account to connect with sellers and access detailed information\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3 mb-6\">\n            <Button\n              variant=\"primary\"\n              size=\"md\"\n              className=\"flex-1\"\n              onPress={handleSignup}\n              startContent={<UserPlus className=\"w-4 h-4\" />}\n            >\n              Create Account\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"md\"\n              className=\"flex-1\"\n              onPress={handleLogin}\n              startContent={<Lock className=\"w-4 h-4\" />}\n            >\n              Log In\n            </Button>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-blue-900 text-sm\">Benefits of creating an account:</h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-start gap-2\">\n                <span className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                <span className=\"text-sm text-blue-800\">Direct communication with sellers</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                <span className=\"text-sm text-blue-800\">\n                  Access to detailed business information\n                </span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                <span className=\"text-sm text-blue-800\">\n                  Save favorite listings and get notifications\n                </span>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Business Opportunity Card - Redesigned */}\n      <Card className=\"border-2 border-gray-200 bg-white shadow-sm\">\n        <CardBody className=\"p-6\">\n          <div className=\"flex items-start gap-4 mb-4\">\n            <div className=\"p-3 bg-green-100 rounded-xl flex-shrink-0\">\n              <Building2 className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"text-lg font-semibold text-gray-900 mb-1\">Business Opportunity</h4>\n              <p className=\"text-sm text-gray-600\">\n                Premium business listing with detailed information\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\"></div>\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                    Business\n                  </p>\n                  <p className=\"text-sm font-semibold text-gray-900\">{listing.title}</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full flex-shrink-0\"></div>\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                    Sector\n                  </p>\n                  <p className=\"text-sm font-semibold text-gray-900\">{listing.sector}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full flex-shrink-0\"></div>\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                    Asking Price\n                  </p>\n                  <p className=\"text-sm font-semibold text-gray-900\">\n                    {formatPrice(listing.asking_price, listing.currency)}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-2 h-2 bg-orange-500 rounded-full flex-shrink-0\"></div>\n                <div>\n                  <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                    Status\n                  </p>\n                  <p className=\"text-sm font-semibold text-gray-900\">Active Listing</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {listing.requires_nda && (\n            <div className=\"mt-4 p-4 bg-amber-50 border border-amber-200 rounded-xl\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 bg-amber-100 rounded-lg flex-shrink-0\">\n                  <FileText className=\"w-4 h-4 text-amber-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <Chip size=\"sm\" color=\"warning\" variant=\"flat\" className=\"text-xs\">\n                      NDA Required\n                    </Chip>\n                  </div>\n                  <p className=\"text-sm text-amber-800\">\n                    You'll need to sign a Non-Disclosure Agreement to access detailed financial\n                    information and sensitive business data.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Investment Details</h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <CustomDropdown\n            label=\"Investment Capacity\"\n            placeholder=\"Select your investment range\"\n            value={inquiryData.investmentCapacity || ''}\n            onChange={value => setInquiryData(prev => ({ ...prev, investmentCapacity: value }))}\n            options={[\n              { value: 'under-500k', label: 'Under €500K' },\n              { value: '500k-1m', label: '€500K - €1M' },\n              { value: '1m-2m', label: '€1M - €2M' },\n              { value: '2m-5m', label: '€2M - €5M' },\n              { value: '5m-10m', label: '€5M - €10M' },\n              { value: 'over-10m', label: 'Over €10M' },\n            ]}\n          />\n\n          <CustomDropdown\n            label=\"Financing Type\"\n            placeholder=\"Select financing preference\"\n            value={inquiryData.financingType || ''}\n            onChange={value => setInquiryData(prev => ({ ...prev, financingType: value }))}\n            options={[\n              { value: 'cash', label: 'Cash' },\n              { value: 'debt', label: 'Debt Financing' },\n              { value: 'equity', label: 'Equity Investment' },\n              { value: 'mixed', label: 'Mixed Financing' },\n              { value: 'seller-financing', label: 'Seller Financing' },\n            ]}\n          />\n        </div>\n\n        <CustomDropdown\n          label=\"Investment Timeframe\"\n          placeholder=\"Select your timeline\"\n          value={inquiryData.timeframe || ''}\n          onChange={value => setInquiryData(prev => ({ ...prev, timeframe: value }))}\n          options={[\n            { value: 'immediate', label: 'Immediate (0-3 months)' },\n            { value: 'short-term', label: 'Short-term (3-6 months)' },\n            { value: 'medium-term', label: 'Medium-term (6-12 months)' },\n            { value: 'long-term', label: 'Long-term (12+ months)' },\n          ]}\n        />\n\n        <CustomDropdown\n          label=\"Industry Experience\"\n          placeholder=\"Select your experience level\"\n          value={inquiryData.experience || ''}\n          onChange={value => setInquiryData(prev => ({ ...prev, experience: value }))}\n          options={[\n            { value: 'none', label: 'No experience' },\n            { value: 'limited', label: 'Limited experience' },\n            { value: 'moderate', label: 'Moderate experience' },\n            { value: 'extensive', label: 'Extensive experience' },\n            { value: 'expert', label: 'Industry expert' },\n          ]}\n        />\n      </div>\n    </div>\n  );\n\n  const renderStep3 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Your Message</h3>\n\n        <AnimatedTextarea\n          label=\"Inquiry Message\"\n          placeholder=\"Tell the seller about your interest in this business, your background, and any specific questions you have...\"\n          value={inquiryData.message}\n          onChange={e => setInquiryData(prev => ({ ...prev, message: e.target.value }))}\n          minRows={4}\n          required\n          onBlur={() => {}}\n          name=\"message\"\n        />\n\n        <div className=\"space-y-3\">\n          <CustomCheckbox\n            name=\"acceptedTerms\"\n            label={\n              <>\n                I agree to the{' '}\n                <a\n                  href=\"/terms-and-conditions\"\n                  className=\"text-blue-600 hover:text-blue-700 underline\"\n                >\n                  Terms of Service\n                </a>{' '}\n                and{' '}\n                <a href=\"/privacy-policy\" className=\"text-blue-600 hover:text-blue-700 underline\">\n                  Privacy Policy\n                </a>\n              </>\n            }\n            checked={inquiryData.acceptedTerms}\n            onChange={() =>\n              setInquiryData(prev => ({ ...prev, acceptedTerms: !prev.acceptedTerms }))\n            }\n            required\n          />\n\n          <CustomCheckbox\n            name=\"subscribeUpdates\"\n            label=\"I'd like to receive updates about new features and market insights\"\n            checked={inquiryData.subscribeUpdates}\n            onChange={() =>\n              setInquiryData(prev => ({ ...prev, subscribeUpdates: !prev.subscribeUpdates }))\n            }\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"2xl\"\n      scrollBehavior=\"inside\"\n      backdrop=\"blur\"\n      isDismissable={true}\n      isKeyboardDismissDisabled={false}\n      hideCloseButton={true}\n      classNames={{\n        base: 'max-h-[90vh]',\n        body: 'overflow-y-auto max-h-[60vh] px-6',\n        header: 'pb-4',\n      }}\n    >\n      <ModalContent className=\"inquiry-modal-content\">\n        {onClose => (\n          <>\n            <ModalHeader className=\"flex flex-col gap-1 pt-6 pb-4 relative\">\n              {/* Custom Close Button */}\n              <button\n                className=\"absolute top-2 right-2 z-[1002] w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 flex items-center justify-center transition-all duration-200 group\"\n                onClick={onClose}\n                aria-label=\"Close modal\"\n              >\n                <X className=\"w-4 h-4 text-gray-600 group-hover:text-gray-800 transition-colors\" />\n              </button>\n\n              <div className=\"flex items-center gap-3 pr-10\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <MessageSquare className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <span className=\"text-xl font-semibold text-gray-900\">\n                  {isAuthenticated ? 'Submit Inquiry' : 'Submit Inquiry'}\n                </span>\n              </div>\n\n              {isAuthenticated && (\n                <div className=\"flex items-center gap-3 text-sm text-gray-600 mt-2\">\n                  <span className=\"font-medium\">Step {currentStep - 1} of 2</span>\n                  <div className=\"flex gap-2\">\n                    {[2, 3].map(step => (\n                      <div\n                        key={step}\n                        className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                          step <= currentStep ? 'bg-blue-600 shadow-sm' : 'bg-gray-300'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {!isAuthenticated && (\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  Create an account or log in to connect with sellers\n                </p>\n              )}\n            </ModalHeader>\n\n            <ModalBody>\n              {!isAuthenticated ? (\n                renderAuthCTA()\n              ) : (\n                <>\n                  {currentStep === 2 && renderStep2()}\n                  {currentStep === 3 && renderStep3()}\n                </>\n              )}\n            </ModalBody>\n\n            <ModalFooter>\n              {isAuthenticated && (\n                <>\n                  <Button variant=\"secondary\" onPress={onClose}>\n                    Cancel\n                  </Button>\n\n                  {currentStep > 2 && (\n                    <Button variant=\"secondary\" onPress={handleBack}>\n                      Back\n                    </Button>\n                  )}\n\n                  {currentStep < 3 ? (\n                    <Button variant=\"primary\" onPress={handleNext}>\n                      Next\n                    </Button>\n                  ) : (\n                    <Button\n                      variant=\"primary\"\n                      onPress={handleSubmit}\n                      isLoading={isLoading}\n                      isDisabled={!validateForm()}\n                    >\n                      Submit Inquiry\n                    </Button>\n                  )}\n                </>\n              )}\n            </ModalFooter>\n          </>\n        )}\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default InquiryModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/NDAModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'signatureData' is defined but never used.","line":18,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Card,\n  CardBody,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from '@heroui/react';\nimport { AlertTriangle, FileText, Shield, User } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { Button } from '../buttons/Button';\nimport { AnimatedTextarea, Input } from '../forms';\n\ninterface NDAModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAccept: (signatureData: SignatureData) => void;\n  listingTitle: string;\n  sellerName: string;\n  isLoading?: boolean;\n}\n\ninterface SignatureData {\n  fullName: string;\n  company: string;\n  position: string;\n  email: string;\n  phone: string;\n  digitalSignature: string;\n  acceptedDate: string;\n  ipAddress?: string;\n}\n\nconst NDAModal: React.FC<NDAModalProps> = ({\n  isOpen,\n  onClose,\n  onAccept,\n  listingTitle,\n  sellerName,\n  isLoading = false,\n}) => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [signatureData, setSignatureData] = useState<SignatureData>({\n    fullName: '',\n    company: '',\n    position: '',\n    email: '',\n    phone: '',\n    digitalSignature: '',\n    acceptedDate: new Date().toISOString(),\n  });\n\n  const handleNext = () => {\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      onAccept(signatureData);\n    }\n  };\n\n  const validateForm = () => {\n    const { fullName, company, email, digitalSignature } = signatureData;\n    return fullName && company && email && digitalSignature;\n  };\n\n  const renderStep1 = () => (\n    <div className=\"space-y-6\">\n      <Card className=\"border-yellow-200 bg-yellow-50\">\n        <CardBody>\n          <div className=\"flex items-start gap-3\">\n            <AlertTriangle className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-yellow-800 mb-1\">Confidential Information</h4>\n              <p className=\"text-sm text-yellow-700\">\n                This listing contains confidential business information that requires a signed\n                Non-Disclosure Agreement (NDA) before access can be granted.\n              </p>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">NDA Requirements</h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <Shield className=\"w-5 h-5 text-blue-600\" />\n            <div>\n              <p className=\"font-medium\">Confidentiality Protection</p>\n              <p className=\"text-sm text-gray-600\">\n                All shared information must remain confidential\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <FileText className=\"w-5 h-5 text-green-600\" />\n            <div>\n              <p className=\"font-medium\">Limited Use</p>\n              <p className=\"text-sm text-gray-600\">Information only for evaluation purposes</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <User className=\"w-5 h-5 text-purple-600\" />\n            <div>\n              <p className=\"font-medium\">Identity Verification</p>\n              <p className=\"text-sm text-gray-600\">Your identity will be verified by the seller</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-gray-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium mb-2\">Listing Details</h4>\n        <p className=\"text-sm text-gray-600 mb-1\">\n          <strong>Business:</strong> {listingTitle}\n        </p>\n        <p className=\"text-sm text-gray-600\">\n          <strong>Seller:</strong> {sellerName}\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Your Information</h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label=\"Full Name\"\n          placeholder=\"Enter your full legal name\"\n          value={signatureData.fullName}\n          onChange={e => setSignatureData(prev => ({ ...prev, fullName: e.target.value }))}\n          required\n          name=\"fullName\"\n          type=\"text\"\n          onBlur={() => {}}\n        />\n\n        <Input\n          label=\"Email Address\"\n          type=\"email\"\n          placeholder=\"your.email@company.com\"\n          value={signatureData.email}\n          onChange={e => setSignatureData(prev => ({ ...prev, email: e.target.value }))}\n          required\n          name=\"email\"\n          onBlur={() => {}}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label=\"Company/Organization\"\n          placeholder=\"Your company name\"\n          value={signatureData.company}\n          onChange={e => setSignatureData(prev => ({ ...prev, company: e.target.value }))}\n          required\n          name=\"company\"\n          type=\"text\"\n          onBlur={() => {}}\n        />\n\n        <Input\n          label=\"Position/Title\"\n          placeholder=\"Your job title\"\n          value={signatureData.position}\n          onChange={e => setSignatureData(prev => ({ ...prev, position: e.target.value }))}\n          name=\"position\"\n          type=\"text\"\n          onBlur={() => {}}\n        />\n      </div>\n\n      <Input\n        label=\"Phone Number\"\n        placeholder=\"+32 123 456 789\"\n        value={signatureData.phone}\n        onChange={e => setSignatureData(prev => ({ ...prev, phone: e.target.value }))}\n        name=\"phone\"\n        type=\"tel\"\n        onBlur={() => {}}\n      />\n\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardBody>\n          <p className=\"text-sm text-blue-700\">\n            <strong>Note:</strong> This information will be shared with the seller to verify your\n            identity and investment capacity. All information is handled in accordance with GDPR.\n          </p>\n        </CardBody>\n      </Card>\n    </div>\n  );\n\n  const renderStep3 = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold\">Digital Signature & Agreement</h3>\n\n      <div className=\"border rounded-lg p-4 max-h-96 overflow-y-auto bg-gray-50\">\n        <h4 className=\"font-semibold mb-4\">NON-DISCLOSURE AGREEMENT</h4>\n\n        <div className=\"text-sm text-gray-700 space-y-4\">\n          {/* Parties Section */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">THE UNDERSIGNED:</h5>\n            <p className=\"mb-2\">\n              <strong>Discloser:</strong> {sellerName} (the \"Discloser\")\n            </p>\n            <p className=\"mb-2\">\n              <strong>Recipient:</strong> {signatureData.fullName || '[Your Name]'} of{' '}\n              {signatureData.company || '[Your Company]'} (the \"Recipient\")\n            </p>\n            <p className=\"text-xs text-gray-600 italic\">\n              Hereinafter jointly referred to as \"Parties\" and individually as a \"Party\"\n            </p>\n          </div>\n\n          {/* Article 1: Confidentiality Obligation */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 1. Confidentiality Obligation</h5>\n            <p className=\"mb-2\">\n              <strong>1.1 Definition of Confidential Information:</strong> All information relating\n              to this Agreement and the Discloser, including but not limited to activities, plans,\n              technology, technical information, inventions, methods, processes, specifications,\n              features, raw data, registers, databases, equipment, know-how, experience and trade\n              secrets, marketing, sales, customers, suppliers, consultants, relationships and\n              development information, operational, performance and cost information, computer\n              programming techniques in both material and immaterial form, codes (including source\n              codes) and all media or disclosures of the above information and techniques, including\n              written business plans, patents and patent applications, subsidy applications, notes\n              and memoranda as well as 'trade secrets' within the meaning of the Trade Secrets\n              Protection Act, whether written or oral, stored or maintained electronically.\n            </p>\n            <p className=\"mb-2\">\n              <strong>1.2 Confidentiality:</strong> The Recipient will treat all Confidential\n              Information received from the Discloser as strictly confidential and will not disclose\n              or make available to third parties.\n            </p>\n            <p className=\"mb-2\">\n              <strong>1.3 Ownership:</strong> All Confidential Information remains the exclusive\n              property of the Discloser. The Recipient is only entitled to disclose Confidential\n              Information to its personnel insofar as this is necessary for the realization of the\n              business opportunity evaluation.\n            </p>\n          </div>\n\n          {/* Article 2: Exceptions */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 2. Exceptions to Confidentiality</h5>\n            <p className=\"mb-2\">\n              The Recipient is not obliged to maintain confidentiality of Confidential Information\n              if and to the extent that the information:\n            </p>\n            <ul className=\"list-disc list-inside ml-4 space-y-1\">\n              <li>is publicly known, unless this is the result of a breach by the Recipient</li>\n              <li>has been made public by the Discloser</li>\n              <li>\n                has been independently developed by the Recipient without breach of this Agreement\n              </li>\n              <li>has been released by the Discloser with written consent</li>\n              <li>must be disclosed by law or court order</li>\n            </ul>\n          </div>\n\n          {/* Article 3: Use and Return */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 3. Use and Return of Information</h5>\n            <p className=\"mb-2\">\n              <strong>3.1 Purpose:</strong> The Recipient will only use Confidential Information for\n              evaluation of the business opportunity and potential acquisition discussions.\n            </p>\n            <p className=\"mb-2\">\n              <strong>3.2 Return:</strong> Upon termination of this Agreement, the Recipient will\n              destroy all Confidential Information (to the extent technically feasible), except\n              where required to be retained by law.\n            </p>\n          </div>\n\n          {/* Article 4: Non-Solicitation */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 4. Non-Solicitation</h5>\n            <p className=\"mb-2\">\n              During the term of this Agreement and for one (1) year after termination, neither\n              Party will:\n            </p>\n            <ul className=\"list-disc list-inside ml-4 space-y-1\">\n              <li>directly or indirectly solicit customers and/or relations of the other Party</li>\n              <li>approach or request customers/relations to withdraw from the other Party</li>\n              <li>\n                induce employees, service providers or suppliers to modify or terminate their\n                agreements with the other Party\n              </li>\n            </ul>\n          </div>\n\n          {/* Article 5: Liability and Penalties */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 5. Liability and Penalty Clause</h5>\n            <p className=\"mb-2\">\n              <strong>5.1 Liability:</strong> In case the Recipient acts in violation of this\n              Agreement, the Recipient is liable to the Discloser for all damage suffered as a\n              result of this breach.\n            </p>\n            <p className=\"mb-2\">\n              <strong>5.2 Penalty:</strong> In case of violation, the Recipient is immediately\n              liable for a penalty of EUR 50,000 (fifty thousand euros) per violation, without\n              prejudice to the right to claim damages.\n            </p>\n          </div>\n\n          {/* Article 6: Duration and Termination */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 6. Duration and Termination</h5>\n            <p className=\"mb-2\">\n              <strong>6.1 Duration:</strong> This Agreement enters into force upon signing and is\n              concluded for a period of three (3) years.\n            </p>\n            <p className=\"mb-2\">\n              <strong>6.2 Retroactive Effect:</strong> The confidentiality obligations apply\n              retroactively from the moment of first contact and continue after completion of the\n              evaluation, regardless of whether discussions lead to a transaction.\n            </p>\n          </div>\n\n          {/* Article 7: Applicable Law */}\n          <div>\n            <h5 className=\"font-semibold mb-2\">Article 7. Applicable Law and Jurisdiction</h5>\n            <p className=\"mb-2\">\n              <strong>7.1 Governing Law:</strong> This Agreement is governed by Belgian law.\n            </p>\n            <p className=\"mb-2\">\n              <strong>7.2 Jurisdiction:</strong> All disputes will be submitted to the exclusively\n              competent court in Belgium.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <AnimatedTextarea\n        label=\"Digital Signature\"\n        placeholder=\"Type your full name as digital signature\"\n        value={signatureData.digitalSignature}\n        onChange={e => setSignatureData(prev => ({ ...prev, digitalSignature: e.target.value }))}\n        onBlur={() => {}}\n        name=\"digitalSignature\"\n        required\n        minRows={2}\n        maxRows={3}\n      />\n\n      <div className=\"space-y-4\">\n        <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n          <p className=\"text-sm text-blue-800 font-medium mb-2\">\n            By typing your name below, you confirm this serves as your digital signature and that\n            you agree to all terms and conditions of this Non-Disclosure Agreement.\n          </p>\n          <p className=\"text-xs text-blue-600\">\n            This includes all articles, clauses, penalties, and legal obligations outlined above.\n          </p>\n        </div>\n\n        <div className=\"bg-gray-50 p-3 rounded-lg\">\n          <p className=\"text-xs text-gray-600\">\n            <strong>Agreement Details:</strong>\n            <br />\n            Date: {new Date().toLocaleDateString()}\n            <br />\n            Time: {new Date().toLocaleTimeString()}\n            <br />\n            IP Address: Will be recorded for verification\n            <br />\n            Duration: 3 years from signing date\n            <br />\n            Jurisdiction: Belgian courts\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onOpenChange={onClose}\n      size=\"5xl\"\n      scrollBehavior=\"inside\"\n      isDismissable={false}\n      isKeyboardDismissDisabled={true}\n    >\n      <ModalContent>\n        {onClose => (\n          <>\n            <ModalHeader className=\"flex flex-col gap-1\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-blue-600\" />\n                <span>Non-Disclosure Agreement</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                <span>Step {currentStep} of 3</span>\n                <div className=\"flex gap-1\">\n                  {[1, 2, 3].map(step => (\n                    <div\n                      key={step}\n                      className={`w-2 h-2 rounded-full ${\n                        step <= currentStep ? 'bg-blue-600' : 'bg-gray-300'\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n            </ModalHeader>\n\n            <ModalBody>\n              {currentStep === 1 && renderStep1()}\n              {currentStep === 2 && renderStep2()}\n              {currentStep === 3 && renderStep3()}\n            </ModalBody>\n\n            <ModalFooter>\n              <Button variant=\"danger\" onPress={onClose} isDisabled={isLoading}>\n                Cancel\n              </Button>\n\n              {currentStep > 1 && (\n                <Button\n                  color=\"default\"\n                  variant=\"tertiary\"\n                  onPress={handleBack}\n                  isDisabled={isLoading}\n                >\n                  Back\n                </Button>\n              )}\n\n              {currentStep < 3 ? (\n                <Button variant=\"primary\" onPress={handleNext} isDisabled={isLoading}>\n                  Next\n                </Button>\n              ) : (\n                <Button\n                  variant=\"success\"\n                  onPress={handleSubmit}\n                  isDisabled={!validateForm() || isLoading}\n                  isLoading={isLoading}\n                >\n                  Sign NDA & Continue\n                </Button>\n              )}\n            </ModalFooter>\n          </>\n        )}\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default NDAModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/SellerOnboardingModal.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":17,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":17,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 Seller Onboarding Modal - Legacy Export\n * Location: src/shared/components/modals/SellerOnboardingModal.tsx\n * Purpose: Legacy export for backward compatibility\n *\n * @deprecated Use the modular system from ./onboarding/seller/ instead\n */\n\n// Re-export from the new modular system\nexport {\n  default as SellerOnboardingModal,\n  type SellerFormData,\n  type SellerOnboardingModalProps,\n} from './onboarding/seller';\n\n// Legacy export for backward compatibility\nexport { default } from './onboarding/seller';\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/ValuationModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'valuationData' is defined but never used.","line":49,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'valuationData' is defined but never used.","line":50,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'finalValuation' is assigned a value but never used.","line":195,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'finalValuation' is assigned a value but never used.","line":195,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7797,7850],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💰 Valuation Modal - Anonymous Business Valuation\n * Location: src/shared/components/modals/ValuationModal.tsx\n * Purpose: Anonymous valuation modal for lead generation and conversion\n *\n * Features:\n * - Anonymous access to valuation inputs\n * - Email capture before results\n * - Signup prompt after valuation\n * - Based on existing ValuationTool component\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { CustomNumberInputField } from '@/shared/components/forms';\nimport { Modal, ModalBody, ModalContent, ModalHeader } from '@heroui/react';\nimport { Calculator, X } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../app/providers/auth-provider';\n\ninterface ValuationInputs {\n  // Business structure\n  businessType: 'sole-trader' | 'company'; // Business structure type\n  sharesForSale: number; // % shares for sale (only for companies)\n  // Essential inputs for valuation\n  revenue2025: number;\n  revenue2024: number;\n  revenue2023: number;\n  ebitda2025: number;\n  ebitda2024: number;\n  ebitda2023: number;\n  // Additional helpful inputs\n  employeeCount: string;\n}\n\ninterface ValuationResult {\n  method: string;\n  value: number;\n  lowRange: number;\n  highRange: number;\n  confidence: 'high' | 'medium' | 'low';\n  explanation: string;\n  assumptions: string[];\n}\n\ninterface ValuationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSignupPrompt: (valuationData: ValuationInputs) => void;\n  onComplete?: (valuationData: ValuationInputs) => void; // For authenticated users\n}\n\nconst ValuationModal: React.FC<ValuationModalProps> = ({\n  isOpen,\n  onClose,\n  onSignupPrompt,\n  onComplete,\n}) => {\n  const { isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const [isCalculating, setIsCalculating] = useState(false);\n\n  const [inputs, setInputs] = useState<ValuationInputs>({\n    businessType: 'company', // Default to company\n    sharesForSale: 100, // 100% of shares\n    revenue2025: 500000,\n    revenue2024: 450000,\n    revenue2023: 420000,\n    ebitda2025: 150000,\n    ebitda2024: 135000,\n    ebitda2023: 125000,\n    employeeCount: '6-10',\n  });\n\n  // Industry multiples database (same as ValuationTool)\n  const industryMultiples = {\n    'food-beverage': {\n      revenueMultiple: { low: 0.8, avg: 1.2, high: 2.0 },\n      ebitdaMultiple: { low: 3.0, avg: 4.5, high: 7.0 },\n      description: 'Restaurants, cafés, food services',\n    },\n    retail: {\n      revenueMultiple: { low: 0.5, avg: 0.8, high: 1.5 },\n      ebitdaMultiple: { low: 3.5, avg: 5.0, high: 8.0 },\n      description: 'Retail stores, e-commerce',\n    },\n    'professional-services': {\n      revenueMultiple: { low: 1.0, avg: 1.8, high: 3.5 },\n      ebitdaMultiple: { low: 4.0, avg: 6.0, high: 10.0 },\n      description: 'Consulting, legal, accounting',\n    },\n    technology: {\n      revenueMultiple: { low: 2.0, avg: 4.0, high: 8.0 },\n      ebitdaMultiple: { low: 8.0, avg: 12.0, high: 20.0 },\n      description: 'Software, tech services',\n    },\n    healthcare: {\n      revenueMultiple: { low: 1.5, avg: 2.5, high: 4.0 },\n      ebitdaMultiple: { low: 6.0, avg: 9.0, high: 15.0 },\n      description: 'Medical practices, healthcare',\n    },\n    manufacturing: {\n      revenueMultiple: { low: 0.8, avg: 1.5, high: 2.5 },\n      ebitdaMultiple: { low: 4.5, avg: 6.5, high: 10.0 },\n      description: 'Manufacturing, production',\n    },\n  };\n\n  const calculateValuation = async () => {\n    setIsCalculating(true);\n\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    try {\n      const results: ValuationResult[] = [];\n      // Use a default industry for valuation (can be updated later with business profile data)\n      const industryData = industryMultiples['technology']; // Default to technology industry\n\n      // 1. Revenue Multiple Method (using latest year)\n      const revenueMultipleValuation = inputs.revenue2025 * industryData.revenueMultiple.avg;\n      results.push({\n        method: 'Revenue Multiple',\n        value: revenueMultipleValuation,\n        lowRange: inputs.revenue2025 * industryData.revenueMultiple.low,\n        highRange: inputs.revenue2025 * industryData.revenueMultiple.high,\n        confidence: inputs.revenue2025 > 100000 ? 'high' : 'medium',\n        explanation: `Based on ${industryData.revenueMultiple.avg}x revenue multiple for ${industryData.description}`,\n        assumptions: [\n          `Industry average: ${industryData.revenueMultiple.avg}x revenue`,\n          `Revenue trend analysis: ${inputs.revenue2023} → ${inputs.revenue2024} → ${inputs.revenue2025}`,\n        ],\n      });\n\n      // 2. EBITDA Multiple Method (using latest year)\n      if (inputs.ebitda2025 > 0) {\n        const ebitdaMultipleValuation = inputs.ebitda2025 * industryData.ebitdaMultiple.avg;\n        results.push({\n          method: 'EBITDA Multiple',\n          value: ebitdaMultipleValuation,\n          lowRange: inputs.ebitda2025 * industryData.ebitdaMultiple.low,\n          highRange: inputs.ebitda2025 * industryData.ebitdaMultiple.high,\n          confidence: inputs.ebitda2025 > 50000 ? 'high' : 'medium',\n          explanation: `Based on ${industryData.ebitdaMultiple.avg}x EBITDA multiple for established businesses`,\n          assumptions: [\n            `Industry EBITDA multiple: ${industryData.ebitdaMultiple.avg}x`,\n            `EBITDA trend analysis: ${inputs.ebitda2023} → ${inputs.ebitda2024} → ${inputs.ebitda2025}`,\n            `Profitability sustainability assessed`,\n          ],\n        });\n      }\n\n      // 3. Trend-Based Valuation (Revenue Growth Analysis)\n      const revenueGrowthRate =\n        ((inputs.revenue2025 - inputs.revenue2023) / inputs.revenue2023) * 100;\n      const ebitdaGrowthRate = ((inputs.ebitda2025 - inputs.ebitda2023) / inputs.ebitda2023) * 100;\n\n      // Apply growth premium/discount based on trends\n      const growthMultiplier =\n        revenueGrowthRate > 10\n          ? 1.2\n          : revenueGrowthRate > 5\n            ? 1.1\n            : revenueGrowthRate > 0\n              ? 1.0\n              : 0.9;\n      const trendBasedValue =\n        ((revenueMultipleValuation + inputs.ebitda2025 * industryData.ebitdaMultiple.avg) / 2) *\n        growthMultiplier;\n\n      results.push({\n        method: 'Trend Analysis',\n        value: trendBasedValue,\n        lowRange: trendBasedValue * 0.8,\n        highRange: trendBasedValue * 1.2,\n        confidence: Math.abs(revenueGrowthRate) < 20 ? 'high' : 'medium',\n        explanation: `Combined revenue and EBITDA analysis with growth trend consideration`,\n        assumptions: [\n          `Revenue growth rate: ${revenueGrowthRate.toFixed(1)}% over 3 years`,\n          `EBITDA growth rate: ${ebitdaGrowthRate.toFixed(1)}% over 3 years`,\n          `Growth premium/discount applied based on trend stability`,\n        ],\n      });\n\n      // Calculate weighted average (focus on revenue and EBITDA methods)\n      const weights = [0.4, 0.4, 0.2]; // Revenue, EBITDA, Trend Analysis\n      const weightedSum = results.reduce(\n        (sum, result, index) => sum + result.value * weights[index],\n        0\n      );\n\n      // Apply shares percentage to get actual valuation\n      // For sole traders, it's always 100% ownership\n      const ownershipPercentage =\n        inputs.businessType === 'sole-trader' ? 100 : inputs.sharesForSale;\n      const finalValuation = weightedSum * (ownershipPercentage / 100);\n\n      // For authenticated users, complete and navigate\n      if (isAuthenticated) {\n        if (onComplete) {\n          onComplete(inputs);\n        }\n        onClose();\n        navigate('/my-business/valuations');\n      } else {\n        // For unauthenticated users, show signup prompt\n        onSignupPrompt(inputs);\n        onClose();\n      }\n    } catch (error) {\n      console.error('Error calculating valuation:', error);\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof ValuationInputs, value: string | number) => {\n    setInputs(prev => ({\n      ...prev,\n      [field]:\n        typeof value === 'string' && field !== 'employeeCount' && field !== 'businessType'\n          ? parseFloat(value) || 0\n          : value,\n    }));\n  };\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      size=\"5xl\"\n      backdrop=\"opaque\"\n      radius=\"lg\"\n      shadow=\"lg\"\n      isDismissable={true}\n      isKeyboardDismissDisabled={false}\n      shouldBlockScroll={true}\n      hideCloseButton={true}\n      scrollBehavior=\"inside\"\n      classNames={{\n        base: 'max-h-[85vh]',\n        body: 'py-4 overflow-y-auto max-h-[65vh]',\n        header: 'pb-2',\n        footer: 'pt-2',\n      }}\n    >\n      <ModalContent>\n        <ModalHeader className=\"flex flex-col gap-1\">\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-primary-100 rounded-lg\">\n                <Calculator className=\"w-5 h-5 text-primary-600\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold text-gray-900\">Free Business Valuation</h2>\n                <p className=\"text-sm text-gray-600\">Get your business value in minutes</p>\n              </div>\n            </div>\n            <Button\n              isIconOnly\n              variant=\"tertiary\"\n              size=\"sm\"\n              onPress={handleClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </ModalHeader>\n\n        <ModalBody>\n          {/* Business Data Form - Compact Layout */}\n          <div className=\"space-y-4\">\n            {/* Business Structure - Compact */}\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-1\">Business Structure</h4>\n                <p className=\"text-sm text-gray-600\">Select your business type</p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div\n                  className={`p-3 border-2 rounded-lg cursor-pointer transition-all ${\n                    inputs.businessType === 'sole-trader'\n                      ? 'border-primary-500 bg-primary-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => handleInputChange('businessType', 'sole-trader')}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <div\n                      className={`w-3 h-3 rounded-full border-2 ${\n                        inputs.businessType === 'sole-trader'\n                          ? 'border-primary-500 bg-primary-500'\n                          : 'border-gray-300'\n                      }`}\n                    >\n                      {inputs.businessType === 'sole-trader' && (\n                        <div className=\"w-1 h-1 bg-white rounded-full m-0.5\"></div>\n                      )}\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 text-sm\">Sole Trader</h5>\n                      <p className=\"text-xs text-gray-600\">100% ownership</p>\n                    </div>\n                  </div>\n                </div>\n                <div\n                  className={`p-3 border-2 rounded-lg cursor-pointer transition-all ${\n                    inputs.businessType === 'company'\n                      ? 'border-primary-500 bg-primary-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => handleInputChange('businessType', 'company')}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <div\n                      className={`w-3 h-3 rounded-full border-2 ${\n                        inputs.businessType === 'company'\n                          ? 'border-primary-500 bg-primary-500'\n                          : 'border-gray-300'\n                      }`}\n                    >\n                      {inputs.businessType === 'company' && (\n                        <div className=\"w-1 h-1 bg-white rounded-full m-0.5\"></div>\n                      )}\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 text-sm\">Company</h5>\n                      <p className=\"text-xs text-gray-600\">With shares</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Shares for Sale - Only for Companies */}\n              {inputs.businessType === 'company' && (\n                <div className=\"max-w-xs\">\n                  <CustomNumberInputField\n                    label=\"% Shares for Sale\"\n                    placeholder=\"100\"\n                    value={inputs.sharesForSale.toString()}\n                    onChange={e => handleInputChange('sharesForSale', e.target.value)}\n                    onBlur={() => {}}\n                    name=\"sharesForSale\"\n                    suffix=\"%\"\n                    min={1}\n                    max={100}\n                    step={1}\n                    allowDecimals={false}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Financial Data - Compact Grid */}\n            <div className=\"space-y-2\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                  Financial Data (Last 3 Years)\n                </h4>\n                <p className=\"text-sm text-gray-600\">Revenue and EBITDA figures</p>\n              </div>\n\n              {/* Revenue Row */}\n              <div className=\"grid grid-cols-3 gap-3\">\n                <CustomNumberInputField\n                  label=\"2023 Revenue\"\n                  placeholder=\"420,000\"\n                  value={inputs.revenue2023.toString()}\n                  onChange={e => handleInputChange('revenue2023', e.target.value)}\n                  onBlur={() => {}}\n                  name=\"revenue2023\"\n                  prefix=\"€\"\n                  formatAsCurrency={true}\n                  min={0}\n                />\n                <CustomNumberInputField\n                  label=\"2024 Revenue\"\n                  placeholder=\"450,000\"\n                  value={inputs.revenue2024.toString()}\n                  onChange={e => handleInputChange('revenue2024', e.target.value)}\n                  onBlur={() => {}}\n                  name=\"revenue2024\"\n                  prefix=\"€\"\n                  formatAsCurrency={true}\n                  min={0}\n                />\n                <CustomNumberInputField\n                  label=\"2025 Revenue\"\n                  placeholder=\"500,000\"\n                  value={inputs.revenue2025.toString()}\n                  onChange={e => handleInputChange('revenue2025', e.target.value)}\n                  onBlur={() => {}}\n                  name=\"revenue2025\"\n                  prefix=\"€\"\n                  formatAsCurrency={true}\n                  min={0}\n                />\n              </div>\n\n              {/* EBITDA Row */}\n              <div className=\"grid grid-cols-3 gap-3 mt-2\">\n                <CustomNumberInputField\n                  label=\"2023 EBITDA\"\n                  placeholder=\"125,000\"\n                  value={inputs.ebitda2023.toString()}\n                  onChange={e => handleInputChange('ebitda2023', e.target.value)}\n                  onBlur={() => {}}\n                  name=\"ebitda2023\"\n                  prefix=\"€\"\n                  formatAsCurrency={true}\n                  min={0}\n                />\n                <CustomNumberInputField\n                  label=\"2024 EBITDA\"\n                  placeholder=\"135,000\"\n                  value={inputs.ebitda2024.toString()}\n                  onChange={e => handleInputChange('ebitda2024', e.target.value)}\n                  onBlur={() => {}}\n                  name=\"ebitda2024\"\n                  prefix=\"€\"\n                  formatAsCurrency={true}\n                  min={0}\n                />\n                <CustomNumberInputField\n                  label=\"2025 EBITDA\"\n                  placeholder=\"150,000\"\n                  value={inputs.ebitda2025.toString()}\n                  onChange={e => handleInputChange('ebitda2025', e.target.value)}\n                  onBlur={() => {}}\n                  name=\"ebitda2025\"\n                  prefix=\"€\"\n                  formatAsCurrency={true}\n                  min={0}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center mt-8\">\n            <Button\n              variant=\"primary\"\n              size=\"lg\"\n              startContent={<Calculator className=\"w-5 h-5\" />}\n              onPress={calculateValuation}\n              isLoading={isCalculating}\n              className=\"px-12\"\n            >\n              Calculate Business Value\n            </Button>\n          </div>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ValuationModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/authentication/AuthenticationModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":31,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":33,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔐 Authentication Modal - Enterprise Implementation\n * Location: src/shared/components/modals/domains/authentication/AuthenticationModal.tsx\n * Purpose: Unified authentication modal using TwoPanelModal foundation\n *\n * @example\n * <AuthenticationModal\n *   type=\"login\"\n *   isOpen={isOpen}\n *   onClose={onClose}\n *   onSuccess={handleAuthSuccess}\n * />\n */\n\nimport React from 'react';\nimport { TwoPanelModal } from '../../foundations';\nimport { LoginPanel } from './panels/LoginPanel';\nimport { SignupPanel } from './panels/SignupPanel';\nimport { WelcomePanel } from './panels/WelcomePanel';\n\nexport type AuthenticationType = 'login' | 'signup';\n\ninterface AuthenticationModalProps {\n  /** Type of authentication flow */\n  type: AuthenticationType;\n  /** Whether the modal is open */\n  isOpen: boolean;\n  /** Function to call when modal should close */\n  onClose: () => void;\n  /** Function to call on successful authentication */\n  onSuccess?: (user: any) => void;\n  /** Function to switch between login/signup */\n  onSwitchType?: (type: AuthenticationType) => void;\n  /** Initial redirect path after authentication */\n  redirectPath?: string;\n}\n\nexport const AuthenticationModal: React.FC<AuthenticationModalProps> = ({\n  type,\n  isOpen,\n  onClose,\n  onSuccess,\n  onSwitchType,\n  redirectPath,\n}) => {\n  const renderLeftPanel = () => {\n    switch (type) {\n      case 'login':\n        return (\n          <LoginPanel\n            onClose={onClose}\n            onSuccess={onSuccess}\n            onSwitchToSignup={() => onSwitchType?.('signup')}\n            redirectPath={redirectPath}\n          />\n        );\n      case 'signup':\n        return (\n          <SignupPanel\n            onClose={onClose}\n            onSuccess={onSuccess}\n            onSwitchToLogin={() => onSwitchType?.('login')}\n            redirectPath={redirectPath}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  const renderRightPanel = () => {\n    return <WelcomePanel type={type} onSwitchType={onSwitchType} />;\n  };\n\n  return (\n    <TwoPanelModal\n      isOpen={isOpen}\n      onClose={onClose}\n      leftPanel={renderLeftPanel()}\n      rightPanel={renderRightPanel()}\n      leftPanelWidth=\"md\"\n      rightPanelBackground=\"/images/auth-background.jpg\"\n      closeButtonAriaLabel={`Close ${type} modal`}\n    />\n  );\n};\n\nexport default AuthenticationModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/authentication/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/authentication/panels/LoginPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":13,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'redirectPath' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redirectPath' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1002,1039],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔐 Login Panel Component\n * Location: src/shared/components/modals/domains/authentication/panels/LoginPanel.tsx\n * Purpose: Login form panel for TwoPanelModal\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport React, { useState } from 'react';\nimport { CustomInputField, CustomPasswordInputField } from '../../../../forms';\n\ninterface LoginPanelProps {\n  onClose: () => void;\n  onSuccess?: (user: unknown) => void;\n  onSwitchToSignup?: () => void;\n  redirectPath?: string;\n}\n\nexport const LoginPanel: React.FC<LoginPanelProps> = ({\n  onClose,\n  onSuccess,\n  onSwitchToSignup,\n  redirectPath,\n}) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // TODO: Implement actual login logic\n      onSuccess?.({}); // Mock success\n      onClose();\n    } catch (error) {\n      console.error('Login error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex-1 px-8 py-12\">\n        <div className=\"max-w-sm mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Welcome back</h1>\n            <p className=\"text-gray-600\">Sign in to your Upswitch account</p>\n          </div>\n\n          {/* Login Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <CustomInputField\n              label=\"Email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={e => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              onBlur={() => {}}\n              required\n            />\n\n            <CustomPasswordInputField\n              label=\"Password\"\n              placeholder=\"Enter your password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={e => setFormData(prev => ({ ...prev, password: e.target.value }))}\n              onBlur={() => {}}\n              required\n            />\n\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              size=\"lg\"\n              className=\"w-full\"\n              isLoading={isLoading}\n            >\n              Sign In\n            </Button>\n          </form>\n\n          {/* Footer Links */}\n          <div className=\"mt-6 text-center space-y-4\">\n            <button type=\"button\" className=\"text-sm text-primary-600 hover:text-primary-700\">\n              Forgot your password?\n            </button>\n\n            {onSwitchToSignup && (\n              <div className=\"text-sm text-gray-600\">\n                Don't have an account?{' '}\n                <button\n                  type=\"button\"\n                  onClick={onSwitchToSignup}\n                  className=\"text-primary-600 hover:text-primary-700 font-medium\"\n                >\n                  Sign up\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/authentication/panels/SignupPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":13,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'redirectPath' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redirectPath' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1046,1084],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔐 Signup Panel Component\n * Location: src/shared/components/modals/domains/authentication/panels/SignupPanel.tsx\n * Purpose: Signup form panel for TwoPanelModal\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport React, { useState } from 'react';\nimport { CustomInputField, CustomPasswordInputField } from '../../../../forms';\n\ninterface SignupPanelProps {\n  onClose: () => void;\n  onSuccess?: (user: unknown) => void;\n  onSwitchToLogin?: () => void;\n  redirectPath?: string;\n}\n\nexport const SignupPanel: React.FC<SignupPanelProps> = ({\n  onClose,\n  onSuccess,\n  onSwitchToLogin,\n  redirectPath,\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // TODO: Implement actual signup logic\n      onSuccess?.({}); // Mock success\n      onClose();\n    } catch (error) {\n      console.error('Signup error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex-1 px-8 py-12\">\n        <div className=\"max-w-sm mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Join UpSwitch</h1>\n            <p className=\"text-gray-600\">Create your account to get started</p>\n          </div>\n\n          {/* Signup Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <CustomInputField\n              label=\"Full Name\"\n              type=\"text\"\n              placeholder=\"Enter your full name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              onBlur={() => {}}\n              required\n            />\n\n            <CustomInputField\n              label=\"Email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={e => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              onBlur={() => {}}\n              required\n            />\n\n            <CustomPasswordInputField\n              label=\"Password\"\n              placeholder=\"Enter your password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={e => setFormData(prev => ({ ...prev, password: e.target.value }))}\n              onBlur={() => {}}\n              required\n            />\n\n            <CustomPasswordInputField\n              label=\"Confirm Password\"\n              placeholder=\"Confirm your password\"\n              name=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={e => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n              onBlur={() => {}}\n              required\n            />\n\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              size=\"lg\"\n              className=\"w-full\"\n              isLoading={isLoading}\n            >\n              Create Account\n            </Button>\n          </form>\n\n          {/* Footer Links */}\n          <div className=\"mt-6 text-center\">\n            {onSwitchToLogin && (\n              <div className=\"text-sm text-gray-600\">\n                Already have an account?{' '}\n                <button\n                  type=\"button\"\n                  onClick={onSwitchToLogin}\n                  className=\"text-primary-600 hover:text-primary-700 font-medium\"\n                >\n                  Sign in\n                </button>\n              </div>\n            )}\n          </div>\n\n          {/* Terms */}\n          <div className=\"mt-6 text-xs text-gray-500 text-center\">\n            By creating an account, you agree to our{' '}\n            <a href=\"/terms\" className=\"text-primary-600 hover:text-primary-700\">\n              Terms of Service\n            </a>{' '}\n            and{' '}\n            <a href=\"/privacy\" className=\"text-primary-600 hover:text-primary-700\">\n              Privacy Policy\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignupPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/authentication/panels/WelcomePanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":12,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎨 Welcome Panel Component\n * Location: src/shared/components/modals/domains/authentication/panels/WelcomePanel.tsx\n * Purpose: Visual welcome panel for TwoPanelModal\n */\n\nimport React from 'react';\nimport { AuthenticationType } from '../AuthenticationModal';\n\ninterface WelcomePanelProps {\n  type: AuthenticationType;\n  onSwitchType?: (type: AuthenticationType) => void;\n}\n\nexport const WelcomePanel: React.FC<WelcomePanelProps> = ({ type, onSwitchType }) => {\n  const content = {\n    login: {\n      title: 'Welcome back to UpSwitch',\n      subtitle: 'Continue your business journey',\n      features: [\n        'Access your business dashboard',\n        'Manage your listings',\n        'Connect with qualified buyers',\n        'Track your business metrics',\n      ],\n    },\n    signup: {\n      title: 'Start your UpSwitch journey',\n      subtitle: 'Join thousands of successful business owners',\n      features: [\n        'List your business for sale',\n        'Get professional valuations',\n        'Connect with serious buyers',\n        'Secure transaction process',\n      ],\n    },\n  };\n\n  const currentContent = content[type];\n\n  return (\n    <div className=\"h-full flex flex-col justify-center items-center text-white p-12\">\n      <div className=\"max-w-md text-center\">\n        {/* Logo */}\n        <div className=\"mb-8\">\n          <div className=\"w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-2xl font-bold text-white\">f</span>\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\">{currentContent.title}</h1>\n          <p className=\"text-lg text-white text-opacity-90\">{currentContent.subtitle}</p>\n        </div>\n\n        {/* Features */}\n        <div className=\"space-y-4 mb-8\">\n          {currentContent.features.map((feature, index) => (\n            <div key={index} className=\"flex items-center text-left\">\n              <div className=\"w-2 h-2 bg-white bg-opacity-60 rounded-full mr-3 flex-shrink-0\" />\n              <span className=\"text-white text-opacity-90\">{feature}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* Switch Type Button */}\n        {onSwitchType && (\n          <div className=\"text-center\">\n            <p className=\"text-white text-opacity-75 text-sm mb-3\">\n              {type === 'login' ? \"Don't have an account?\" : 'Already have an account?'}\n            </p>\n            <button\n              onClick={() => onSwitchType(type === 'login' ? 'signup' : 'login')}\n              className=\"text-white font-medium underline hover:no-underline transition-all\"\n            >\n              {type === 'login' ? 'Create an account' : 'Sign in instead'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WelcomePanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/ListingNudgeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/management/BusinessProfileModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":52,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5227,5272],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 Business Profile Modal - Business Domain\n * Location: src/shared/components/modals/domains/business/management/BusinessProfileModal.tsx\n * Purpose: Complete business profile management with multi-step form\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  CustomCheckbox,\n  CustomDropdown,\n  CustomInputField,\n  CustomNumberInputField,\n  CustomTextarea,\n} from '@/shared/components/forms';\nimport {\n  Briefcase,\n  Building2,\n  Check,\n  DollarSign,\n  Factory,\n  Film,\n  GraduationCap,\n  Heart,\n  Home,\n  Laptop,\n  MoreHorizontal,\n  ShoppingBag,\n  TrendingUp,\n  Truck,\n  Users,\n  Utensils,\n  Zap,\n} from 'lucide-react';\nimport React, { useState } from 'react';\nimport { CenteredModal } from '../../../foundations';\n\ninterface BusinessInfo {\n  name: string;\n  location: string;\n  isRemote: boolean;\n  industry: string;\n  description: string;\n  foundedYear: number;\n  teamSize: string;\n  revenue: number;\n  status?: 'active' | 'inactive' | 'draft';\n}\n\ninterface BusinessProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave?: (data: BusinessInfo) => void;\n  initialData?: Partial<BusinessInfo>;\n}\n\nconst industryOptions = [\n  {\n    value: 'technology',\n    label: 'Technology',\n    icon: Laptop,\n    description: 'Software, IT services, digital products',\n  },\n  {\n    value: 'healthcare',\n    label: 'Healthcare',\n    icon: Heart,\n    description: 'Medical services, pharmaceuticals, wellness',\n  },\n  {\n    value: 'finance',\n    label: 'Finance & Banking',\n    icon: DollarSign,\n    description: 'Banking, insurance, investment services',\n  },\n  {\n    value: 'retail',\n    label: 'Retail & E-commerce',\n    icon: ShoppingBag,\n    description: 'Stores, online shops, consumer goods',\n  },\n  {\n    value: 'manufacturing',\n    label: 'Manufacturing',\n    icon: Factory,\n    description: 'Production, assembly, industrial goods',\n  },\n  {\n    value: 'consulting',\n    label: 'Consulting',\n    icon: Briefcase,\n    description: 'Professional services, advisory',\n  },\n  {\n    value: 'real-estate',\n    label: 'Real Estate',\n    icon: Home,\n    description: 'Property, construction, development',\n  },\n  {\n    value: 'education',\n    label: 'Education',\n    icon: GraduationCap,\n    description: 'Schools, training, educational services',\n  },\n  {\n    value: 'food-beverage',\n    label: 'Food & Beverage',\n    icon: Utensils,\n    description: 'Restaurants, cafes, food production',\n  },\n  {\n    value: 'transportation',\n    label: 'Transportation & Logistics',\n    icon: Truck,\n    description: 'Shipping, delivery, logistics services',\n  },\n  {\n    value: 'energy',\n    label: 'Energy & Utilities',\n    icon: Zap,\n    description: 'Power, utilities, renewable energy',\n  },\n  {\n    value: 'media',\n    label: 'Media & Entertainment',\n    icon: Film,\n    description: 'Content creation, entertainment, media',\n  },\n  {\n    value: 'other',\n    label: 'Other',\n    icon: MoreHorizontal,\n    description: 'Other industries not listed above',\n  },\n];\n\nconst teamSizeOptions = [\n  { value: '1-5', label: '1-5 employees' },\n  { value: '6-10', label: '6-10 employees' },\n  { value: '11-25', label: '11-25 employees' },\n  { value: '26-50', label: '26-50 employees' },\n  { value: '51-100', label: '51-100 employees' },\n  { value: '100+', label: '100+ employees' },\n];\n\nexport const BusinessProfileModal: React.FC<BusinessProfileModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  initialData,\n}) => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<BusinessInfo>({\n    name: '',\n    location: '',\n    isRemote: false,\n    industry: '',\n    description: '',\n    foundedYear: new Date().getFullYear(),\n    teamSize: '1-5',\n    revenue: 0,\n    status: 'active',\n    ...initialData,\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const steps = [\n    { id: 1, title: 'Business Info', icon: Building2 },\n    { id: 2, title: 'Industry', icon: TrendingUp },\n    { id: 3, title: 'Details', icon: Users },\n    { id: 4, title: 'Review', icon: Check },\n  ];\n\n  const handleInputChange = (field: keyof BusinessInfo, value: string | number | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  const validateStep = (step: number): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (step === 1) {\n      if (!formData.name.trim()) newErrors.name = 'Business name is required';\n      if (!formData.location.trim() && !formData.isRemote)\n        newErrors.location = 'Location is required or select remote';\n      if (formData.foundedYear < 1900 || formData.foundedYear > new Date().getFullYear()) {\n        newErrors.foundedYear = 'Please enter a valid year';\n      }\n    }\n\n    if (step === 2) {\n      if (!formData.industry) newErrors.industry = 'Industry is required';\n    }\n\n    if (step === 3) {\n      if (!formData.description.trim()) newErrors.description = 'Business description is required';\n      if (!formData.teamSize) newErrors.teamSize = 'Team size is required';\n    }\n\n    // Debug logging\n    if (Object.keys(newErrors).length > 0) {\n      console.log('Validation errors:', newErrors);\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, 4));\n    }\n  };\n\n  const handleBack = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const handleSave = () => {\n    if (validateStep(4)) {\n      onSave?.(formData);\n      onClose();\n    }\n  };\n\n  const renderStep1 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-4\">\n        <div className=\"w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n          <Building2 className=\"w-4 h-4 text-primary-600\" />\n        </div>\n        <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Business Information</h3>\n        <p className=\"text-gray-600 text-xs\">Tell us about your business basics</p>\n      </div>\n\n      <CustomInputField\n        label=\"Business Name\"\n        placeholder=\"Enter your business name\"\n        value={formData.name}\n        onChange={e => handleInputChange('name', e.target.value)}\n        onBlur={() => {}}\n        name=\"name\"\n        error={errors.name}\n        required\n      />\n\n      <CustomInputField\n        label=\"Location\"\n        placeholder=\"City, Country\"\n        value={formData.location}\n        onChange={e => handleInputChange('location', e.target.value)}\n        onBlur={() => {}}\n        name=\"location\"\n        error={errors.location}\n        required={!formData.isRemote}\n        disabled={formData.isRemote}\n      />\n\n      <CustomNumberInputField\n        label=\"Founded Year\"\n        placeholder=\"2020\"\n        value={formData.foundedYear.toString()}\n        onChange={e => handleInputChange('foundedYear', parseInt(e.target.value) || 0)}\n        onBlur={() => {}}\n        name=\"foundedYear\"\n        error={errors.foundedYear}\n        min={1900}\n        max={new Date().getFullYear()}\n        allowDecimals={false}\n        required\n      />\n\n      <CustomCheckbox\n        label=\"This is a remote/online business\"\n        checked={formData.isRemote}\n        onChange={() => handleInputChange('isRemote', !formData.isRemote)}\n        name=\"isRemote\"\n      />\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-4\">\n        <div className=\"w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n          <TrendingUp className=\"w-4 h-4 text-primary-600\" />\n        </div>\n        <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Industry Selection</h3>\n        <p className=\"text-gray-600 text-xs\">What industry does your business operate in?</p>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 max-h-80 overflow-y-auto\">\n        {industryOptions.map(industry => {\n          const Icon = industry.icon;\n          const isSelected = formData.industry === industry.value;\n          return (\n            <button\n              key={industry.value}\n              type=\"button\"\n              onClick={() => handleInputChange('industry', industry.value)}\n              className={`p-4 border-2 rounded-xl text-left transition-all duration-200 hover:shadow-md ${\n                isSelected\n                  ? 'border-primary-500 bg-primary-50 shadow-md'\n                  : 'border-gray-200 hover:border-gray-300 bg-white'\n              }`}\n            >\n              <div className=\"flex flex-col items-center text-center space-y-2\">\n                <div\n                  className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    isSelected ? 'bg-primary-100' : 'bg-gray-100'\n                  }`}\n                >\n                  <Icon\n                    className={`w-5 h-5 ${isSelected ? 'text-primary-600' : 'text-gray-500'}`}\n                  />\n                </div>\n                <div>\n                  <h4\n                    className={`font-medium text-sm ${\n                      isSelected ? 'text-primary-700' : 'text-gray-900'\n                    }`}\n                  >\n                    {industry.label}\n                  </h4>\n                  <p\n                    className={`text-xs mt-1 ${isSelected ? 'text-primary-600' : 'text-gray-500'}`}\n                  >\n                    {industry.description}\n                  </p>\n                </div>\n              </div>\n            </button>\n          );\n        })}\n      </div>\n\n      {errors.industry && (\n        <span className=\"block text-sm text-red-600 mt-2 font-medium\">{errors.industry}</span>\n      )}\n    </div>\n  );\n\n  const renderStep3 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-4\">\n        <div className=\"w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n          <Users className=\"w-4 h-4 text-primary-600\" />\n        </div>\n        <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Business Details</h3>\n        <p className=\"text-gray-600 text-xs\">Share more about your business</p>\n      </div>\n\n      <CustomTextarea\n        label=\"Business Description\"\n        placeholder=\"Describe what your business does, your products/services, and what makes you unique...\"\n        value={formData.description}\n        onChange={e => handleInputChange('description', e.target.value)}\n        onBlur={() => {}}\n        name=\"description\"\n        error={errors.description}\n        required\n        rows={4}\n      />\n\n      <CustomDropdown\n        label=\"Team Size\"\n        placeholder=\"Select team size\"\n        options={teamSizeOptions}\n        value={formData.teamSize}\n        onChange={value => handleInputChange('teamSize', value)}\n        name=\"teamSize\"\n        error={errors.teamSize}\n        required\n      />\n    </div>\n  );\n\n  const renderStep4 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-4\">\n        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n          <Check className=\"w-4 h-4 text-green-600\" />\n        </div>\n        <h3 className=\"text-base font-semibold text-gray-900 mb-1\">Review Your Information</h3>\n        <p className=\"text-gray-600 text-xs\">Please review your business profile before saving</p>\n      </div>\n\n      <div className=\"bg-gray-50 rounded-lg p-6 space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Basic Information</h4>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <span className=\"font-medium\">Name:</span> {formData.name}\n              </p>\n              <p>\n                <span className=\"font-medium\">Industry:</span>{' '}\n                {industryOptions.find(opt => opt.value === formData.industry)?.label}\n              </p>\n              <p>\n                <span className=\"font-medium\">Location:</span>{' '}\n                {formData.isRemote ? 'Remote/Online' : formData.location}\n              </p>\n            </div>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Business Details</h4>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <span className=\"font-medium\">Founded:</span> {formData.foundedYear}\n              </p>\n              <p>\n                <span className=\"font-medium\">Team Size:</span>{' '}\n                {teamSizeOptions.find(opt => opt.value === formData.teamSize)?.label}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div>\n          <h4 className=\"font-medium text-gray-900 mb-2\">Description</h4>\n          <p className=\"text-sm text-gray-600\">{formData.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 1:\n        return renderStep1();\n      case 2:\n        return renderStep2();\n      case 3:\n        return renderStep3();\n      case 4:\n        return renderStep4();\n      default:\n        return renderStep1();\n    }\n  };\n\n  return (\n    <CenteredModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Business Profile\"\n      size=\"2xl\"\n      footer={\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"tertiary\" onPress={currentStep === 1 ? onClose : handleBack} size=\"md\">\n            {currentStep === 1 ? 'Cancel' : 'Back'}\n          </Button>\n\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-sm text-gray-500\">\n              Step {currentStep} of {steps.length}\n            </span>\n            {currentStep < 4 ? (\n              <Button variant=\"primary\" onPress={handleNext} size=\"md\">\n                Next\n              </Button>\n            ) : (\n              <Button variant=\"primary\" onPress={handleSave} size=\"md\">\n                Save Profile\n              </Button>\n            )}\n          </div>\n        </div>\n      }\n    >\n      <div className=\"p-4\">\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-center mb-4\">\n          {steps.map((step, index) => {\n            const Icon = step.icon;\n            const isActive = currentStep === step.id;\n            const isCompleted = currentStep > step.id;\n\n            return (\n              <div key={step.id} className=\"flex items-center\">\n                <div\n                  className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                    isActive\n                      ? 'border-primary-500 bg-primary-500 text-white'\n                      : isCompleted\n                        ? 'border-green-500 bg-green-500 text-white'\n                        : 'border-gray-300 bg-white text-gray-400'\n                  }`}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                </div>\n                {index < steps.length - 1 && (\n                  <div\n                    className={`w-16 h-0.5 mx-2 ${isCompleted ? 'bg-green-500' : 'bg-gray-300'}`}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Step Content */}\n        {renderCurrentStep()}\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default BusinessProfileModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/management/ListingManagementModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📋 Listing Management Modal - Business Domain\n * Location: src/shared/components/modals/domains/business/management/ListingManagementModal.tsx\n * Purpose: Placeholder for listing management modal\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport React from 'react';\nimport { CenteredModal } from '../../../foundations';\n\ninterface ListingManagementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  listingId?: string;\n}\n\nexport const ListingManagementModal: React.FC<ListingManagementModalProps> = ({\n  isOpen,\n  onClose,\n  listingId,\n}) => {\n  return (\n    <CenteredModal isOpen={isOpen} onClose={onClose} title=\"Listing Management\" size=\"xl\">\n      <div className=\"text-center py-8\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Listing Management</h3>\n        <p className=\"text-gray-600 mb-6\">This feature is coming soon!</p>\n        <Button\n          variant=\"primary\"\n          onPress={onClose}\n        >\n          Close\n        </Button>\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default ListingManagementModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/onboarding/BuyerOnboardingModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":14,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'onComplete' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onComplete' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🛒 Buyer Onboarding Modal - Business Domain\n * Location: src/shared/components/modals/domains/business/onboarding/BuyerOnboardingModal.tsx\n * Purpose: Placeholder for future buyer onboarding modal\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport React from 'react';\nimport { FullscreenModal } from '../../../foundations';\n\ninterface BuyerOnboardingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete?: (data: unknown) => void;\n}\n\nexport const BuyerOnboardingModal: React.FC<BuyerOnboardingModalProps> = ({\n  isOpen,\n  onClose,\n  onComplete,\n}) => {\n  return (\n    <FullscreenModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"Buyer Onboarding\"\n      showProgress={false}\n    >\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Buyer Onboarding</h2>\n          <p className=\"text-gray-600 mb-6\">This feature is coming soon!</p>\n          <Button\n            variant=\"primary\"\n            onPress={onClose}\n          >\n            Close\n          </Button>\n        </div>\n      </div>\n    </FullscreenModal>\n  );\n};\n\nexport default BuyerOnboardingModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/onboarding/SellerOnboardingModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/reports/AnalyticsModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'timeRange' is defined but never used.","line":17,"column":82,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeRange' is defined but never used.","line":17,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":91}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📈 Analytics Modal - Business Domain\n * Location: src/shared/components/modals/domains/business/reports/AnalyticsModal.tsx\n * Purpose: Placeholder for analytics modal\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport React from 'react';\nimport { CenteredModal } from '../../../foundations';\n\ninterface AnalyticsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  timeRange?: string;\n}\n\nexport const AnalyticsModal: React.FC<AnalyticsModalProps> = ({ isOpen, onClose, timeRange }) => {\n  return (\n    <CenteredModal isOpen={isOpen} onClose={onClose} title=\"Business Analytics\" size=\"3xl\">\n      <div className=\"text-center py-8\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Business Analytics</h3>\n        <p className=\"text-gray-600 mb-6\">This feature is coming soon!</p>\n        <Button\n          variant=\"primary\"\n          onPress={onClose}\n        >\n          Close\n        </Button>\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default AnalyticsModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/domains/business/reports/ValuationReportModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reportId' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📊 Valuation Report Modal - Business Domain\n * Location: src/shared/components/modals/domains/business/reports/ValuationReportModal.tsx\n * Purpose: Placeholder for valuation report modal\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport React from 'react';\nimport { CenteredModal } from '../../../foundations';\n\ninterface ValuationReportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  reportId?: string;\n}\n\nexport const ValuationReportModal: React.FC<ValuationReportModalProps> = ({\n  isOpen,\n  onClose,\n  reportId,\n}) => {\n  return (\n    <CenteredModal isOpen={isOpen} onClose={onClose} title=\"Valuation Report\" size=\"2xl\">\n      <div className=\"text-center py-8\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Valuation Report</h3>\n        <p className=\"text-gray-600 mb-6\">This feature is coming soon!</p>\n        <Button\n          variant=\"primary\"\n          onPress={onClose}\n        >\n          Close\n        </Button>\n      </div>\n    </CenteredModal>\n  );\n};\n\nexport default ValuationReportModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/foundations/CenteredModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/foundations/FullscreenModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/foundations/TwoPanelModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/foundations/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/images/ImageGalleryModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleNext', 'handlePrevious', and 'onClose'. Either include them or remove the dependency array. If 'onClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, currentImageIndex, onClose, handlePrevious, handleNext]","fix":{"range":[1284,1311],"text":"[isOpen, currentImageIndex, onClose, handlePrevious, handleNext]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Modal, ModalContent } from '@heroui/react';\nimport { ChevronLeft, ChevronRight, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '../../buttons/Button';\n\ninterface ImageGalleryImage {\n  id: string;\n  storage_url: string;\n  thumbnail_url: string;\n  is_primary: boolean;\n  alt_text?: string;\n}\n\ninterface ImageGalleryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  images: ImageGalleryImage[];\n  initialImageIndex?: number;\n}\n\nconst ImageGalleryModal: React.FC<ImageGalleryModalProps> = ({\n  isOpen,\n  onClose,\n  images,\n  initialImageIndex = 0,\n}) => {\n  const [currentImageIndex, setCurrentImageIndex] = useState(initialImageIndex);\n\n  useEffect(() => {\n    setCurrentImageIndex(initialImageIndex);\n  }, [initialImageIndex, isOpen]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (!isOpen) return;\n\n      switch (event.key) {\n        case 'Escape':\n          onClose();\n          break;\n        case 'ArrowLeft':\n          handlePrevious();\n          break;\n        case 'ArrowRight':\n          handleNext();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, currentImageIndex]);\n\n  const handleNext = () => {\n    setCurrentImageIndex(prev => (prev + 1) % images.length);\n  };\n\n  const handlePrevious = () => {\n    setCurrentImageIndex(prev => (prev - 1 + images.length) % images.length);\n  };\n\n  const handleThumbnailClick = (index: number) => {\n    setCurrentImageIndex(index);\n  };\n\n  if (images.length === 0) return null;\n\n  const currentImage = images[currentImageIndex];\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"full\"\n      classNames={{\n        base: 'h-full max-h-full m-0 bg-black',\n        wrapper: 'h-full items-center justify-center',\n        body: 'h-full p-0 overflow-hidden',\n        backdrop: 'bg-black/90 backdrop-blur-sm',\n      }}\n      hideCloseButton={true}\n      isDismissable={true}\n      motionProps={{\n        variants: {\n          enter: {\n            y: 0,\n            opacity: 1,\n            transition: {\n              duration: 0.3,\n              ease: 'easeOut',\n            },\n          },\n          exit: {\n            y: -20,\n            opacity: 0,\n            transition: {\n              duration: 0.2,\n              ease: 'easeIn',\n            },\n          },\n        },\n      }}\n    >\n      <ModalContent className=\"h-full max-h-full m-0 bg-black border-0 shadow-none\">\n        <div className=\"relative h-full flex flex-col\">\n          {/* Header with close button and image counter */}\n          <div className=\"absolute top-0 left-0 right-0 z-10 bg-gradient-to-b from-black/80 to-transparent p-6\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"text-white text-sm font-medium\">\n                {currentImageIndex + 1} of {images.length}\n              </div>\n              <Button\n                isIconOnly\n                variant=\"tertiary\"\n                onPress={onClose}\n                className=\"backdrop-blur-sm\"\n                aria-label=\"Close gallery\"\n              >\n                <X className=\"w-6 h-6\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Main image container */}\n          <div className=\"flex-1 flex items-center justify-center p-6 pt-20 pb-32\">\n            <div className=\"relative max-w-full max-h-full\">\n              <img\n                src={currentImage.storage_url}\n                alt={currentImage.alt_text || `Gallery image ${currentImageIndex + 1}`}\n                className=\"max-w-full max-h-full object-contain rounded-lg shadow-2xl\"\n                style={{ maxHeight: 'calc(100vh - 200px)' }}\n              />\n\n              {/* Navigation arrows - only show if more than 1 image */}\n              {images.length > 1 && (\n                <>\n                  <Button\n                    isIconOnly\n                    variant=\"tertiary\"\n                    onPress={handlePrevious}\n                    className=\"absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 backdrop-blur-sm text-white hover:bg-black/70 border-0\"\n                    aria-label=\"Previous image\"\n                  >\n                    <ChevronLeft className=\"w-6 h-6\" />\n                  </Button>\n                  <Button\n                    isIconOnly\n                    variant=\"tertiary\"\n                    onPress={handleNext}\n                    className=\"absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 backdrop-blur-sm text-white hover:bg-black/70 border-0\"\n                    aria-label=\"Next image\"\n                  >\n                    <ChevronRight className=\"w-6 h-6\" />\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Thumbnail strip - only show if more than 1 image */}\n          {images.length > 1 && (\n            <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6\">\n              <div className=\"flex justify-center\">\n                <div className=\"flex gap-2 max-w-full overflow-x-auto scrollbar-hide\">\n                  {images.map((image, index) => (\n                    <button\n                      key={image.id}\n                      onClick={() => handleThumbnailClick(index)}\n                      className={`relative flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 transition-all duration-200 ${\n                        index === currentImageIndex\n                          ? 'border-white ring-2 ring-blue-500'\n                          : 'border-white/30 hover:border-white/60'\n                      }`}\n                    >\n                      <img\n                        src={image.thumbnail_url || image.storage_url}\n                        alt={`Thumbnail ${index + 1}`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      {index === currentImageIndex && (\n                        <div className=\"absolute inset-0 bg-blue-500/20\" />\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ImageGalleryModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/images/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/buyer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/SellerOnboardingModal.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3016,3069],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 Seller Onboarding Modal - Main Orchestrator\n * Location: src/shared/components/modals/sellerOnboarding/SellerOnboardingModal.tsx\n * Purpose: Main modal component that orchestrates all onboarding steps\n */\n\nimport { Modal, ModalContent } from '@heroui/react';\nimport { ArrowLeft, ArrowRight, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\nimport { Button } from '../../../buttons/Button';\nimport {\n  DEFAULT_FORM_DATA,\n  OnboardingStepProps,\n  SellerOnboardingModalProps,\n  TOTAL_STEPS,\n} from './types';\nimport { clearDraft, isStepValid, loadDraft, saveDraft } from './utils';\n\n// Step imports\nimport BusinessDescriptionStep from './steps/BusinessDescriptionStep';\nimport BusinessNameStep from './steps/BusinessNameStep';\nimport BusinessTypeStep from './steps/BusinessTypeStep';\nimport ContactEmailStep from './steps/ContactEmailStep';\nimport ContactPhoneStep from './steps/ContactPhoneStep';\nimport EmployeeCountStep from './steps/EmployeeCountStep';\nimport FoundedYearStep from './steps/FoundedYearStep';\nimport LocationStep from './steps/LocationStep';\nimport RevenueRangeStep from './steps/RevenueRangeStep';\nimport SellingReasonStep from './steps/SellingReasonStep';\nimport SuccessStep from './steps/SuccessStep';\nimport WelcomeStep from './steps/WelcomeStep';\n\nconst SellerOnboardingModal: React.FC<SellerOnboardingModalProps> = ({\n  isOpen,\n  onClose,\n  onComplete,\n  existingData,\n  isEditMode = false,\n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState(DEFAULT_FORM_DATA);\n\n  // Initialize form when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setCurrentStep(isEditMode ? 1 : 0); // Skip welcome step in edit mode\n      setIsSubmitting(false);\n\n      // Populate form with existing data if in edit mode\n      if (isEditMode && existingData) {\n        setFormData(existingData);\n      } else {\n        // Check for saved draft (only in create mode)\n        const draft = loadDraft();\n        if (draft) {\n          setFormData(draft.formData);\n          setCurrentStep(draft.currentStep);\n        }\n      }\n    }\n  }, [isOpen, isEditMode, existingData]);\n\n  const updateFormData = (updates: Partial<typeof formData>) => {\n    setFormData(prev => ({ ...prev, ...updates }));\n  };\n\n  const handleNext = () => {\n    if (currentStep < TOTAL_STEPS - 1) {\n      const newStep = currentStep + 1;\n      setCurrentStep(newStep);\n\n      // Save draft on each step\n      if (!isEditMode) {\n        saveDraft(formData, newStep);\n      }\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      // Clear draft on successful submission\n      if (!isEditMode) {\n        clearDraft();\n      }\n\n      // Call completion handler\n      if (onComplete) {\n        onComplete(formData);\n      }\n    } catch (error) {\n      console.error('Error submitting onboarding:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    // Save draft before closing (only in create mode)\n    if (!isEditMode && currentStep > 0) {\n      saveDraft(formData, currentStep);\n    }\n    onClose();\n  };\n\n  const renderStep = () => {\n    const stepProps: OnboardingStepProps = {\n      formData,\n      updateFormData,\n      onNext: handleNext,\n      onBack: handleBack,\n      isFirstStep: currentStep === 0,\n      isLastStep: currentStep === TOTAL_STEPS - 1,\n    };\n\n    switch (currentStep) {\n      case 0:\n        return <WelcomeStep {...stepProps} />;\n      case 1:\n        return <BusinessTypeStep {...stepProps} />;\n      case 2:\n        return <BusinessNameStep {...stepProps} />;\n      case 3:\n        return <LocationStep {...stepProps} />;\n      case 4:\n        return <FoundedYearStep {...stepProps} />;\n      case 5:\n        return <BusinessDescriptionStep {...stepProps} />;\n      case 6:\n        return <EmployeeCountStep {...stepProps} />;\n      case 7:\n        return <RevenueRangeStep {...stepProps} />;\n      case 8:\n        return <SellingReasonStep {...stepProps} />;\n      case 9:\n        return <div className=\"text-center py-16\">Timeline Step - TODO</div>;\n      case 10:\n        return <div className=\"text-center py-16\">Price Expectations Step - TODO</div>;\n      case 11:\n        return <ContactEmailStep {...stepProps} />;\n      case 12:\n        return <ContactPhoneStep {...stepProps} />;\n      case 13:\n        return <div className=\"text-center py-16\">Verification Step - TODO</div>;\n      case 14:\n        return <SuccessStep />;\n      default:\n        return <div>Unknown step</div>;\n    }\n  };\n\n  const canProceed = currentStep === 0 || isStepValid({ formData, step: currentStep });\n  const isLastStep = currentStep === TOTAL_STEPS - 1;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      size=\"5xl\"\n      scrollBehavior=\"inside\"\n      classNames={{\n        base: 'max-h-[90vh]',\n        body: 'p-0',\n      }}\n    >\n      <ModalContent>\n        <div className=\"relative\">\n          {/* Header */}\n          <div className=\"sticky top-0 bg-white border-b border-gray-200 px-6 py-4 z-10\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                {currentStep > 0 && !isLastStep && (\n                  <button\n                    onClick={handleBack}\n                    className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                  >\n                    <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n                  </button>\n                )}\n                <div>\n                  <h2 className=\"text-lg font-semibold text-gray-900\">\n                    {isEditMode ? 'Edit Business Listing' : 'Create Business Listing'}\n                  </h2>\n                  <p className=\"text-sm text-gray-600\">\n                    Step {currentStep + 1} of {TOTAL_STEPS}\n                  </p>\n                </div>\n              </div>\n\n              <button\n                onClick={handleClose}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <X className=\"w-5 h-5 text-gray-600\" />\n              </button>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mt-4\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div\n                  className=\"bg-primary-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${((currentStep + 1) / TOTAL_STEPS) * 100}%` }}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6\">{renderStep()}</div>\n\n          {/* Footer */}\n          {!isLastStep && (\n            <div className=\"sticky bottom-0 bg-white border-t border-gray-200 px-6 py-4\">\n              <div className=\"flex justify-between\">\n                <div>\n                  {currentStep > 0 && (\n                    <Button\n                      variant=\"tertiary\"\n                      onClick={handleBack}\n                      startContent={<ArrowLeft className=\"w-4 h-4\" />}\n                    >\n                      Back\n                    </Button>\n                  )}\n                </div>\n\n                <Button\n                  variant=\"primary\"\n                  onClick={isLastStep ? handleSubmit : handleNext}\n                  endContent={!isLastStep ? <ArrowRight className=\"w-4 h-4\" /> : undefined}\n                  disabled={!canProceed || isSubmitting}\n                  isLoading={isSubmitting}\n                >\n                  {isLastStep ? 'Complete' : 'Next'}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default SellerOnboardingModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/BusinessDescriptionStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/BusinessNameStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/BusinessTypeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/ContactEmailStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/ContactPhoneStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/EmployeeCountStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/FoundedYearStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/LocationStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/RevenueRangeStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/SellingReasonStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/SuccessStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/steps/WelcomeStep.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'onNext' is defined but never used.","line":11,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onNext' is defined but never used.","line":11,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎉 Welcome Step - Seller Onboarding\n * Location: src/shared/components/modals/sellerOnboarding/steps/WelcomeStep.tsx\n * Purpose: Welcome step for seller onboarding modal\n */\n\nimport { Heart, Sparkles, Target } from 'lucide-react';\nimport React from 'react';\nimport { OnboardingStepProps } from '../types';\n\nconst WelcomeStep: React.FC<OnboardingStepProps> = ({ onNext }) => {\n  return (\n    <div className=\"text-center py-16\">\n      <div className=\"w-20 h-20 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-8\">\n        <Heart className=\"w-10 h-10 text-primary-600\" />\n      </div>\n\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Welcome to UpSwitch! 🎉</h2>\n\n      <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n        We're excited to help you sell your business. Our guided process will create a professional\n        listing that attracts qualified buyers.\n      </p>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Target className=\"w-6 h-6 text-blue-600\" />\n          </div>\n          <h3 className=\"font-semibold text-gray-900 mb-2\">Find the Right Buyer</h3>\n          <p className=\"text-sm text-gray-600\">\n            Connect with serious, qualified buyers who understand your business value\n          </p>\n        </div>\n\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Sparkles className=\"w-6 h-6 text-green-600\" />\n          </div>\n          <h3 className=\"font-semibold text-gray-900 mb-2\">Professional Listing</h3>\n          <p className=\"text-sm text-gray-600\">\n            Create a compelling listing that showcases your business's true potential\n          </p>\n        </div>\n\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Heart className=\"w-6 h-6 text-purple-600\" />\n          </div>\n          <h3 className=\"font-semibold text-gray-900 mb-2\">Expert Support</h3>\n          <p className=\"text-sm text-gray-600\">\n            Get guidance from our M&A experts throughout the selling process\n          </p>\n        </div>\n      </div>\n\n      <p className=\"text-sm text-gray-500 mb-8\">\n        This process takes about 10-15 minutes. You can save your progress and continue later.\n      </p>\n    </div>\n  );\n};\n\nexport default WelcomeStep;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/types.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":28,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'updates' is defined but never used.","line":35,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 Seller Onboarding Types\n * Location: src/shared/components/modals/sellerOnboarding/types.ts\n * Purpose: Type definitions for seller onboarding modal\n */\n\nexport interface SellerFormData {\n  businessType: string;\n  businessName: string;\n  industry: string;\n  country: string;\n  city: string;\n  foundedYear: string;\n  description: string;\n  employeeCount: string;\n  revenueRange: number[];\n  sellingReason: string;\n  timeline: string;\n  priceExpectations: string;\n  contactEmail: string;\n  contactPhone: string;\n  wantsVerification: boolean;\n}\n\nexport interface SellerOnboardingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete?: (data: SellerFormData) => void;\n  existingData?: SellerFormData | null;\n  isEditMode?: boolean;\n}\n\nexport interface OnboardingStepProps {\n  formData: SellerFormData;\n  updateFormData: (updates: Partial<SellerFormData>) => void;\n  onNext: () => void;\n  onBack: () => void;\n  isFirstStep: boolean;\n  isLastStep: boolean;\n}\n\nexport interface StepValidationProps {\n  formData: SellerFormData;\n  step: number;\n}\n\nexport const TOTAL_STEPS = 15; // Includes welcome, 13 form steps, and success\n\nexport const DEFAULT_FORM_DATA: SellerFormData = {\n  businessType: '',\n  businessName: '',\n  industry: '',\n  country: 'Belgium',\n  city: '',\n  foundedYear: '',\n  description: '',\n  employeeCount: '',\n  revenueRange: [100000, 1000000],\n  sellingReason: '',\n  timeline: '',\n  priceExpectations: '',\n  contactEmail: '',\n  contactPhone: '',\n  wantsVerification: false,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/onboarding/seller/utils.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1535,1579],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1953,1998],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2189,2235],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🛠️ Seller Onboarding Utilities\n * Location: src/shared/components/modals/sellerOnboarding/utils.ts\n * Purpose: Utility functions for seller onboarding modal\n */\n\nimport { SellerFormData, StepValidationProps } from './types';\n\n/**\n * Validate if a step is complete\n */\nexport const isStepValid = ({ formData, step }: StepValidationProps): boolean => {\n  switch (step) {\n    case 1:\n      return formData.businessType !== '' && formData.industry !== '';\n    case 2:\n      return formData.businessName.trim() !== '';\n    case 3:\n      return formData.city.trim() !== '';\n    case 4:\n      return formData.foundedYear !== '';\n    case 5:\n      return formData.description.trim().length >= 50;\n    case 6:\n      return formData.employeeCount !== '';\n    case 7:\n      return true; // Revenue range always valid\n    case 8:\n      return formData.sellingReason !== '';\n    case 9:\n      return formData.timeline !== '';\n    case 10:\n      return formData.priceExpectations !== '';\n    case 11:\n      return formData.contactEmail.includes('@');\n    case 12:\n      return formData.contactPhone.trim() !== '';\n    case 13:\n      return true; // Verification is optional\n    default:\n      return true;\n  }\n};\n\n/**\n * Save draft to localStorage\n */\nexport const saveDraft = (formData: SellerFormData, currentStep: number): void => {\n  try {\n    const draftData = {\n      formData,\n      currentStep,\n      timestamp: Date.now(),\n    };\n    localStorage.setItem('sellerOnboardingDraft', JSON.stringify(draftData));\n  } catch (error) {\n    console.error('Error saving draft:', error);\n  }\n};\n\n/**\n * Load draft from localStorage\n */\nexport const loadDraft = (): { formData: SellerFormData; currentStep: number } | null => {\n  try {\n    const savedDraft = localStorage.getItem('sellerOnboardingDraft');\n    if (savedDraft) {\n      const { formData, currentStep } = JSON.parse(savedDraft);\n      return { formData, currentStep };\n    }\n  } catch (error) {\n    console.error('Error loading draft:', error);\n  }\n  return null;\n};\n\n/**\n * Clear draft from localStorage\n */\nexport const clearDraft = (): void => {\n  try {\n    localStorage.removeItem('sellerOnboardingDraft');\n  } catch (error) {\n    console.error('Error clearing draft:', error);\n  }\n};\n\n/**\n * Trigger confetti celebration\n */\nexport const triggerConfetti = (): void => {\n  import('canvas-confetti').then(confetti => {\n    confetti.default({\n      particleCount: 100,\n      spread: 70,\n      origin: { y: 0.6 },\n    });\n  });\n};\n\n/**\n * Format currency for display\n */\nexport const formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'EUR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n/**\n * Get step title\n */\nexport const getStepTitle = (step: number): string => {\n  const titles = [\n    'Welcome to UpSwitch',\n    'Business Type & Industry',\n    'Business Name',\n    'Location',\n    'Founded Year',\n    'Business Description',\n    'Team Size',\n    'Revenue Range',\n    'Selling Reason',\n    'Timeline',\n    'Price Expectations',\n    'Contact Email',\n    'Phone Number',\n    'Verification',\n    'Success!',\n  ];\n  return titles[step] || 'Step';\n};\n\n/**\n * Get step description\n */\nexport const getStepDescription = (step: number): string => {\n  const descriptions = [\n    \"Let's get your business listed and find the perfect buyer\",\n    'Tell us about your business type and industry',\n    \"What's the name of your business?\",\n    'Where is your business located?',\n    'When was your business established?',\n    'Describe your business in detail',\n    'How many people work at your business?',\n    \"What's your annual revenue range?\",\n    'Why are you selling your business?',\n    'When do you want to sell?',\n    'What price are you expecting?',\n    'How can buyers contact you?',\n    \"What's your phone number?\",\n    'Would you like verification?',\n    'Your listing is ready!',\n  ];\n  return descriptions[step] || 'Complete this step';\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/modals/utils/modalHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4017,4020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4017,4020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4127,4181],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4241,4297],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🛠️ Modal Helper Utilities\n * Location: src/shared/components/modals/utils/modalHelpers.ts\n * Purpose: Common utilities for modal components\n */\n\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Modal size configurations\n */\nexport const MODAL_SIZES = {\n  xs: 'max-w-xs',\n  sm: 'max-w-sm',\n  md: 'max-w-md',\n  lg: 'max-w-lg',\n  xl: 'max-w-xl',\n  '2xl': 'max-w-2xl',\n  '3xl': 'max-w-3xl',\n  '4xl': 'max-w-4xl',\n  '5xl': 'max-w-5xl',\n  full: 'max-w-full',\n} as const;\n\n/**\n * Modal z-index layers\n */\nexport const MODAL_Z_INDEX = {\n  backdrop: 'z-40',\n  modal: 'z-50',\n  dropdown: 'z-60',\n  tooltip: 'z-70',\n} as const;\n\n/**\n * Hook to handle escape key press for modal closing\n */\nexport const useEscapeKey = (isOpen: boolean, onClose: () => void) => {\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      return () => document.removeEventListener('keydown', handleEscape);\n    }\n  }, [isOpen, onClose]);\n};\n\n/**\n * Hook to handle body scroll lock when modal is open\n */\nexport const useBodyScrollLock = (isOpen: boolean) => {\n  useEffect(() => {\n    if (isOpen) {\n      const originalStyle = window.getComputedStyle(document.body).overflow;\n      document.body.style.overflow = 'hidden';\n\n      return () => {\n        document.body.style.overflow = originalStyle;\n      };\n    }\n  }, [isOpen]);\n};\n\n/**\n * Hook to handle focus management for modals\n */\nexport const useFocusManagement = (isOpen: boolean, modalRef: React.RefObject<HTMLElement>) => {\n  useEffect(() => {\n    if (isOpen && modalRef.current) {\n      const focusableElements = modalRef.current.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      const firstElement = focusableElements[0] as HTMLElement;\n      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n      const handleTabKey = (e: KeyboardEvent) => {\n        if (e.key === 'Tab') {\n          if (e.shiftKey) {\n            if (document.activeElement === firstElement) {\n              lastElement?.focus();\n              e.preventDefault();\n            }\n          } else {\n            if (document.activeElement === lastElement) {\n              firstElement?.focus();\n              e.preventDefault();\n            }\n          }\n        }\n      };\n\n      // Focus first element when modal opens\n      firstElement?.focus();\n\n      // Add tab key listener\n      document.addEventListener('keydown', handleTabKey);\n\n      return () => {\n        document.removeEventListener('keydown', handleTabKey);\n      };\n    }\n  }, [isOpen, modalRef]);\n};\n\n/**\n * Generate modal class names based on configuration\n */\nexport const generateModalClasses = (\n  size: keyof typeof MODAL_SIZES = 'md',\n  customClasses: string = ''\n): string => {\n  return `${MODAL_SIZES[size]} ${customClasses}`.trim();\n};\n\n/**\n * Modal animation variants for consistent transitions\n */\nexport const MODAL_ANIMATIONS = {\n  fadeIn: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n    transition: { duration: 0.2 },\n  },\n  slideUp: {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: 20 },\n    transition: { duration: 0.3 },\n  },\n  scaleIn: {\n    initial: { opacity: 0, scale: 0.95 },\n    animate: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.95 },\n    transition: { duration: 0.2 },\n  },\n} as const;\n\n/**\n * Common modal event handlers\n */\nexport const createModalHandlers = (onClose: () => void) => ({\n  onBackdropClick: (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  },\n  onEscapePress: (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      onClose();\n    }\n  },\n});\n\n/**\n * Validate modal props for development\n */\nexport const validateModalProps = (props: Record<string, any>) => {\n  if (import.meta.env.MODE === 'development') {\n    if (typeof props.isOpen !== 'boolean') {\n      console.warn('Modal isOpen prop should be a boolean');\n    }\n    if (typeof props.onClose !== 'function') {\n      console.warn('Modal onClose prop should be a function');\n    }\n  }\n};\n\n/**\n * Modal state management helpers\n */\nexport const createModalState = (initialOpen = false) => {\n  const [isOpen, setIsOpen] = useState(initialOpen);\n\n  const openModal = () => setIsOpen(true);\n  const closeModal = () => setIsOpen(false);\n  const toggleModal = () => setIsOpen(prev => !prev);\n\n  return {\n    isOpen,\n    openModal,\n    closeModal,\n    toggleModal,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/OfferComparison.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":18,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":18,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":79},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadComparison'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [listingId, loadComparison, userId]","fix":{"range":[912,931],"text":"[listingId, loadComparison, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6282,6332],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7309,7312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7309,7312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer Comparison\n * Location: src/shared/components/offer-management/OfferComparison.tsx\n * Purpose: Compare multiple offers side by side\n */\n\nimport { OfferComparison as OfferComparisonType } from '@/shared/types/offer-management';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport { BarChart3, CheckCircle, FileText, TrendingUp, XCircle } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface OfferComparisonProps {\n  listingId?: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst OfferComparison: React.FC<OfferComparisonProps> = ({ listingId, userRole, userId }) => {\n  const [comparison, setComparison] = useState<OfferComparisonType | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedOffers, setSelectedOffers] = useState<string[]>([]);\n\n  useEffect(() => {\n    loadComparison();\n  }, [listingId, userId]);\n\n  const loadComparison = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await offerService.getOfferComparison(userId, listingId);\n      // setComparison(response.data);\n\n      // Mock data for now\n      const mockComparison: OfferComparisonType = {\n        offers: [\n          {\n            id: 'offer-1',\n            listingId: listingId || 'listing-1',\n            buyerId: 'buyer-1',\n            sellerId: 'seller-1',\n            status: 'under_review',\n            type: 'initial',\n            offerPrice: 850000,\n            currency: 'EUR',\n            paymentStructure: {\n              type: 'mixed',\n              cashAmount: 500000,\n              financedAmount: 350000,\n            },\n            conditions: [\n              {\n                id: 'cond-1',\n                type: 'due_diligence',\n                description: 'Satisfactory completion of due diligence',\n                isRequired: true,\n                status: 'pending',\n              },\n            ],\n            contingencies: [],\n            timeline: {\n              dueDiligencePeriod: 30,\n              financingPeriod: 45,\n              closingDate: '2024-03-15',\n              responseDeadline: '2024-01-25',\n            },\n            additionalTerms: 'Requesting 30-day transition period',\n            specialRequests: ['Inventory audit', 'Customer introductions'],\n            submittedAt: '2024-01-15T10:30:00Z',\n            expiresAt: '2024-01-25T23:59:59Z',\n            lastModifiedAt: '2024-01-15T10:30:00Z',\n            createdBy: 'buyer-1',\n            version: 1,\n            negotiationHistory: [],\n            comments: [],\n            attachments: [],\n            approvals: [],\n            requiresApproval: false,\n          },\n          {\n            id: 'offer-2',\n            listingId: listingId || 'listing-1',\n            buyerId: 'buyer-2',\n            sellerId: 'seller-1',\n            status: 'under_review',\n            type: 'initial',\n            offerPrice: 900000,\n            currency: 'EUR',\n            paymentStructure: {\n              type: 'cash',\n              cashAmount: 900000,\n            },\n            conditions: [],\n            contingencies: [],\n            timeline: {\n              dueDiligencePeriod: 30,\n              financingPeriod: 45,\n              closingDate: '2024-03-20',\n              responseDeadline: '2024-01-30',\n            },\n            additionalTerms: '',\n            specialRequests: [],\n            submittedAt: '2024-01-18T14:15:00Z',\n            expiresAt: '2024-01-30T23:59:59Z',\n            lastModifiedAt: '2024-01-18T14:15:00Z',\n            createdBy: 'buyer-2',\n            version: 1,\n            negotiationHistory: [],\n            comments: [],\n            attachments: [],\n            approvals: [],\n            requiresApproval: false,\n          },\n          {\n            id: 'offer-3',\n            listingId: listingId || 'listing-1',\n            buyerId: 'buyer-3',\n            sellerId: 'seller-1',\n            status: 'under_review',\n            type: 'initial',\n            offerPrice: 800000,\n            currency: 'EUR',\n            paymentStructure: {\n              type: 'earnout',\n              earnoutDetails: {\n                totalAmount: 200000,\n                duration: 24,\n                milestones: [\n                  {\n                    id: 'milestone-1',\n                    description: 'Revenue target Year 1',\n                    targetValue: 100000,\n                    targetDate: '2025-01-01',\n                    percentage: 50,\n                  },\n                  {\n                    id: 'milestone-2',\n                    description: 'Revenue target Year 2',\n                    targetValue: 100000,\n                    targetDate: '2026-01-01',\n                    percentage: 50,\n                  },\n                ],\n                performanceMetrics: ['Revenue growth', 'Customer retention'],\n              },\n            },\n            conditions: [],\n            contingencies: [],\n            timeline: {\n              dueDiligencePeriod: 30,\n              financingPeriod: 45,\n              closingDate: '2024-03-25',\n              responseDeadline: '2024-02-05',\n            },\n            additionalTerms: 'Earnout structure with performance milestones',\n            specialRequests: ['Management retention', 'Performance tracking'],\n            submittedAt: '2024-01-20T09:45:00Z',\n            expiresAt: '2024-02-05T23:59:59Z',\n            lastModifiedAt: '2024-01-20T09:45:00Z',\n            createdBy: 'buyer-3',\n            version: 1,\n            negotiationHistory: [],\n            comments: [],\n            attachments: [],\n            approvals: [],\n            requiresApproval: false,\n          },\n        ],\n        comparisonFields: [\n          'offerPrice',\n          'paymentStructure',\n          'closingDate',\n          'conditions',\n          'contingencies',\n          'additionalTerms',\n        ],\n        summary: {\n          highestOffer: 900000,\n          lowestOffer: 800000,\n          averageOffer: 850000,\n          mostFavorableTerms: 'All cash offer with fastest closing',\n        },\n      };\n\n      setComparison(mockComparison);\n      setSelectedOffers(mockComparison.offers.map(offer => offer.id));\n    } catch (error) {\n      console.error('Error loading comparison:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleOfferSelection = (offerId: string) => {\n    setSelectedOffers(prev =>\n      prev.includes(offerId) ? prev.filter(id => id !== offerId) : [...prev, offerId]\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'success';\n      case 'under_review':\n        return 'warning';\n      case 'rejected':\n        return 'danger';\n      case 'expired':\n        return 'default';\n      default:\n        return 'primary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'under_review':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatPaymentStructure = (paymentStructure: any) => {\n    switch (paymentStructure.type) {\n      case 'cash':\n        return `All Cash (${paymentStructure.cashAmount?.toLocaleString()})`;\n      case 'mixed':\n        return `Mixed (Cash: ${paymentStructure.cashAmount?.toLocaleString()}, Financed: ${paymentStructure.financedAmount?.toLocaleString()})`;\n      case 'financed':\n        return `Financed (${paymentStructure.financedAmount?.toLocaleString()})`;\n      case 'earnout':\n        return `Earnout (${paymentStructure.earnoutDetails?.totalAmount?.toLocaleString()} over ${paymentStructure.earnoutDetails?.duration} months)`;\n      default:\n        return paymentStructure.type;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading offer comparison...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!comparison || comparison.offers.length === 0) {\n    return (\n      <Card>\n        <CardBody>\n          <div className=\"text-center py-8\">\n            <BarChart3 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No offers to compare</h3>\n            <p className=\"text-gray-600\">Multiple offers are needed to enable comparison.</p>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  const filteredOffers = comparison.offers.filter(offer => selectedOffers.includes(offer.id));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Offer Comparison</h3>\n          <p className=\"text-sm text-gray-600\">Compare offers side by side</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Chip color=\"primary\" variant=\"flat\">\n            {filteredOffers.length} Offers Selected\n          </Chip>\n        </div>\n      </div>\n\n      {/* Summary Statistics */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Comparison Summary\n          </h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">\n                €{comparison.summary.highestOffer.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Highest Offer</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600 mb-1\">\n                €{comparison.summary.lowestOffer.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Lowest Offer</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                €{comparison.summary.averageOffer.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Average Offer</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-sm font-bold text-purple-600 mb-1\">\n                €\n                {(\n                  comparison.summary.highestOffer - comparison.summary.lowestOffer\n                ).toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Price Range</div>\n            </div>\n          </div>\n          <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Most Favorable Terms:</strong> {comparison.summary.mostFavorableTerms}\n            </p>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Offer Selection */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Select Offers to Compare</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {comparison.offers.map(offer => (\n              <div\n                key={offer.id}\n                className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                  selectedOffers.includes(offer.id)\n                    ? 'border-primary-500 bg-primary-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => toggleOfferSelection(offer.id)}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedOffers.includes(offer.id)}\n                      onChange={() => toggleOfferSelection(offer.id)}\n                      className=\"w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500\"\n                    />\n                    <span className=\"font-medium text-gray-900\">\n                      €{offer.offerPrice.toLocaleString()}\n                    </span>\n                  </div>\n                  <Chip\n                    size=\"sm\"\n                    color={getStatusColor(offer.status)}\n                    variant=\"flat\"\n                    startContent={getStatusIcon(offer.status)}\n                  >\n                    {offer.status.replace('_', ' ')}\n                  </Chip>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  {formatPaymentStructure(offer.paymentStructure)}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Closing: {new Date(offer.timeline.closingDate).toLocaleDateString()}\n                </p>\n              </div>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Comparison Table */}\n      {filteredOffers.length > 0 && (\n        <Card>\n          <CardHeader>\n            <h4 className=\"text-md font-semibold\">Detailed Comparison</h4>\n          </CardHeader>\n          <CardBody>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Criteria</th>\n                    {filteredOffers.map(offer => (\n                      <th\n                        key={offer.id}\n                        className=\"text-center py-3 px-4 font-medium text-gray-900\"\n                      >\n                        <div className=\"flex flex-col items-center\">\n                          <span className=\"font-bold\">€{offer.offerPrice.toLocaleString()}</span>\n                          <span className=\"text-xs text-gray-600\">\n                            Offer #{offer.id.split('-')[1]}\n                          </span>\n                        </div>\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Offer Price</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"font-semibold\">€{offer.offerPrice.toLocaleString()}</span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Payment Structure</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">\n                          {formatPaymentStructure(offer.paymentStructure)}\n                        </span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Closing Date</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">\n                          {new Date(offer.timeline.closingDate).toLocaleDateString()}\n                        </span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Due Diligence Period</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">{offer.timeline.dueDiligencePeriod} days</span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Conditions</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">{offer.conditions.length} conditions</span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Contingencies</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">{offer.contingencies.length} contingencies</span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Special Requests</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">{offer.specialRequests.length} requests</span>\n                      </td>\n                    ))}\n                  </tr>\n                  <tr>\n                    <td className=\"py-3 px-4 font-medium text-gray-900\">Response Deadline</td>\n                    {filteredOffers.map(offer => (\n                      <td key={offer.id} className=\"py-3 px-4 text-center\">\n                        <span className=\"text-sm\">\n                          {new Date(offer.timeline.responseDeadline).toLocaleDateString()}\n                        </span>\n                      </td>\n                    ))}\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Recommendations */}\n      {filteredOffers.length > 1 && (\n        <Card>\n          <CardHeader>\n            <h4 className=\"text-md font-semibold flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Recommendations\n            </h4>\n          </CardHeader>\n          <CardBody>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <h5 className=\"font-medium text-green-900 mb-2\">💰 Best Financial Terms</h5>\n                <p className=\"text-sm text-green-800\">\n                  Offer #\n                  {\n                    filteredOffers\n                      .find(o => o.offerPrice === comparison.summary.highestOffer)\n                      ?.id.split('-')[1]\n                  }\n                  provides the highest offer price at €\n                  {comparison.summary.highestOffer.toLocaleString()}.\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <h5 className=\"font-medium text-blue-900 mb-2\">⚡ Fastest Closing</h5>\n                <p className=\"text-sm text-blue-800\">\n                  {(() => {\n                    const fastestOffer = filteredOffers.reduce((fastest, current) =>\n                      new Date(current.timeline.closingDate) <\n                      new Date(fastest.timeline.closingDate)\n                        ? current\n                        : fastest\n                    );\n                    return `Offer #${fastestOffer.id.split('-')[1]} has the earliest closing date of ${new Date(fastestOffer.timeline.closingDate).toLocaleDateString()}.`;\n                  })()}\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-purple-50 border border-purple-200 rounded-lg\">\n                <h5 className=\"font-medium text-purple-900 mb-2\">🎯 Most Flexible Terms</h5>\n                <p className=\"text-sm text-purple-800\">\n                  Consider the earnout structure offer which provides performance-based payments and\n                  may offer better long-term value alignment.\n                </p>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport { OfferComparison };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/OfferCreationModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1636,1639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1636,1639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1788,1791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1788,1791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2004,2007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2004,2007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2477,2480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2477,2480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3778,3824],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer Creation Modal\n * Location: src/shared/components/offer-management/OfferCreationModal.tsx\n * Purpose: Modal for creating and submitting offers\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport {\n  AnimatedTextarea,\n  CustomCheckbox,\n  CustomNumberInputField,\n} from '@/shared/components/forms';\nimport { CreateOfferRequest } from '@/shared/types/offer-management';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Progress,\n} from '@heroui/react';\nimport { Calendar, DollarSign, FileText, Plus, X } from 'lucide-react';\nimport React, { useState } from 'react';\n\ninterface OfferCreationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  listingId?: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n  onOfferCreated: () => void;\n}\n\nconst OfferCreationModal: React.FC<OfferCreationModalProps> = ({\n  isOpen,\n  onClose,\n  listingId,\n  userRole,\n  userId,\n  onOfferCreated,\n}) => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [offerData, setOfferData] = useState<Partial<CreateOfferRequest>>({\n    listingId: listingId || '',\n    offerPrice: 0,\n    currency: 'EUR',\n    paymentStructure: {\n      type: 'cash',\n      cashAmount: 0,\n    },\n    conditions: [],\n    contingencies: [],\n    timeline: {\n      dueDiligencePeriod: 30,\n      financingPeriod: 45,\n      closingDate: '',\n      responseDeadline: '',\n    },\n    additionalTerms: '',\n    specialRequests: [],\n  });\n\n  const totalSteps = 4;\n\n  const handleInputChange = (field: string, value: any) => {\n    setOfferData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handlePaymentStructureChange = (field: string, value: any) => {\n    setOfferData(prev => ({\n      ...prev,\n      paymentStructure: {\n        ...prev.paymentStructure!,\n        [field]: value,\n      },\n    }));\n  };\n\n  const handleTimelineChange = (field: string, value: any) => {\n    setOfferData(prev => ({\n      ...prev,\n      timeline: {\n        ...prev.timeline!,\n        [field]: value,\n      },\n    }));\n  };\n\n  const addCondition = () => {\n    const newCondition = {\n      type: 'custom' as const,\n      description: '',\n      isRequired: true,\n    };\n    setOfferData(prev => ({\n      ...prev,\n      conditions: [...(prev.conditions || []), newCondition],\n    }));\n  };\n\n  const updateCondition = (index: number, field: string, value: any) => {\n    setOfferData(prev => ({\n      ...prev,\n      conditions: prev.conditions?.map((condition, i) =>\n        i === index ? { ...condition, [field]: value } : condition\n      ),\n    }));\n  };\n\n  const removeCondition = (index: number) => {\n    setOfferData(prev => ({\n      ...prev,\n      conditions: prev.conditions?.filter((_, i) => i !== index),\n    }));\n  };\n\n  const addSpecialRequest = () => {\n    setOfferData(prev => ({\n      ...prev,\n      specialRequests: [...(prev.specialRequests || []), ''],\n    }));\n  };\n\n  const updateSpecialRequest = (index: number, value: string) => {\n    setOfferData(prev => ({\n      ...prev,\n      specialRequests: prev.specialRequests?.map((request, i) => (i === index ? value : request)),\n    }));\n  };\n\n  const removeSpecialRequest = (index: number) => {\n    setOfferData(prev => ({\n      ...prev,\n      specialRequests: prev.specialRequests?.filter((_, i) => i !== index),\n    }));\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      // TODO: Replace with actual API call\n      // await offerService.createOffer(offerData as CreateOfferRequest);\n\n      // Mock submission\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      onOfferCreated();\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const canProceed = () => {\n    switch (currentStep) {\n      case 1:\n        return offerData.offerPrice && offerData.offerPrice > 0;\n      case 2:\n        return offerData.paymentStructure?.type;\n      case 3:\n        return offerData.timeline?.closingDate && offerData.timeline?.responseDeadline;\n      case 4:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <DollarSign className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Offer Amount</h3>\n              <p className=\"text-gray-600\">Set your initial offer price and currency</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <CustomNumberInputField\n                label=\"Offer Price\"\n                placeholder=\"850000\"\n                value={offerData.offerPrice?.toString() || ''}\n                onChange={e => handleInputChange('offerPrice', parseFloat(e.target.value) || 0)}\n                required\n                onBlur={() => {}}\n                name=\"offerPrice\"\n              />\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Currency</label>\n                <select\n                  value={offerData.currency || 'EUR'}\n                  onChange={e => handleInputChange('currency', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                >\n                  <option value=\"EUR\">EUR (€)</option>\n                  <option value=\"USD\">USD ($)</option>\n                  <option value=\"GBP\">GBP (£)</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">💡 Offer Strategy Tips</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>• Research comparable business sales in your area</li>\n                <li>• Consider the business's financial performance and growth potential</li>\n                <li>• Factor in market conditions and industry trends</li>\n                <li>• Leave room for negotiation while remaining competitive</li>\n              </ul>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <FileText className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Payment Structure</h3>\n              <p className=\"text-gray-600\">Define how you'll structure the payment</p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Payment Type</label>\n              <select\n                value={offerData.paymentStructure?.type || 'cash'}\n                onChange={e => handlePaymentStructureChange('type', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                <option value=\"cash\">All Cash</option>\n                <option value=\"financed\">Financed</option>\n                <option value=\"mixed\">Mixed (Cash + Financing)</option>\n                <option value=\"earnout\">Earnout Structure</option>\n                <option value=\"stock\">Stock Exchange</option>\n              </select>\n            </div>\n\n            {offerData.paymentStructure?.type === 'mixed' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <CustomNumberInputField\n                  label=\"Cash Amount\"\n                  placeholder=\"500000\"\n                  value={offerData.paymentStructure?.cashAmount?.toString() || ''}\n                  onChange={e =>\n                    handlePaymentStructureChange('cashAmount', parseFloat(e.target.value) || 0)\n                  }\n                  onBlur={() => {}}\n                  name=\"cashAmount\"\n                />\n\n                <CustomNumberInputField\n                  label=\"Financed Amount\"\n                  placeholder=\"350000\"\n                  value={offerData.paymentStructure?.financedAmount?.toString() || ''}\n                  onChange={e =>\n                    handlePaymentStructureChange('financedAmount', parseFloat(e.target.value) || 0)\n                  }\n                  onBlur={() => {}}\n                  name=\"financedAmount\"\n                />\n              </div>\n            )}\n\n            {offerData.paymentStructure?.type === 'financed' && (\n              <CustomNumberInputField\n                label=\"Financed Amount\"\n                placeholder=\"850000\"\n                value={offerData.paymentStructure?.financedAmount?.toString() || ''}\n                onChange={e =>\n                  handlePaymentStructureChange('financedAmount', parseFloat(e.target.value) || 0)\n                }\n                onBlur={() => {}}\n                name=\"financedAmount\"\n              />\n            )}\n\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-green-900 mb-2\">💰 Payment Structure Benefits</h4>\n              <ul className=\"text-sm text-green-800 space-y-1\">\n                <li>\n                  • <strong>All Cash:</strong> Fastest closing, most attractive to sellers\n                </li>\n                <li>\n                  • <strong>Financed:</strong> Preserves your cash flow, may allow higher offers\n                </li>\n                <li>\n                  • <strong>Mixed:</strong> Balances speed with cash preservation\n                </li>\n                <li>\n                  • <strong>Earnout:</strong> Aligns interests, reduces upfront risk\n                </li>\n              </ul>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <Calendar className=\"w-12 h-12 text-purple-600 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Timeline & Conditions</h3>\n              <p className=\"text-gray-600\">Set deadlines and key conditions</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Closing Date</label>\n                <input\n                  type=\"date\"\n                  value={offerData.timeline?.closingDate || ''}\n                  onChange={e => handleTimelineChange('closingDate', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Response Deadline\n                </label>\n                <input\n                  type=\"date\"\n                  value={offerData.timeline?.responseDeadline || ''}\n                  onChange={e => handleTimelineChange('responseDeadline', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <CustomNumberInputField\n                label=\"Due Diligence Period (days)\"\n                placeholder=\"30\"\n                value={offerData.timeline?.dueDiligencePeriod?.toString() || ''}\n                onChange={e =>\n                  handleTimelineChange('dueDiligencePeriod', parseInt(e.target.value) || 0)\n                }\n                onBlur={() => {}}\n                name=\"dueDiligencePeriod\"\n              />\n\n              <CustomNumberInputField\n                label=\"Financing Period (days)\"\n                placeholder=\"45\"\n                value={offerData.timeline?.financingPeriod?.toString() || ''}\n                onChange={e =>\n                  handleTimelineChange('financingPeriod', parseInt(e.target.value) || 0)\n                }\n                onBlur={() => {}}\n                name=\"financingPeriod\"\n              />\n            </div>\n\n            {/* Conditions */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-medium text-gray-900\">Conditions</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  onPress={addCondition}\n                  startContent={<Plus className=\"w-4 h-4\" />}\n                >\n                  Add Condition\n                </Button>\n              </div>\n              <div className=\"space-y-3\">\n                {offerData.conditions?.map((condition, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center gap-3 p-3 border border-gray-200 rounded-lg\"\n                  >\n                    <CustomCheckbox\n                      label=\"\"\n                      checked={condition.isRequired}\n                      onChange={() => updateCondition(index, 'isRequired', !condition.isRequired)}\n                      name={`condition-${index}`}\n                    />\n                    <input\n                      type=\"text\"\n                      value={condition.description}\n                      onChange={e => updateCondition(index, 'description', e.target.value)}\n                      placeholder=\"Enter condition...\"\n                      className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      isIconOnly\n                      onPress={() => removeCondition(index)}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <FileText className=\"w-12 h-12 text-orange-600 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Additional Terms</h3>\n              <p className=\"text-gray-600\">Add any special requests or additional terms</p>\n            </div>\n\n            <AnimatedTextarea\n              label=\"Additional Terms\"\n              placeholder=\"Any additional terms or conditions you'd like to include...\"\n              value={offerData.additionalTerms || ''}\n              onChange={e => handleInputChange('additionalTerms', e.target.value)}\n              onBlur={() => {}}\n              name=\"additionalTerms\"\n              minRows={4}\n            />\n\n            {/* Special Requests */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-medium text-gray-900\">Special Requests</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  onPress={addSpecialRequest}\n                  startContent={<Plus className=\"w-4 h-4\" />}\n                >\n                  Add Request\n                </Button>\n              </div>\n              <div className=\"space-y-3\">\n                {offerData.specialRequests?.map((request, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <input\n                      type=\"text\"\n                      value={request}\n                      onChange={e => updateSpecialRequest(index, e.target.value)}\n                      placeholder=\"Enter special request...\"\n                      className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      isIconOnly\n                      onPress={() => removeSpecialRequest(index)}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Review Summary */}\n            <Card className=\"border border-gray-200\">\n              <CardHeader>\n                <h4 className=\"font-semibold text-gray-900\">Offer Summary</h4>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Offer Price:</span>\n                    <span className=\"font-medium\">\n                      {offerData.currency} {offerData.offerPrice?.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Payment Type:</span>\n                    <span className=\"font-medium capitalize\">\n                      {offerData.paymentStructure?.type?.replace('_', ' ')}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Closing Date:</span>\n                    <span className=\"font-medium\">{offerData.timeline?.closingDate}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Response Deadline:</span>\n                    <span className=\"font-medium\">{offerData.timeline?.responseDeadline}</span>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"4xl\">\n      <ModalContent>\n        <ModalHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">Create New Offer</h3>\n              <p className=\"text-sm text-gray-600\">\n                Step {currentStep} of {totalSteps}\n              </p>\n            </div>\n            <Button variant=\"secondary\" isIconOnly onPress={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </ModalHeader>\n        <ModalBody>\n          {/* Progress Bar */}\n          <div className=\"mb-6\">\n            <Progress\n              value={(currentStep / totalSteps) * 100}\n              className=\"mb-2\"\n              color=\"primary\"\n              size=\"sm\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-600\">\n              <span>Amount</span>\n              <span>Payment</span>\n              <span>Timeline</span>\n              <span>Terms</span>\n            </div>\n          </div>\n\n          {renderStep()}\n        </ModalBody>\n        <ModalFooter>\n          <div className=\"flex justify-between w-full\">\n            <Button\n              variant=\"secondary\"\n              onPress={() => setCurrentStep(Math.max(1, currentStep - 1))}\n              isDisabled={currentStep === 1}\n            >\n              Previous\n            </Button>\n            <div className=\"flex gap-2\">\n              <Button variant=\"secondary\" onPress={onClose}>\n                Cancel\n              </Button>\n              {currentStep < totalSteps ? (\n                <Button\n                  variant=\"primary\"\n                  onPress={() => setCurrentStep(currentStep + 1)}\n                  isDisabled={!canProceed()}\n                >\n                  Next\n                </Button>\n              ) : (\n                <Button\n                  variant=\"primary\"\n                  onPress={handleSubmit}\n                  isLoading={isSubmitting}\n                  isDisabled={!canProceed()}\n                >\n                  {isSubmitting ? 'Submitting...' : 'Submit Offer'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport { OfferCreationModal };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/OfferHistory.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":19,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":19,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":73},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOfferHistory'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [listingId, loadOfferHistory, userId]","fix":{"range":[1032,1051],"text":"[listingId, loadOfferHistory, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6602,6655],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7438,7441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7438,7441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer History\n * Location: src/shared/components/offer-management/OfferHistory.tsx\n * Purpose: View historical offers and completed transactions\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Offer } from '@/shared/types/offer-management';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport { Calendar, CheckCircle, Clock, DollarSign, FileText, Search, XCircle } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface OfferHistoryProps {\n  listingId?: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst OfferHistory: React.FC<OfferHistoryProps> = ({ listingId, userRole, userId }) => {\n  const [offers, setOffers] = useState<Offer[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [dateFilter, setDateFilter] = useState<string>('all');\n\n  useEffect(() => {\n    loadOfferHistory();\n  }, [listingId, userId]);\n\n  const loadOfferHistory = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await offerService.getOfferHistory(userId, listingId);\n      // setOffers(response.data);\n\n      // Mock data for now\n      const mockOffers: Offer[] = [\n        {\n          id: 'offer-hist-1',\n          listingId: listingId || 'listing-1',\n          buyerId: 'buyer-1',\n          sellerId: 'seller-1',\n          status: 'accepted',\n          type: 'final',\n          offerPrice: 875000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'mixed',\n            cashAmount: 600000,\n            financedAmount: 275000,\n          },\n          conditions: [],\n          contingencies: [],\n          timeline: {\n            dueDiligencePeriod: 30,\n            financingPeriod: 45,\n            closingDate: '2024-01-15',\n            responseDeadline: '2023-12-20',\n          },\n          additionalTerms: 'Successfully closed transaction',\n          specialRequests: [],\n          submittedAt: '2023-11-15T10:30:00Z',\n          expiresAt: '2023-12-20T23:59:59Z',\n          lastModifiedAt: '2024-01-15T14:30:00Z',\n          createdBy: 'buyer-1',\n          version: 3,\n          negotiationHistory: [\n            {\n              id: 'hist-1',\n              type: 'offer_submitted',\n              timestamp: '2023-11-15T10:30:00Z',\n              userId: 'buyer-1',\n              userName: 'Jane Buyer',\n              description: 'Initial offer submitted for €800,000',\n            },\n            {\n              id: 'hist-2',\n              type: 'counter_offer',\n              timestamp: '2023-11-20T14:15:00Z',\n              userId: 'seller-1',\n              userName: 'John Seller',\n              description: 'Counter-offer submitted for €900,000',\n            },\n            {\n              id: 'hist-3',\n              type: 'acceptance',\n              timestamp: '2023-12-15T16:45:00Z',\n              userId: 'buyer-1',\n              userName: 'Jane Buyer',\n              description: 'Final offer accepted at €875,000',\n            },\n          ],\n          comments: [],\n          attachments: [],\n          approvals: [],\n          requiresApproval: false,\n        },\n        {\n          id: 'offer-hist-2',\n          listingId: listingId || 'listing-2',\n          buyerId: 'buyer-1',\n          sellerId: 'seller-2',\n          status: 'rejected',\n          type: 'initial',\n          offerPrice: 650000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'cash',\n            cashAmount: 650000,\n          },\n          conditions: [],\n          contingencies: [],\n          timeline: {\n            dueDiligencePeriod: 30,\n            financingPeriod: 45,\n            closingDate: '2023-10-15',\n            responseDeadline: '2023-09-20',\n          },\n          additionalTerms: 'Offer was below seller expectations',\n          specialRequests: [],\n          submittedAt: '2023-09-10T09:15:00Z',\n          expiresAt: '2023-09-20T23:59:59Z',\n          lastModifiedAt: '2023-09-18T11:30:00Z',\n          createdBy: 'buyer-1',\n          version: 1,\n          negotiationHistory: [\n            {\n              id: 'hist-4',\n              type: 'offer_submitted',\n              timestamp: '2023-09-10T09:15:00Z',\n              userId: 'buyer-1',\n              userName: 'Jane Buyer',\n              description: 'Initial offer submitted for €650,000',\n            },\n            {\n              id: 'hist-5',\n              type: 'rejection',\n              timestamp: '2023-09-18T11:30:00Z',\n              userId: 'seller-2',\n              userName: 'Mike Seller',\n              description: 'Offer rejected - below asking price',\n            },\n          ],\n          comments: [],\n          attachments: [],\n          approvals: [],\n          requiresApproval: false,\n        },\n        {\n          id: 'offer-hist-3',\n          listingId: listingId || 'listing-3',\n          buyerId: 'buyer-2',\n          sellerId: 'seller-1',\n          status: 'expired',\n          type: 'initial',\n          offerPrice: 750000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'financed',\n            financedAmount: 750000,\n          },\n          conditions: [],\n          contingencies: [],\n          timeline: {\n            dueDiligencePeriod: 30,\n            financingPeriod: 45,\n            closingDate: '2023-08-15',\n            responseDeadline: '2023-07-20',\n          },\n          additionalTerms: 'Offer expired without response',\n          specialRequests: [],\n          submittedAt: '2023-07-10T14:20:00Z',\n          expiresAt: '2023-07-20T23:59:59Z',\n          lastModifiedAt: '2023-07-20T23:59:59Z',\n          createdBy: 'buyer-2',\n          version: 1,\n          negotiationHistory: [\n            {\n              id: 'hist-6',\n              type: 'offer_submitted',\n              timestamp: '2023-07-10T14:20:00Z',\n              userId: 'buyer-2',\n              userName: 'Bob Buyer',\n              description: 'Initial offer submitted for €750,000',\n            },\n            {\n              id: 'hist-7',\n              type: 'expiration',\n              timestamp: '2023-07-20T23:59:59Z',\n              userId: 'system',\n              userName: 'System',\n              description: 'Offer expired without response',\n            },\n          ],\n          comments: [],\n          attachments: [],\n          approvals: [],\n          requiresApproval: false,\n        },\n      ];\n\n      setOffers(mockOffers);\n    } catch (error) {\n      console.error('Error loading offer history:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'success';\n      case 'rejected':\n        return 'danger';\n      case 'expired':\n        return 'default';\n      case 'withdrawn':\n        return 'default';\n      default:\n        return 'primary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'expired':\n        return <Clock className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatPaymentStructure = (paymentStructure: any) => {\n    switch (paymentStructure.type) {\n      case 'cash':\n        return `All Cash (€${paymentStructure.cashAmount?.toLocaleString()})`;\n      case 'mixed':\n        return `Mixed (Cash: €${paymentStructure.cashAmount?.toLocaleString()}, Financed: €${paymentStructure.financedAmount?.toLocaleString()})`;\n      case 'financed':\n        return `Financed (€${paymentStructure.financedAmount?.toLocaleString()})`;\n      case 'earnout':\n        return `Earnout (€${paymentStructure.earnoutDetails?.totalAmount?.toLocaleString()} over ${paymentStructure.earnoutDetails?.duration} months)`;\n      default:\n        return paymentStructure.type;\n    }\n  };\n\n  const filteredOffers = offers.filter(offer => {\n    const matchesSearch =\n      offer.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      offer.additionalTerms?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || offer.status === statusFilter;\n\n    let matchesDate = true;\n    if (dateFilter !== 'all') {\n      const offerDate = new Date(offer.submittedAt);\n      const now = new Date();\n      const daysDiff = Math.floor((now.getTime() - offerDate.getTime()) / (1000 * 60 * 60 * 24));\n\n      switch (dateFilter) {\n        case 'last-30-days':\n          matchesDate = daysDiff <= 30;\n          break;\n        case 'last-90-days':\n          matchesDate = daysDiff <= 90;\n          break;\n        case 'last-year':\n          matchesDate = daysDiff <= 365;\n          break;\n      }\n    }\n\n    return matchesSearch && matchesStatus && matchesDate;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading offer history...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Offer History ({filteredOffers.length})</h3>\n          <p className=\"text-sm text-gray-600\">View all your past offers and transactions</p>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardBody>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search offers...\"\n                  value={searchQuery}\n                  onChange={e => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"md:w-48\">\n              <select\n                value={statusFilter}\n                onChange={e => setStatusFilter(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Statuses</option>\n                <option value=\"accepted\">Accepted</option>\n                <option value=\"rejected\">Rejected</option>\n                <option value=\"expired\">Expired</option>\n                <option value=\"withdrawn\">Withdrawn</option>\n              </select>\n            </div>\n            <div className=\"md:w-48\">\n              <select\n                value={dateFilter}\n                onChange={e => setDateFilter(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Time</option>\n                <option value=\"last-30-days\">Last 30 Days</option>\n                <option value=\"last-90-days\">Last 90 Days</option>\n                <option value=\"last-year\">Last Year</option>\n              </select>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Offers List */}\n      <div className=\"space-y-4\">\n        {filteredOffers.length === 0 ? (\n          <Card>\n            <CardBody>\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No offers found</h3>\n                <p className=\"text-gray-600\">\n                  {searchQuery || statusFilter !== 'all' || dateFilter !== 'all'\n                    ? 'Try adjusting your search or filter criteria.'\n                    : 'Your offer history will appear here once you start making offers.'}\n                </p>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          filteredOffers.map(offer => (\n            <Card key={offer.id} className=\"border border-gray-200\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between w-full\">\n                  <div className=\"flex items-center gap-3\">\n                    <DollarSign className=\"w-5 h-5 text-green-600\" />\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-gray-900\">\n                        {offer.currency} {offer.offerPrice.toLocaleString()}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        {offer.type === 'initial'\n                          ? 'Initial Offer'\n                          : offer.type === 'counter'\n                            ? 'Counter Offer'\n                            : 'Final Offer'}{' '}\n                        • Submitted {new Date(offer.submittedAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Chip\n                      color={getStatusColor(offer.status)}\n                      variant=\"flat\"\n                      startContent={getStatusIcon(offer.status)}\n                    >\n                      {offer.status}\n                    </Chip>\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      startContent={<FileText className=\"w-4 h-4\" />}\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  {/* Key Information */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-1\">Payment Structure</h5>\n                      <p className=\"text-sm text-gray-600\">\n                        {formatPaymentStructure(offer.paymentStructure)}\n                      </p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-1\">Closing Date</h5>\n                      <p className=\"text-sm text-gray-600\">\n                        {new Date(offer.timeline.closingDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-1\">Final Status</h5>\n                      <p className=\"text-sm text-gray-600\">\n                        {offer.status === 'accepted'\n                          ? 'Successfully closed'\n                          : offer.status === 'rejected'\n                            ? 'Offer was rejected'\n                            : offer.status === 'expired'\n                              ? 'Offer expired'\n                              : 'Offer was withdrawn'}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Negotiation Summary */}\n                  {offer.negotiationHistory.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-2\">Negotiation Summary</h5>\n                      <div className=\"space-y-2\">\n                        {offer.negotiationHistory.slice(0, 3).map(event => (\n                          <div\n                            key={event.id}\n                            className=\"flex items-center gap-3 p-2 bg-gray-50 rounded-lg\"\n                          >\n                            <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n                              <Calendar className=\"w-3 h-3 text-blue-600\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <p className=\"text-sm text-gray-900\">{event.description}</p>\n                              <p className=\"text-xs text-gray-600\">\n                                {new Date(event.timestamp).toLocaleString()}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                        {offer.negotiationHistory.length > 3 && (\n                          <p className=\"text-xs text-gray-500 text-center\">\n                            +{offer.negotiationHistory.length - 3} more events\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Additional Terms */}\n                  {offer.additionalTerms && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-2\">Notes</h5>\n                      <p className=\"text-sm text-gray-700 bg-gray-50 p-3 rounded-lg\">\n                        {offer.additionalTerms}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Outcome Summary */}\n                  <div\n                    className={`p-3 rounded-lg ${\n                      offer.status === 'accepted'\n                        ? 'bg-green-50 border border-green-200'\n                        : offer.status === 'rejected'\n                          ? 'bg-red-50 border border-red-200'\n                          : 'bg-gray-50 border border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      {offer.status === 'accepted' ? (\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      ) : offer.status === 'rejected' ? (\n                        <XCircle className=\"w-4 h-4 text-red-600\" />\n                      ) : (\n                        <Clock className=\"w-4 h-4 text-gray-600\" />\n                      )}\n                      <h6\n                        className={`font-medium ${\n                          offer.status === 'accepted'\n                            ? 'text-green-900'\n                            : offer.status === 'rejected'\n                              ? 'text-red-900'\n                              : 'text-gray-900'\n                        }`}\n                      >\n                        {offer.status === 'accepted'\n                          ? 'Transaction Completed'\n                          : offer.status === 'rejected'\n                            ? 'Offer Rejected'\n                            : offer.status === 'expired'\n                              ? 'Offer Expired'\n                              : 'Offer Withdrawn'}\n                      </h6>\n                    </div>\n                    <p\n                      className={`text-sm ${\n                        offer.status === 'accepted'\n                          ? 'text-green-800'\n                          : offer.status === 'rejected'\n                            ? 'text-red-800'\n                            : 'text-gray-700'\n                      }`}\n                    >\n                      {offer.status === 'accepted'\n                        ? `Successfully closed on ${new Date(offer.lastModifiedAt).toLocaleDateString()} for ${offer.currency} ${offer.offerPrice.toLocaleString()}`\n                        : offer.status === 'rejected'\n                          ? `Offer was rejected on ${new Date(offer.lastModifiedAt).toLocaleDateString()}`\n                          : offer.status === 'expired'\n                            ? `Offer expired on ${new Date(offer.expiresAt).toLocaleDateString()}`\n                            : `Offer was withdrawn on ${new Date(offer.lastModifiedAt).toLocaleDateString()}`}\n                    </p>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport { OfferHistory };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/OfferManagementDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboard'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [listingId, loadDashboard, userId]","fix":{"range":[1397,1416],"text":"[listingId, loadDashboard, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4595,4644],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used.","line":156,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used.","line":156,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'getStatusIcon' is assigned a value but never used.","line":173,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusIcon' is assigned a value but never used.","line":173,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer Management Dashboard\n * Location: src/shared/components/offer-management/OfferManagementDashboard.tsx\n * Purpose: Main dashboard for managing offers and negotiations\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { OfferDashboard } from '@/shared/types/offer-management';\nimport { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport {\n  AlertTriangle,\n  Calendar,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  FileText,\n  MessageSquare,\n  Plus,\n  TrendingUp,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { OfferComparison } from './OfferComparison';\nimport { OfferCreationModal } from './OfferCreationModal';\nimport { OfferHistory } from './OfferHistory';\nimport { OfferNegotiation } from './OfferNegotiation';\nimport { OfferTracking } from './OfferTracking';\n\ninterface OfferManagementDashboardProps {\n  listingId?: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst OfferManagementDashboard: React.FC<OfferManagementDashboardProps> = ({\n  listingId,\n  userRole,\n  userId,\n}) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [dashboard, setDashboard] = useState<OfferDashboard | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadDashboard();\n  }, [listingId, userId]);\n\n  const loadDashboard = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await offerService.getDashboard(userId, listingId);\n      // setDashboard(response.data);\n\n      // Mock data for now\n      const mockDashboard: OfferDashboard = {\n        activeOffers: [\n          {\n            id: 'offer-1',\n            listingId: listingId || 'listing-1',\n            buyerId: 'buyer-1',\n            sellerId: 'seller-1',\n            status: 'under_review',\n            type: 'initial',\n            offerPrice: 850000,\n            currency: 'EUR',\n            paymentStructure: {\n              type: 'mixed',\n              cashAmount: 500000,\n              financedAmount: 350000,\n            },\n            conditions: [],\n            contingencies: [],\n            timeline: {\n              dueDiligencePeriod: 30,\n              financingPeriod: 45,\n              closingDate: '2024-03-15',\n              responseDeadline: '2024-01-25',\n            },\n            additionalTerms: 'Requesting 30-day transition period',\n            specialRequests: ['Inventory audit', 'Customer introductions'],\n            submittedAt: '2024-01-15T10:30:00Z',\n            expiresAt: '2024-01-25T23:59:59Z',\n            lastModifiedAt: '2024-01-15T10:30:00Z',\n            createdBy: 'buyer-1',\n            version: 1,\n            negotiationHistory: [],\n            comments: [],\n            attachments: [],\n            approvals: [],\n            requiresApproval: false,\n          },\n        ],\n        pendingOffers: [],\n        completedOffers: [],\n        statistics: {\n          totalOffers: 3,\n          activeOffers: 1,\n          acceptedOffers: 1,\n          rejectedOffers: 1,\n          averageOfferValue: 750000,\n          averageNegotiationTime: 14,\n          successRate: 50,\n        },\n        recentActivity: [\n          {\n            id: 'activity-1',\n            type: 'offer_submitted',\n            timestamp: '2024-01-15T10:30:00Z',\n            userId: 'buyer-1',\n            userName: 'Jane Buyer',\n            description: 'New offer submitted for €850,000',\n            metadata: { offerId: 'offer-1', amount: 850000 },\n          },\n          {\n            id: 'activity-2',\n            type: 'counter_offer',\n            timestamp: '2024-01-10T14:15:00Z',\n            userId: 'seller-1',\n            userName: 'John Seller',\n            description: 'Counter-offer submitted for €900,000',\n            metadata: { offerId: 'offer-2', amount: 900000 },\n          },\n        ],\n        upcomingDeadlines: [\n          {\n            id: 'deadline-1',\n            offerId: 'offer-1',\n            title: 'Response Deadline',\n            deadline: '2024-01-25',\n            type: 'response',\n            priority: 'high',\n            isOverdue: false,\n          },\n          {\n            id: 'deadline-2',\n            offerId: 'offer-1',\n            title: 'Due Diligence Period',\n            deadline: '2024-02-15',\n            type: 'due_diligence',\n            priority: 'medium',\n            isOverdue: false,\n          },\n        ],\n      };\n\n      setDashboard(mockDashboard);\n    } catch (error) {\n      console.error('Error loading dashboard:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'success';\n      case 'under_review':\n        return 'warning';\n      case 'rejected':\n        return 'danger';\n      case 'expired':\n        return 'default';\n      case 'withdrawn':\n        return 'default';\n      default:\n        return 'primary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'under_review':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'expired':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading offer dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboard) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Unable to load dashboard</h3>\n        <p className=\"text-gray-600 mb-4\">\n          There was an error loading the offer management dashboard.\n        </p>\n        <Button variant=\"primary\" onPress={loadDashboard}>\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  const { statistics, upcomingDeadlines, recentActivity } = dashboard;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Offer Management</h2>\n                <p className=\"text-gray-600\">\n                  {userRole === 'buyer'\n                    ? 'Manage your business offers'\n                    : userRole === 'seller'\n                      ? 'Review incoming offers'\n                      : 'Oversee offer negotiations'}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Chip variant=\"flat\" color=\"success\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                {statistics.successRate}% Success Rate\n              </Chip>\n              <Button\n                variant=\"primary\"\n                onPress={() => setIsCreateModalOpen(true)}\n                startContent={<Plus className=\"w-4 h-4\" />}\n              >\n                {userRole === 'buyer' ? 'Make Offer' : 'Create Template'}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary-600 mb-1\">\n                {statistics.totalOffers}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Offers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-1\">\n                {statistics.activeOffers}\n              </div>\n              <div className=\"text-sm text-gray-600\">Active Offers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n                €{statistics.averageOfferValue.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg. Offer Value</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-1\">\n                {statistics.averageNegotiationTime}\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg. Days to Close</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        {[\n          { id: 'overview', label: 'Overview', icon: <TrendingUp className=\"w-4 h-4\" /> },\n          { id: 'tracking', label: 'Offer Tracking', icon: <Clock className=\"w-4 h-4\" /> },\n          { id: 'negotiation', label: 'Negotiation', icon: <MessageSquare className=\"w-4 h-4\" /> },\n          { id: 'comparison', label: 'Comparison', icon: <FileText className=\"w-4 h-4\" /> },\n          { id: 'history', label: 'History', icon: <Calendar className=\"w-4 h-4\" /> },\n        ].map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n              activeTab === tab.id\n                ? 'bg-white text-primary-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n            }`}\n          >\n            {tab.icon}\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"mt-6\">\n        {activeTab === 'overview' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Upcoming Deadlines */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Upcoming Deadlines\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {upcomingDeadlines.map(deadline => (\n                    <div\n                      key={deadline.id}\n                      className={`p-3 rounded-lg border ${\n                        deadline.isOverdue\n                          ? 'border-red-200 bg-red-50'\n                          : deadline.priority === 'high'\n                            ? 'border-orange-200 bg-orange-50'\n                            : 'border-gray-200 bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{deadline.title}</h4>\n                          <p className=\"text-sm text-gray-600\">\n                            Due: {new Date(deadline.deadline).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Chip\n                          size=\"sm\"\n                          color={deadline.priority === 'high' ? 'danger' : 'warning'}\n                          variant=\"flat\"\n                        >\n                          {deadline.priority}\n                        </Chip>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  Recent Activity\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {recentActivity.map(activity => (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 p-3 border border-gray-200 rounded-lg\"\n                    >\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900\">{activity.description}</p>\n                        <p className=\"text-xs text-gray-600\">\n                          by {activity.userName} • {new Date(activity.timestamp).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'tracking' && (\n          <OfferTracking listingId={listingId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'negotiation' && (\n          <OfferNegotiation listingId={listingId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'comparison' && (\n          <OfferComparison listingId={listingId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'history' && (\n          <OfferHistory listingId={listingId} userRole={userRole} userId={userId} />\n        )}\n      </div>\n\n      {/* Create Offer Modal */}\n      <OfferCreationModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n        listingId={listingId}\n        userRole={userRole}\n        userId={userId}\n        onOfferCreated={() => {\n          setIsCreateModalOpen(false);\n          loadDashboard();\n        }}\n      />\n    </div>\n  );\n};\n\nexport default OfferManagementDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/OfferNegotiation.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOffers'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [listingId, loadOffers, userId]","fix":{"range":[1260,1279],"text":"[listingId, loadOffers, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3441,3487],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5852,5906],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6252,6299],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6662,6709],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":283,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":283,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":283,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":283,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":421,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16966,16969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16966,16969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer Negotiation\n * Location: src/shared/components/offer-management/OfferNegotiation.tsx\n * Purpose: Handle offer negotiations and counter-offers\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { AnimatedTextarea, CustomNumberInputField } from '@/shared/components/forms';\nimport { CounterOfferRequest, Offer } from '@/shared/types/offer-management';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Chip,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from '@heroui/react';\nimport { ArrowRight, MessageSquare, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface OfferNegotiationProps {\n  listingId?: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst OfferNegotiation: React.FC<OfferNegotiationProps> = ({ listingId, userRole, userId }) => {\n  const [offers, setOffers] = useState<Offer[]>([]);\n  const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null);\n  const [isCounterModalOpen, setIsCounterModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [counterOfferData, setCounterOfferData] = useState<Partial<CounterOfferRequest>>({\n    reason: '',\n  });\n\n  useEffect(() => {\n    loadOffers();\n  }, [listingId, userId]);\n\n  const loadOffers = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await offerService.getOffersForNegotiation(userId, listingId);\n      // setOffers(response.data);\n\n      // Mock data for now\n      const mockOffers: Offer[] = [\n        {\n          id: 'offer-1',\n          listingId: listingId || 'listing-1',\n          buyerId: 'buyer-1',\n          sellerId: 'seller-1',\n          status: 'under_review',\n          type: 'initial',\n          offerPrice: 850000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'mixed',\n            cashAmount: 500000,\n            financedAmount: 350000,\n          },\n          conditions: [],\n          contingencies: [],\n          timeline: {\n            dueDiligencePeriod: 30,\n            financingPeriod: 45,\n            closingDate: '2024-03-15',\n            responseDeadline: '2024-01-25',\n          },\n          additionalTerms: 'Requesting 30-day transition period',\n          specialRequests: ['Inventory audit', 'Customer introductions'],\n          submittedAt: '2024-01-15T10:30:00Z',\n          expiresAt: '2024-01-25T23:59:59Z',\n          lastModifiedAt: '2024-01-15T10:30:00Z',\n          createdBy: 'buyer-1',\n          version: 1,\n          negotiationHistory: [\n            {\n              id: 'hist-1',\n              type: 'offer_submitted',\n              timestamp: '2024-01-15T10:30:00Z',\n              userId: 'buyer-1',\n              userName: 'Jane Buyer',\n              description: 'Initial offer submitted for €850,000',\n            },\n          ],\n          comments: [\n            {\n              id: 'comment-1',\n              authorId: 'seller-1',\n              authorName: 'John Seller',\n              content:\n                'Thank you for your offer. We are reviewing the terms and will respond within the deadline.',\n              timestamp: '2024-01-16T09:15:00Z',\n              isPrivate: false,\n            },\n          ],\n          attachments: [],\n          approvals: [],\n          requiresApproval: false,\n        },\n      ];\n\n      setOffers(mockOffers);\n    } catch (error) {\n      console.error('Error loading offers:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCounterOffer = async () => {\n    if (!selectedOffer || !counterOfferData.reason) return;\n\n    try {\n      // TODO: Replace with actual API call\n      // await offerService.createCounterOffer(selectedOffer.id, counterOfferData as CounterOfferRequest);\n\n      // Mock counter offer creation\n      const newCounterOffer: Offer = {\n        ...selectedOffer,\n        id: `counter-${Date.now()}`,\n        parentOfferId: selectedOffer.id,\n        type: 'counter',\n        offerPrice: counterOfferData.offerPrice || selectedOffer.offerPrice,\n        paymentStructure: counterOfferData.paymentStructure || selectedOffer.paymentStructure,\n        conditions: counterOfferData.conditions || selectedOffer.conditions,\n        contingencies: counterOfferData.contingencies || selectedOffer.contingencies,\n        timeline: counterOfferData.timeline || selectedOffer.timeline,\n        additionalTerms: counterOfferData.additionalTerms || selectedOffer.additionalTerms,\n        specialRequests: counterOfferData.specialRequests || selectedOffer.specialRequests,\n        submittedAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n        lastModifiedAt: new Date().toISOString(),\n        createdBy: userId,\n        version: selectedOffer.version + 1,\n        status: 'submitted',\n        negotiationHistory: [\n          ...selectedOffer.negotiationHistory,\n          {\n            id: `hist-${Date.now()}`,\n            type: 'counter_offer',\n            timestamp: new Date().toISOString(),\n            userId: userId,\n            userName: userRole === 'buyer' ? 'Jane Buyer' : 'John Seller',\n            description: `Counter-offer submitted for €${counterOfferData.offerPrice?.toLocaleString() || selectedOffer.offerPrice.toLocaleString()}`,\n            changes: [\n              {\n                field: 'offerPrice',\n                oldValue: selectedOffer.offerPrice,\n                newValue: counterOfferData.offerPrice || selectedOffer.offerPrice,\n                reason: counterOfferData.reason,\n              },\n            ],\n          },\n        ],\n      };\n\n      setOffers(prev => [newCounterOffer, ...prev]);\n      setIsCounterModalOpen(false);\n      setCounterOfferData({ reason: '' });\n    } catch (error) {\n      console.error('Error creating counter offer:', error);\n    }\n  };\n\n  const handleAcceptOffer = async (offer: Offer) => {\n    try {\n      // TODO: Replace with actual API call\n      // await offerService.acceptOffer(offer.id);\n\n      // Mock acceptance\n      setOffers(prev =>\n        prev.map(o => (o.id === offer.id ? { ...o, status: 'accepted' as const } : o))\n      );\n    } catch (error) {\n      console.error('Error accepting offer:', error);\n    }\n  };\n\n  const handleRejectOffer = async (offer: Offer) => {\n    try {\n      // TODO: Replace with actual API call\n      // await offerService.rejectOffer(offer.id, 'Offer rejected');\n\n      // Mock rejection\n      setOffers(prev =>\n        prev.map(o => (o.id === offer.id ? { ...o, status: 'rejected' as const } : o))\n      );\n    } catch (error) {\n      console.error('Error rejecting offer:', error);\n    }\n  };\n\n  const canNegotiate = (offer: Offer) => {\n    return offer.status === 'under_review' || offer.status === 'countered';\n  };\n\n  const canRespond = (offer: Offer) => {\n    return (\n      (userRole === 'seller' && offer.buyerId !== userId) ||\n      (userRole === 'buyer' && offer.sellerId !== userId)\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading negotiations...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Active Negotiations ({offers.length})</h3>\n          <p className=\"text-sm text-gray-600\">Manage offer negotiations and counter-offers</p>\n        </div>\n      </div>\n\n      {/* Offers List */}\n      <div className=\"space-y-4\">\n        {offers.length === 0 ? (\n          <Card>\n            <CardBody>\n              <div className=\"text-center py-8\">\n                <MessageSquare className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No active negotiations</h3>\n                <p className=\"text-gray-600\">Offers available for negotiation will appear here.</p>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          offers.map(offer => (\n            <Card key={offer.id} className=\"border border-gray-200\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between w-full\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-2\">\n                      {offer.type === 'counter' && <ArrowRight className=\"w-4 h-4 text-blue-600\" />}\n                      <MessageSquare className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-gray-900\">\n                        {offer.currency} {offer.offerPrice.toLocaleString()}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        {offer.type === 'initial'\n                          ? 'Initial Offer'\n                          : offer.type === 'counter'\n                            ? 'Counter Offer'\n                            : 'Final Offer'}{' '}\n                        •{offer.parentOfferId ? 'Response to previous offer' : 'New negotiation'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Chip\n                      color={offer.status === 'under_review' ? 'warning' : 'primary'}\n                      variant=\"flat\"\n                    >\n                      {offer.status.replace('_', ' ')}\n                    </Chip>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  {/* Negotiation History */}\n                  <div>\n                    <h5 className=\"font-medium text-gray-900 mb-3\">Negotiation Timeline</h5>\n                    <div className=\"space-y-3\">\n                      {offer.negotiationHistory.map((event, index) => (\n                        <div key={event.id} className=\"flex items-start gap-3\">\n                          <div className=\"flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium text-gray-900\">{event.description}</p>\n                            <p className=\"text-xs text-gray-600\">\n                              by {event.userName} • {new Date(event.timestamp).toLocaleString()}\n                            </p>\n                            {event.changes && event.changes.length > 0 && (\n                              <div className=\"mt-2 p-2 bg-gray-50 rounded-lg\">\n                                <p className=\"text-xs text-gray-600 mb-1\">Changes made:</p>\n                                {event.changes.map((change, changeIndex) => (\n                                  <div key={changeIndex} className=\"text-xs text-gray-700\">\n                                    <span className=\"font-medium\">{change.field}:</span>{' '}\n                                    {String(change.oldValue)} → {String(change.newValue)}\n                                    {change.reason && (\n                                      <span className=\"text-gray-500\"> ({change.reason})</span>\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Comments */}\n                  {offer.comments.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-3\">Comments</h5>\n                      <div className=\"space-y-3\">\n                        {offer.comments.map(comment => (\n                          <div\n                            key={comment.id}\n                            className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\"\n                          >\n                            <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                              <MessageSquare className=\"w-4 h-4 text-gray-600\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <p className=\"text-sm text-gray-900\">{comment.content}</p>\n                              <p className=\"text-xs text-gray-600 mt-1\">\n                                by {comment.authorName} •{' '}\n                                {new Date(comment.timestamp).toLocaleString()}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  {canRespond(offer) && canNegotiate(offer) && (\n                    <div className=\"flex items-center gap-3 pt-4 border-t border-gray-200\">\n                      <Button\n                        variant=\"primary\"\n                        onPress={() => {\n                          setSelectedOffer(offer);\n                          setIsCounterModalOpen(true);\n                        }}\n                        startContent={<ArrowRight className=\"w-4 h-4\" />}\n                      >\n                        Make Counter Offer\n                      </Button>\n                      <Button variant=\"success\" onPress={() => handleAcceptOffer(offer)}>\n                        Accept Offer\n                      </Button>\n                      <Button variant=\"danger\" onPress={() => handleRejectOffer(offer)}>\n                        Reject Offer\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardBody>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Counter Offer Modal */}\n      <Modal isOpen={isCounterModalOpen} onClose={() => setIsCounterModalOpen(false)} size=\"2xl\">\n        <ModalContent>\n          <ModalHeader>\n            <div className=\"flex items-center justify-between w-full\">\n              <h3 className=\"text-lg font-semibold\">Make Counter Offer</h3>\n              <Button variant=\"secondary\" isIconOnly onPress={() => setIsCounterModalOpen(false)}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </ModalHeader>\n          <ModalBody>\n            {selectedOffer && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Current Offer</h4>\n                  <p className=\"text-blue-800\">\n                    {selectedOffer.currency} {selectedOffer.offerPrice.toLocaleString()} •\n                    {selectedOffer.paymentStructure.type.replace('_', ' ')} • Closing:{' '}\n                    {new Date(selectedOffer.timeline.closingDate).toLocaleDateString()}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <CustomNumberInputField\n                    label=\"Counter Offer Price\"\n                    placeholder={selectedOffer.offerPrice.toString()}\n                    value={\n                      counterOfferData.offerPrice?.toString() || selectedOffer.offerPrice.toString()\n                    }\n                    onChange={e =>\n                      setCounterOfferData(prev => ({\n                        ...prev,\n                        offerPrice: parseFloat(e.target.value) || selectedOffer.offerPrice,\n                      }))\n                    }\n                    onBlur={() => {}}\n                    name=\"counterPrice\"\n                  />\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Payment Structure\n                    </label>\n                    <select\n                      value={\n                        counterOfferData.paymentStructure?.type ||\n                        selectedOffer.paymentStructure.type\n                      }\n                      onChange={e =>\n                        setCounterOfferData(prev => ({\n                          ...prev,\n                          paymentStructure: {\n                            ...(prev.paymentStructure || selectedOffer.paymentStructure),\n                            type: e.target.value as any,\n                          },\n                        }))\n                      }\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    >\n                      <option value=\"cash\">All Cash</option>\n                      <option value=\"financed\">Financed</option>\n                      <option value=\"mixed\">Mixed (Cash + Financing)</option>\n                      <option value=\"earnout\">Earnout Structure</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Closing Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={\n                      counterOfferData.timeline?.closingDate || selectedOffer.timeline.closingDate\n                    }\n                    onChange={e =>\n                      setCounterOfferData(prev => ({\n                        ...prev,\n                        timeline: {\n                          ...(prev.timeline || selectedOffer.timeline),\n                          closingDate: e.target.value,\n                        },\n                      }))\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                  />\n                </div>\n\n                <AnimatedTextarea\n                  label=\"Reason for Counter Offer\"\n                  placeholder=\"Explain why you're making this counter offer and what changes you're proposing...\"\n                  value={counterOfferData.reason || ''}\n                  onChange={e =>\n                    setCounterOfferData(prev => ({\n                      ...prev,\n                      reason: e.target.value,\n                    }))\n                  }\n                  onBlur={() => {}}\n                  name=\"reason\"\n                  minRows={3}\n                  required\n                />\n              </div>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"secondary\" onPress={() => setIsCounterModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              onPress={handleCounterOffer}\n              isDisabled={!counterOfferData.reason}\n            >\n              Submit Counter Offer\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n\nexport { OfferNegotiation };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/OfferTracking.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":29,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":29,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":75},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOffers'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [listingId, loadOffers, userId]","fix":{"range":[964,983],"text":"[listingId, loadOffers, userId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4525,4571],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer Tracking\n * Location: src/shared/components/offer-management/OfferTracking.tsx\n * Purpose: Track and monitor offer status and progress\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { Offer } from '@/shared/types/offer-management';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  Eye,\n  FileText,\n  MessageSquare,\n  X,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface OfferTrackingProps {\n  listingId?: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst OfferTracking: React.FC<OfferTrackingProps> = ({ listingId, userRole, userId }) => {\n  const [offers, setOffers] = useState<Offer[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null);\n\n  useEffect(() => {\n    loadOffers();\n  }, [listingId, userId]);\n\n  const loadOffers = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await offerService.getOffers(userId, listingId);\n      // setOffers(response.data);\n\n      // Mock data for now\n      const mockOffers: Offer[] = [\n        {\n          id: 'offer-1',\n          listingId: listingId || 'listing-1',\n          buyerId: 'buyer-1',\n          sellerId: 'seller-1',\n          status: 'under_review',\n          type: 'initial',\n          offerPrice: 850000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'mixed',\n            cashAmount: 500000,\n            financedAmount: 350000,\n          },\n          conditions: [\n            {\n              id: 'cond-1',\n              type: 'due_diligence',\n              description: 'Satisfactory completion of due diligence',\n              isRequired: true,\n              status: 'pending',\n            },\n            {\n              id: 'cond-2',\n              type: 'financing',\n              description: 'Obtain financing approval',\n              isRequired: true,\n              status: 'pending',\n            },\n          ],\n          contingencies: [\n            {\n              id: 'cont-1',\n              type: 'inspection',\n              description: 'Property inspection',\n              deadline: '2024-02-15',\n              responsibleParty: 'buyer',\n              status: 'pending',\n            },\n          ],\n          timeline: {\n            dueDiligencePeriod: 30,\n            financingPeriod: 45,\n            closingDate: '2024-03-15',\n            responseDeadline: '2024-01-25',\n          },\n          additionalTerms: 'Requesting 30-day transition period',\n          specialRequests: ['Inventory audit', 'Customer introductions'],\n          submittedAt: '2024-01-15T10:30:00Z',\n          expiresAt: '2024-01-25T23:59:59Z',\n          lastModifiedAt: '2024-01-15T10:30:00Z',\n          createdBy: 'buyer-1',\n          version: 1,\n          negotiationHistory: [\n            {\n              id: 'hist-1',\n              type: 'offer_submitted',\n              timestamp: '2024-01-15T10:30:00Z',\n              userId: 'buyer-1',\n              userName: 'Jane Buyer',\n              description: 'Initial offer submitted',\n            },\n          ],\n          comments: [],\n          attachments: [],\n          approvals: [],\n          requiresApproval: false,\n        },\n        {\n          id: 'offer-2',\n          listingId: listingId || 'listing-1',\n          buyerId: 'buyer-2',\n          sellerId: 'seller-1',\n          status: 'countered',\n          type: 'counter',\n          parentOfferId: 'offer-1',\n          offerPrice: 900000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'cash',\n            cashAmount: 900000,\n          },\n          conditions: [],\n          contingencies: [],\n          timeline: {\n            dueDiligencePeriod: 30,\n            financingPeriod: 45,\n            closingDate: '2024-03-20',\n            responseDeadline: '2024-01-30',\n          },\n          additionalTerms: '',\n          specialRequests: [],\n          submittedAt: '2024-01-20T14:15:00Z',\n          expiresAt: '2024-01-30T23:59:59Z',\n          lastModifiedAt: '2024-01-20T14:15:00Z',\n          createdBy: 'seller-1',\n          version: 1,\n          negotiationHistory: [],\n          comments: [],\n          attachments: [],\n          approvals: [],\n          requiresApproval: false,\n        },\n      ];\n\n      setOffers(mockOffers);\n    } catch (error) {\n      console.error('Error loading offers:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'success';\n      case 'under_review':\n        return 'warning';\n      case 'countered':\n        return 'primary';\n      case 'rejected':\n        return 'danger';\n      case 'expired':\n        return 'default';\n      case 'withdrawn':\n        return 'default';\n      default:\n        return 'primary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'under_review':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'countered':\n        return <MessageSquare className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'expired':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getProgressPercentage = (offer: Offer) => {\n    const now = new Date();\n    const submitted = new Date(offer.submittedAt);\n    const expires = new Date(offer.expiresAt);\n    const total = expires.getTime() - submitted.getTime();\n    const elapsed = now.getTime() - submitted.getTime();\n    return Math.min(100, Math.max(0, (elapsed / total) * 100));\n  };\n\n  const isOverdue = (deadline: string) => {\n    return new Date(deadline) < new Date();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading offers...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Active Offers ({offers.length})</h3>\n          <p className=\"text-sm text-gray-600\">Track the status of your offers</p>\n        </div>\n      </div>\n\n      {/* Offers List */}\n      <div className=\"space-y-4\">\n        {offers.length === 0 ? (\n          <Card>\n            <CardBody>\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No offers yet</h3>\n                <p className=\"text-gray-600\">Create your first offer to get started.</p>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          offers.map(offer => (\n            <Card key={offer.id} className=\"border border-gray-200\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between w-full\">\n                  <div className=\"flex items-center gap-3\">\n                    <DollarSign className=\"w-5 h-5 text-green-600\" />\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-gray-900\">\n                        {offer.currency} {offer.offerPrice.toLocaleString()}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        {offer.type === 'initial'\n                          ? 'Initial Offer'\n                          : offer.type === 'counter'\n                            ? 'Counter Offer'\n                            : 'Final Offer'}{' '}\n                        • Submitted {new Date(offer.submittedAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Chip\n                      color={getStatusColor(offer.status)}\n                      variant=\"flat\"\n                      startContent={getStatusIcon(offer.status)}\n                    >\n                      {offer.status.replace('_', ' ')}\n                    </Chip>\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onPress={() => setSelectedOffer(offer)}\n                      startContent={<Eye className=\"w-4 h-4\" />}\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  {/* Progress Bar */}\n                  <div>\n                    <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                      <span>Time Remaining</span>\n                      <span>\n                        {isOverdue(offer.expiresAt)\n                          ? 'Overdue'\n                          : `${Math.ceil((new Date(offer.expiresAt).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days left`}\n                      </span>\n                    </div>\n                    <Progress\n                      value={getProgressPercentage(offer)}\n                      color={isOverdue(offer.expiresAt) ? 'danger' : 'primary'}\n                      className=\"mb-2\"\n                    />\n                  </div>\n\n                  {/* Key Information */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-1\">Payment Structure</h5>\n                      <p className=\"text-sm text-gray-600 capitalize\">\n                        {offer.paymentStructure.type.replace('_', ' ')}\n                      </p>\n                      {offer.paymentStructure.type === 'mixed' && (\n                        <p className=\"text-xs text-gray-500\">\n                          Cash: {offer.currency}{' '}\n                          {offer.paymentStructure.cashAmount?.toLocaleString()} • Financed:{' '}\n                          {offer.currency} {offer.paymentStructure.financedAmount?.toLocaleString()}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-1\">Closing Date</h5>\n                      <p className=\"text-sm text-gray-600\">\n                        {new Date(offer.timeline.closingDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-1\">Response Deadline</h5>\n                      <p\n                        className={`text-sm ${isOverdue(offer.timeline.responseDeadline) ? 'text-red-600' : 'text-gray-600'}`}\n                      >\n                        {new Date(offer.timeline.responseDeadline).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Conditions Status */}\n                  {offer.conditions.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-2\">Conditions</h5>\n                      <div className=\"space-y-2\">\n                        {offer.conditions.map(condition => (\n                          <div key={condition.id} className=\"flex items-center gap-2\">\n                            <div\n                              className={`w-2 h-2 rounded-full ${\n                                condition.status === 'satisfied'\n                                  ? 'bg-green-500'\n                                  : condition.status === 'failed'\n                                    ? 'bg-red-500'\n                                    : 'bg-yellow-500'\n                              }`}\n                            />\n                            <span className=\"text-sm text-gray-700\">{condition.description}</span>\n                            <Chip\n                              size=\"sm\"\n                              color={\n                                condition.status === 'satisfied'\n                                  ? 'success'\n                                  : condition.status === 'failed'\n                                    ? 'danger'\n                                    : 'warning'\n                              }\n                              variant=\"flat\"\n                            >\n                              {condition.status}\n                            </Chip>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Contingencies Status */}\n                  {offer.contingencies.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-2\">Contingencies</h5>\n                      <div className=\"space-y-2\">\n                        {offer.contingencies.map(contingency => (\n                          <div key={contingency.id} className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <div\n                                className={`w-2 h-2 rounded-full ${\n                                  contingency.status === 'satisfied'\n                                    ? 'bg-green-500'\n                                    : contingency.status === 'failed'\n                                      ? 'bg-red-500'\n                                      : 'bg-yellow-500'\n                                }`}\n                              />\n                              <span className=\"text-sm text-gray-700\">\n                                {contingency.description}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-xs text-gray-500\">\n                                Due: {new Date(contingency.deadline).toLocaleDateString()}\n                              </span>\n                              <Chip\n                                size=\"sm\"\n                                color={\n                                  contingency.status === 'satisfied'\n                                    ? 'success'\n                                    : contingency.status === 'failed'\n                                      ? 'danger'\n                                      : 'warning'\n                                }\n                                variant=\"flat\"\n                              >\n                                {contingency.status}\n                              </Chip>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Special Requests */}\n                  {offer.specialRequests.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-2\">Special Requests</h5>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {offer.specialRequests.map((request, index) => (\n                          <Chip key={index} size=\"sm\" variant=\"flat\" color=\"default\">\n                            {request}\n                          </Chip>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Additional Terms */}\n                  {offer.additionalTerms && (\n                    <div>\n                      <h5 className=\"font-medium text-gray-900 mb-2\">Additional Terms</h5>\n                      <p className=\"text-sm text-gray-700 bg-gray-50 p-3 rounded-lg\">\n                        {offer.additionalTerms}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardBody>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Offer Details Modal */}\n      {selectedOffer && (\n        <Card className=\"fixed inset-4 z-50 bg-white shadow-2xl overflow-y-auto\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between w-full\">\n              <h3 className=\"text-lg font-semibold\">Offer Details</h3>\n              <Button variant=\"secondary\" isIconOnly onPress={() => setSelectedOffer(null)}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <div className=\"space-y-6\">\n              {/* Offer Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Financial Terms</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Offer Price:</span>\n                      <span className=\"font-medium\">\n                        {selectedOffer.currency} {selectedOffer.offerPrice.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Payment Type:</span>\n                      <span className=\"font-medium capitalize\">\n                        {selectedOffer.paymentStructure.type.replace('_', ' ')}\n                      </span>\n                    </div>\n                    {selectedOffer.paymentStructure.cashAmount && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Cash Amount:</span>\n                        <span className=\"font-medium\">\n                          {selectedOffer.currency}{' '}\n                          {selectedOffer.paymentStructure.cashAmount.toLocaleString()}\n                        </span>\n                      </div>\n                    )}\n                    {selectedOffer.paymentStructure.financedAmount && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Financed Amount:</span>\n                        <span className=\"font-medium\">\n                          {selectedOffer.currency}{' '}\n                          {selectedOffer.paymentStructure.financedAmount.toLocaleString()}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Timeline</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Closing Date:</span>\n                      <span className=\"font-medium\">\n                        {new Date(selectedOffer.timeline.closingDate).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Response Deadline:</span>\n                      <span className=\"font-medium\">\n                        {new Date(selectedOffer.timeline.responseDeadline).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Due Diligence:</span>\n                      <span className=\"font-medium\">\n                        {selectedOffer.timeline.dueDiligencePeriod} days\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Financing:</span>\n                      <span className=\"font-medium\">\n                        {selectedOffer.timeline.financingPeriod} days\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Negotiation History */}\n              {selectedOffer.negotiationHistory.length > 0 && (\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Negotiation History</h4>\n                  <div className=\"space-y-3\">\n                    {selectedOffer.negotiationHistory.map(event => (\n                      <div\n                        key={event.id}\n                        className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-gray-900\">{event.description}</p>\n                          <p className=\"text-xs text-gray-600\">\n                            by {event.userName} • {new Date(event.timestamp).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport { OfferTracking };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/offer-management/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/search/SearchComponent.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":14,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@/shared/components/buttons';\nimport { Search } from 'lucide-react';\nimport React from 'react';\n\ninterface SearchComponentProps {\n  /**\n   * Current search query value\n   */\n  value: string;\n\n  /**\n   * Callback when search value changes\n   */\n  onChange: (value: string) => void;\n\n  /**\n   * Callback when search is submitted\n   */\n  onSearch: () => void;\n\n  /**\n   * Placeholder text for the search input\n   */\n  placeholder?: string;\n\n  /**\n   * Size variant of the search component\n   */\n  size?: 'default' | 'large';\n\n  /**\n   * Whether to show loading state\n   */\n  isLoading?: boolean;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n\n  /**\n   * Button text override\n   */\n  buttonText?: string;\n}\n\n/**\n * SearchComponent - A clean, reusable search component\n *\n * Designed to replace the complex HeroUI search implementations\n * with a simpler, more maintainable solution.\n */\nconst SearchComponent: React.FC<SearchComponentProps> = ({\n  value,\n  onChange,\n  onSearch,\n  placeholder = 'Search businesses, sectors, locations...',\n  size = 'default',\n  isLoading = false,\n  className = '',\n  buttonText = 'Search',\n}) => {\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      onSearch();\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n\n  const sizeClasses = {\n    default: {\n      container: 'p-4',\n      input: 'h-12 text-base px-4 pl-12',\n      button: 'h-12 px-6 text-base',\n      icon: 'w-5 h-5',\n    },\n    large: {\n      container: 'p-6',\n      input: 'h-14 text-lg px-6 pl-14',\n      button: 'h-14 px-10 text-lg',\n      icon: 'w-6 h-6',\n    },\n  };\n\n  const sizes = sizeClasses[size];\n\n  return (\n    <div className={`professional-search-container ${className}`}>\n      <div\n        className={`bg-white border-2 border-slate-200 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 focus-within:border-blue-500 focus-within:shadow-2xl ${sizes.container}`}\n      >\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          {/* Search Input */}\n          <div className=\"flex-1 relative\">\n            <div className=\"relative\">\n              <Search\n                className={`absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 ${sizes.icon}`}\n                style={{ stroke: 'currentColor', fill: 'none' }}\n              />\n              <input\n                type=\"text\"\n                value={value}\n                onChange={handleInputChange}\n                onKeyPress={handleKeyPress}\n                placeholder={placeholder}\n                className={`w-full border-0 rounded-xl bg-slate-50 text-slate-900 placeholder-slate-400 focus:bg-white focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-all duration-200 ${sizes.input}`}\n                disabled={isLoading}\n              />\n            </div>\n          </div>\n\n          {/* Search Button */}\n          <Button\n            type=\"button\"\n            onClick={onSearch}\n            disabled={isLoading}\n            variant=\"primary\"\n            className={`${sizes.button} text-lg`}\n          >\n            {isLoading ? (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                Searching...\n              </div>\n            ) : (\n              buttonText\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchComponent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/search/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/seo/SEOHead.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/tabs/Tabs.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'tabId' is defined but never used.","line":47,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'tabId' is defined but never used.","line":81,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":245,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'tabId' is defined but never used.","line":245,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9092,9095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9092,9095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":389,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10635,10638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10635,10638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Modern Tab Component - Clean, Accessible, Performance-Optimized\n *\n * As designed by Senior CTO & Designer\n * - Zero dependencies on complex UI libraries\n * - Built-in accessibility (ARIA, keyboard navigation)\n * - Modern pill/segment design\n * - Responsive and mobile-friendly\n * - Lightweight and performant\n */\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  useMemo,\n  KeyboardEvent,\n} from 'react';\nimport { cn } from '@heroui/react';\n\n// =============================================================================\n// TYPES & INTERFACES\n// =============================================================================\n\nexport interface TabItem {\n  /** Unique identifier for the tab */\n  id: string;\n  /** Display label */\n  label: string;\n  /** Optional icon (React element) */\n  icon?: React.ReactNode;\n  /** Optional badge/counter */\n  badge?: string | number;\n  /** Whether tab is disabled */\n  disabled?: boolean;\n  /** Tooltip text */\n  tooltip?: string;\n}\n\nexport interface ModernTabsProps {\n  /** Array of tab items */\n  tabs: TabItem[];\n  /** Currently active tab ID */\n  activeTab?: string;\n  /** Callback when tab changes */\n  onTabChange?: (tabId: string) => void;\n  /** Default active tab (uncontrolled mode) */\n  defaultTab?: string;\n  /** Visual variant */\n  variant?: 'pills' | 'underline' | 'bordered';\n  /** Size variant */\n  size?: 'sm' | 'md' | 'lg';\n  /** Full width tabs */\n  fullWidth?: boolean;\n  /** Allow scrolling for many tabs */\n  scrollable?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n  /** Test ID */\n  'data-testid'?: string;\n  /** Tab content children */\n  children?: React.ReactNode;\n}\n\nexport interface ModernTabContentProps {\n  /** Tab ID this content belongs to */\n  tabId: string;\n  /** Content to render */\n  children: React.ReactNode;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n// =============================================================================\n// CONTEXT\n// =============================================================================\n\ninterface TabContextValue {\n  activeTab: string;\n  setActiveTab: (tabId: string) => void;\n  tabs: TabItem[];\n  variant: 'pills' | 'underline' | 'bordered';\n  size: 'sm' | 'md' | 'lg';\n}\n\nconst TabContext = createContext<TabContextValue | undefined>(undefined);\n\nconst useTabContext = () => {\n  const context = useContext(TabContext);\n  if (!context) {\n    throw new Error('Tab components must be used within ModernTabs');\n  }\n  return context;\n};\n\n// =============================================================================\n// MAIN TABS COMPONENT\n// =============================================================================\n\nexport const ModernTabs: React.FC<ModernTabsProps> = ({\n  tabs,\n  activeTab: controlledActiveTab,\n  onTabChange,\n  defaultTab,\n  variant = 'pills',\n  size = 'md',\n  fullWidth = false,\n  scrollable = true,\n  className,\n  'data-testid': testId,\n  children,\n}) => {\n  // State management (controlled/uncontrolled)\n  const [internalActiveTab, setInternalActiveTab] = useState(\n    () => controlledActiveTab || defaultTab || tabs[0]?.id || ''\n  );\n\n  const activeTab = controlledActiveTab ?? internalActiveTab;\n\n  const handleTabChange = useCallback(\n    (tabId: string) => {\n      if (controlledActiveTab === undefined) {\n        setInternalActiveTab(tabId);\n      }\n      onTabChange?.(tabId);\n    },\n    [controlledActiveTab, onTabChange]\n  );\n\n  // Keyboard navigation\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>, tabId: string) => {\n      const currentIndex = tabs.findIndex(tab => tab.id === tabId);\n      let nextIndex = currentIndex;\n\n      switch (event.key) {\n        case 'ArrowLeft':\n        case 'ArrowUp':\n          event.preventDefault();\n          nextIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;\n          break;\n        case 'ArrowRight':\n        case 'ArrowDown':\n          event.preventDefault();\n          nextIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;\n          break;\n        case 'Home':\n          event.preventDefault();\n          nextIndex = 0;\n          break;\n        case 'End':\n          event.preventDefault();\n          nextIndex = tabs.length - 1;\n          break;\n        default:\n          return;\n      }\n\n      const nextTab = tabs[nextIndex];\n      if (nextTab && !nextTab.disabled) {\n        handleTabChange(nextTab.id);\n        // Focus the next tab button\n        const nextButton = event.currentTarget.parentElement?.children[\n          nextIndex\n        ] as HTMLButtonElement;\n        nextButton?.focus();\n      }\n    },\n    [tabs, handleTabChange]\n  );\n\n  // Context value\n  const contextValue = useMemo(\n    () => ({\n      activeTab,\n      setActiveTab: handleTabChange,\n      tabs,\n      variant,\n      size,\n    }),\n    [activeTab, handleTabChange, tabs, variant, size]\n  );\n\n  // Style variants\n  const containerStyles = cn(\n    // Base styles\n    'modern-tabs-container',\n    'flex items-center',\n\n    // Variant styles\n    {\n      // Pills variant - Modern segmented control style\n      'p-1 bg-gray-100 rounded-2xl': variant === 'pills',\n      // Underline variant - Classic tab style\n      'border-b border-gray-200': variant === 'underline',\n      // Bordered variant - Card-style tabs\n      'border border-gray-200 rounded-xl bg-white': variant === 'bordered',\n    },\n\n    // Layout styles\n    {\n      'w-full': fullWidth,\n      'overflow-x-auto': scrollable,\n      'flex-nowrap': scrollable,\n    },\n\n    // Custom classes\n    className\n  );\n\n  const tabListStyles = cn('flex', {\n    'gap-1': variant === 'pills',\n    'gap-0': variant !== 'pills',\n    'w-full': fullWidth,\n    'min-w-max': scrollable,\n  });\n\n  return (\n    <TabContext.Provider value={contextValue}>\n      <div className={containerStyles} data-testid={testId}>\n        <div className={tabListStyles} role=\"tablist\" aria-orientation=\"horizontal\">\n          {tabs.map(tab => (\n            <ModernTabButton\n              key={tab.id}\n              tab={tab}\n              onKeyDown={handleKeyDown}\n              fullWidth={fullWidth}\n            />\n          ))}\n        </div>\n      </div>\n      {/* Render children (ModernTabContent components) within context */}\n      {children}\n    </TabContext.Provider>\n  );\n};\n\n// =============================================================================\n// TAB BUTTON COMPONENT\n// =============================================================================\n\ninterface ModernTabButtonProps {\n  tab: TabItem;\n  onKeyDown: (event: KeyboardEvent<HTMLDivElement>, tabId: string) => void;\n  fullWidth: boolean;\n}\n\nconst ModernTabButton: React.FC<ModernTabButtonProps> = ({ tab, onKeyDown, fullWidth }) => {\n  const { activeTab, setActiveTab, variant, size } = useTabContext();\n  const isActive = activeTab === tab.id;\n\n  const handleClick = () => {\n    if (!tab.disabled) {\n      setActiveTab(tab.id);\n    }\n  };\n\n  // Size styles\n  const sizeStyles = {\n    sm: 'px-3 py-1.5 text-sm h-8',\n    md: 'px-4 py-2 text-sm h-10',\n    lg: 'px-6 py-3 text-base h-12',\n  };\n\n  // Variant styles\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'pills':\n        return cn('rounded-xl transition-all duration-200 font-medium', {\n          'bg-white text-gray-900 shadow-sm': isActive && !tab.disabled,\n          'text-gray-600 hover:text-gray-900': !isActive && !tab.disabled,\n          'text-gray-400 cursor-not-allowed': tab.disabled,\n        });\n\n      case 'underline':\n        return cn('border-b-2 transition-all duration-200 font-medium', {\n          'border-blue-600 text-blue-600': isActive && !tab.disabled,\n          'border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300':\n            !isActive && !tab.disabled,\n          'text-gray-400 cursor-not-allowed border-transparent': tab.disabled,\n        });\n\n      case 'bordered':\n        return cn('border-b-2 transition-all duration-200 font-medium', {\n          'border-b-blue-600 text-blue-600 bg-blue-50': isActive && !tab.disabled,\n          'border-b-transparent text-gray-600 hover:text-gray-900 hover:bg-gray-50':\n            !isActive && !tab.disabled,\n          'text-gray-400 cursor-not-allowed': tab.disabled,\n        });\n\n      default:\n        return '';\n    }\n  };\n\n  const buttonStyles = cn(\n    // Base styles\n    'relative flex items-center justify-center gap-2',\n    'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n    'transition-colors duration-200',\n\n    // Size styles\n    sizeStyles[size],\n\n    // Layout styles\n    {\n      'flex-1': fullWidth,\n      'min-w-0': fullWidth, // Allow text truncation\n    },\n\n    // Variant-specific styles\n    getVariantStyles(),\n\n    // Disabled state\n    {\n      'cursor-not-allowed opacity-50': tab.disabled,\n      'cursor-pointer': !tab.disabled,\n    }\n  );\n\n  return (\n    <button\n      type=\"button\"\n      role=\"tab\"\n      aria-selected={isActive}\n      aria-disabled={tab.disabled}\n      tabIndex={isActive ? 0 : -1}\n      onClick={handleClick}\n      onKeyDown={e => onKeyDown(e as any, tab.id)}\n      className={buttonStyles}\n      title={tab.tooltip}\n      disabled={tab.disabled}\n    >\n      {/* Icon */}\n      {tab.icon && <span className=\"flex-shrink-0\">{tab.icon}</span>}\n\n      {/* Label */}\n      <span className={cn('whitespace-nowrap', fullWidth && 'truncate')}>{tab.label}</span>\n\n      {/* Badge */}\n      {tab.badge && (\n        <span\n          className={cn(\n            'inline-flex items-center justify-center min-w-[20px] h-5 px-1.5',\n            'text-xs font-medium rounded-full',\n            {\n              'bg-blue-100 text-blue-800': isActive,\n              'bg-gray-100 text-gray-600': !isActive,\n            }\n          )}\n        >\n          {tab.badge}\n        </span>\n      )}\n    </button>\n  );\n};\n\n// =============================================================================\n// TAB CONTENT COMPONENT\n// =============================================================================\n\nexport const ModernTabContent: React.FC<ModernTabContentProps> = ({\n  tabId,\n  children,\n  className,\n}) => {\n  const { activeTab } = useTabContext();\n  const isActive = activeTab === tabId;\n\n  if (!isActive) return null;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      aria-labelledby={`tab-${tabId}`}\n      className={cn('modern-tab-content', className)}\n    >\n      {children}\n    </div>\n  );\n};\n\n// =============================================================================\n// COMPOUND COMPONENT EXPORTS\n// =============================================================================\n\n(ModernTabs as any).Content = ModernTabContent;\nModernTabs.displayName = 'ModernTabs';\n\nexport default ModernTabs;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/tabs/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/ClosingChecklist.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":30,"column":87,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":93},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":30,"column":87,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":93},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransaction'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransaction, transactionId]","fix":{"range":[1084,1099],"text":"[loadTransaction, transactionId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6167,6218],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7285,7336],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Closing Checklist\n * Location: src/shared/components/transaction-completion/ClosingChecklist.tsx\n * Purpose: Manage closing checklist items and tasks\n */\n\nimport { CustomCheckbox } from '@/shared/components/forms';\nimport { ClosingChecklistItem, Transaction } from '@/shared/types/transaction-completion';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  CheckCircle,\n  ChevronDown,\n  ChevronRight,\n  Clock,\n  FileText,\n  Scale,\n  Shield,\n  TrendingUp,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface ClosingChecklistProps {\n  transactionId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst ClosingChecklist: React.FC<ClosingChecklistProps> = ({ transactionId, userRole, userId }) => {\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadTransaction();\n  }, [transactionId]);\n\n  const loadTransaction = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await transactionService.getTransaction(transactionId);\n      // setTransaction(response.data);\n\n      // Mock data for now\n      const mockTransaction: Transaction = {\n        id: transactionId,\n        offerId: 'offer-1',\n        listingId: 'listing-1',\n        buyerId: 'buyer-1',\n        sellerId: 'seller-1',\n        status: 'in_progress',\n        type: 'asset_purchase',\n        totalValue: 875000,\n        currency: 'EUR',\n        paymentStructure: {\n          type: 'mixed',\n          cashAmount: 600000,\n          financedAmount: 275000,\n        },\n        closingDate: '2024-03-15',\n        createdDate: '2024-01-15T10:30:00Z',\n        lastUpdated: '2024-01-20T14:30:00Z',\n        keyDates: [],\n        parties: [],\n        documents: [],\n        closingChecklist: [\n          {\n            id: 'checklist-1',\n            category: 'legal',\n            title: 'Purchase Agreement Signed',\n            description: 'All parties have signed the purchase agreement',\n            status: 'completed',\n            priority: 'critical',\n            assignedTo: 'lawyer-1',\n            dueDate: '2024-02-01',\n            completedDate: '2024-01-25',\n            dependencies: [],\n            documents: ['doc-1'],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-2',\n            category: 'legal',\n            title: 'Due Diligence Complete',\n            description: 'All due diligence items have been completed and approved',\n            status: 'in_progress',\n            priority: 'high',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-02-15',\n            dependencies: ['checklist-1'],\n            documents: ['doc-2', 'doc-3'],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-3',\n            category: 'financial',\n            title: 'Financing Approval',\n            description: 'Obtain final financing approval from lender',\n            status: 'pending',\n            priority: 'critical',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-02-28',\n            dependencies: ['checklist-2'],\n            documents: ['doc-4'],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-4',\n            category: 'financial',\n            title: 'Down Payment Made',\n            description: 'Initial down payment has been transferred',\n            status: 'pending',\n            priority: 'high',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-03-01',\n            dependencies: ['checklist-3'],\n            documents: [],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-5',\n            category: 'operational',\n            title: 'Asset Transfer',\n            description: 'Physical assets have been transferred to buyer',\n            status: 'pending',\n            priority: 'medium',\n            assignedTo: 'seller-1',\n            dueDate: '2024-03-10',\n            dependencies: ['checklist-4'],\n            documents: ['doc-5'],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-6',\n            category: 'regulatory',\n            title: 'Regulatory Approvals',\n            description: 'All required regulatory approvals obtained',\n            status: 'completed',\n            priority: 'high',\n            assignedTo: 'lawyer-1',\n            dueDate: '2024-02-20',\n            completedDate: '2024-02-18',\n            dependencies: [],\n            documents: ['doc-6'],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-7',\n            category: 'closing',\n            title: 'Closing Documents Prepared',\n            description: 'All closing documents are prepared and ready',\n            status: 'pending',\n            priority: 'critical',\n            assignedTo: 'lawyer-1',\n            dueDate: '2024-03-12',\n            dependencies: ['checklist-2', 'checklist-3'],\n            documents: ['doc-7', 'doc-8'],\n            comments: [],\n            isRequired: true,\n          },\n          {\n            id: 'checklist-8',\n            category: 'closing',\n            title: 'Final Walkthrough',\n            description: 'Final inspection and walkthrough completed',\n            status: 'pending',\n            priority: 'medium',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-03-14',\n            dependencies: ['checklist-5'],\n            documents: [],\n            comments: [],\n            isRequired: true,\n          },\n        ],\n        payments: [],\n        postClosingItems: [],\n        communications: [],\n        version: 1,\n        createdBy: 'buyer-1',\n        requiresApproval: false,\n        approvals: [],\n      };\n\n      setTransaction(mockTransaction);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleCategory = (category: string) => {\n    setExpandedCategories(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(category)) {\n        newSet.delete(category);\n      } else {\n        newSet.add(category);\n      }\n      return newSet;\n    });\n  };\n\n  const updateChecklistItem = async (itemId: string, status: ClosingChecklistItem['status']) => {\n    try {\n      // TODO: Replace with actual API call\n      // await transactionService.updateChecklistItem(transactionId, itemId, status);\n\n      // Update local state\n      setTransaction(prev => {\n        if (!prev) return prev;\n\n        const updatedChecklist = prev.closingChecklist.map(item =>\n          item.id === itemId\n            ? {\n                ...item,\n                status,\n                completedDate: status === 'completed' ? new Date().toISOString() : undefined,\n              }\n            : item\n        );\n\n        return { ...prev, closingChecklist: updatedChecklist };\n      });\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'in_progress':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      case 'blocked':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'blocked':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return 'danger';\n      case 'high':\n        return 'warning';\n      case 'medium':\n        return 'primary';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'legal':\n        return <Scale className=\"w-5 h-5\" />;\n      case 'financial':\n        return <TrendingUp className=\"w-5 h-5\" />;\n      case 'operational':\n        return <Users className=\"w-5 h-5\" />;\n      case 'regulatory':\n        return <Shield className=\"w-5 h-5\" />;\n      case 'closing':\n        return <CheckCircle className=\"w-5 h-5\" />;\n      case 'post_closing':\n        return <FileText className=\"w-5 h-5\" />;\n      default:\n        return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'legal':\n        return 'text-blue-600 bg-blue-100';\n      case 'financial':\n        return 'text-green-600 bg-green-100';\n      case 'operational':\n        return 'text-purple-600 bg-purple-100';\n      case 'regulatory':\n        return 'text-orange-600 bg-orange-100';\n      case 'closing':\n        return 'text-red-600 bg-red-100';\n      case 'post_closing':\n        return 'text-gray-600 bg-gray-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading closing checklist...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"text-center py-8\">\n        <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No transaction found</h3>\n        <p className=\"text-gray-600\">Unable to load the closing checklist.</p>\n      </div>\n    );\n  }\n\n  // Group checklist items by category\n  const categories = transaction.closingChecklist.reduce(\n    (acc, item) => {\n      if (!acc[item.category]) {\n        acc[item.category] = [];\n      }\n      acc[item.category].push(item);\n      return acc;\n    },\n    {} as Record<string, ClosingChecklistItem[]>\n  );\n\n  const categoryProgress = Object.entries(categories).map(([category, items]) => {\n    const completed = items.filter(item => item.status === 'completed').length;\n    const total = items.length;\n    const progress = total > 0 ? (completed / total) * 100 : 0;\n    return { category, progress, completed, total };\n  });\n\n  const overallProgress =\n    transaction.closingChecklist.length > 0\n      ? (transaction.closingChecklist.filter(item => item.status === 'completed').length /\n          transaction.closingChecklist.length) *\n        100\n      : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overall Progress */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <h3 className=\"text-lg font-semibold\">Closing Checklist Progress</h3>\n            <Chip color=\"primary\" variant=\"flat\">\n              {overallProgress.toFixed(0)}% Complete\n            </Chip>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <Progress value={overallProgress} className=\"mb-4\" color=\"primary\" size=\"lg\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">\n                {transaction.closingChecklist.filter(item => item.status === 'completed').length}\n              </div>\n              <div className=\"text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">\n                {transaction.closingChecklist.filter(item => item.status === 'in_progress').length}\n              </div>\n              <div className=\"text-gray-600\">In Progress</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">\n                {transaction.closingChecklist.filter(item => item.status === 'pending').length}\n              </div>\n              <div className=\"text-gray-600\">Pending</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Category Progress */}\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-lg font-semibold\">Progress by Category</h3>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {categoryProgress.map(({ category, progress, completed, total }) => (\n              <div key={category} className=\"p-4 border border-gray-200 rounded-lg\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <div className={`p-2 rounded-lg ${getCategoryColor(category)}`}>\n                    {getCategoryIcon(category)}\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 capitalize\">\n                      {category.replace('_', ' ')}\n                    </h4>\n                    <p className=\"text-sm text-gray-600\">\n                      {completed}/{total} items\n                    </p>\n                  </div>\n                </div>\n                <Progress value={progress} size=\"sm\" color=\"primary\" />\n              </div>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Checklist Items by Category */}\n      <div className=\"space-y-4\">\n        {Object.entries(categories).map(([category, items]) => {\n          const isExpanded = expandedCategories.has(category);\n          const completedItems = items.filter(item => item.status === 'completed').length;\n          const totalItems = items.length;\n\n          return (\n            <Card key={category} className=\"border border-gray-200\">\n              <CardBody className=\"p-0\">\n                {/* Category Header */}\n                <button\n                  onClick={() => toggleCategory(category)}\n                  className=\"w-full p-6 text-left hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-200 focus:ring-inset\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className={`p-3 rounded-xl ${getCategoryColor(category)}`}>\n                        {getCategoryIcon(category)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 capitalize\">\n                            {category.replace('_', ' ')}\n                          </h3>\n                          <Chip size=\"sm\" color=\"primary\" variant=\"flat\">\n                            {completedItems}/{totalItems}\n                          </Chip>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-2\">{items.length} checklist items</p>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"text-sm text-gray-500\">\n                            {completedItems}/{totalItems} completed\n                          </div>\n                          <div className=\"flex-1 max-w-32\">\n                            <Progress\n                              value={(completedItems / totalItems) * 100}\n                              size=\"sm\"\n                              color=\"primary\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex-shrink-0 ml-4\">\n                      {isExpanded ? (\n                        <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                      ) : (\n                        <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </button>\n\n                {/* Category Items */}\n                {isExpanded && (\n                  <div className=\"px-6 pb-6 border-t border-gray-100\">\n                    <div className=\"pt-4 space-y-3\">\n                      {items.map(item => (\n                        <div\n                          key={item.id}\n                          className=\"flex items-start gap-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n                        >\n                          <div className=\"flex-shrink-0 mt-1\">{getStatusIcon(item.status)}</div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div>\n                                <h4 className=\"font-medium text-gray-900 mb-1\">{item.title}</h4>\n                                <p className=\"text-sm text-gray-600 mb-2\">{item.description}</p>\n                                <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                                  <span>Due: {new Date(item.dueDate).toLocaleDateString()}</span>\n                                  <span>•</span>\n                                  <span>Assigned to: {item.assignedTo}</span>\n                                  {item.isRequired && (\n                                    <>\n                                      <span>•</span>\n                                      <span className=\"text-red-600\">Required</span>\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Chip\n                                  size=\"sm\"\n                                  color={getPriorityColor(item.priority)}\n                                  variant=\"flat\"\n                                >\n                                  {item.priority}\n                                </Chip>\n                                <Chip size=\"sm\" color={getStatusColor(item.status)} variant=\"flat\">\n                                  {item.status.replace('_', ' ')}\n                                </Chip>\n                              </div>\n                            </div>\n\n                            {/* Dependencies */}\n                            {item.dependencies.length > 0 && (\n                              <div className=\"mb-2\">\n                                <p className=\"text-xs text-gray-500 mb-1\">Dependencies:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {item.dependencies.map(depId => (\n                                    <Chip key={depId} size=\"sm\" variant=\"flat\" color=\"default\">\n                                      {depId}\n                                    </Chip>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Documents */}\n                            {item.documents.length > 0 && (\n                              <div className=\"mb-2\">\n                                <p className=\"text-xs text-gray-500 mb-1\">Documents:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {item.documents.map(docId => (\n                                    <Chip key={docId} size=\"sm\" variant=\"flat\" color=\"primary\">\n                                      {docId}\n                                    </Chip>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Action Buttons */}\n                            {userRole === 'buyer' && item.assignedTo === 'buyer-1' && (\n                              <div className=\"flex items-center gap-2\">\n                                <CustomCheckbox\n                                  label=\"\"\n                                  checked={item.status === 'completed'}\n                                  onChange={() => {\n                                    updateChecklistItem(\n                                      item.id,\n                                      item.status === 'completed' ? 'pending' : 'completed'\n                                    );\n                                  }}\n                                  name={`item-${item.id}`}\n                                />\n                                <span className=\"text-sm text-gray-600\">\n                                  Mark as {item.status === 'completed' ? 'pending' : 'completed'}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport { ClosingChecklist };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/DocumentManagement.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransaction'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransaction, transactionId]","fix":{"range":[1409,1424],"text":"[loadTransaction, transactionId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6688,6739],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleFileUpload' is assigned a value but never used.","line":216,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFileUpload' is assigned a value but never used.","line":216,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7252,7255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7252,7255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7829,7880],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8342,8393],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Document Management\n * Location: src/shared/components/transaction-completion/DocumentManagement.tsx\n * Purpose: Manage transaction documents and signatures\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { CustomFileInput } from '@/shared/components/forms';\nimport { Transaction, TransactionDocument } from '@/shared/types/transaction-completion';\nimport {\n  Card,\n  CardBody,\n  Chip,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from '@heroui/react';\nimport { Download, Eye, FileText, MoreHorizontal, Search, Upload, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface DocumentManagementProps {\n  transactionId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst DocumentManagement: React.FC<DocumentManagementProps> = ({\n  transactionId,\n  userRole,\n  userId,\n}) => {\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedDocument, setSelectedDocument] = useState<TransactionDocument | null>(null);\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n\n  useEffect(() => {\n    loadTransaction();\n  }, [transactionId]);\n\n  const loadTransaction = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await transactionService.getTransaction(transactionId);\n      // setTransaction(response.data);\n\n      // Mock data for now\n      const mockTransaction: Transaction = {\n        id: transactionId,\n        offerId: 'offer-1',\n        listingId: 'listing-1',\n        buyerId: 'buyer-1',\n        sellerId: 'seller-1',\n        status: 'in_progress',\n        type: 'asset_purchase',\n        totalValue: 875000,\n        currency: 'EUR',\n        paymentStructure: {\n          type: 'mixed',\n          cashAmount: 600000,\n          financedAmount: 275000,\n        },\n        closingDate: '2024-03-15',\n        createdDate: '2024-01-15T10:30:00Z',\n        lastUpdated: '2024-01-20T14:30:00Z',\n        keyDates: [],\n        parties: [],\n        documents: [\n          {\n            id: 'doc-1',\n            name: 'Purchase Agreement',\n            type: 'legal',\n            category: 'Purchase Agreement',\n            status: 'signed',\n            requiredBy: 'lawyer-1',\n            dueDate: '2024-02-01',\n            uploadedBy: 'lawyer-1',\n            uploadedDate: '2024-01-20T10:30:00Z',\n            fileSize: 2048576,\n            downloadUrl: '/documents/purchase-agreement.pdf',\n            version: 2,\n            isLatest: true,\n            signatures: [\n              {\n                id: 'sig-1',\n                signatoryId: 'buyer-1',\n                signatoryName: 'Jane Buyer',\n                signedDate: '2024-01-25T14:30:00Z',\n                signatureMethod: 'electronic',\n                ipAddress: '192.168.1.1',\n                location: 'New York, NY',\n              },\n              {\n                id: 'sig-2',\n                signatoryId: 'seller-1',\n                signatoryName: 'John Seller',\n                signedDate: '2024-01-25T15:45:00Z',\n                signatureMethod: 'electronic',\n                ipAddress: '192.168.1.2',\n                location: 'Los Angeles, CA',\n              },\n            ],\n            comments: [],\n          },\n          {\n            id: 'doc-2',\n            name: 'Financial Statements',\n            type: 'financial',\n            category: 'Due Diligence',\n            status: 'approved',\n            requiredBy: 'buyer-1',\n            dueDate: '2024-02-15',\n            uploadedBy: 'seller-1',\n            uploadedDate: '2024-01-18T09:15:00Z',\n            fileSize: 1536000,\n            downloadUrl: '/documents/financial-statements.pdf',\n            version: 1,\n            isLatest: true,\n            signatures: [],\n            comments: [\n              {\n                id: 'comment-1',\n                authorId: 'buyer-1',\n                authorName: 'Jane Buyer',\n                content: 'Financial statements look good, approved for closing.',\n                timestamp: '2024-01-19T11:30:00Z',\n                isResolved: true,\n              },\n            ],\n          },\n          {\n            id: 'doc-3',\n            name: 'Asset Inventory',\n            type: 'operational',\n            category: 'Asset Transfer',\n            status: 'review',\n            requiredBy: 'buyer-1',\n            dueDate: '2024-03-10',\n            uploadedBy: 'seller-1',\n            uploadedDate: '2024-01-22T16:20:00Z',\n            fileSize: 1024000,\n            downloadUrl: '/documents/asset-inventory.pdf',\n            version: 1,\n            isLatest: true,\n            signatures: [],\n            comments: [\n              {\n                id: 'comment-2',\n                authorId: 'buyer-1',\n                authorName: 'Jane Buyer',\n                content: 'Need to verify condition of equipment listed in inventory.',\n                timestamp: '2024-01-23T10:15:00Z',\n                isResolved: false,\n              },\n            ],\n          },\n          {\n            id: 'doc-4',\n            name: 'Financing Agreement',\n            type: 'financial',\n            category: 'Financing',\n            status: 'draft',\n            requiredBy: 'buyer-1',\n            dueDate: '2024-02-28',\n            uploadedBy: 'banker-1',\n            uploadedDate: '2024-01-24T13:45:00Z',\n            fileSize: 3072000,\n            downloadUrl: '/documents/financing-agreement.pdf',\n            version: 1,\n            isLatest: true,\n            signatures: [],\n            comments: [],\n          },\n          {\n            id: 'doc-5',\n            name: 'Regulatory Approvals',\n            type: 'regulatory',\n            category: 'Compliance',\n            status: 'approved',\n            requiredBy: 'lawyer-1',\n            dueDate: '2024-02-20',\n            uploadedBy: 'lawyer-1',\n            uploadedDate: '2024-01-20T14:30:00Z',\n            fileSize: 512000,\n            downloadUrl: '/documents/regulatory-approvals.pdf',\n            version: 1,\n            isLatest: true,\n            signatures: [],\n            comments: [],\n          },\n        ],\n        closingChecklist: [],\n        payments: [],\n        postClosingItems: [],\n        communications: [],\n        version: 1,\n        createdBy: 'buyer-1',\n        requiresApproval: false,\n        approvals: [],\n      };\n\n      setTransaction(mockTransaction);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFileUpload = async (\n    file: File,\n    type: string,\n    category: string,\n    requiredBy: string,\n    dueDate: string\n  ) => {\n    try {\n      // TODO: Replace with actual API call\n      // await transactionService.uploadDocument(transactionId, file, type, category, requiredBy, dueDate);\n\n      // Mock upload\n      const newDocument: TransactionDocument = {\n        id: `doc-${Date.now()}`,\n        name: file.name,\n        type: type as any,\n        category,\n        status: 'draft',\n        requiredBy,\n        dueDate,\n        uploadedBy: userId,\n        uploadedDate: new Date().toISOString(),\n        fileSize: file.size,\n        downloadUrl: `/documents/${file.name}`,\n        version: 1,\n        isLatest: true,\n        signatures: [],\n        comments: [],\n      };\n\n      setTransaction(prev => {\n        if (!prev) return prev;\n        return {\n          ...prev,\n          documents: [...prev.documents, newDocument],\n        };\n      });\n\n      setIsUploadModalOpen(false);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    }\n  };\n\n  const handleDownload = async (doc: TransactionDocument) => {\n    try {\n      // TODO: Replace with actual API call\n      // await transactionService.downloadDocument(doc.id);\n\n      // Mock download\n      const link = document.createElement('a');\n      link.href = doc.downloadUrl || '#';\n      link.download = doc.name;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'signed':\n        return 'success';\n      case 'approved':\n        return 'success';\n      case 'review':\n        return 'warning';\n      case 'draft':\n        return 'default';\n      case 'pending':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'signed':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'approved':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'review':\n        return <Eye className=\"w-4 h-4\" />;\n      case 'draft':\n        return <FileText className=\"w-4 h-4\" />;\n      default:\n        return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'legal':\n        return 'text-blue-600 bg-blue-100';\n      case 'financial':\n        return 'text-green-600 bg-green-100';\n      case 'operational':\n        return 'text-purple-600 bg-purple-100';\n      case 'regulatory':\n        return 'text-orange-600 bg-orange-100';\n      case 'closing':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading documents...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"text-center py-8\">\n        <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No transaction found</h3>\n        <p className=\"text-gray-600\">Unable to load documents.</p>\n      </div>\n    );\n  }\n\n  const filteredDocuments = transaction.documents.filter(doc => {\n    const matchesSearch =\n      doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      doc.category.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === 'all' || doc.type === typeFilter;\n    const matchesStatus = statusFilter === 'all' || doc.status === statusFilter;\n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const documentStats = {\n    total: transaction.documents.length,\n    signed: transaction.documents.filter(doc => doc.status === 'signed').length,\n    approved: transaction.documents.filter(doc => doc.status === 'approved').length,\n    pending: transaction.documents.filter(doc => doc.status === 'draft' || doc.status === 'review')\n      .length,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Document Management</h3>\n          <p className=\"text-sm text-gray-600\">Manage transaction documents and signatures</p>\n        </div>\n        <Button\n          variant=\"primary\"\n          onPress={() => setIsUploadModalOpen(true)}\n          startContent={<Upload className=\"w-4 h-4\" />}\n        >\n          Upload Document\n        </Button>\n      </div>\n\n      {/* Document Statistics */}\n      <Card>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary-600 mb-1\">{documentStats.total}</div>\n              <div className=\"text-sm text-gray-600\">Total Documents</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-1\">{documentStats.signed}</div>\n              <div className=\"text-sm text-gray-600\">Signed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-1\">{documentStats.approved}</div>\n              <div className=\"text-sm text-gray-600\">Approved</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-1\">{documentStats.pending}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Filters */}\n      <Card>\n        <CardBody>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search documents...\"\n                  value={searchQuery}\n                  onChange={e => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"md:w-48\">\n              <select\n                value={typeFilter}\n                onChange={e => setTypeFilter(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"legal\">Legal</option>\n                <option value=\"financial\">Financial</option>\n                <option value=\"operational\">Operational</option>\n                <option value=\"regulatory\">Regulatory</option>\n                <option value=\"closing\">Closing</option>\n              </select>\n            </div>\n            <div className=\"md:w-48\">\n              <select\n                value={statusFilter}\n                onChange={e => setStatusFilter(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                <option value=\"all\">All Statuses</option>\n                <option value=\"signed\">Signed</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"review\">Under Review</option>\n                <option value=\"draft\">Draft</option>\n                <option value=\"pending\">Pending</option>\n              </select>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Documents List */}\n      <div className=\"space-y-4\">\n        {filteredDocuments.length === 0 ? (\n          <Card>\n            <CardBody>\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No documents found</h3>\n                <p className=\"text-gray-600\">\n                  {searchQuery || typeFilter !== 'all' || statusFilter !== 'all'\n                    ? 'Try adjusting your search or filter criteria.'\n                    : 'Upload your first document to get started.'}\n                </p>\n              </div>\n            </CardBody>\n          </Card>\n        ) : (\n          filteredDocuments.map(doc => (\n            <Card key={doc.id} className=\"border border-gray-200\">\n              <CardBody>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className={`p-3 rounded-lg ${getTypeColor(doc.type)}`}>\n                      <FileText className=\"w-5 h-5\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-1\">\n                        <h4 className=\"text-lg font-semibold text-gray-900\">{doc.name}</h4>\n                        <Chip\n                          size=\"sm\"\n                          color={getStatusColor(doc.status)}\n                          variant=\"flat\"\n                          startContent={getStatusIcon(doc.status)}\n                        >\n                          {doc.status}\n                        </Chip>\n                        {doc.version > 1 && (\n                          <Chip size=\"sm\" variant=\"flat\" color=\"default\">\n                            v{doc.version}\n                          </Chip>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {doc.category} • {formatFileSize(doc.fileSize || 0)} • Uploaded{' '}\n                        {new Date(doc.uploadedDate || '').toLocaleDateString()}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>Due: {new Date(doc.dueDate).toLocaleDateString()}</span>\n                        <span>•</span>\n                        <span>Required by: {doc.requiredBy}</span>\n                        {doc.signatures.length > 0 && (\n                          <>\n                            <span>•</span>\n                            <span>{doc.signatures.length} signature(s)</span>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onPress={() => setSelectedDocument(doc)}\n                      startContent={<Eye className=\"w-4 h-4\" />}\n                    >\n                      View\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onPress={() => handleDownload(doc)}\n                      startContent={<Download className=\"w-4 h-4\" />}\n                    >\n                      Download\n                    </Button>\n                    <Button size=\"sm\" variant=\"secondary\" isIconOnly>\n                      <MoreHorizontal className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Signatures */}\n                {doc.signatures.length > 0 && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <h5 className=\"font-medium text-gray-900 mb-2\">Signatures</h5>\n                    <div className=\"space-y-2\">\n                      {doc.signatures.map(signature => (\n                        <div\n                          key={signature.id}\n                          className=\"flex items-center gap-3 p-2 bg-green-50 rounded-lg\"\n                        >\n                          <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-4 h-4 text-green-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {signature.signatoryName}\n                            </p>\n                            <p className=\"text-xs text-gray-600\">\n                              Signed {new Date(signature.signedDate).toLocaleString()} •\n                              {signature.signatureMethod} • {signature.location}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Comments */}\n                {doc.comments.length > 0 && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <h5 className=\"font-medium text-gray-900 mb-2\">Comments</h5>\n                    <div className=\"space-y-2\">\n                      {doc.comments.map(comment => (\n                        <div\n                          key={comment.id}\n                          className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\"\n                        >\n                          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-4 h-4 text-gray-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-gray-900\">{comment.content}</p>\n                            <p className=\"text-xs text-gray-600 mt-1\">\n                              by {comment.authorName} •{' '}\n                              {new Date(comment.timestamp).toLocaleString()}\n                              {comment.isResolved && (\n                                <span className=\"ml-2 text-green-600\">• Resolved</span>\n                              )}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Document Details Modal */}\n      {selectedDocument && (\n        <Modal isOpen={!!selectedDocument} onClose={() => setSelectedDocument(null)} size=\"2xl\">\n          <ModalContent>\n            <ModalHeader>\n              <div className=\"flex items-center justify-between w-full\">\n                <h3 className=\"text-lg font-semibold\">{selectedDocument.name}</h3>\n                <Button variant=\"secondary\" isIconOnly onPress={() => setSelectedDocument(null)}>\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Document Information</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Type:</span>\n                        <span className=\"font-medium capitalize\">{selectedDocument.type}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Category:</span>\n                        <span className=\"font-medium\">{selectedDocument.category}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Status:</span>\n                        <span className=\"font-medium capitalize\">{selectedDocument.status}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Size:</span>\n                        <span className=\"font-medium\">\n                          {formatFileSize(selectedDocument.fileSize || 0)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Version:</span>\n                        <span className=\"font-medium\">{selectedDocument.version}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Timeline</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Uploaded:</span>\n                        <span className=\"font-medium\">\n                          {new Date(selectedDocument.uploadedDate || '').toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Due Date:</span>\n                        <span className=\"font-medium\">\n                          {new Date(selectedDocument.dueDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Required by:</span>\n                        <span className=\"font-medium\">{selectedDocument.requiredBy}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Signatures */}\n                {selectedDocument.signatures.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Signatures</h4>\n                    <div className=\"space-y-3\">\n                      {selectedDocument.signatures.map(signature => (\n                        <div\n                          key={signature.id}\n                          className=\"flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\"\n                        >\n                          <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-5 h-5 text-green-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-gray-900\">{signature.signatoryName}</p>\n                            <p className=\"text-sm text-gray-600\">\n                              {new Date(signature.signedDate).toLocaleString()} •\n                              {signature.signatureMethod} • {signature.location}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Comments */}\n                {selectedDocument.comments.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Comments</h4>\n                    <div className=\"space-y-3\">\n                      {selectedDocument.comments.map(comment => (\n                        <div\n                          key={comment.id}\n                          className=\"flex items-start gap-3 p-3 bg-gray-50 border border-gray-200 rounded-lg\"\n                        >\n                          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-4 h-4 text-gray-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-gray-900\">{comment.content}</p>\n                            <p className=\"text-xs text-gray-600 mt-1\">\n                              by {comment.authorName} •{' '}\n                              {new Date(comment.timestamp).toLocaleString()}\n                              {comment.isResolved && (\n                                <span className=\"ml-2 text-green-600\">• Resolved</span>\n                              )}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </ModalBody>\n            <ModalFooter>\n              <Button variant=\"secondary\" onPress={() => setSelectedDocument(null)}>\n                Close\n              </Button>\n              <Button\n                variant=\"primary\"\n                onPress={() => handleDownload(selectedDocument)}\n                startContent={<Download className=\"w-4 h-4\" />}\n              >\n                Download\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      )}\n\n      {/* Upload Modal */}\n      <Modal isOpen={isUploadModalOpen} onClose={() => setIsUploadModalOpen(false)} size=\"lg\">\n        <ModalContent>\n          <ModalHeader>\n            <div className=\"flex items-center justify-between w-full\">\n              <h3 className=\"text-lg font-semibold\">Upload Document</h3>\n              <Button variant=\"secondary\" isIconOnly onPress={() => setIsUploadModalOpen(false)}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"space-y-4\">\n              <CustomFileInput\n                label=\"Select Document\"\n                accept=\".pdf,.doc,.docx,.xls,.xlsx,.txt\"\n                onChange={file => {\n                  if (file) {\n                    // Handle file upload\n                  }\n                }}\n                onBlur={() => {}}\n                name=\"document\"\n              />\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Document Type\n                </label>\n                <select className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\">\n                  <option value=\"legal\">Legal</option>\n                  <option value=\"financial\">Financial</option>\n                  <option value=\"operational\">Operational</option>\n                  <option value=\"regulatory\">Regulatory</option>\n                  <option value=\"closing\">Closing</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Category</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"e.g., Purchase Agreement, Financial Statements\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Required by</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"e.g., lawyer-1, buyer-1\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Due Date</label>\n                <input\n                  type=\"date\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"secondary\" onPress={() => setIsUploadModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              onPress={() => {\n                // Handle upload\n                setIsUploadModalOpen(false);\n              }}\n            >\n              Upload Document\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n\nexport { DocumentManagement };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/PaymentProcessing.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransaction'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransaction, transactionId]","fix":{"range":[1318,1333],"text":"[loadTransaction, transactionId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4613,4664],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5575,5626],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":692,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":692,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26883,26886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26883,26886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Payment Processing\n * Location: src/shared/components/transaction-completion/PaymentProcessing.tsx\n * Purpose: Manage transaction payments and escrow\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { CustomNumberInputField } from '@/shared/components/forms';\nimport { Transaction, TransactionPayment } from '@/shared/types/transaction-completion';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Chip,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n} from '@heroui/react';\nimport { AlertTriangle, CheckCircle, Clock, DollarSign, Eye, Lock, X } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface PaymentProcessingProps {\n  transactionId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst PaymentProcessing: React.FC<PaymentProcessingProps> = ({\n  transactionId,\n  userRole,\n  userId,\n}) => {\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedPayment, setSelectedPayment] = useState<TransactionPayment | null>(null);\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);\n  const [paymentData, setPaymentData] = useState<Partial<TransactionPayment>>({});\n\n  useEffect(() => {\n    loadTransaction();\n  }, [transactionId]);\n\n  const loadTransaction = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await transactionService.getTransaction(transactionId);\n      // setTransaction(response.data);\n\n      // Mock data for now\n      const mockTransaction: Transaction = {\n        id: transactionId,\n        offerId: 'offer-1',\n        listingId: 'listing-1',\n        buyerId: 'buyer-1',\n        sellerId: 'seller-1',\n        status: 'in_progress',\n        type: 'asset_purchase',\n        totalValue: 875000,\n        currency: 'EUR',\n        paymentStructure: {\n          type: 'mixed',\n          cashAmount: 600000,\n          financedAmount: 275000,\n        },\n        closingDate: '2024-03-15',\n        createdDate: '2024-01-15T10:30:00Z',\n        lastUpdated: '2024-01-20T14:30:00Z',\n        keyDates: [],\n        parties: [],\n        documents: [],\n        closingChecklist: [],\n        payments: [\n          {\n            id: 'payment-1',\n            type: 'down_payment',\n            amount: 100000,\n            currency: 'EUR',\n            dueDate: '2024-02-01',\n            paidDate: '2024-01-30',\n            status: 'paid',\n            paymentMethod: 'wire_transfer',\n            reference: 'TXN-001',\n            fromParty: 'buyer-1',\n            toParty: 'seller-1',\n            description: 'Initial down payment',\n            confirmationNumber: 'CONF-001',\n            bankDetails: {\n              bankName: 'First National Bank',\n              accountNumber: '****1234',\n              routingNumber: '123456789',\n              swiftCode: 'FNBKUS33',\n              accountHolder: 'Jane Buyer',\n            },\n          },\n          {\n            id: 'payment-2',\n            type: 'closing_payment',\n            amount: 500000,\n            currency: 'EUR',\n            dueDate: '2024-03-15',\n            status: 'pending',\n            paymentMethod: 'wire_transfer',\n            fromParty: 'buyer-1',\n            toParty: 'seller-1',\n            description: 'Main closing payment',\n          },\n          {\n            id: 'payment-3',\n            type: 'financing_payment',\n            amount: 275000,\n            currency: 'EUR',\n            dueDate: '2024-03-15',\n            status: 'pending',\n            paymentMethod: 'wire_transfer',\n            fromParty: 'bank-1',\n            toParty: 'seller-1',\n            description: 'Financed portion',\n          },\n        ],\n        postClosingItems: [],\n        communications: [],\n        version: 1,\n        createdBy: 'buyer-1',\n        requiresApproval: false,\n        approvals: [],\n        escrowDetails: {\n          escrowAgent: 'Escrow Services Inc.',\n          escrowAccount: 'ESC-001',\n          escrowAmount: 100000,\n          releaseConditions: [\n            {\n              id: 'condition-1',\n              description: 'All closing documents signed',\n              status: 'pending',\n              requiredBy: 'lawyer-1',\n            },\n            {\n              id: 'condition-2',\n              description: 'Asset transfer completed',\n              status: 'pending',\n              requiredBy: 'buyer-1',\n            },\n          ],\n          status: 'active',\n        },\n      };\n\n      setTransaction(mockTransaction);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processPayment = async (payment: TransactionPayment) => {\n    try {\n      // TODO: Replace with actual API call\n      // await transactionService.processPayment(payment.id, paymentData);\n\n      // Mock payment processing\n      setTransaction(prev => {\n        if (!prev) return prev;\n\n        const updatedPayments = prev.payments.map(p =>\n          p.id === payment.id\n            ? {\n                ...p,\n                status: 'paid' as const,\n                paidDate: new Date().toISOString(),\n                confirmationNumber: paymentData.confirmationNumber || `CONF-${Date.now()}`,\n                bankDetails: paymentData.bankDetails,\n              }\n            : p\n        );\n\n        return { ...prev, payments: updatedPayments };\n      });\n\n      setIsPaymentModalOpen(false);\n      setPaymentData({});\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'success';\n      case 'pending':\n        return 'warning';\n      case 'overdue':\n        return 'danger';\n      case 'cancelled':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'pending':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'overdue':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'cancelled':\n        return <X className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getPaymentTypeColor = (type: string) => {\n    switch (type) {\n      case 'down_payment':\n        return 'text-blue-600 bg-blue-100';\n      case 'closing_payment':\n        return 'text-green-600 bg-green-100';\n      case 'financing_payment':\n        return 'text-purple-600 bg-purple-100';\n      case 'earnout_payment':\n        return 'text-orange-600 bg-orange-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const formatPaymentType = (type: string) => {\n    return type.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading payments...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"text-center py-8\">\n        <DollarSign className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No transaction found</h3>\n        <p className=\"text-gray-600\">Unable to load payment information.</p>\n      </div>\n    );\n  }\n\n  const paymentStats = {\n    total: transaction.payments.length,\n    paid: transaction.payments.filter(p => p.status === 'paid').length,\n    pending: transaction.payments.filter(p => p.status === 'pending').length,\n    overdue: transaction.payments.filter(p => p.status === 'overdue').length,\n  };\n\n  const totalPaid = transaction.payments\n    .filter(p => p.status === 'paid')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const totalPending = transaction.payments\n    .filter(p => p.status === 'pending')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Payment Processing</h3>\n          <p className=\"text-sm text-gray-600\">Manage transaction payments and escrow</p>\n        </div>\n      </div>\n\n      {/* Payment Summary */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            Payment Summary\n          </h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary-600 mb-1\">\n                {transaction.currency} {transaction.totalValue.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Value</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-1\">\n                {transaction.currency} {totalPaid.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Paid</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-1\">\n                {transaction.currency} {totalPending.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n                {paymentStats.paid}/{paymentStats.total}\n              </div>\n              <div className=\"text-sm text-gray-600\">Payments</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Escrow Information */}\n      {transaction.escrowDetails && (\n        <Card>\n          <CardHeader>\n            <h4 className=\"text-md font-semibold flex items-center gap-2\">\n              <Lock className=\"w-5 h-5\" />\n              Escrow Information\n            </h4>\n          </CardHeader>\n          <CardBody>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h5 className=\"font-medium text-gray-900 mb-3\">Escrow Details</h5>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Agent:</span>\n                    <span className=\"font-medium\">{transaction.escrowDetails.escrowAgent}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Account:</span>\n                    <span className=\"font-medium\">{transaction.escrowDetails.escrowAccount}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Amount:</span>\n                    <span className=\"font-medium\">\n                      {transaction.currency}{' '}\n                      {transaction.escrowDetails.escrowAmount.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Status:</span>\n                    <Chip\n                      size=\"sm\"\n                      color={transaction.escrowDetails.status === 'active' ? 'warning' : 'success'}\n                      variant=\"flat\"\n                    >\n                      {transaction.escrowDetails.status}\n                    </Chip>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h5 className=\"font-medium text-gray-900 mb-3\">Release Conditions</h5>\n                <div className=\"space-y-2\">\n                  {transaction.escrowDetails.releaseConditions.map(condition => (\n                    <div\n                      key={condition.id}\n                      className=\"flex items-center gap-3 p-2 bg-gray-50 rounded-lg\"\n                    >\n                      <div\n                        className={`w-2 h-2 rounded-full ${\n                          condition.status === 'satisfied'\n                            ? 'bg-green-500'\n                            : condition.status === 'pending'\n                              ? 'bg-yellow-500'\n                              : 'bg-red-500'\n                        }`}\n                      />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-900\">{condition.description}</p>\n                        <p className=\"text-xs text-gray-600\">Required by: {condition.requiredBy}</p>\n                      </div>\n                      <Chip\n                        size=\"sm\"\n                        color={\n                          condition.status === 'satisfied'\n                            ? 'success'\n                            : condition.status === 'pending'\n                              ? 'warning'\n                              : 'danger'\n                        }\n                        variant=\"flat\"\n                      >\n                        {condition.status}\n                      </Chip>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Payments List */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Payment Schedule</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            {transaction.payments.map(payment => (\n              <div\n                key={payment.id}\n                className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\"\n              >\n                <div className=\"flex items-center gap-4\">\n                  <div className={`p-3 rounded-lg ${getPaymentTypeColor(payment.type)}`}>\n                    <DollarSign className=\"w-5 h-5\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-1\">\n                      <h5 className=\"text-lg font-semibold text-gray-900\">\n                        {transaction.currency} {payment.amount.toLocaleString()}\n                      </h5>\n                      <Chip\n                        size=\"sm\"\n                        color={getStatusColor(payment.status)}\n                        variant=\"flat\"\n                        startContent={getStatusIcon(payment.status)}\n                      >\n                        {payment.status}\n                      </Chip>\n                      <Chip size=\"sm\" variant=\"flat\" color=\"default\">\n                        {formatPaymentType(payment.type)}\n                      </Chip>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">{payment.description}</p>\n                    <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                      <span>Due: {new Date(payment.dueDate).toLocaleDateString()}</span>\n                      <span>•</span>\n                      <span>From: {payment.fromParty}</span>\n                      <span>•</span>\n                      <span>To: {payment.toParty}</span>\n                      {payment.paidDate && (\n                        <>\n                          <span>•</span>\n                          <span>Paid: {new Date(payment.paidDate).toLocaleDateString()}</span>\n                        </>\n                      )}\n                    </div>\n                    {payment.confirmationNumber && (\n                      <div className=\"mt-2\">\n                        <span className=\"text-xs text-gray-500\">Confirmation: </span>\n                        <span className=\"text-xs font-medium text-gray-900\">\n                          {payment.confirmationNumber}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    onPress={() => setSelectedPayment(payment)}\n                    startContent={<Eye className=\"w-4 h-4\" />}\n                  >\n                    View Details\n                  </Button>\n                  {payment.status === 'pending' &&\n                    userRole === 'buyer' &&\n                    payment.fromParty === 'buyer-1' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"primary\"\n                        onPress={() => {\n                          setSelectedPayment(payment);\n                          setIsPaymentModalOpen(true);\n                        }}\n                      >\n                        Process Payment\n                      </Button>\n                    )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Payment Details Modal */}\n      {selectedPayment && (\n        <Modal isOpen={!!selectedPayment} onClose={() => setSelectedPayment(null)} size=\"lg\">\n          <ModalContent>\n            <ModalHeader>\n              <div className=\"flex items-center justify-between w-full\">\n                <h3 className=\"text-lg font-semibold\">Payment Details</h3>\n                <Button variant=\"secondary\" isIconOnly onPress={() => setSelectedPayment(null)}>\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Payment Information</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Amount:</span>\n                        <span className=\"font-medium\">\n                          {selectedPayment.currency} {selectedPayment.amount.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Type:</span>\n                        <span className=\"font-medium\">\n                          {formatPaymentType(selectedPayment.type)}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Status:</span>\n                        <Chip\n                          size=\"sm\"\n                          color={getStatusColor(selectedPayment.status)}\n                          variant=\"flat\"\n                        >\n                          {selectedPayment.status}\n                        </Chip>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Method:</span>\n                        <span className=\"font-medium capitalize\">\n                          {selectedPayment.paymentMethod.replace('_', ' ')}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Timeline</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Due Date:</span>\n                        <span className=\"font-medium\">\n                          {new Date(selectedPayment.dueDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {selectedPayment.paidDate && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Paid Date:</span>\n                          <span className=\"font-medium\">\n                            {new Date(selectedPayment.paidDate).toLocaleDateString()}\n                          </span>\n                        </div>\n                      )}\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">From:</span>\n                        <span className=\"font-medium\">{selectedPayment.fromParty}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">To:</span>\n                        <span className=\"font-medium\">{selectedPayment.toParty}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {selectedPayment.description && (\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Description</h4>\n                    <p className=\"text-sm text-gray-700 bg-gray-50 p-3 rounded-lg\">\n                      {selectedPayment.description}\n                    </p>\n                  </div>\n                )}\n\n                {selectedPayment.bankDetails && (\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Bank Details</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Bank:</span>\n                          <span className=\"font-medium\">\n                            {selectedPayment.bankDetails.bankName}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Account:</span>\n                          <span className=\"font-medium\">\n                            {selectedPayment.bankDetails.accountNumber}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Routing:</span>\n                          <span className=\"font-medium\">\n                            {selectedPayment.bankDetails.routingNumber}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        {selectedPayment.bankDetails.swiftCode && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">SWIFT:</span>\n                            <span className=\"font-medium\">\n                              {selectedPayment.bankDetails.swiftCode}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Holder:</span>\n                          <span className=\"font-medium\">\n                            {selectedPayment.bankDetails.accountHolder}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {selectedPayment.confirmationNumber && (\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Confirmation</h4>\n                    <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                      <p className=\"text-sm text-green-800\">\n                        <strong>Confirmation Number:</strong> {selectedPayment.confirmationNumber}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </ModalBody>\n            <ModalFooter>\n              <Button variant=\"secondary\" onPress={() => setSelectedPayment(null)}>\n                Close\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      )}\n\n      {/* Process Payment Modal */}\n      <Modal isOpen={isPaymentModalOpen} onClose={() => setIsPaymentModalOpen(false)} size=\"lg\">\n        <ModalContent>\n          <ModalHeader>\n            <div className=\"flex items-center justify-between w-full\">\n              <h3 className=\"text-lg font-semibold\">Process Payment</h3>\n              <Button variant=\"secondary\" isIconOnly onPress={() => setIsPaymentModalOpen(false)}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </ModalHeader>\n          <ModalBody>\n            {selectedPayment && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Payment Details</h4>\n                  <p className=\"text-blue-800\">\n                    {selectedPayment.currency} {selectedPayment.amount.toLocaleString()} •\n                    {formatPaymentType(selectedPayment.type)} • Due:{' '}\n                    {new Date(selectedPayment.dueDate).toLocaleDateString()}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <CustomNumberInputField\n                    label=\"Payment Amount\"\n                    placeholder={selectedPayment.amount.toString()}\n                    value={paymentData.amount?.toString() || selectedPayment.amount.toString()}\n                    onChange={e =>\n                      setPaymentData(prev => ({\n                        ...prev,\n                        amount: parseFloat(e.target.value) || selectedPayment.amount,\n                      }))\n                    }\n                    onBlur={() => {}}\n                    name=\"amount\"\n                  />\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Payment Method\n                    </label>\n                    <select\n                      value={paymentData.paymentMethod || selectedPayment.paymentMethod}\n                      onChange={e =>\n                        setPaymentData(prev => ({\n                          ...prev,\n                          paymentMethod: e.target.value as any,\n                        }))\n                      }\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    >\n                      <option value=\"wire_transfer\">Wire Transfer</option>\n                      <option value=\"ach\">ACH Transfer</option>\n                      <option value=\"check\">Check</option>\n                      <option value=\"escrow\">Escrow</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Confirmation Number\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter confirmation number\"\n                    value={paymentData.confirmationNumber || ''}\n                    onChange={e =>\n                      setPaymentData(prev => ({\n                        ...prev,\n                        confirmationNumber: e.target.value,\n                      }))\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Reference</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter payment reference\"\n                    value={paymentData.reference || ''}\n                    onChange={e =>\n                      setPaymentData(prev => ({\n                        ...prev,\n                        reference: e.target.value,\n                      }))\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                  />\n                </div>\n              </div>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"secondary\" onPress={() => setIsPaymentModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              onPress={() => selectedPayment && processPayment(selectedPayment)}\n              isDisabled={!paymentData.confirmationNumber}\n            >\n              Process Payment\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n\nexport { PaymentProcessing };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/PostClosingManagement.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransaction'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransaction, transactionId]","fix":{"range":[1084,1099],"text":"[loadTransaction, transactionId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5733,5784],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6842,6893],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Post Closing Management\n * Location: src/shared/components/transaction-completion/PostClosingManagement.tsx\n * Purpose: Manage post-closing activities and handover\n */\n\nimport { CustomCheckbox } from '@/shared/components/forms';\nimport { PostClosingItem, Transaction } from '@/shared/types/transaction-completion';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  CheckCircle,\n  Clock,\n  FileText,\n  MessageSquare,\n  Plus,\n  TrendingUp,\n  Users,\n  X,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface PostClosingManagementProps {\n  transactionId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst PostClosingManagement: React.FC<PostClosingManagementProps> = ({\n  transactionId,\n  userRole,\n  userId,\n}) => {\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    loadTransaction();\n  }, [transactionId]);\n\n  const loadTransaction = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await transactionService.getTransaction(transactionId);\n      // setTransaction(response.data);\n\n      // Mock data for now\n      const mockTransaction: Transaction = {\n        id: transactionId,\n        offerId: 'offer-1',\n        listingId: 'listing-1',\n        buyerId: 'buyer-1',\n        sellerId: 'seller-1',\n        status: 'in_progress',\n        type: 'asset_purchase',\n        totalValue: 875000,\n        currency: 'EUR',\n        paymentStructure: {\n          type: 'mixed',\n          cashAmount: 600000,\n          financedAmount: 275000,\n        },\n        closingDate: '2024-03-15',\n        createdDate: '2024-01-15T10:30:00Z',\n        lastUpdated: '2024-01-20T14:30:00Z',\n        keyDates: [],\n        parties: [],\n        documents: [],\n        closingChecklist: [],\n        payments: [],\n        postClosingItems: [\n          {\n            id: 'post-1',\n            title: 'Employee Transition',\n            description: 'Facilitate smooth transition of key employees to new ownership',\n            type: 'transition',\n            status: 'pending',\n            priority: 'high',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-03-30',\n            responsibleParty: 'both',\n            estimatedDuration: 30,\n            dependencies: [],\n            deliverables: ['Employee contracts', 'Benefits transfer', 'Training schedule'],\n            comments: [],\n          },\n          {\n            id: 'post-2',\n            title: 'System Integration',\n            description: \"Integrate business systems and processes with buyer's infrastructure\",\n            type: 'integration',\n            status: 'pending',\n            priority: 'high',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-04-15',\n            responsibleParty: 'buyer',\n            estimatedDuration: 45,\n            dependencies: ['post-1'],\n            deliverables: ['System migration', 'Data transfer', 'User training'],\n            comments: [],\n          },\n          {\n            id: 'post-3',\n            title: 'Customer Communication',\n            description: 'Notify customers of ownership change and maintain relationships',\n            type: 'transition',\n            status: 'pending',\n            priority: 'medium',\n            assignedTo: 'seller-1',\n            dueDate: '2024-03-25',\n            responsibleParty: 'seller',\n            estimatedDuration: 14,\n            dependencies: [],\n            deliverables: ['Customer letters', 'Contact updates', 'Service continuity plan'],\n            comments: [],\n          },\n          {\n            id: 'post-4',\n            title: 'Regulatory Filings',\n            description: 'Complete all required regulatory filings and notifications',\n            type: 'compliance',\n            status: 'pending',\n            priority: 'high',\n            assignedTo: 'lawyer-1',\n            dueDate: '2024-04-01',\n            responsibleParty: 'buyer',\n            estimatedDuration: 7,\n            dependencies: [],\n            deliverables: ['Regulatory forms', 'License transfers', 'Compliance documentation'],\n            comments: [],\n          },\n          {\n            id: 'post-5',\n            title: 'Financial Reconciliation',\n            description: 'Complete final financial reconciliation and reporting',\n            type: 'reporting',\n            status: 'pending',\n            priority: 'medium',\n            assignedTo: 'accountant-1',\n            dueDate: '2024-04-30',\n            responsibleParty: 'both',\n            estimatedDuration: 21,\n            dependencies: ['post-2'],\n            deliverables: ['Final financial statements', 'Tax filings', 'Audit reports'],\n            comments: [],\n          },\n          {\n            id: 'post-6',\n            title: 'Vendor Transition',\n            description: 'Transfer vendor relationships and contracts to new ownership',\n            type: 'transition',\n            status: 'pending',\n            priority: 'medium',\n            assignedTo: 'buyer-1',\n            dueDate: '2024-04-10',\n            responsibleParty: 'buyer',\n            estimatedDuration: 21,\n            dependencies: ['post-1'],\n            deliverables: ['Vendor contracts', 'Payment terms', 'Service agreements'],\n            comments: [],\n          },\n        ],\n        communications: [],\n        version: 1,\n        createdBy: 'buyer-1',\n        requiresApproval: false,\n        approvals: [],\n      };\n\n      setTransaction(mockTransaction);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleCategory = (category: string) => {\n    setExpandedCategories(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(category)) {\n        newSet.delete(category);\n      } else {\n        newSet.add(category);\n      }\n      return newSet;\n    });\n  };\n\n  const updatePostClosingItem = async (itemId: string, status: PostClosingItem['status']) => {\n    try {\n      // TODO: Replace with actual API call\n      // await transactionService.updatePostClosingItem(transactionId, itemId, status);\n\n      // Update local state\n      setTransaction(prev => {\n        if (!prev) return prev;\n\n        const updatedItems = prev.postClosingItems.map(item =>\n          item.id === itemId\n            ? {\n                ...item,\n                status,\n                completedDate: status === 'completed' ? new Date().toISOString() : undefined,\n              }\n            : item\n        );\n\n        return { ...prev, postClosingItems: updatedItems };\n      });\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'in_progress':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      case 'cancelled':\n        return <X className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'cancelled':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return 'danger';\n      case 'high':\n        return 'warning';\n      case 'medium':\n        return 'primary';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'transition':\n        return <Users className=\"w-5 h-5\" />;\n      case 'integration':\n        return <TrendingUp className=\"w-5 h-5\" />;\n      case 'compliance':\n        return <FileText className=\"w-5 h-5\" />;\n      case 'reporting':\n        return <MessageSquare className=\"w-5 h-5\" />;\n      default:\n        return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'transition':\n        return 'text-blue-600 bg-blue-100';\n      case 'integration':\n        return 'text-green-600 bg-green-100';\n      case 'compliance':\n        return 'text-orange-600 bg-orange-100';\n      case 'reporting':\n        return 'text-purple-600 bg-purple-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading post-closing items...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"text-center py-8\">\n        <MessageSquare className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No transaction found</h3>\n        <p className=\"text-gray-600\">Unable to load post-closing information.</p>\n      </div>\n    );\n  }\n\n  // Group post-closing items by type\n  const categories = transaction.postClosingItems.reduce(\n    (acc, item) => {\n      if (!acc[item.type]) {\n        acc[item.type] = [];\n      }\n      acc[item.type].push(item);\n      return acc;\n    },\n    {} as Record<string, PostClosingItem[]>\n  );\n\n  const categoryProgress = Object.entries(categories).map(([category, items]) => {\n    const completed = items.filter(item => item.status === 'completed').length;\n    const total = items.length;\n    const progress = total > 0 ? (completed / total) * 100 : 0;\n    return { category, progress, completed, total };\n  });\n\n  const overallProgress =\n    transaction.postClosingItems.length > 0\n      ? (transaction.postClosingItems.filter(item => item.status === 'completed').length /\n          transaction.postClosingItems.length) *\n        100\n      : 0;\n\n  const completedItems = transaction.postClosingItems.filter(\n    item => item.status === 'completed'\n  ).length;\n  const inProgressItems = transaction.postClosingItems.filter(\n    item => item.status === 'in_progress'\n  ).length;\n  const pendingItems = transaction.postClosingItems.filter(\n    item => item.status === 'pending'\n  ).length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Post-Closing Management</h3>\n          <p className=\"text-sm text-gray-600\">Manage post-closing activities and handover</p>\n        </div>\n      </div>\n\n      {/* Overall Progress */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <h4 className=\"text-md font-semibold\">Post-Closing Progress</h4>\n            <Chip color=\"primary\" variant=\"flat\">\n              {overallProgress.toFixed(0)}% Complete\n            </Chip>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <Progress value={overallProgress} className=\"mb-4\" color=\"primary\" size=\"lg\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">{completedItems}</div>\n              <div className=\"text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">{inProgressItems}</div>\n              <div className=\"text-gray-600\">In Progress</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-900\">{pendingItems}</div>\n              <div className=\"text-gray-600\">Pending</div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Category Progress */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Progress by Category</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {categoryProgress.map(({ category, progress, completed, total }) => (\n              <div key={category} className=\"p-4 border border-gray-200 rounded-lg\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <div className={`p-2 rounded-lg ${getTypeColor(category)}`}>\n                    {getTypeIcon(category)}\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-gray-900 capitalize\">{category}</h5>\n                    <p className=\"text-sm text-gray-600\">\n                      {completed}/{total} items\n                    </p>\n                  </div>\n                </div>\n                <Progress value={progress} size=\"sm\" color=\"primary\" />\n              </div>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Post-Closing Items by Category */}\n      <div className=\"space-y-4\">\n        {Object.entries(categories).map(([category, items]) => {\n          const isExpanded = expandedCategories.has(category);\n          const completedItems = items.filter(item => item.status === 'completed').length;\n          const totalItems = items.length;\n\n          return (\n            <Card key={category} className=\"border border-gray-200\">\n              <CardBody className=\"p-0\">\n                {/* Category Header */}\n                <button\n                  onClick={() => toggleCategory(category)}\n                  className=\"w-full p-6 text-left hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-200 focus:ring-inset\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className={`p-3 rounded-xl ${getTypeColor(category)}`}>\n                        {getTypeIcon(category)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 capitalize\">\n                            {category}\n                          </h3>\n                          <Chip size=\"sm\" color=\"primary\" variant=\"flat\">\n                            {completedItems}/{totalItems}\n                          </Chip>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-2\">\n                          {items.length} post-closing items\n                        </p>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"text-sm text-gray-500\">\n                            {completedItems}/{totalItems} completed\n                          </div>\n                          <div className=\"flex-1 max-w-32\">\n                            <Progress\n                              value={(completedItems / totalItems) * 100}\n                              size=\"sm\"\n                              color=\"primary\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex-shrink-0 ml-4\">\n                      {isExpanded ? (\n                        <X className=\"w-5 h-5 text-gray-400\" />\n                      ) : (\n                        <Plus className=\"w-5 h-5 text-gray-400\" />\n                      )}\n                    </div>\n                  </div>\n                </button>\n\n                {/* Category Items */}\n                {isExpanded && (\n                  <div className=\"px-6 pb-6 border-t border-gray-100\">\n                    <div className=\"pt-4 space-y-3\">\n                      {items.map(item => (\n                        <div\n                          key={item.id}\n                          className=\"flex items-start gap-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n                        >\n                          <div className=\"flex-shrink-0 mt-1\">{getStatusIcon(item.status)}</div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div>\n                                <h4 className=\"font-medium text-gray-900 mb-1\">{item.title}</h4>\n                                <p className=\"text-sm text-gray-600 mb-2\">{item.description}</p>\n                                <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                                  <span>Due: {new Date(item.dueDate).toLocaleDateString()}</span>\n                                  <span>•</span>\n                                  <span>Assigned to: {item.assignedTo}</span>\n                                  <span>•</span>\n                                  <span>Duration: {item.estimatedDuration} days</span>\n                                  <span>•</span>\n                                  <span>Responsible: {item.responsibleParty}</span>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Chip\n                                  size=\"sm\"\n                                  color={getPriorityColor(item.priority)}\n                                  variant=\"flat\"\n                                >\n                                  {item.priority}\n                                </Chip>\n                                <Chip size=\"sm\" color={getStatusColor(item.status)} variant=\"flat\">\n                                  {item.status.replace('_', ' ')}\n                                </Chip>\n                              </div>\n                            </div>\n\n                            {/* Dependencies */}\n                            {item.dependencies.length > 0 && (\n                              <div className=\"mb-2\">\n                                <p className=\"text-xs text-gray-500 mb-1\">Dependencies:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {item.dependencies.map(depId => (\n                                    <Chip key={depId} size=\"sm\" variant=\"flat\" color=\"default\">\n                                      {depId}\n                                    </Chip>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Deliverables */}\n                            {item.deliverables.length > 0 && (\n                              <div className=\"mb-2\">\n                                <p className=\"text-xs text-gray-500 mb-1\">Deliverables:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {item.deliverables.map((deliverable, index) => (\n                                    <Chip key={index} size=\"sm\" variant=\"flat\" color=\"primary\">\n                                      {deliverable}\n                                    </Chip>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Action Buttons */}\n                            {userRole === 'buyer' && item.assignedTo === 'buyer-1' && (\n                              <div className=\"flex items-center gap-2\">\n                                <CustomCheckbox\n                                  label=\"\"\n                                  checked={item.status === 'completed'}\n                                  onChange={() => {\n                                    updatePostClosingItem(\n                                      item.id,\n                                      item.status === 'completed' ? 'pending' : 'completed'\n                                    );\n                                  }}\n                                  name={`item-${item.id}`}\n                                />\n                                <span className=\"text-sm text-gray-600\">\n                                  Mark as {item.status === 'completed' ? 'pending' : 'completed'}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Post-Closing Summary */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Post-Closing Summary</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h5 className=\"font-medium text-gray-900 mb-3\">Key Activities</h5>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Items:</span>\n                  <span className=\"font-medium\">{transaction.postClosingItems.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Completed:</span>\n                  <span className=\"font-medium text-green-600\">{completedItems}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">In Progress:</span>\n                  <span className=\"font-medium text-yellow-600\">{inProgressItems}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Pending:</span>\n                  <span className=\"font-medium text-gray-600\">{pendingItems}</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <h5 className=\"font-medium text-gray-900 mb-3\">Timeline</h5>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Closing Date:</span>\n                  <span className=\"font-medium\">\n                    {new Date(transaction.closingDate).toLocaleDateString()}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Avg. Duration:</span>\n                  <span className=\"font-medium\">\n                    {Math.round(\n                      transaction.postClosingItems.reduce(\n                        (sum, item) => sum + item.estimatedDuration,\n                        0\n                      ) / transaction.postClosingItems.length\n                    )}{' '}\n                    days\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Latest Due Date:</span>\n                  <span className=\"font-medium\">\n                    {new Date(\n                      Math.max(\n                        ...transaction.postClosingItems.map(item =>\n                          new Date(item.dueDate).getTime()\n                        )\n                      )\n                    ).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport { PostClosingManagement };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/TransactionCompletionDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboard'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboard, transactionId]","fix":{"range":[1445,1460],"text":"[loadDashboard, transactionId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6361,6410],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Transaction Completion Dashboard\n * Location: src/shared/components/transaction-completion/TransactionCompletionDashboard.tsx\n * Purpose: Main dashboard for managing transaction completion and closing\n */\n\nimport { Button } from '@/shared/components/buttons';\nimport { TransactionDashboard } from '@/shared/types/transaction-completion';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport {\n  AlertTriangle,\n  Calendar,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  FileText,\n  MessageSquare,\n  TrendingUp,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { ClosingChecklist } from './ClosingChecklist';\nimport { DocumentManagement } from './DocumentManagement';\nimport { PaymentProcessing } from './PaymentProcessing';\nimport { PostClosingManagement } from './PostClosingManagement';\nimport { TransactionTimeline } from './TransactionTimeline';\n\ninterface TransactionCompletionDashboardProps {\n  transactionId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst TransactionCompletionDashboard: React.FC<TransactionCompletionDashboardProps> = ({\n  transactionId,\n  userRole,\n  userId,\n}) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [dashboard, setDashboard] = useState<TransactionDashboard | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadDashboard();\n  }, [transactionId]);\n\n  const loadDashboard = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await transactionService.getDashboard(transactionId);\n      // setDashboard(response.data);\n\n      // Mock data for now\n      const mockDashboard: TransactionDashboard = {\n        transaction: {\n          id: transactionId,\n          offerId: 'offer-1',\n          listingId: 'listing-1',\n          buyerId: 'buyer-1',\n          sellerId: 'seller-1',\n          status: 'in_progress',\n          type: 'asset_purchase',\n          totalValue: 875000,\n          currency: 'EUR',\n          paymentStructure: {\n            type: 'mixed',\n            cashAmount: 600000,\n            financedAmount: 275000,\n          },\n          closingDate: '2024-03-15',\n          createdDate: '2024-01-15T10:30:00Z',\n          lastUpdated: '2024-01-20T14:30:00Z',\n          keyDates: [\n            {\n              id: 'date-1',\n              name: 'Due Diligence Complete',\n              date: '2024-02-15',\n              type: 'milestone',\n              status: 'upcoming',\n              responsibleParty: 'buyer-1',\n              isCritical: true,\n            },\n            {\n              id: 'date-2',\n              name: 'Financing Approval',\n              date: '2024-02-28',\n              type: 'deadline',\n              status: 'upcoming',\n              responsibleParty: 'buyer-1',\n              isCritical: true,\n            },\n            {\n              id: 'date-3',\n              name: 'Closing Date',\n              date: '2024-03-15',\n              type: 'closing',\n              status: 'upcoming',\n              responsibleParty: 'both',\n              isCritical: true,\n            },\n          ],\n          parties: [],\n          documents: [],\n          closingChecklist: [],\n          payments: [],\n          postClosingItems: [],\n          communications: [],\n          version: 1,\n          createdBy: 'buyer-1',\n          requiresApproval: false,\n          approvals: [],\n        },\n        progress: {\n          overallProgress: 65,\n          categoryProgress: {\n            legal: 80,\n            financial: 60,\n            operational: 45,\n            regulatory: 70,\n            closing: 30,\n          },\n          tasksCompleted: 13,\n          tasksTotal: 20,\n          documentsCompleted: 8,\n          documentsTotal: 12,\n          paymentsCompleted: 1,\n          paymentsTotal: 3,\n          daysToClosing: 25,\n          onTrack: true,\n          riskLevel: 'medium',\n        },\n        upcomingDeadlines: [\n          {\n            id: 'deadline-1',\n            name: 'Due Diligence Complete',\n            date: '2024-02-15',\n            type: 'milestone',\n            status: 'upcoming',\n            responsibleParty: 'buyer-1',\n            isCritical: true,\n          },\n          {\n            id: 'deadline-2',\n            name: 'Financing Approval',\n            date: '2024-02-28',\n            type: 'deadline',\n            status: 'upcoming',\n            responsibleParty: 'buyer-1',\n            isCritical: true,\n          },\n        ],\n        recentActivity: [\n          {\n            id: 'activity-1',\n            type: 'document_uploaded',\n            description: 'Purchase agreement uploaded',\n            timestamp: '2024-01-20T10:30:00Z',\n            userId: 'lawyer-1',\n            userName: 'Legal Team',\n          },\n          {\n            id: 'activity-2',\n            type: 'task_completed',\n            description: 'Financial statements reviewed',\n            timestamp: '2024-01-19T15:45:00Z',\n            userId: 'buyer-1',\n            userName: 'Jane Buyer',\n          },\n        ],\n        teamStatus: [\n          {\n            userId: 'buyer-1',\n            name: 'Jane Buyer',\n            role: 'Buyer',\n            isOnline: true,\n            lastActive: '2024-01-20T14:30:00Z',\n            pendingTasks: 3,\n            completedTasks: 8,\n            overdueItems: 0,\n          },\n          {\n            userId: 'seller-1',\n            name: 'John Seller',\n            role: 'Seller',\n            isOnline: false,\n            lastActive: '2024-01-20T12:15:00Z',\n            pendingTasks: 2,\n            completedTasks: 5,\n            overdueItems: 1,\n          },\n        ],\n        financialSummary: {\n          totalValue: 875000,\n          paidAmount: 100000,\n          pendingAmount: 775000,\n          overdueAmount: 0,\n          nextPayment: {\n            id: 'payment-1',\n            type: 'down_payment',\n            amount: 200000,\n            currency: 'EUR',\n            dueDate: '2024-02-15',\n            status: 'pending',\n            paymentMethod: 'wire_transfer',\n            fromParty: 'buyer-1',\n            toParty: 'seller-1',\n            description: 'Down payment',\n          },\n          escrowAmount: 100000,\n        },\n      };\n\n      setDashboard(mockDashboard);\n    } catch (error) {\n      console.error('Error loading dashboard:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'closed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'ready_to_close':\n        return 'primary';\n      case 'cancelled':\n        return 'danger';\n      case 'disputed':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'closed':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'in_progress':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'ready_to_close':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'cancelled':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'disputed':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'low':\n        return 'success';\n      case 'medium':\n        return 'warning';\n      case 'high':\n        return 'danger';\n      case 'critical':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading transaction dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboard) {\n    return (\n      <div className=\"text-center py-8\">\n        <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Unable to load dashboard</h3>\n        <p className=\"text-gray-600 mb-4\">\n          There was an error loading the transaction completion dashboard.\n        </p>\n        <Button variant=\"primary\" onPress={loadDashboard}>\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  const { transaction, progress, upcomingDeadlines, recentActivity, teamStatus, financialSummary } =\n    dashboard;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Transaction Completion</h2>\n                <p className=\"text-gray-600\">\n                  {transaction.currency} {transaction.totalValue.toLocaleString()} • Closing:{' '}\n                  {new Date(transaction.closingDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Chip\n                variant=\"flat\"\n                color={getStatusColor(transaction.status)}\n                startContent={getStatusIcon(transaction.status)}\n              >\n                {transaction.status.replace('_', ' ')}\n              </Chip>\n              <Chip variant=\"flat\" color={getRiskColor(progress.riskLevel)}>\n                {progress.riskLevel} Risk\n              </Chip>\n              <Chip variant=\"flat\" color=\"primary\">\n                <Users className=\"w-3 h-3 mr-1\" />\n                {teamStatus.length} Team Members\n              </Chip>\n            </div>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <Progress value={progress.overallProgress} className=\"mb-4\" color=\"primary\" size=\"lg\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary-600 mb-1\">\n                  {progress.overallProgress}%\n                </div>\n                <div className=\"text-sm text-gray-600\">Overall Progress</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-600 mb-1\">\n                  {progress.tasksCompleted}/{progress.tasksTotal}\n                </div>\n                <div className=\"text-sm text-gray-600\">Tasks Completed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n                  {progress.documentsCompleted}/{progress.documentsTotal}\n                </div>\n                <div className=\"text-sm text-gray-600\">Documents</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-orange-600 mb-1\">\n                  {progress.daysToClosing}\n                </div>\n                <div className=\"text-sm text-gray-600\">Days to Closing</div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        {[\n          { id: 'overview', label: 'Overview', icon: <TrendingUp className=\"w-4 h-4\" /> },\n          {\n            id: 'checklist',\n            label: 'Closing Checklist',\n            icon: <CheckCircle className=\"w-4 h-4\" />,\n          },\n          { id: 'documents', label: 'Documents', icon: <FileText className=\"w-4 h-4\" /> },\n          { id: 'payments', label: 'Payments', icon: <DollarSign className=\"w-4 h-4\" /> },\n          { id: 'timeline', label: 'Timeline', icon: <Calendar className=\"w-4 h-4\" /> },\n          {\n            id: 'post-closing',\n            label: 'Post-Closing',\n            icon: <MessageSquare className=\"w-4 h-4\" />,\n          },\n        ].map(tab => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n              activeTab === tab.id\n                ? 'bg-white text-primary-600 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n            }`}\n          >\n            {tab.icon}\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"mt-6\">\n        {activeTab === 'overview' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Upcoming Deadlines */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Upcoming Deadlines\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {upcomingDeadlines.map(deadline => (\n                    <div\n                      key={deadline.id}\n                      className={`p-3 rounded-lg border ${\n                        deadline.isCritical\n                          ? 'border-red-200 bg-red-50'\n                          : 'border-gray-200 bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{deadline.name}</h4>\n                          <p className=\"text-sm text-gray-600\">\n                            Due: {new Date(deadline.date).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {deadline.isCritical && (\n                            <Chip size=\"sm\" color=\"danger\" variant=\"flat\">\n                              Critical\n                            </Chip>\n                          )}\n                          <Chip size=\"sm\" color=\"primary\" variant=\"flat\">\n                            {deadline.type}\n                          </Chip>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Financial Summary */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <DollarSign className=\"w-5 h-5\" />\n                  Financial Summary\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {transaction.currency} {financialSummary.paidAmount.toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Paid</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {transaction.currency} {financialSummary.pendingAmount.toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Pending</div>\n                    </div>\n                  </div>\n                  {financialSummary.nextPayment && (\n                    <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <h5 className=\"font-medium text-blue-900 mb-1\">Next Payment</h5>\n                      <p className=\"text-sm text-blue-800\">\n                        {transaction.currency}{' '}\n                        {financialSummary.nextPayment.amount.toLocaleString()} due{' '}\n                        {new Date(financialSummary.nextPayment.dueDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                  )}\n                  {financialSummary.escrowAmount && (\n                    <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                      <h5 className=\"font-medium text-green-900 mb-1\">Escrow</h5>\n                      <p className=\"text-sm text-green-800\">\n                        {transaction.currency} {financialSummary.escrowAmount.toLocaleString()} in\n                        escrow\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Team Status */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Team Status\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {teamStatus.map(member => (\n                    <div\n                      key={member.userId}\n                      className=\"flex items-center justify-between p-3 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className={`w-3 h-3 rounded-full ${\n                            member.isOnline ? 'bg-green-500' : 'bg-gray-400'\n                          }`}\n                        />\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{member.name}</h4>\n                          <p className=\"text-sm text-gray-600\">{member.role}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {member.completedTasks} completed\n                        </div>\n                        <div className=\"text-xs text-gray-600\">\n                          {member.pendingTasks} pending\n                          {member.overdueItems > 0 && (\n                            <span className=\"text-red-600 ml-1\">\n                              • {member.overdueItems} overdue\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  Recent Activity\n                </h3>\n              </CardHeader>\n              <CardBody>\n                <div className=\"space-y-3\">\n                  {recentActivity.map(activity => (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 p-3 border border-gray-200 rounded-lg\"\n                    >\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                        <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900\">{activity.description}</p>\n                        <p className=\"text-xs text-gray-600\">\n                          by {activity.userName} • {new Date(activity.timestamp).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'checklist' && (\n          <ClosingChecklist transactionId={transactionId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'documents' && (\n          <DocumentManagement transactionId={transactionId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'payments' && (\n          <PaymentProcessing transactionId={transactionId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'timeline' && (\n          <TransactionTimeline transactionId={transactionId} userRole={userRole} userId={userId} />\n        )}\n\n        {activeTab === 'post-closing' && (\n          <PostClosingManagement\n            transactionId={transactionId}\n            userRole={userRole}\n            userId={userId}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionCompletionDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/TransactionTimeline.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userRole' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransaction'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransaction, transactionId]","fix":{"range":[873,888],"text":"[loadTransaction, transactionId]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4042,4093],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'getTypeColor' is assigned a value but never used.","line":185,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getTypeColor' is assigned a value but never used.","line":185,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Transaction Timeline\n * Location: src/shared/components/transaction-completion/TransactionTimeline.tsx\n * Purpose: Visualize transaction timeline and key milestones\n */\n\nimport { Transaction } from '@/shared/types/transaction-completion';\nimport { Card, CardBody, CardHeader, Chip, Progress } from '@heroui/react';\nimport { Calendar, CheckCircle, Clock, FileText, XCircle } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\n\ninterface TransactionTimelineProps {\n  transactionId: string;\n  userRole: 'buyer' | 'seller' | 'advisor';\n  userId: string;\n}\n\nconst TransactionTimeline: React.FC<TransactionTimelineProps> = ({\n  transactionId,\n  userRole,\n  userId,\n}) => {\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadTransaction();\n  }, [transactionId]);\n\n  const loadTransaction = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await transactionService.getTransaction(transactionId);\n      // setTransaction(response.data);\n\n      // Mock data for now\n      const mockTransaction: Transaction = {\n        id: transactionId,\n        offerId: 'offer-1',\n        listingId: 'listing-1',\n        buyerId: 'buyer-1',\n        sellerId: 'seller-1',\n        status: 'in_progress',\n        type: 'asset_purchase',\n        totalValue: 875000,\n        currency: 'EUR',\n        paymentStructure: {\n          type: 'mixed',\n          cashAmount: 600000,\n          financedAmount: 275000,\n        },\n        closingDate: '2024-03-15',\n        createdDate: '2024-01-15T10:30:00Z',\n        lastUpdated: '2024-01-20T14:30:00Z',\n        keyDates: [\n          {\n            id: 'date-1',\n            name: 'Offer Accepted',\n            date: '2024-01-15',\n            type: 'milestone',\n            status: 'completed',\n            responsibleParty: 'both',\n            isCritical: true,\n            description: 'Initial offer was accepted by seller',\n          },\n          {\n            id: 'date-2',\n            name: 'Purchase Agreement Signed',\n            date: '2024-02-01',\n            type: 'milestone',\n            status: 'completed',\n            responsibleParty: 'both',\n            isCritical: true,\n            description: 'All parties have signed the purchase agreement',\n          },\n          {\n            id: 'date-3',\n            name: 'Due Diligence Complete',\n            date: '2024-02-15',\n            type: 'milestone',\n            status: 'upcoming',\n            responsibleParty: 'buyer-1',\n            isCritical: true,\n            description: 'All due diligence items must be completed',\n          },\n          {\n            id: 'date-4',\n            name: 'Financing Approval',\n            date: '2024-02-28',\n            type: 'deadline',\n            status: 'upcoming',\n            responsibleParty: 'buyer-1',\n            isCritical: true,\n            description: 'Final financing approval must be obtained',\n          },\n          {\n            id: 'date-5',\n            name: 'Asset Transfer',\n            date: '2024-03-10',\n            type: 'deliverable',\n            status: 'upcoming',\n            responsibleParty: 'seller-1',\n            isCritical: false,\n            description: 'Physical assets must be transferred to buyer',\n          },\n          {\n            id: 'date-6',\n            name: 'Closing Date',\n            date: '2024-03-15',\n            type: 'closing',\n            status: 'upcoming',\n            responsibleParty: 'both',\n            isCritical: true,\n            description: 'Final closing and transaction completion',\n          },\n        ],\n        parties: [],\n        documents: [],\n        closingChecklist: [],\n        payments: [],\n        postClosingItems: [],\n        communications: [],\n        version: 1,\n        createdBy: 'buyer-1',\n        requiresApproval: false,\n        approvals: [],\n      };\n\n      setTransaction(mockTransaction);\n    } catch (error) {\n      console.error('Error loading transaction:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'upcoming':\n        return <Clock className=\"w-5 h-5 text-blue-600\" />;\n      case 'overdue':\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      case 'cancelled':\n        return <XCircle className=\"w-5 h-5 text-gray-400\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'upcoming':\n        return 'primary';\n      case 'overdue':\n        return 'danger';\n      case 'cancelled':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'milestone':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'deadline':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'deliverable':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'payment':\n        return <Calendar className=\"w-4 h-4\" />;\n      case 'closing':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <Calendar className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'milestone':\n        return 'text-blue-600 bg-blue-100';\n      case 'deadline':\n        return 'text-orange-600 bg-orange-100';\n      case 'deliverable':\n        return 'text-purple-600 bg-purple-100';\n      case 'payment':\n        return 'text-green-600 bg-green-100';\n      case 'closing':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const calculateProgress = () => {\n    if (!transaction) return 0;\n    const completed = transaction.keyDates.filter(date => date.status === 'completed').length;\n    const total = transaction.keyDates.length;\n    return total > 0 ? (completed / total) * 100 : 0;\n  };\n\n  const getDaysUntilClosing = () => {\n    if (!transaction) return 0;\n    const closingDate = new Date(transaction.closingDate);\n    const today = new Date();\n    const diffTime = closingDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const isOverdue = (date: string) => {\n    return new Date(date) < new Date();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading timeline...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!transaction) {\n    return (\n      <div className=\"text-center py-8\">\n        <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No transaction found</h3>\n        <p className=\"text-gray-600\">Unable to load timeline information.</p>\n      </div>\n    );\n  }\n\n  const progress = calculateProgress();\n  const daysUntilClosing = getDaysUntilClosing();\n  const completedDates = transaction.keyDates.filter(date => date.status === 'completed').length;\n  const upcomingDates = transaction.keyDates.filter(date => date.status === 'upcoming').length;\n  const overdueDates = transaction.keyDates.filter(\n    date => isOverdue(date.date) && date.status !== 'completed'\n  ).length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Transaction Timeline</h3>\n          <p className=\"text-sm text-gray-600\">Track key milestones and deadlines</p>\n        </div>\n      </div>\n\n      {/* Timeline Summary */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Timeline Progress\n          </h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-gray-700\">Overall Progress</span>\n              <span className=\"text-sm text-gray-600\">{progress.toFixed(0)}%</span>\n            </div>\n            <Progress value={progress} className=\"mb-4\" color=\"primary\" size=\"lg\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600 mb-1\">{completedDates}</div>\n                <div className=\"text-gray-600\">Completed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 mb-1\">{upcomingDates}</div>\n                <div className=\"text-gray-600\">Upcoming</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600 mb-1\">{overdueDates}</div>\n                <div className=\"text-gray-600\">Overdue</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600 mb-1\">{daysUntilClosing}</div>\n                <div className=\"text-gray-600\">Days to Closing</div>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Timeline */}\n      <Card>\n        <CardHeader>\n          <h4 className=\"text-md font-semibold\">Key Dates & Milestones</h4>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-6\">\n            {transaction.keyDates.map((date, index) => {\n              const isLast = index === transaction.keyDates.length - 1;\n              const isOverdueDate = isOverdue(date.date) && date.status !== 'completed';\n\n              return (\n                <div key={date.id} className=\"relative\">\n                  {/* Timeline Line */}\n                  {!isLast && <div className=\"absolute left-6 top-12 w-0.5 h-16 bg-gray-200\"></div>}\n\n                  <div className=\"flex items-start gap-4\">\n                    {/* Timeline Icon */}\n                    <div\n                      className={`flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${\n                        date.status === 'completed'\n                          ? 'bg-green-100'\n                          : isOverdueDate\n                            ? 'bg-red-100'\n                            : 'bg-blue-100'\n                      }`}\n                    >\n                      {getStatusIcon(date.status)}\n                    </div>\n\n                    {/* Timeline Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                          <h5 className=\"text-lg font-semibold text-gray-900\">{date.name}</h5>\n                          <Chip size=\"sm\" color={getStatusColor(date.status)} variant=\"flat\">\n                            {date.status}\n                          </Chip>\n                          {date.isCritical && (\n                            <Chip size=\"sm\" color=\"danger\" variant=\"flat\">\n                              Critical\n                            </Chip>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Chip\n                            size=\"sm\"\n                            variant=\"flat\"\n                            color=\"default\"\n                            startContent={getTypeIcon(date.type)}\n                          >\n                            {date.type}\n                          </Chip>\n                          <span className=\"text-sm text-gray-600\">\n                            {new Date(date.date).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n\n                      {date.description && (\n                        <p className=\"text-sm text-gray-600 mb-2\">{date.description}</p>\n                      )}\n\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>Responsible: {date.responsibleParty}</span>\n                        {isOverdueDate && (\n                          <span className=\"text-red-600 font-medium\">\n                            Overdue by{' '}\n                            {Math.abs(\n                              Math.ceil(\n                                (new Date(date.date).getTime() - new Date().getTime()) /\n                                  (1000 * 60 * 60 * 24)\n                              )\n                            )}{' '}\n                            days\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Critical Dates Alert */}\n      {overdueDates > 0 && (\n        <Card className=\"border border-red-200 bg-red-50\">\n          <CardBody>\n            <div className=\"flex items-center gap-3\">\n              <XCircle className=\"w-6 h-6 text-red-600\" />\n              <div>\n                <h4 className=\"font-medium text-red-900\">Overdue Items</h4>\n                <p className=\"text-sm text-red-800\">\n                  {overdueDates} critical date{overdueDates > 1 ? 's' : ''}{' '}\n                  {overdueDates > 1 ? 'are' : 'is'} overdue. Please address these items immediately\n                  to avoid delays.\n                </p>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Upcoming Deadlines */}\n      {upcomingDates > 0 && (\n        <Card>\n          <CardHeader>\n            <h4 className=\"text-md font-semibold flex items-center gap-2\">\n              <Clock className=\"w-5 h-5\" />\n              Upcoming Deadlines\n            </h4>\n          </CardHeader>\n          <CardBody>\n            <div className=\"space-y-3\">\n              {transaction.keyDates\n                .filter(date => date.status === 'upcoming')\n                .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n                .slice(0, 3)\n                .map(date => (\n                  <div\n                    key={date.id}\n                    className=\"flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-lg\"\n                  >\n                    <div>\n                      <h5 className=\"font-medium text-blue-900\">{date.name}</h5>\n                      <p className=\"text-sm text-blue-800\">\n                        Due: {new Date(date.date).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {date.isCritical && (\n                        <Chip size=\"sm\" color=\"danger\" variant=\"flat\">\n                          Critical\n                        </Chip>\n                      )}\n                      <Chip size=\"sm\" color=\"primary\" variant=\"flat\">\n                        {date.type}\n                      </Chip>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Closing Countdown */}\n      {daysUntilClosing > 0 && (\n        <Card className=\"border border-green-200 bg-green-50\">\n          <CardBody>\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <h4 className=\"font-medium text-green-900\">Closing Countdown</h4>\n                <p className=\"text-sm text-green-800\">\n                  {daysUntilClosing} day{daysUntilClosing > 1 ? 's' : ''} until closing on{' '}\n                  {new Date(transaction.closingDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport { TransactionTimeline };\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction-completion/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction/DueDiligencePlatform.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":56,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'buyerId' is defined but never used.","line":57,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buyerId' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'sellerId' is defined but never used.","line":58,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sellerId' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'_selectedDocument' is assigned a value but never used.","line":65,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_selectedDocument' is assigned a value but never used.","line":65,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'_setSelectedDocument' is assigned a value but never used.","line":65,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setSelectedDocument' is assigned a value but never used.","line":65,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2131,2134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2131,2134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2205,2208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2205,2208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardBody, CardHeader, Chip } from '@heroui/react';\nimport {\n  CheckCircle,\n  Download,\n  Eye,\n  FileText,\n  MessageSquare,\n  Send,\n  Shield,\n  Upload,\n  Users,\n} from 'lucide-react';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '../buttons/Button';\nimport { AnimatedTextarea } from '../forms';\nimport { ModernTabContent as TabContent, ModernTabs as Tabs } from '../tabs/Tabs';\n\ninterface DueDiligenceDocument {\n  id: string;\n  name: string;\n  category: string;\n  uploadedBy: string;\n  uploadedAt: string;\n  size: string;\n  status: 'pending' | 'reviewed' | 'approved' | 'rejected';\n  comments: Comment[];\n}\n\ninterface Comment {\n  id: string;\n  author: string;\n  content: string;\n  timestamp: string;\n  documentId?: string;\n}\n\ninterface ChecklistItem {\n  id: string;\n  category: string;\n  title: string;\n  description: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'not_applicable';\n  assignedTo: string;\n  dueDate: string;\n  priority: 'low' | 'medium' | 'high';\n}\n\ninterface DueDiligencePlatformProps {\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n}\n\nconst DueDiligencePlatform: React.FC<DueDiligencePlatformProps> = ({\n  listingId,\n  buyerId,\n  sellerId,\n}) => {\n  const [activeTab, setActiveTab] = useState('documents');\n  const [documents, setDocuments] = useState<DueDiligenceDocument[]>([]);\n  const [checklist, setChecklist] = useState<ChecklistItem[]>([]);\n  const [messages, setMessages] = useState<Comment[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [_selectedDocument, _setSelectedDocument] = useState<DueDiligenceDocument | null>(null);\n  const [uploading, setUploading] = useState(false);\n\n  // Define tabs for the new Tabs component\n  const dueDiligenceTabs = [\n    {\n      id: 'documents',\n      label: 'Documents',\n      icon: <FileText className=\"w-4 h-4\" />,\n      badge: documents.length > 0 ? documents.length.toString() : undefined,\n    },\n    {\n      id: 'checklist',\n      label: 'Checklist',\n      icon: <CheckCircle className=\"w-4 h-4\" />,\n      badge:\n        checklist.filter((item: any) => item.completed).length > 0\n          ? `${checklist.filter((item: any) => item.completed).length}/${checklist.length}`\n          : undefined,\n    },\n    {\n      id: 'messages',\n      label: 'Messages',\n      icon: <MessageSquare className=\"w-4 h-4\" />,\n      badge: messages.length > 0 ? messages.length.toString() : undefined,\n    },\n  ];\n\n  // Mock data for demonstration\n  useEffect(() => {\n    // Mock documents\n    setDocuments([\n      {\n        id: '1',\n        name: 'Financial Statements 2023.pdf',\n        category: 'Financial',\n        uploadedBy: 'Seller',\n        uploadedAt: '2024-01-15',\n        size: '2.4 MB',\n        status: 'reviewed',\n        comments: [],\n      },\n      {\n        id: '2',\n        name: 'Customer Contracts.pdf',\n        category: 'Legal',\n        uploadedBy: 'Seller',\n        uploadedAt: '2024-01-14',\n        size: '1.8 MB',\n        status: 'pending',\n        comments: [],\n      },\n    ]);\n\n    // Mock checklist\n    setChecklist([\n      {\n        id: '1',\n        category: 'Financial',\n        title: 'Review Financial Statements',\n        description: 'Analyze P&L, Balance Sheet, and Cash Flow statements',\n        status: 'completed',\n        assignedTo: 'Buyer',\n        dueDate: '2024-01-20',\n        priority: 'high',\n      },\n      {\n        id: '2',\n        category: 'Legal',\n        title: 'Review Legal Documents',\n        description: 'Check contracts, licenses, and legal compliance',\n        status: 'in_progress',\n        assignedTo: 'Buyer',\n        dueDate: '2024-01-25',\n        priority: 'high',\n      },\n    ]);\n\n    // Mock messages\n    setMessages([\n      {\n        id: '1',\n        author: 'Buyer',\n        content: 'I have reviewed the financial statements. Everything looks good.',\n        timestamp: '2024-01-16T10:30:00Z',\n      },\n      {\n        id: '2',\n        author: 'Seller',\n        content: 'Thank you for the feedback. I will upload the missing contracts today.',\n        timestamp: '2024-01-16T14:15:00Z',\n      },\n    ]);\n  }, []);\n\n  const handleFileUpload = () => {\n    setUploading(true);\n    // Simulate upload\n    setTimeout(() => {\n      setUploading(false);\n    }, 2000);\n  };\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const message: Comment = {\n        id: Date.now().toString(),\n        author: 'Current User',\n        content: newMessage,\n        timestamp: new Date().toISOString(),\n      };\n      setMessages(prev => [...prev, message]);\n      setNewMessage('');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'pending':\n        return 'default';\n      case 'rejected':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'danger';\n      case 'medium':\n        return 'warning';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <Shield className=\"w-6 h-6 text-blue-600\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Due Diligence Platform</h2>\n                <p className=\"text-gray-600\">Secure document sharing and collaboration</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Chip variant=\"flat\" color=\"success\">\n                <Shield className=\"w-3 h-3 mr-1\" />\n                Secure\n              </Chip>\n              <Chip variant=\"flat\" color=\"primary\">\n                <Users className=\"w-3 h-3 mr-1\" />\n                Private\n              </Chip>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Main Content Tabs */}\n      <Tabs\n        tabs={dueDiligenceTabs}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        variant=\"pills\"\n        size=\"md\"\n        className=\"w-full\"\n      >\n        <div className=\"mt-6\">\n          <TabContent tabId=\"documents\">\n            <div className=\"space-y-6\">\n              {/* Upload Section */}\n              <Card>\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Upload className=\"w-5 h-5\" />\n                    Upload Documents\n                  </h3>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n                    <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 mb-4\">\n                      Drag and drop files here or click to browse\n                    </p>\n                    <Button\n                      variant=\"primary\"\n                      onPress={handleFileUpload}\n                      isLoading={uploading}\n                      startContent={<Upload className=\"w-4 h-4\" />}\n                    >\n                      {uploading ? 'Uploading...' : 'Choose Files'}\n                    </Button>\n                  </div>\n                </CardBody>\n              </Card>\n\n              {/* Documents List */}\n              <Card>\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold\">Documents ({documents.length})</h3>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"space-y-3\">\n                    {documents.map(doc => (\n                      <div\n                        key={doc.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"w-5 h-5 text-blue-600\" />\n                          <div>\n                            <h4 className=\"font-medium\">{doc.name}</h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {doc.category} • {doc.size} • Uploaded by {doc.uploadedBy}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Chip size=\"sm\" color={getStatusColor(doc.status)} variant=\"flat\">\n                            {doc.status}\n                          </Chip>\n                          <Button\n                            size=\"sm\"\n                            variant=\"secondary\"\n                            startContent={<Eye className=\"w-4 h-4\" />}\n                          >\n                            View\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"secondary\"\n                            startContent={<Download className=\"w-4 h-4\" />}\n                          >\n                            Download\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardBody>\n              </Card>\n            </div>\n          </TabContent>\n\n          <TabContent tabId=\"checklist\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold\">Due Diligence Checklist</h3>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"space-y-4\">\n                    {checklist.map(item => (\n                      <div\n                        key={item.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                          <div>\n                            <h4 className=\"font-medium\">{item.title}</h4>\n                            <p className=\"text-sm text-gray-600\">{item.description}</p>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Chip\n                                size=\"sm\"\n                                color={getPriorityColor(item.priority)}\n                                variant=\"flat\"\n                              >\n                                {item.priority}\n                              </Chip>\n                              <span className=\"text-xs text-gray-500\">\n                                Due: {new Date(item.dueDate).toLocaleDateString()}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Chip size=\"sm\" color={getStatusColor(item.status)} variant=\"flat\">\n                            {item.status}\n                          </Chip>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardBody>\n              </Card>\n            </div>\n          </TabContent>\n\n          <TabContent tabId=\"messages\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold\">Messages ({messages.length})</h3>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                    {messages.map(message => (\n                      <div\n                        key={message.id}\n                        className=\"flex items-start gap-3 p-3 border rounded-lg\"\n                      >\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <MessageSquare className=\"w-4 h-4 text-blue-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium text-sm\">{message.author}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(message.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-700\">{message.content}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardBody>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold\">Send Message</h3>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"space-y-4\">\n                    <AnimatedTextarea\n                      label=\"Message\"\n                      placeholder=\"Type your message here...\"\n                      value={newMessage}\n                      onChange={e => setNewMessage(e.target.value)}\n                      onBlur={() => {}}\n                      name=\"message\"\n                      minRows={3}\n                    />\n                    <Button\n                      variant=\"primary\"\n                      onPress={handleSendMessage}\n                      isDisabled={!newMessage.trim()}\n                      startContent={<Send className=\"w-4 h-4\" />}\n                    >\n                      Send Message\n                    </Button>\n                  </div>\n                </CardBody>\n              </Card>\n            </div>\n          </TabContent>\n        </div>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default DueDiligencePlatform;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction/OfferManagement.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'buyerId' is defined but never used.","line":82,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":78},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buyerId' is defined but never used.","line":82,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":78},{"ruleId":"no-unused-vars","severity":1,"message":"'sellerId' is defined but never used.","line":82,"column":80,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sellerId' is defined but never used.","line":82,"column":80,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":88},{"ruleId":"no-unused-vars","severity":1,"message":"'setCurrentUser' is assigned a value but never used.","line":89,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCurrentUser' is assigned a value but never used.","line":89,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n    Card,\n    CardBody,\n    CardHeader,\n    Chip,\n    Modal,\n    ModalBody,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    Select,\n    SelectItem\n} from '@heroui/react';\nimport {\n    ArrowRight,\n    BarChart3,\n    CheckCircle,\n    DollarSign,\n    Edit,\n    Euro,\n    FileText,\n    XCircle\n} from 'lucide-react';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '../buttons/Button';\nimport { AnimatedTextarea, Input } from '../forms';\n\ninterface Offer {\n  id: string;\n  buyerId: string;\n  sellerId: string;\n  listingId: string;\n  amount: number;\n  currency: string;\n  offerType: 'cash' | 'stock' | 'mixed';\n  paymentTerms: string;\n  closingDate: string;\n  conditions: string[];\n  status: 'draft' | 'submitted' | 'under_review' | 'accepted' | 'rejected' | 'counter_offered';\n  submittedAt: string;\n  reviewedAt?: string;\n  expiresAt: string;\n  counterOffer?: Offer;\n  notes: string;\n}\n\ninterface Transaction {\n  id: string;\n  offerId: string;\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n  finalAmount: number;\n  currency: string;\n  closingDate: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  successFee: number;\n  successFeePercentage: number;\n  documents: string[];\n  milestones: Milestone[];\n  createdAt: string;\n  completedAt?: string;\n}\n\ninterface Milestone {\n  id: string;\n  title: string;\n  description: string;\n  dueDate: string;\n  status: 'pending' | 'completed' | 'overdue';\n  assignedTo: string;\n  amount?: number;\n}\n\ninterface OfferManagementProps {\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n}\n\nconst OfferManagement: React.FC<OfferManagementProps> = ({ listingId, buyerId, sellerId }) => {\n  const [activeTab, setActiveTab] = useState('offers');\n  const [offers, setOffers] = useState<Offer[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null);\n  const [showOfferModal, setShowOfferModal] = useState(false);\n  const [showCounterModal, setShowCounterModal] = useState(false);\n  const [currentUser, setCurrentUser] = useState('buyer'); // 'buyer' or 'seller'\n\n  // Mock data\n  useEffect(() => {\n    setOffers([\n      {\n        id: '1',\n        buyerId: 'buyer1',\n        sellerId: 'seller1',\n        listingId: listingId,\n        amount: 2500000,\n        currency: 'EUR',\n        offerType: 'cash',\n        paymentTerms: '30 days',\n        closingDate: '2024-03-15',\n        conditions: ['Due diligence completion', 'Financing approval'],\n        status: 'under_review',\n        submittedAt: '2024-01-15T10:00:00Z',\n        expiresAt: '2024-02-15T10:00:00Z',\n        notes: 'Initial offer for the business',\n      },\n    ]);\n\n    setTransactions([\n      {\n        id: '1',\n        offerId: '1',\n        listingId: listingId,\n        buyerId: 'buyer1',\n        sellerId: 'seller1',\n        finalAmount: 2500000,\n        currency: 'EUR',\n        closingDate: '2024-03-15',\n        status: 'in_progress',\n        successFee: 125000,\n        successFeePercentage: 5,\n        documents: ['contract.pdf', 'financials.pdf'],\n        milestones: [\n          {\n            id: '1',\n            title: 'Due Diligence',\n            description: 'Complete due diligence process',\n            dueDate: '2024-02-15',\n            status: 'pending',\n            assignedTo: 'Buyer',\n          },\n          {\n            id: '2',\n            title: 'Contract Signing',\n            description: 'Sign final purchase agreement',\n            dueDate: '2024-03-01',\n            status: 'pending',\n            assignedTo: 'Both Parties',\n          },\n        ],\n        createdAt: '2024-01-15T10:00:00Z',\n      },\n    ]);\n  }, [listingId]);\n\n  const formatCurrency = (amount: number, currency = 'EUR') => {\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'success';\n      case 'under_review':\n        return 'warning';\n      case 'rejected':\n        return 'danger';\n      case 'draft':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const getTransactionStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'in_progress':\n        return 'warning';\n      case 'pending':\n        return 'default';\n      case 'cancelled':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleCreateOffer = () => {\n    setShowOfferModal(true);\n  };\n\n  const handleCounterOffer = (offer: Offer) => {\n    setSelectedOffer(offer);\n    setShowCounterModal(true);\n  };\n\n  const handleAcceptOffer = (offer: Offer) => {\n    // Update offer status\n    setOffers(prev =>\n      prev.map(o => (o.id === offer.id ? { ...o, status: 'accepted' as const } : o))\n    );\n  };\n\n  const handleRejectOffer = (offer: Offer) => {\n    // Update offer status\n    setOffers(prev =>\n      prev.map(o => (o.id === offer.id ? { ...o, status: 'rejected' as const } : o))\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Offer Management</h2>\n                <p className=\"text-gray-600\">Manage offers and transactions</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"primary\"\n                onPress={handleCreateOffer}\n                startContent={<Edit className=\"w-4 h-4\" />}\n              >\n                Create Offer\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'offers'\n              ? 'bg-white text-blue-600 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('offers')}\n        >\n          Offers ({offers.length})\n        </button>\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'transactions'\n              ? 'bg-white text-blue-600 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('transactions')}\n        >\n          Transactions ({transactions.length})\n        </button>\n      </div>\n\n      {/* Offers Tab */}\n      {activeTab === 'offers' && (\n        <div className=\"space-y-4\">\n          {offers.map(offer => (\n            <Card key={offer.id}>\n              <CardBody>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-green-100 rounded-lg\">\n                      <Euro className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">\n                        {formatCurrency(offer.amount, offer.currency)}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {offer.offerType} • {offer.paymentTerms} • Due{' '}\n                        {new Date(offer.closingDate).toLocaleDateString()}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Chip size=\"sm\" color={getStatusColor(offer.status)} variant=\"flat\">\n                          {offer.status.replace('_', ' ')}\n                        </Chip>\n                        <span className=\"text-xs text-gray-500\">\n                          Submitted {new Date(offer.submittedAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {currentUser === 'seller' && offer.status === 'under_review' && (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          variant=\"success\"\n                          onPress={() => handleAcceptOffer(offer)}\n                          startContent={<CheckCircle className=\"w-4 h-4\" />}\n                        >\n                          Accept\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"danger\"\n                          onPress={() => handleRejectOffer(offer)}\n                          startContent={<XCircle className=\"w-4 h-4\" />}\n                        >\n                          Reject\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onPress={() => handleCounterOffer(offer)}\n                          startContent={<ArrowRight className=\"w-4 h-4\" />}\n                        >\n                          Counter\n                        </Button>\n                      </>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      startContent={<FileText className=\"w-4 h-4\" />}\n                    >\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Transactions Tab */}\n      {activeTab === 'transactions' && (\n        <div className=\"space-y-4\">\n          {transactions.map(transaction => (\n            <Card key={transaction.id}>\n              <CardBody>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"p-3 bg-blue-100 rounded-lg\">\n                        <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">Transaction #{transaction.id}</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {formatCurrency(transaction.finalAmount, transaction.currency)} • Closing{' '}\n                          {new Date(transaction.closingDate).toLocaleDateString()}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Chip\n                            size=\"sm\"\n                            color={getTransactionStatusColor(transaction.status)}\n                            variant=\"flat\"\n                          >\n                            {transaction.status.replace('_', ' ')}\n                          </Chip>\n                          <span className=\"text-xs text-gray-500\">\n                            Success Fee: {formatCurrency(transaction.successFee)} (\n                            {transaction.successFeePercentage}%)\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Milestones */}\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm text-gray-700\">Milestones</h4>\n                    {transaction.milestones.map(milestone => (\n                      <div\n                        key={milestone.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          <div>\n                            <p className=\"font-medium text-sm\">{milestone.title}</p>\n                            <p className=\"text-xs text-gray-600\">{milestone.description}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Chip\n                            size=\"sm\"\n                            color={getTransactionStatusColor(milestone.status)}\n                            variant=\"flat\"\n                          >\n                            {milestone.status}\n                          </Chip>\n                          <span className=\"text-xs text-gray-500\">\n                            Due: {new Date(milestone.dueDate).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Create Offer Modal */}\n      <Modal isOpen={showOfferModal} onClose={() => setShowOfferModal(false)} size=\"2xl\">\n        <ModalContent>\n          {onClose => (\n            <>\n              <ModalHeader>\n                <h3 className=\"text-lg font-semibold\">Create New Offer</h3>\n              </ModalHeader>\n              <ModalBody>\n                <div className=\"space-y-4\">\n                  <Input\n                    label=\"Offer Amount\"\n                    type=\"number\"\n                    placeholder=\"2500000\"\n                    leftIcon={<Euro className=\"w-4 h-4\" />}\n                  />\n                  <Select label=\"Offer Type\" placeholder=\"Select offer type\">\n                    <SelectItem key=\"cash\">Cash</SelectItem>\n                    <SelectItem key=\"stock\">Stock</SelectItem>\n                    <SelectItem key=\"mixed\">Mixed</SelectItem>\n                  </Select>\n                  <Input label=\"Payment Terms\" type=\"text\" placeholder=\"30 days\" value=\"\" onChange={() => {}} onBlur={() => {}} name=\"paymentTerms\" />\n                  <Input label=\"Closing Date\" type=\"date\" placeholder=\"\" value=\"\" onChange={() => {}} onBlur={() => {}} name=\"closingDate\" />\n                  <AnimatedTextarea\n                    label=\"Conditions\"\n                    placeholder=\"List any conditions for this offer...\"\n                    value=\"\"\n                    onChange={() => {}}\n                    onBlur={() => {}}\n                    name=\"conditions\"\n                    minRows={3}\n                  />\n                  <AnimatedTextarea label=\"Notes\" placeholder=\"Additional notes...\" value=\"\" onChange={() => {}} onBlur={() => {}} name=\"notes\" minRows={2} />\n                </div>\n              </ModalBody>\n              <ModalFooter>\n                <Button variant=\"secondary\" onPress={onClose}>\n                  Cancel\n                </Button>\n                <Button variant=\"primary\" onPress={onClose}>\n                  Submit Offer\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n\n      {/* Counter Offer Modal */}\n      <Modal isOpen={showCounterModal} onClose={() => setShowCounterModal(false)} size=\"2xl\">\n        <ModalContent>\n          {onClose => (\n            <>\n              <ModalHeader>\n                <h3 className=\"text-lg font-semibold\">Make Counter Offer</h3>\n              </ModalHeader>\n              <ModalBody>\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-gray-50 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Original Offer</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      {selectedOffer &&\n                        formatCurrency(selectedOffer.amount, selectedOffer.currency)}\n                    </p>\n                  </div>\n                  <Input\n                    label=\"Counter Offer Amount\"\n                    type=\"number\"\n                    placeholder=\"2750000\"\n                    leftIcon={<Euro className=\"w-4 h-4\" />}\n                  />\n                  <AnimatedTextarea\n                    label=\"Counter Offer Notes\"\n                    placeholder=\"Explain your counter offer...\"\n                    value=\"\"\n                    onChange={() => {}}\n                    onBlur={() => {}}\n                    name=\"counterOfferNotes\"\n                    minRows={3}\n                  />\n                </div>\n              </ModalBody>\n              <ModalFooter>\n                <Button variant=\"secondary\" onPress={onClose}>\n                  Cancel\n                </Button>\n                <Button variant=\"primary\" onPress={onClose}>\n                  Submit Counter Offer\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n\nexport default OfferManagement;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction/SuccessFeeCollection.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":79,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'listingId' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'buyerId' is defined but never used.","line":80,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buyerId' is defined but never used.","line":80,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'sellerId' is defined but never used.","line":81,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sellerId' is defined but never used.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'fee' is defined but never used.","line":200,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fee' is defined but never used.","line":200,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Card,\n  CardBody,\n  CardHeader,\n  Chip,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Progress,\n  Select,\n  SelectItem,\n} from '@heroui/react';\nimport {\n  AlertTriangle,\n  Calendar,\n  Clock,\n  CreditCard,\n  DollarSign,\n  Download,\n  Euro,\n  Receipt,\n  Shield,\n  TrendingUp,\n} from 'lucide-react';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Button } from '../buttons/Button';\nimport { AnimatedTextarea } from '../forms';\n\ninterface SuccessFee {\n  id: string;\n  transactionId: string;\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n  transactionAmount: number;\n  currency: string;\n  feePercentage: number;\n  feeAmount: number;\n  status: 'pending' | 'invoiced' | 'paid' | 'overdue' | 'cancelled';\n  invoiceNumber: string;\n  invoiceDate: string;\n  dueDate: string;\n  paidDate?: string;\n  paymentMethod?: string;\n  paymentReference?: string;\n  notes: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface RevenueMetrics {\n  totalRevenue: number;\n  monthlyRevenue: number;\n  pendingFees: number;\n  overdueFees: number;\n  averageFeeAmount: number;\n  completionRate: number;\n  currency: string;\n}\n\ninterface PaymentMethod {\n  id: string;\n  type: 'bank_transfer' | 'credit_card' | 'paypal' | 'stripe';\n  name: string;\n  accountNumber?: string;\n  isDefault: boolean;\n}\n\ninterface SuccessFeeCollectionProps {\n  listingId?: string;\n  buyerId?: string;\n  sellerId?: string;\n}\n\nconst SuccessFeeCollection: React.FC<SuccessFeeCollectionProps> = ({\n  listingId,\n  buyerId,\n  sellerId,\n}) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [successFees, setSuccessFees] = useState<SuccessFee[]>([]);\n  const [revenueMetrics, setRevenueMetrics] = useState<RevenueMetrics>({\n    totalRevenue: 0,\n    monthlyRevenue: 0,\n    pendingFees: 0,\n    overdueFees: 0,\n    averageFeeAmount: 0,\n    completionRate: 0,\n    currency: 'EUR',\n  });\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [selectedFee, setSelectedFee] = useState<SuccessFee | null>(null);\n\n  // Mock data\n  useEffect(() => {\n    setSuccessFees([\n      {\n        id: '1',\n        transactionId: 'txn1',\n        listingId: 'listing1',\n        buyerId: 'buyer1',\n        sellerId: 'seller1',\n        transactionAmount: 2500000,\n        currency: 'EUR',\n        feePercentage: 5,\n        feeAmount: 125000,\n        status: 'invoiced',\n        invoiceNumber: 'INV-2024-001',\n        invoiceDate: '2024-01-15',\n        dueDate: '2024-02-15',\n        notes: 'Success fee for completed transaction',\n        createdAt: '2024-01-15T10:00:00Z',\n        updatedAt: '2024-01-15T10:00:00Z',\n      },\n      {\n        id: '2',\n        transactionId: 'txn2',\n        listingId: 'listing2',\n        buyerId: 'buyer2',\n        sellerId: 'seller2',\n        transactionAmount: 1800000,\n        currency: 'EUR',\n        feePercentage: 4.5,\n        feeAmount: 81000,\n        status: 'paid',\n        invoiceNumber: 'INV-2024-002',\n        invoiceDate: '2024-01-10',\n        dueDate: '2024-02-10',\n        paidDate: '2024-01-25',\n        paymentMethod: 'bank_transfer',\n        paymentReference: 'TXN-789456',\n        notes: 'Success fee for completed transaction',\n        createdAt: '2024-01-10T10:00:00Z',\n        updatedAt: '2024-01-25T14:30:00Z',\n      },\n    ]);\n\n    setRevenueMetrics({\n      totalRevenue: 206000,\n      monthlyRevenue: 81000,\n      pendingFees: 125000,\n      overdueFees: 0,\n      averageFeeAmount: 103000,\n      completionRate: 85,\n      currency: 'EUR',\n    });\n\n    setPaymentMethods([\n      {\n        id: '1',\n        type: 'bank_transfer',\n        name: 'Bank Transfer',\n        accountNumber: 'BE68 5390 0754 7034',\n        isDefault: true,\n      },\n      {\n        id: '2',\n        type: 'stripe',\n        name: 'Credit Card',\n        isDefault: false,\n      },\n    ]);\n  }, []);\n\n  const formatCurrency = (amount: number, currency = 'EUR') => {\n    return new Intl.NumberFormat('en-EU', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'success';\n      case 'invoiced':\n        return 'warning';\n      case 'overdue':\n        return 'danger';\n      case 'pending':\n        return 'default';\n      case 'cancelled':\n        return 'danger';\n      default:\n        return 'default';\n    }\n  };\n\n  const handlePayment = (fee: SuccessFee) => {\n    setSelectedFee(fee);\n    setShowPaymentModal(true);\n  };\n\n  const handleDownloadInvoice = (fee: SuccessFee) => {\n    // Mock download\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center gap-3\">\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <h2 className=\"text-2xl font-bold\">Success Fee Collection</h2>\n                <p className=\"text-gray-600\">Manage and track success fees</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Chip variant=\"flat\" color=\"success\">\n                <Shield className=\"w-3 h-3 mr-1\" />\n                Secure\n              </Chip>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Revenue Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardBody className=\"text-center\">\n            <div className=\"p-3 bg-green-100 rounded-lg w-fit mx-auto mb-3\">\n              <TrendingUp className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-green-600\">\n              {formatCurrency(revenueMetrics.totalRevenue)}\n            </h3>\n            <p className=\"text-sm text-gray-600\">Total Revenue</p>\n          </CardBody>\n        </Card>\n\n        <Card>\n          <CardBody className=\"text-center\">\n            <div className=\"p-3 bg-blue-100 rounded-lg w-fit mx-auto mb-3\">\n              <Calendar className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-blue-600\">\n              {formatCurrency(revenueMetrics.monthlyRevenue)}\n            </h3>\n            <p className=\"text-sm text-gray-600\">This Month</p>\n          </CardBody>\n        </Card>\n\n        <Card>\n          <CardBody className=\"text-center\">\n            <div className=\"p-3 bg-yellow-100 rounded-lg w-fit mx-auto mb-3\">\n              <Clock className=\"w-6 h-6 text-yellow-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-yellow-600\">\n              {formatCurrency(revenueMetrics.pendingFees)}\n            </h3>\n            <p className=\"text-sm text-gray-600\">Pending Fees</p>\n          </CardBody>\n        </Card>\n\n        <Card>\n          <CardBody className=\"text-center\">\n            <div className=\"p-3 bg-red-100 rounded-lg w-fit mx-auto mb-3\">\n              <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-red-600\">\n              {formatCurrency(revenueMetrics.overdueFees)}\n            </h3>\n            <p className=\"text-sm text-gray-600\">Overdue Fees</p>\n          </CardBody>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'overview'\n              ? 'bg-white text-blue-600 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('overview')}\n        >\n          Overview\n        </button>\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'fees'\n              ? 'bg-white text-blue-600 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('fees')}\n        >\n          Success Fees ({successFees.length})\n        </button>\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'payments'\n              ? 'bg-white text-blue-600 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('payments')}\n        >\n          Payment Methods\n        </button>\n      </div>\n\n      {/* Overview Tab */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <h3 className=\"text-lg font-semibold\">Revenue Analytics</h3>\n            </CardHeader>\n            <CardBody>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Completion Rate</span>\n                  <span className=\"text-sm text-gray-600\">{revenueMetrics.completionRate}%</span>\n                </div>\n                <Progress value={revenueMetrics.completionRate} color=\"success\" />\n\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Average Fee Amount</span>\n                  <span className=\"text-sm text-gray-600\">\n                    {formatCurrency(revenueMetrics.averageFeeAmount)}\n                  </span>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <h3 className=\"text-lg font-semibold\">Recent Activity</h3>\n            </CardHeader>\n            <CardBody>\n              <div className=\"space-y-3\">\n                {successFees.slice(0, 3).map(fee => (\n                  <div\n                    key={fee.id}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-green-100 rounded-lg\">\n                        <Receipt className=\"w-4 h-4 text-green-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-sm\">\n                          {formatCurrency(fee.feeAmount)} - {fee.invoiceNumber}\n                        </p>\n                        <p className=\"text-xs text-gray-600\">\n                          Transaction: {formatCurrency(fee.transactionAmount)}\n                        </p>\n                      </div>\n                    </div>\n                    <Chip size=\"sm\" color={getStatusColor(fee.status)} variant=\"flat\">\n                      {fee.status}\n                    </Chip>\n                  </div>\n                ))}\n              </div>\n            </CardBody>\n          </Card>\n        </div>\n      )}\n\n      {/* Fees Tab */}\n      {activeTab === 'fees' && (\n        <div className=\"space-y-4\">\n          {successFees.map(fee => (\n            <Card key={fee.id}>\n              <CardBody>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-green-100 rounded-lg\">\n                      <Euro className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">\n                        {formatCurrency(fee.feeAmount, fee.currency)}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {fee.feePercentage}% of {formatCurrency(fee.transactionAmount)} • Invoice:{' '}\n                        {fee.invoiceNumber}\n                      </p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Chip size=\"sm\" color={getStatusColor(fee.status)} variant=\"flat\">\n                          {fee.status}\n                        </Chip>\n                        <span className=\"text-xs text-gray-500\">\n                          Due: {new Date(fee.dueDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {fee.status === 'invoiced' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"primary\"\n                        onPress={() => handlePayment(fee)}\n                        startContent={<CreditCard className=\"w-4 h-4\" />}\n                      >\n                        Pay Now\n                      </Button>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onPress={() => handleDownloadInvoice(fee)}\n                      startContent={<Download className=\"w-4 h-4\" />}\n                    >\n                      Invoice\n                    </Button>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Payment Methods Tab */}\n      {activeTab === 'payments' && (\n        <div className=\"space-y-4\">\n          {paymentMethods.map(method => (\n            <Card key={method.id}>\n              <CardBody>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-blue-100 rounded-lg\">\n                      <CreditCard className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">{method.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{method.accountNumber || 'Connected'}</p>\n                      {method.isDefault && (\n                        <Chip size=\"sm\" variant=\"flat\" color=\"success\">\n                          Default\n                        </Chip>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button size=\"sm\" variant=\"secondary\">\n                      Edit\n                    </Button>\n                    {!method.isDefault && (\n                      <Button size=\"sm\" variant=\"danger\">\n                        Remove\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Payment Modal */}\n      <Modal isOpen={showPaymentModal} onClose={() => setShowPaymentModal(false)} size=\"lg\">\n        <ModalContent>\n          {onClose => (\n            <>\n              <ModalHeader>\n                <h3 className=\"text-lg font-semibold\">Process Payment</h3>\n              </ModalHeader>\n              <ModalBody>\n                {selectedFee && (\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-gray-50 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Payment Details</h4>\n                      <div className=\"space-y-1 text-sm\">\n                        <p>Amount: {formatCurrency(selectedFee.feeAmount, selectedFee.currency)}</p>\n                        <p>Invoice: {selectedFee.invoiceNumber}</p>\n                        <p>Due Date: {new Date(selectedFee.dueDate).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n\n                    <Select label=\"Payment Method\" placeholder=\"Select payment method\">\n                      {paymentMethods.map(method => (\n                        <SelectItem key={method.id}>{method.name}</SelectItem>\n                      ))}\n                    </Select>\n\n                    <AnimatedTextarea\n                      label=\"Payment Notes\"\n                      placeholder=\"Optional notes...\"\n                      value=\"\"\n                      onChange={() => {}}\n                      onBlur={() => {}}\n                      name=\"paymentNotes\"\n                      minRows={2}\n                    />\n                  </div>\n                )}\n              </ModalBody>\n              <ModalFooter>\n                <Button variant=\"secondary\" onPress={onClose}>\n                  Cancel\n                </Button>\n                <Button variant=\"primary\" onPress={onClose}>\n                  Process Payment\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n\nexport default SuccessFeeCollection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/transaction/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/types.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_event' is defined but never used.","line":116,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":57},{"ruleId":"no-unused-vars","severity":1,"message":"'_value' is defined but never used.","line":233,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":233,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":84},{"ruleId":"no-unused-vars","severity":1,"message":"'_activeTabId' is defined but never used.","line":506,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":506,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":582,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":582,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":587,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":587,"endColumn":46},{"ruleId":"no-unused-vars","severity":1,"message":"'_value' is defined but never used.","line":628,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":628,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'valuation' is defined but never used.","line":680,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":685,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Shared Component Types\n *\n * Centralized type definitions for all shared components\n */\n\nimport * as React from 'react';\n\n// =============================================================================\n// BUTTON TYPES\n// =============================================================================\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n      /**\n       * Button variant/color scheme - Caregiver brand variants\n       *\n       * Brand Psychology:\n       * - primary: Trust Blue - main actions, builds confidence\n       * - secondary: Calm Teal - \"we've got you\" actions, reduces anxiety\n       * - tertiary: Reassuring Coral - gentle emphasis, encouraging\n       * - supportive: Calm Teal - supportive CTAs (same as secondary)\n       * - subtle: Reassuring Coral - gentle emphasis (same as tertiary)\n       * - link: Text-only - looks like links\n       * - success: Success Green - positive actions\n       * - danger: Error Red - destructive actions only\n       */\n      variant?:\n        | 'primary'      // Trust Blue - main CTAs\n        | 'secondary'    // Calm Teal - supportive actions\n        | 'tertiary'     // Reassuring Coral - gentle emphasis\n        | 'link'         // Text-only - looks like links\n        | 'success'      // Success Green - positive actions\n        | 'supportive'   // Calm Teal - supportive CTAs\n        | 'subtle'       // Reassuring Coral - gentle emphasis\n        | 'danger';      // Error Red - destructive actions\n\n  /**\n   * Button size\n   */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n  /**\n   * Button color (for HeroUI compatibility) - Caregiver brand colors\n   * \n   * Brand Color Palette:\n   * - primary: Trust Blue (#3b82f6) - confidence & trust\n   * - supportive: Calm Teal (#06b6d4) - supportive & reassuring\n   * - subtle: Reassuring Coral (#f25f57) - gentle emphasis\n   * - success: Success Green (#22c55e) - positive actions\n   * - warning: Warning Amber (#f59e0b) - caution states\n   * - danger: Error Red (#ef4444) - destructive actions\n   */\n  color?:\n    | 'primary'      // Trust Blue - confidence & trust\n    | 'secondary'    // Neutral - professional\n    | 'supportive'   // Calm Teal - supportive & reassuring\n    | 'subtle'       // Reassuring Coral - gentle emphasis\n    | 'success'      // Success Green - positive actions\n    | 'warning'      // Warning Amber - caution states\n    | 'danger'       // Error Red - destructive actions\n    | 'default';     // Neutral light - default state\n\n  /**\n   * Whether the button is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the button is in loading state\n   */\n  loading?: boolean;\n\n  /**\n   * Whether the button is loading (HeroUI compatibility)\n   */\n  isLoading?: boolean;\n\n  /**\n   * Whether the button is disabled (HeroUI compatibility)\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Whether the button should take full width\n   */\n  fullWidth?: boolean;\n\n  /**\n   * Icon to display on the left side\n   */\n  leftIcon?: React.ReactNode;\n\n  /**\n   * Icon to display on the right side\n   */\n  rightIcon?: React.ReactNode;\n\n  /**\n   * Start content (HeroUI compatibility)\n   */\n  startContent?: React.ReactNode;\n\n  /**\n   * End content (HeroUI compatibility)\n   */\n  endContent?: React.ReactNode;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n\n  /**\n   * Click handler\n   */\n  onClick?: (_event: React.MouseEvent<HTMLButtonElement>) => void;\n\n  /**\n   * Press handler (HeroUI compatibility)\n   */\n  onPress?: () => void;\n\n  /**\n   * Button type\n   */\n  type?: 'button' | 'submit' | 'reset';\n\n  /**\n   * Button radius (HeroUI compatibility)\n   */\n  radius?: 'none' | 'sm' | 'md' | 'lg' | 'full';\n\n  /**\n   * Whether the button is icon only (HeroUI compatibility)\n   */\n  isIconOnly?: boolean;\n}\n\n// =============================================================================\n// INPUT TYPES\n// =============================================================================\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'onChange'> {\n  /**\n   * Input label\n   */\n  label?: string;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * Helper text to display\n   */\n  helperText?: string;\n\n  /**\n   * Description text to display below the input\n   */\n  description?: string;\n\n  /**\n   * Input size (overrides HTML input size attribute)\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * Whether the input should take full width\n   */\n  fullWidth?: boolean;\n\n  /**\n   * Icon to display on the left side\n   */\n  leftIcon?: React.ReactNode;\n\n  /**\n   * Icon to display on the right side\n   */\n  rightIcon?: React.ReactNode;\n\n  /**\n   * Start content (HeroUI compatibility)\n   */\n  startContent?: React.ReactNode;\n\n  /**\n   * End content (HeroUI compatibility)\n   */\n  endContent?: React.ReactNode;\n\n  /**\n   * Input variant (HeroUI compatibility)\n   */\n  variant?: 'flat' | 'bordered' | 'underlined' | 'faded';\n\n  /**\n   * Input color (HeroUI compatibility)\n   */\n  color?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n\n  /**\n   * Input radius (HeroUI compatibility)\n   */\n  radius?: 'none' | 'sm' | 'md' | 'lg' | 'full';\n\n  /**\n   * Whether the input is disabled (HeroUI compatibility)\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Whether the input is required (HeroUI compatibility)\n   */\n  isRequired?: boolean;\n\n  /**\n   * Whether the input is invalid (HeroUI compatibility)\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Whether the input is read-only (HeroUI compatibility)\n   */\n  isReadOnly?: boolean;\n\n  /**\n   * Custom onChange handler that receives the value directly or the event\n   */\n  onChange?: ((_value: string) => void) | ((_e: React.ChangeEvent<HTMLInputElement>) => void);\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n// =============================================================================\n// FORM FIELD TYPES\n// =============================================================================\n\nexport interface FormFieldProps {\n  /**\n   * The form field label\n   */\n  label?: string;\n\n  /**\n   * Whether the field is required\n   */\n  required?: boolean;\n\n  /**\n   * Help text to display below the field\n   */\n  helpText?: string;\n\n  /**\n   * Error message to display\n   */\n  error?: string;\n\n  /**\n   * The form field component (Input, Select, Textarea, etc.)\n   */\n  children: React.ReactNode;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n// =============================================================================\n// CARD TYPES\n// =============================================================================\n\nexport interface CardProps {\n  /**\n   * Card content\n   */\n  children: React.ReactNode;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n\n  /**\n   * Whether to add padding\n   */\n  padding?: boolean;\n}\n\n// =============================================================================\n// LOADING SPINNER TYPES\n// =============================================================================\n\nexport interface LoadingSpinnerProps {\n  /**\n   * Spinner size\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n// =============================================================================\n// TYPOGRAPHY TYPES\n// =============================================================================\n\nexport interface TypographyProps {\n  /**\n   * Text content\n   */\n  children: React.ReactNode;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n// =============================================================================\n// DISCLAIMER TYPES\n// =============================================================================\n\nexport interface FinancialDisclaimerProps {\n  /**\n   * Type of disclaimer\n   */\n  type: 'valuation' | 'solvency' | 'liquidation' | 'general';\n\n  /**\n   * Display variant\n   */\n  variant?: 'banner' | 'modal' | 'sidebar';\n\n  /**\n   * Whether the disclaimer is collapsible\n   */\n  isCollapsible?: boolean;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n// =============================================================================\n// FAQ TYPES\n// =============================================================================\n\nexport interface FAQItem {\n  /**\n   * Unique identifier\n   */\n  id?: string;\n\n  /**\n   * FAQ question\n   */\n  question: string;\n\n  /**\n   * FAQ answer\n   */\n  answer: string;\n\n  /**\n   * Optional badge\n   */\n  badge?: 'new' | 'popular';\n}\n\nexport interface FAQAccordionProps {\n  /**\n   * Array of FAQ items\n   */\n  faqs: FAQItem[];\n\n  /**\n   * Whether multiple items can be open at once\n   */\n  allowMultiple?: boolean;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\nexport interface FAQBadgeProps {\n  /**\n   * Badge type\n   */\n  type?: 'new' | 'popular';\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\nexport interface FAQCategoryProps {\n  /**\n   * Category configuration\n   */\n  category: {\n    title: string;\n    description?: string;\n    icon?: React.ReactNode;\n    color?: string;\n    faqs: FAQItem[];\n  };\n\n  /**\n   * Whether multiple items can be open at once\n   */\n  allowMultiple?: boolean;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\nexport interface FAQItemProps {\n  /**\n   * FAQ question\n   */\n  question: string;\n\n  /**\n   * FAQ answer\n   */\n  answer: string;\n\n  /**\n   * Whether this item is currently open\n   */\n  isOpen: boolean;\n\n  /**\n   * Toggle handler\n   */\n  onToggle: () => void;\n\n  /**\n   * Optional badge\n   */\n  badge?: 'new' | 'popular';\n}\n\n// =============================================================================\n// TABS TYPES\n// =============================================================================\n\nexport interface TabItem {\n  /**\n   * Unique identifier for the tab\n   */\n  id: string;\n\n  /**\n   * Display label\n   */\n  label: string;\n\n  /**\n   * Content to be rendered when this tab is active\n   */\n  content: React.ReactNode;\n\n  /**\n   * Optional icon to display next to the label\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * Whether the tab is disabled\n   */\n  disabled?: boolean;\n}\n\nexport interface TabsProps {\n  /**\n   * Array of tab items\n   */\n  items: TabItem[];\n\n  /**\n   * The ID of the initially active tab\n   */\n  initialActiveTab?: string;\n\n  /**\n   * Callback function when the active tab changes\n   */\n  onTabChange?: (_activeTabId: string) => void;\n\n  /**\n   * Visual variant of the tabs\n   */\n  variant?: 'pill' | 'line' | 'segment';\n\n  /**\n   * Size of the tabs\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * Whether the tabs should take full width\n   */\n  fullWidth?: boolean;\n\n  /**\n   * Additional CSS class for the tabs container\n   */\n  className?: string;\n\n  /**\n   * Additional CSS class for the tab list\n   */\n  tabListClassName?: string;\n\n  /**\n   * Additional CSS class for individual tab buttons\n   */\n  tabButtonClassName?: string;\n\n  /**\n   * Additional CSS class for the active tab button\n   */\n  activeTabButtonClassName?: string;\n\n  /**\n   * Additional CSS class for the tab panel\n   */\n  tabPanelClassName?: string;\n}\n\n// =============================================================================\n// FILTER TYPES\n// =============================================================================\n\nexport interface PriceRangeSliderProps {\n  /**\n   * Minimum value for the range\n   */\n  min?: number;\n\n  /**\n   * Maximum value for the range\n   */\n  max?: number;\n\n  /**\n   * Step size for the slider\n   */\n  step?: number;\n\n  /**\n   * Initial value range [min, max]\n   */\n  defaultValue?: [number, number];\n\n  /**\n   * Current value range [min, max]\n   */\n  value?: [number, number];\n\n  /**\n   * Callback when range changes\n   */\n  onChange?: (value: [number, number]) => void;\n\n  /**\n   * Callback when range change is complete\n   */\n  onChangeComplete?: (value: [number, number]) => void;\n\n  /**\n   * Custom class name for the container\n   */\n  className?: string;\n\n  /**\n   * Label for the slider\n   */\n  label?: string;\n\n  /**\n   * Currency symbol to display\n   */\n  currencySymbol?: string;\n\n  /**\n   * Whether to show input fields for min/max values\n   */\n  showInputs?: boolean;\n\n  /**\n   * Whether to disable the slider\n   */\n  disabled?: boolean;\n}\n\n// =============================================================================\n// SEARCH TYPES\n// =============================================================================\n\nexport interface SearchComponentProps {\n  /**\n   * Current search query value\n   */\n  _value: string;\n\n  /**\n   * Callback when search value changes\n   */\n  onChange: (_value: string) => void;\n\n  /**\n   * Callback when search is submitted\n   */\n  onSearch: () => void;\n\n  /**\n   * Placeholder text for the search input\n   */\n  placeholder?: string;\n\n  /**\n   * Size variant of the search component\n   */\n  size?: 'default' | 'large';\n\n  /**\n   * Whether to show loading state\n   */\n  isLoading?: boolean;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n\n  /**\n   * Button text override\n   */\n  buttonText?: string;\n}\n\n// =============================================================================\n// VALUATION TYPES\n// =============================================================================\n\nexport interface BusinessValuationToolProps {\n  /**\n   * Initial business data\n   */\n  initialData?: {\n    revenue?: number;\n    ebitda?: number;\n    employees?: number;\n    age?: number;\n    sector?: string;\n  };\n\n  /**\n   * Callback when valuation is calculated\n   */\n  onValuationComplete?: (valuation: {\n    min: number;\n    max: number;\n    average: number;\n    factors: string[];\n  }) => void;\n\n  /**\n   * Additional CSS classes\n   */\n  className?: string;\n}\n\n// =============================================================================\n// FORM FIELD TYPES\n// =============================================================================\n// DUPLICATE INTERFACES REMOVED - Already defined above\n// =============================================================================\n\n// =============================================================================\n// SEARCH COMPONENT TYPES (PLACEHOLDER) - REMOVED DUPLICATE\n// =============================================================================\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/typography/Heading1.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/typography/Heading2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/typography/HeadingHero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/typography/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/valuation/BusinessValuationTool.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/components/valuation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/design-system/brand-package.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/auth/AuthService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/auth/utils/error-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[763,766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[763,766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[894,897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[894,897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3810,3813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3810,3813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4259,4262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4259,4262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5402,5405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5402,5405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7385,7388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7385,7388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7890,7941],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🚨 Error Handler - MVP Version\n// Location: src/shared/services/auth/utils/error-handler.ts\n// Purpose: Centralized error handling for authentication operations with user-friendly messages\n//\n// Features:\n// - Supabase-specific error handling and translation\n// - User-friendly error messages\n// - Error categorization (retryable vs non-retryable)\n// - Comprehensive error logging\n// - Development vs production error handling\n// - Error response standardization\n// - Network error detection and handling\n\n// =============================================================================\n// ERROR TYPES\n// =============================================================================\n\nexport interface AuthError {\n  code: string;\n  message: string;\n  details?: any;\n  retryable: boolean;\n}\n\nexport interface AuthErrorResponse {\n  success: false;\n  error: string;\n  code?: string;\n  details?: any;\n}\n\n// =============================================================================\n// ERROR CODES\n// =============================================================================\n\nexport const AUTH_ERROR_CODES = {\n  // Network errors\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n\n  // Authentication errors\n  INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',\n  USER_NOT_FOUND: 'USER_NOT_FOUND',\n  EMAIL_NOT_VERIFIED: 'EMAIL_NOT_VERIFIED',\n  ACCOUNT_DISABLED: 'ACCOUNT_DISABLED',\n\n  // Registration errors\n  EMAIL_ALREADY_EXISTS: 'EMAIL_ALREADY_EXISTS',\n  WEAK_PASSWORD: 'WEAK_PASSWORD',\n  INVALID_EMAIL: 'INVALID_EMAIL',\n\n  // Session errors\n  SESSION_EXPIRED: 'SESSION_EXPIRED',\n  INVALID_TOKEN: 'INVALID_TOKEN',\n  TOKEN_REFRESH_FAILED: 'TOKEN_REFRESH_FAILED',\n\n  // Permission errors\n  INSUFFICIENT_PERMISSIONS: 'INSUFFICIENT_PERMISSIONS',\n  ACCESS_DENIED: 'ACCESS_DENIED',\n\n  // Server errors\n  SERVER_ERROR: 'SERVER_ERROR',\n  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n\n  // Unknown errors\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n} as const;\n\n// =============================================================================\n// ERROR MESSAGES\n// =============================================================================\n\nexport const AUTH_ERROR_MESSAGES = {\n  [AUTH_ERROR_CODES.NETWORK_ERROR]: 'Network error. Please check your connection.',\n  [AUTH_ERROR_CODES.TIMEOUT_ERROR]: 'Request timed out. Please try again.',\n  [AUTH_ERROR_CODES.INVALID_CREDENTIALS]: 'Invalid email or password.',\n  [AUTH_ERROR_CODES.USER_NOT_FOUND]: 'User not found.',\n  [AUTH_ERROR_CODES.EMAIL_NOT_VERIFIED]: 'Please verify your email address.',\n  [AUTH_ERROR_CODES.ACCOUNT_DISABLED]: 'Your account has been disabled.',\n  [AUTH_ERROR_CODES.EMAIL_ALREADY_EXISTS]: 'An account with this email already exists.',\n  [AUTH_ERROR_CODES.WEAK_PASSWORD]: 'Password is too weak. Please choose a stronger password.',\n  [AUTH_ERROR_CODES.INVALID_EMAIL]: 'Please enter a valid email address.',\n  [AUTH_ERROR_CODES.SESSION_EXPIRED]: 'Your session has expired. Please log in again.',\n  [AUTH_ERROR_CODES.INVALID_TOKEN]: 'Invalid authentication token.',\n  [AUTH_ERROR_CODES.TOKEN_REFRESH_FAILED]: 'Failed to refresh authentication token.',\n  [AUTH_ERROR_CODES.INSUFFICIENT_PERMISSIONS]: 'You do not have permission to perform this action.',\n  [AUTH_ERROR_CODES.ACCESS_DENIED]: 'Access denied.',\n  [AUTH_ERROR_CODES.SERVER_ERROR]: 'Server error. Please try again later.',\n  [AUTH_ERROR_CODES.SERVICE_UNAVAILABLE]: 'Service temporarily unavailable.',\n  [AUTH_ERROR_CODES.UNKNOWN_ERROR]: 'An unexpected error occurred.',\n} as const;\n\n// =============================================================================\n// ERROR HANDLER CLASS\n// =============================================================================\n\nexport class AuthErrorHandler {\n  /**\n   * Handle Supabase auth errors\n   */\n  static handleSupabaseError(error: any): AuthError {\n    // Map Supabase error codes to our error codes\n    const errorCode = this.mapSupabaseErrorCode(error);\n    const message =\n      AUTH_ERROR_MESSAGES[errorCode] || AUTH_ERROR_MESSAGES[AUTH_ERROR_CODES.UNKNOWN_ERROR];\n\n    return {\n      code: errorCode,\n      message,\n      details: error,\n      retryable: this.isRetryableError(errorCode),\n    };\n  }\n\n  /**\n   * Handle generic errors\n   */\n  static handleGenericError(error: any): AuthError {\n    if (error instanceof Error) {\n      // Network errors\n      if (error.message.includes('fetch')) {\n        return {\n          code: AUTH_ERROR_CODES.NETWORK_ERROR,\n          message: AUTH_ERROR_MESSAGES[AUTH_ERROR_CODES.NETWORK_ERROR],\n          details: error,\n          retryable: true,\n        };\n      }\n\n      // Timeout errors\n      if (error.message.includes('timeout')) {\n        return {\n          code: AUTH_ERROR_CODES.TIMEOUT_ERROR,\n          message: AUTH_ERROR_MESSAGES[AUTH_ERROR_CODES.TIMEOUT_ERROR],\n          details: error,\n          retryable: true,\n        };\n      }\n    }\n\n    return {\n      code: AUTH_ERROR_CODES.UNKNOWN_ERROR,\n      message: AUTH_ERROR_MESSAGES[AUTH_ERROR_CODES.UNKNOWN_ERROR],\n      details: error,\n      retryable: false,\n    };\n  }\n\n  /**\n   * Create error response\n   */\n  static createErrorResponse(error: AuthError): AuthErrorResponse {\n    return {\n      success: false,\n      error: error.message,\n      code: error.code,\n      details: error.details,\n    };\n  }\n\n  /**\n   * Map Supabase error codes to our error codes\n   */\n  private static mapSupabaseErrorCode(error: any): string {\n    const message = error?.message?.toLowerCase() || '';\n    const code = error?.code || '';\n\n    // Email already exists\n    if (message.includes('already registered') || message.includes('user already exists')) {\n      return AUTH_ERROR_CODES.EMAIL_ALREADY_EXISTS;\n    }\n\n    // Invalid credentials\n    if (message.includes('invalid login credentials') || message.includes('invalid credentials')) {\n      return AUTH_ERROR_CODES.INVALID_CREDENTIALS;\n    }\n\n    // Email not verified\n    if (message.includes('email not confirmed') || message.includes('email not verified')) {\n      return AUTH_ERROR_CODES.EMAIL_NOT_VERIFIED;\n    }\n\n    // Weak password\n    if (message.includes('password') && message.includes('weak')) {\n      return AUTH_ERROR_CODES.WEAK_PASSWORD;\n    }\n\n    // Invalid email\n    if (message.includes('invalid email') || message.includes('malformed email')) {\n      return AUTH_ERROR_CODES.INVALID_EMAIL;\n    }\n\n    // Session expired\n    if (message.includes('session') && message.includes('expired')) {\n      return AUTH_ERROR_CODES.SESSION_EXPIRED;\n    }\n\n    // Invalid token\n    if (message.includes('invalid token') || message.includes('jwt')) {\n      return AUTH_ERROR_CODES.INVALID_TOKEN;\n    }\n\n    // Server errors\n    if (code === '500' || message.includes('internal server error')) {\n      return AUTH_ERROR_CODES.SERVER_ERROR;\n    }\n\n    // Service unavailable\n    if (code === '503' || message.includes('service unavailable')) {\n      return AUTH_ERROR_CODES.SERVICE_UNAVAILABLE;\n    }\n\n    return AUTH_ERROR_CODES.UNKNOWN_ERROR;\n  }\n\n  /**\n   * Check if error is retryable\n   */\n  private static isRetryableError(errorCode: string): boolean {\n    const retryableErrors = [\n      AUTH_ERROR_CODES.NETWORK_ERROR,\n      AUTH_ERROR_CODES.TIMEOUT_ERROR,\n      AUTH_ERROR_CODES.SERVER_ERROR,\n      AUTH_ERROR_CODES.SERVICE_UNAVAILABLE,\n      AUTH_ERROR_CODES.TOKEN_REFRESH_FAILED,\n    ];\n\n    return retryableErrors.includes(errorCode as any);\n  }\n\n  /**\n   * Log error for monitoring\n   */\n  static logError(error: AuthError, context: string): void {\n    const logData = {\n      timestamp: new Date().toISOString(),\n      context,\n      error: {\n        code: error.code,\n        message: error.message,\n        retryable: error.retryable,\n      },\n    };\n\n    // In production, send to monitoring service\n    if (import.meta.env.MODE === 'production') {\n      // TODO: Send to monitoring service (e.g., Sentry, LogRocket)\n    } else {\n      console.log('Development error logging:', logData);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/auth/utils/retry-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3350,3353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3350,3353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔄 Retry Handler - MVP Version\n// Location: src/shared/services/auth/utils/retry-handler.ts\n// Purpose: Handle retry logic for authentication operations with exponential backoff\n//\n// Features:\n// - Exponential backoff retry strategy\n// - Configurable retry attempts and delays\n// - Network error detection and retry logic\n// - Timeout handling for long-running operations\n// - Retryable vs non-retryable error classification\n// - Comprehensive logging of retry attempts\n// - Development-friendly retry configuration\n\nimport { AUTH_ERROR_CODES } from './error-handler';\nimport { logger } from '../../../utils/logger';\n\n// =============================================================================\n// RETRY CONFIGURATION\n// =============================================================================\n\nconst RETRY_CONFIG = {\n  MAX_ATTEMPTS: 3,\n  BASE_DELAY: 1000, // 1 second\n  MAX_DELAY: 10000, // 10 seconds\n  BACKOFF_MULTIPLIER: 2,\n} as const;\n\n// =============================================================================\n// RETRY HANDLER CLASS\n// =============================================================================\n\nexport class RetryHandler {\n  /**\n   * Execute function with retry logic\n   */\n  static async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    context: string,\n    maxAttempts: number = RETRY_CONFIG.MAX_ATTEMPTS\n  ): Promise<T> {\n    let lastError: Error | unknown;\n\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        logger.debug(`🔄 ${context} - Attempt ${attempt}/${maxAttempts}`);\n        const result = await operation();\n\n        if (attempt > 1) {\n          logger.success(`${context} - Succeeded on attempt ${attempt}`);\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Check if error is retryable\n        if (!this.isRetryableError(error) || attempt === maxAttempts) {\n          logger.error(`❌ ${context} - Failed after ${attempt} attempts:`, error);\n          throw error;\n        }\n\n        // Calculate delay with exponential backoff\n        const delay = this.calculateDelay(attempt);\n        logger.warn(`⚠️ ${context} - Attempt ${attempt} failed, retrying in ${delay}ms:`, error);\n\n        await this.sleep(delay);\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Check if error is retryable\n   */\n  private static isRetryableError(error: unknown): boolean {\n    const retryableErrors = [\n      AUTH_ERROR_CODES.NETWORK_ERROR,\n      AUTH_ERROR_CODES.TIMEOUT_ERROR,\n      AUTH_ERROR_CODES.SERVER_ERROR,\n      AUTH_ERROR_CODES.SERVICE_UNAVAILABLE,\n      AUTH_ERROR_CODES.TOKEN_REFRESH_FAILED,\n    ];\n\n    // Type guard to check if error has code property\n    const hasCode = (err: unknown): err is { code: string } => {\n      return typeof err === 'object' && err !== null && 'code' in err;\n    };\n\n    // Type guard to check if error has message property\n    const hasMessage = (err: unknown): err is { message: string } => {\n      return typeof err === 'object' && err !== null && 'message' in err;\n    };\n\n    // Type guard to check if error has status property\n    const hasStatus = (err: unknown): err is { status: number } => {\n      return typeof err === 'object' && err !== null && 'status' in err;\n    };\n\n    // Check error code\n    if (hasCode(error) && retryableErrors.includes(error.code as any)) {\n      return true;\n    }\n\n    // Check error message\n    const message = hasMessage(error) ? error.message.toLowerCase() : '';\n    if (\n      message.includes('network') ||\n      message.includes('timeout') ||\n      message.includes('server error') ||\n      message.includes('service unavailable')\n    ) {\n      return true;\n    }\n\n    // Check HTTP status codes\n    if (hasStatus(error)) {\n      const retryableStatusCodes = [408, 429, 500, 502, 503, 504];\n      return retryableStatusCodes.includes(error.status);\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate delay with exponential backoff\n   */\n  private static calculateDelay(attempt: number): number {\n    const delay = RETRY_CONFIG.BASE_DELAY * Math.pow(RETRY_CONFIG.BACKOFF_MULTIPLIER, attempt - 1);\n    return Math.min(delay, RETRY_CONFIG.MAX_DELAY);\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  private static sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Execute with timeout\n   */\n  static async executeWithTimeout<T>(\n    operation: () => Promise<T>,\n    timeoutMs: number = 30000,\n    context: string = 'Operation'\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`${context} timed out after ${timeoutMs}ms`));\n      }, timeoutMs);\n\n      operation()\n        .then(result => {\n          clearTimeout(timeoutId);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timeoutId);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Execute with both retry and timeout\n   */\n  static async executeWithRetryAndTimeout<T>(\n    operation: () => Promise<T>,\n    context: string,\n    timeoutMs: number = 30000,\n    maxAttempts: number = RETRY_CONFIG.MAX_ATTEMPTS\n  ): Promise<T> {\n    return this.executeWithRetry(\n      () => this.executeWithTimeout(operation, timeoutMs, context),\n      context,\n      maxAttempts\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/auth/utils/session-manager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1891,1938],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":77,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3239,3287],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":124,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4116,4166],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🍪 Session Manager - MVP Version\n// Location: src/shared/services/auth/utils/session-manager.ts\n// Purpose: Centralized session management with cookies and localStorage persistence\n//\n// Features:\n// - Cookie-based session storage with secure options\n// - localStorage fallback for session data\n// - Session expiration handling\n// - Cross-tab session synchronization\n// - Development bypass support\n// - Secure cookie configuration (HTTPS, SameSite, etc.)\n// - Session validation and cleanup\n\nimport { AuthResult, User } from '../../../types';\n\n// =============================================================================\n// SESSION CONFIGURATION\n// =============================================================================\n\nconst SESSION_CONFIG = {\n  COOKIE_NAME: 'upswitch_session',\n  TOKEN_KEY: 'upswitch_token',\n  USER_KEY: 'upswitch_user',\n  REFRESH_KEY: 'upswitch_refresh',\n  EXPIRY_DAYS: 7, // 7 days\n  SECURE: import.meta.env.MODE === 'production',\n  SAME_SITE: 'lax' as const,\n} as const;\n\n// =============================================================================\n// SESSION MANAGER CLASS\n// =============================================================================\n\nexport class SessionManager {\n  /**\n   * Store authentication session (HTTP-only cookie pattern)\n   * Note: Actual authentication is via HTTP-only cookies set by backend\n   * This only stores user data locally for UI purposes\n   */\n  static storeSession(authResult: AuthResult): void {\n    try {\n      if (!authResult.isAuthenticated || !authResult.user) {\n        return;\n      }\n\n      // Only store user data locally (not tokens - those are in HTTP-only cookies)\n      localStorage.setItem(SESSION_CONFIG.USER_KEY, JSON.stringify(authResult.user));\n\n      // Store a flag to indicate we have a session\n      localStorage.setItem('upswitch_has_session', 'true');\n    } catch (error) {\n      console.error('Error storing session:', error);\n    }\n  }\n\n  /**\n   * Retrieve authentication session (HTTP-only cookie pattern)\n   * Note: This only returns locally stored user data\n   * Actual authentication validation must be done via backend API\n   */\n  static getSession(): AuthResult | null {\n    try {\n      const userStr = localStorage.getItem(SESSION_CONFIG.USER_KEY);\n      const hasSession = localStorage.getItem('upswitch_has_session');\n\n      if (!userStr || !hasSession) {\n        return null;\n      }\n\n      const user: User = JSON.parse(userStr);\n\n      return {\n        isAuthenticated: true,\n        user,\n        token: 'cookie-based', // Placeholder - actual auth is via HTTP-only cookies\n      };\n    } catch (error) {\n      this.clearSession();\n      return null;\n    }\n  }\n\n  /**\n   * Clear authentication session (HTTP-only cookie pattern)\n   * Note: HTTP-only cookies are cleared by backend on logout\n   */\n  static clearSession(): void {\n    try {\n      // Clear localStorage (HTTP-only cookies are cleared by backend)\n      localStorage.removeItem(SESSION_CONFIG.USER_KEY);\n      localStorage.removeItem('upswitch_has_session');\n\n      // Clear any legacy tokens if they exist\n      localStorage.removeItem(SESSION_CONFIG.TOKEN_KEY);\n      localStorage.removeItem(SESSION_CONFIG.REFRESH_KEY);\n    } catch (error) {\n      console.error('Error clearing session:', error);\n    }\n  }\n\n  /**\n   * Check if session exists\n   */\n  static hasSession(): boolean {\n    const token = localStorage.getItem(SESSION_CONFIG.TOKEN_KEY);\n    const user = localStorage.getItem(SESSION_CONFIG.USER_KEY);\n    return !!(token && user);\n  }\n\n  /**\n   * Get stored token\n   */\n  static getToken(): string | null {\n    return localStorage.getItem(SESSION_CONFIG.TOKEN_KEY);\n  }\n\n  /**\n   * Get stored user\n   */\n  static getUser(): User | null {\n    try {\n      const userStr = localStorage.getItem(SESSION_CONFIG.USER_KEY);\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Update stored user data\n   */\n  static updateUser(user: User): void {\n    try {\n      localStorage.setItem(SESSION_CONFIG.USER_KEY, JSON.stringify(user));\n    } catch (error) {\n      console.error('Error updating user data:', error);\n    }\n  }\n\n  /**\n   * Set cookie with proper configuration\n   */\n  private static setCookie(name: string, value: string, days: number): void {\n    const expires = new Date();\n    expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);\n\n    const cookieString = [\n      `${name}=${value}`,\n      `expires=${expires.toUTCString()}`,\n      `path=/`,\n      SESSION_CONFIG.SECURE ? 'secure' : '',\n      `samesite=${SESSION_CONFIG.SAME_SITE}`,\n    ]\n      .filter(Boolean)\n      .join('; ');\n\n    document.cookie = cookieString;\n  }\n\n  /**\n   * Delete cookie\n   */\n  private static deleteCookie(name: string): void {\n    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n  }\n\n  /**\n   * Get cookie value\n   */\n  static getCookie(name: string): string | null {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n      return parts.pop()?.split(';').shift() || null;\n    }\n    return null;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/auth/utils/user-data-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":39,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2873,2932],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3804,3857],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5145,5199],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5869,5923],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5970,6029],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6096,6156],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6589,6641],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":221,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 👤 User Data Manager - MVP Version\n// Location: src/shared/services/auth/utils/user-data-manager.ts\n// Purpose: Handle user data operations with Supabase public.users table and Auth metadata\n//\n// Features:\n// - User data retrieval from public.users table\n// - User profile updates in both Supabase Auth and public.users\n// - Business information management\n// - User record creation and validation\n// - Comprehensive error handling with retry logic\n// - Data synchronization between Auth and public.users\n// - Type-safe user data operations\n\nimport { supabase } from '../../../../config';\nimport { UpdateProfileRequest, User } from '../../../types';\nimport { RetryHandler } from './retry-handler';\n\n// =============================================================================\n// USER DATA MANAGER CLASS\n// =============================================================================\n\nexport class UserDataManager {\n  /**\n   * Get user data from public.users table\n   */\n  static async getPublicUserData(userId: string): Promise<Partial<User> | null> {\n    try {\n      const result = await RetryHandler.executeWithRetry(async () => {\n        const { data, error } = await supabase.from('users').select('*').eq('id', userId).single();\n\n        if (error) {\n          throw error;\n        }\n\n        return data;\n      }, `Get public user data for ${userId}`);\n\n      return result;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Create user record in public.users table\n   */\n  static async createPublicUserRecord(user: User): Promise<void> {\n    try {\n      await RetryHandler.executeWithRetry(async () => {\n        const { error } = await supabase.from('users').insert({\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          phone: user.phone,\n          role: user.role,\n          company_name: user.company_name,\n          company_description: user.company_description,\n          industry: user.industry,\n          business_type: user.business_type,\n          years_in_operation: user.years_in_operation,\n          revenue_range: user.revenue_range,\n          asking_price_range: user.asking_price_range,\n          employee_count_range: user.employee_count_range,\n          business_verified: user.business_verified,\n          listing_status: user.listing_status,\n          business_highlights: user.business_highlights,\n          reason_for_selling: user.reason_for_selling,\n          city: user.city,\n          country: user.country,\n          email_verified: user.email_verified,\n          auth_provider: user.auth_provider,\n          language_preference: user.language_preference,\n          created_at: user.created_at,\n          updated_at: user.updated_at,\n        });\n\n        if (error) {\n          throw error;\n        }\n      }, `Create public user record for ${user.id}`);\n    } catch (error) {\n      console.error('Error creating public user record:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update user profile in public.users table\n   */\n  static async updateUserProfile(userId: string, updates: UpdateProfileRequest): Promise<User> {\n    try {\n      const result = await RetryHandler.executeWithRetry(async () => {\n        const { data, error } = await supabase\n          .from('users')\n          .update({\n            name: updates.name,\n            phone: updates.phone,\n            city: updates.city,\n            country: updates.country,\n            language_preference: updates.language_preference,\n            updated_at: new Date().toISOString(),\n          })\n          .eq('id', userId)\n          .select()\n          .single();\n\n        if (error) {\n          throw error;\n        }\n\n        return data;\n      }, `Update user profile for ${userId}`);\n\n      return result as User;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update business information in public.users table\n   */\n  static async updateBusinessInfo(userId: string, businessData: Partial<User>): Promise<User> {\n    try {\n      const result = await RetryHandler.executeWithRetry(async () => {\n        const { data, error } = await supabase\n          .from('users')\n          .update({\n            company_name: businessData.company_name,\n            company_description: businessData.company_description,\n            industry: businessData.industry,\n            business_type: businessData.business_type,\n            years_in_operation: businessData.years_in_operation,\n            revenue_range: businessData.revenue_range,\n            asking_price_range: businessData.asking_price_range,\n            employee_count_range: businessData.employee_count_range,\n            business_highlights: businessData.business_highlights,\n            reason_for_selling: businessData.reason_for_selling,\n            updated_at: new Date().toISOString(),\n          })\n          .eq('id', userId)\n          .select()\n          .single();\n\n        if (error) {\n          throw error;\n        }\n\n        return data;\n      }, `Update business info for ${userId}`);\n\n      return result as User;\n    } catch (error) {\n      console.error('Error updating business info:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update user in both Supabase Auth and public.users table\n   */\n  static async updateUserInBothTables(userId: string, updates: Partial<User>): Promise<User> {\n    try {\n      // Update public.users table\n      const publicUserData = await this.updateUserProfile(userId, updates);\n\n      // Update Supabase Auth user metadata\n      try {\n        const { convertUserToSupabaseMetadata } = await import('../../../types');\n        const metadata = convertUserToSupabaseMetadata(updates);\n\n        const { error: authError } = await supabase.auth.updateUser({\n          data: metadata,\n        });\n\n        if (authError) {\n          console.error('Error updating auth user:', authError);\n        }\n      } catch (authError) {\n        console.error('Error fetching auth user data:', authError);\n      }\n\n      return publicUserData;\n    } catch (error) {\n      console.error('Error updating user in both tables:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user record from public.users table\n   */\n  static async deleteUserRecord(userId: string): Promise<void> {\n    try {\n      await RetryHandler.executeWithRetry(async () => {\n        const { error } = await supabase.from('users').delete().eq('id', userId);\n\n        if (error) {\n          throw error;\n        }\n      }, `Delete user record for ${userId}`);\n    } catch (error) {\n      console.error('Error deleting user record:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if user exists in public.users table\n   */\n  static async userExists(userId: string): Promise<boolean> {\n    try {\n      const { data, error } = await supabase.from('users').select('id').eq('id', userId).single();\n\n      if (error) {\n        return false;\n      }\n\n      return !!data;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/monitoring/errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1569,1572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1569,1572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'isProduction' is assigned a value but never used.","line":57,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isProduction' is assigned a value but never used.","line":57,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1644,1647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1644,1647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2297,2300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2297,2300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2499,2502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2499,2502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4090,4221],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'feedback' is defined but never used.","line":171,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'feedback' is defined but never used.","line":200,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6579,6638],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9039,9092],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9973,9976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9973,9976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":391,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10768,10771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10768,10771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11949,11952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11949,11952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12440,12443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12440,12443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":479,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13028,13031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13028,13031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'feedback' is defined but never used.","line":505,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":505,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13808,13811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13808,13811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":526,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14167,14170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14167,14170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":542,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":542,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14580,14583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14580,14583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":558,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15025,15028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15025,15028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":571,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":571,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15367,15370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15367,15370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":584,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":584,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15662,15665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15662,15665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":600,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":600,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16133,16136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16133,16136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":682,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":682,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18675,18717],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":708,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":708,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19399,19460],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🚨 COMPREHENSIVE ERROR HANDLING & MONITORING - UpSwitch M&A Platform\n * Enterprise-grade error handling with user feedback, logging, and recovery strategies\n * Built by Senior CTO for production-ready error management\n */\n\nimport { ApiError } from '../../types/api';\n\n// Define missing error types\nexport interface AuthenticationError extends ApiError {\n  type: 'AUTHENTICATION_ERROR';\n}\n\nexport interface AuthorizationError extends ApiError {\n  type: 'AUTHORIZATION_ERROR';\n}\n\nexport interface RateLimitError extends ApiError {\n  type: 'RATE_LIMIT_ERROR';\n  retryAfter?: number;\n}\n\nexport interface HttpStatusCode {\n  OK: 200;\n  CREATED: 201;\n  BAD_REQUEST: 400;\n  UNAUTHORIZED: 401;\n  FORBIDDEN: 403;\n  NOT_FOUND: 404;\n  RATE_LIMITED: 429;\n  INTERNAL_SERVER_ERROR: 500;\n}\n\n// Create temporary config objects until proper error config is implemented\nconst ERROR_CONFIG = {\n  maxRetries: 3,\n  retryDelay: 1000,\n  enableLogging: true,\n  USER_MESSAGES: {\n    GENERIC_ERROR: 'Something went wrong. Please try again.',\n    NETWORK_ERROR: 'Network error. Please check your connection.',\n    AUTH_ERROR: 'Authentication failed. Please log in again.',\n    VALIDATION_ERROR: 'Please check your input and try again.',\n    RATE_LIMIT_ERROR: 'Too many requests. Please try again later.',\n    SERVER_ERROR: 'Server error. Please try again later.',\n    CLIENT_ERROR: 'Invalid request. Please check your input.',\n  },\n};\n\nconst MONITORING_CONFIG = {\n  enableErrorReporting: true,\n  enablePerformanceMonitoring: true,\n  ENABLED: true,\n};\n\nconst isDevelopment = (import.meta as any).env?.NODE_ENV === 'development';\nconst isProduction = (import.meta as any).env?.NODE_ENV === 'production';\n\n// =============================================================================\n// INTERFACES & TYPES\n// =============================================================================\n\ninterface ErrorContext {\n  component?: string;\n  action?: string;\n  userId?: string;\n  sessionId?: string;\n  requestId?: string;\n  url?: string;\n  userAgent?: string;\n  timestamp: number;\n  stackTrace?: string;\n  breadcrumbs?: ErrorBreadcrumb[];\n}\n\ninterface ErrorBreadcrumb {\n  category: 'navigation' | 'user' | 'api' | 'console' | 'error';\n  message: string;\n  level: 'info' | 'warning' | 'error';\n  timestamp: number;\n  data?: any;\n}\n\ninterface ErrorReport {\n  id: string;\n  type: 'javascript' | 'api' | 'network' | 'security' | 'business';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  error: Error | any;\n  context: ErrorContext;\n  userImpact: 'none' | 'low' | 'medium' | 'high' | 'critical';\n  recoveryAction?: string;\n  resolved: boolean;\n}\n\ninterface UserFeedback {\n  type: 'error' | 'warning' | 'info' | 'success';\n  title: string;\n  message: string;\n  actions?: Array<{\n    label: string;\n    action: () => void;\n    variant?: 'primary' | 'secondary' | 'danger';\n  }>;\n  timeout?: number;\n  dismissible?: boolean;\n}\n\ninterface ErrorMetrics {\n  totalErrors: number;\n  errorsByType: Record<string, number>;\n  errorsByComponent: Record<string, number>;\n  criticalErrors: number;\n  lastError: number;\n  recoveryRate: number;\n}\n\n// =============================================================================\n// ERROR BREADCRUMBS MANAGER\n// =============================================================================\n\nclass BreadcrumbManager {\n  private static instance: BreadcrumbManager;\n  private breadcrumbs: ErrorBreadcrumb[] = [];\n  private maxBreadcrumbs = 50;\n\n  static getInstance(): BreadcrumbManager {\n    if (!BreadcrumbManager.instance) {\n      BreadcrumbManager.instance = new BreadcrumbManager();\n    }\n    return BreadcrumbManager.instance;\n  }\n\n  addBreadcrumb(breadcrumb: Omit<ErrorBreadcrumb, 'timestamp'>): void {\n    const fullBreadcrumb: ErrorBreadcrumb = {\n      ...breadcrumb,\n      timestamp: Date.now(),\n    };\n\n    this.breadcrumbs.push(fullBreadcrumb);\n\n    // Keep only the last N breadcrumbs\n    if (this.breadcrumbs.length > this.maxBreadcrumbs) {\n      this.breadcrumbs = this.breadcrumbs.slice(-this.maxBreadcrumbs);\n    }\n\n    if (isDevelopment) {\n      console.log('Development breadcrumb added:', {\n        breadcrumb: fullBreadcrumb,\n        breadcrumbs: this.breadcrumbs,\n      });\n    }\n  }\n\n  getBreadcrumbs(): ErrorBreadcrumb[] {\n    return [...this.breadcrumbs];\n  }\n\n  clearBreadcrumbs(): void {\n    this.breadcrumbs = [];\n  }\n}\n\n// =============================================================================\n// USER FEEDBACK MANAGER\n// =============================================================================\n\nclass UserFeedbackManager {\n  private static instance: UserFeedbackManager;\n  private feedbackQueue: UserFeedback[] = [];\n  private listeners: Set<(feedback: UserFeedback[]) => void> = new Set();\n\n  static getInstance(): UserFeedbackManager {\n    if (!UserFeedbackManager.instance) {\n      UserFeedbackManager.instance = new UserFeedbackManager();\n    }\n    return UserFeedbackManager.instance;\n  }\n\n  showFeedback(feedback: UserFeedback): void {\n    this.feedbackQueue.push(feedback);\n    this.notifyListeners();\n\n    // Auto-dismiss if timeout is set\n    if (feedback.timeout) {\n      setTimeout(() => {\n        this.dismissFeedback(feedback);\n      }, feedback.timeout);\n    }\n  }\n\n  dismissFeedback(feedback: UserFeedback): void {\n    const index = this.feedbackQueue.indexOf(feedback);\n    if (index > -1) {\n      this.feedbackQueue.splice(index, 1);\n      this.notifyListeners();\n    }\n  }\n\n  subscribe(listener: (feedback: UserFeedback[]) => void): () => void {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => listener([...this.feedbackQueue]));\n  }\n\n  getFeedbackQueue(): UserFeedback[] {\n    return [...this.feedbackQueue];\n  }\n}\n\n// =============================================================================\n// ERROR RECOVERY STRATEGIES\n// =============================================================================\n\nclass ErrorRecoveryManager {\n  private static recoveryStrategies: Map<string, () => Promise<boolean>> = new Map();\n\n  static registerStrategy(errorType: string, strategy: () => Promise<boolean>): void {\n    this.recoveryStrategies.set(errorType, strategy);\n  }\n\n  static async attemptRecovery(errorType: string): Promise<boolean> {\n    const strategy = this.recoveryStrategies.get(errorType);\n\n    if (strategy) {\n      try {\n        const recovered = await strategy();\n        if (recovered) {\n          return true;\n        }\n      } catch (recoveryError) {\n        console.error('Error in recovery process:', recoveryError);\n      }\n    }\n\n    return false;\n  }\n\n  static initializeDefaultStrategies(): void {\n    // Authentication error recovery\n    this.registerStrategy('AUTH_ERROR', async () => {\n      try {\n        // Try to refresh token\n        const authService = await import('../auth');\n        await authService.default.checkAuth();\n        return true;\n      } catch {\n        // Redirect to login\n        window.location.href = '/login';\n        return false;\n      }\n    });\n\n    // Network error recovery\n    this.registerStrategy('NETWORK_ERROR', async () => {\n      try {\n        // Check if connection is restored\n        const response = await fetch('/api/health', {\n          method: 'GET',\n          cache: 'no-cache',\n        });\n        return response.ok;\n      } catch {\n        return false;\n      }\n    });\n\n    // Rate limit recovery\n    this.registerStrategy('RATE_LIMIT_ERROR', async () => {\n      // Wait and retry\n      await new Promise(resolve => setTimeout(resolve, 5000)); // 5 second delay\n      return true;\n    });\n  }\n}\n\n// =============================================================================\n// MAIN ERROR HANDLER\n// =============================================================================\n\nexport class ErrorHandler {\n  private static instance: ErrorHandler;\n  private breadcrumbManager: BreadcrumbManager;\n  private feedbackManager: UserFeedbackManager;\n  private errorReports: ErrorReport[] = [];\n  private metrics: ErrorMetrics = {\n    totalErrors: 0,\n    errorsByType: {},\n    errorsByComponent: {},\n    criticalErrors: 0,\n    lastError: 0,\n    recoveryRate: 0,\n  };\n\n  private constructor() {\n    this.breadcrumbManager = BreadcrumbManager.getInstance();\n    this.feedbackManager = UserFeedbackManager.getInstance();\n    this.initializeErrorHandling();\n  }\n\n  static getInstance(): ErrorHandler {\n    if (!ErrorHandler.instance) {\n      ErrorHandler.instance = new ErrorHandler();\n    }\n    return ErrorHandler.instance;\n  }\n\n  private initializeErrorHandling(): void {\n    // Global error handlers\n    window.addEventListener('error', this.handleJavaScriptError.bind(this));\n    window.addEventListener('unhandledrejection', this.handlePromiseRejection.bind(this));\n\n    // Initialize recovery strategies\n    ErrorRecoveryManager.initializeDefaultStrategies();\n\n    // Track navigation for breadcrumbs\n    this.trackNavigation();\n\n    if (isDevelopment) {\n      console.log('Development error handler initialized');\n    }\n  }\n\n  /**\n   * Handle JavaScript runtime errors\n   */\n  private handleJavaScriptError(event: ErrorEvent): void {\n    const error = event.error || new Error(event.message);\n\n    this.handleError(error, {\n      component: 'global',\n      action: 'javascript_error',\n      url: event.filename,\n      timestamp: Date.now(),\n      stackTrace: error.stack,\n    });\n  }\n\n  /**\n   * Handle unhandled promise rejections\n   */\n  private handlePromiseRejection(event: PromiseRejectionEvent): void {\n    const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason));\n\n    this.handleError(error, {\n      component: 'global',\n      action: 'promise_rejection',\n      timestamp: Date.now(),\n    });\n\n    // Prevent the default browser behavior\n    event.preventDefault();\n  }\n\n  /**\n   * Main error handling method\n   */\n  async handleError(error: Error | any, context: Partial<ErrorContext> = {}): Promise<void> {\n    const fullContext: ErrorContext = {\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      timestamp: Date.now(),\n      breadcrumbs: this.breadcrumbManager.getBreadcrumbs(),\n      ...context,\n    };\n\n    const errorReport = this.createErrorReport(error, fullContext);\n    this.errorReports.push(errorReport);\n    this.updateMetrics(errorReport);\n\n    // Log error\n    this.logError(errorReport);\n\n    // Show user feedback if appropriate\n    this.showUserFeedback(errorReport);\n\n    // Attempt recovery\n    await this.attemptRecovery(errorReport);\n\n    // Send to monitoring service\n    this.sendErrorReport(errorReport);\n  }\n\n  /**\n   * Handle API errors specifically\n   */\n  async handleApiError(\n    error: any,\n    endpoint: string,\n    context: Partial<ErrorContext> = {}\n  ): Promise<void> {\n    const errorType = this.classifyApiError(error);\n    const userMessage = this.getApiErrorMessage(error);\n\n    const apiContext: ErrorContext = {\n      ...context,\n      component: 'api',\n      action: endpoint,\n      timestamp: Date.now(),\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n    };\n\n    const errorReport: ErrorReport = {\n      id: this.generateErrorId(),\n      type: 'api',\n      severity: this.getApiErrorSeverity(error),\n      message: userMessage,\n      error,\n      context: apiContext,\n      userImpact: this.assessUserImpact(error),\n      resolved: false,\n    };\n\n    this.errorReports.push(errorReport);\n    this.updateMetrics(errorReport);\n\n    // Show user feedback\n    this.feedbackManager.showFeedback({\n      type: 'error',\n      title: 'Request Failed',\n      message: userMessage,\n      actions: [\n        {\n          label: 'Retry',\n          action: () => window.location.reload(),\n          variant: 'primary',\n        },\n        {\n          label: 'Dismiss',\n          action: () => this.feedbackManager.dismissFeedback(errorReport as any),\n          variant: 'secondary',\n        },\n      ],\n      dismissible: true,\n    });\n\n    // Attempt recovery based on error type\n    const recovered = await ErrorRecoveryManager.attemptRecovery(errorType);\n    if (recovered) {\n      errorReport.resolved = true;\n      errorReport.recoveryAction = errorType;\n    }\n\n    this.logError(errorReport);\n    this.sendErrorReport(errorReport);\n  }\n\n  /**\n   * Track user actions for breadcrumbs\n   */\n  trackUserAction(action: string, data?: any): void {\n    this.breadcrumbManager.addBreadcrumb({\n      category: 'user',\n      message: action,\n      level: 'info',\n      data,\n    });\n  }\n\n  /**\n   * Track API calls for breadcrumbs\n   */\n  trackApiCall(endpoint: string, method: string, status?: number): void {\n    this.breadcrumbManager.addBreadcrumb({\n      category: 'api',\n      message: `${method} ${endpoint}`,\n      level: status && status >= 400 ? 'error' : 'info',\n      data: { endpoint, method, status },\n    });\n  }\n\n  /**\n   * Track console errors for breadcrumbs\n   */\n  trackConsoleError(message: string, data?: any): void {\n    this.breadcrumbManager.addBreadcrumb({\n      category: 'console',\n      message,\n      level: 'error',\n      data,\n    });\n  }\n\n  /**\n   * Get error metrics\n   */\n  getMetrics(): ErrorMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get error reports\n   */\n  getErrorReports(): ErrorReport[] {\n    return [...this.errorReports];\n  }\n\n  /**\n   * Subscribe to user feedback\n   */\n  subscribeFeedback(listener: (feedback: UserFeedback[]) => void): () => void {\n    return this.feedbackManager.subscribe(listener);\n  }\n\n  // =============================================================================\n  // PRIVATE HELPER METHODS\n  // =============================================================================\n\n  private createErrorReport(error: Error | any, context: ErrorContext): ErrorReport {\n    return {\n      id: this.generateErrorId(),\n      type: this.classifyError(error),\n      severity: this.getSeverity(error),\n      message: error.message || String(error),\n      error,\n      context,\n      userImpact: this.assessUserImpact(error),\n      resolved: false,\n    };\n  }\n\n  private classifyError(error: any): ErrorReport['type'] {\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      return 'network';\n    }\n    if (error.type === 'AUTH_ERROR') {\n      return 'security';\n    }\n    if (error.name === 'ValidationError') {\n      return 'business';\n    }\n    if (error.status && error.status >= 400) {\n      return 'api';\n    }\n    return 'javascript';\n  }\n\n  private classifyApiError(error: any): string {\n    if (error.status === 401 || error.type === 'AUTH_ERROR') {\n      return 'AUTH_ERROR';\n    }\n    if (error.status === 429 || error.type === 'RATE_LIMIT_ERROR') {\n      return 'RATE_LIMIT_ERROR';\n    }\n    if (error.status >= 500) {\n      return 'SERVER_ERROR';\n    }\n    if (!navigator.onLine || error.type === 'NETWORK_ERROR') {\n      return 'NETWORK_ERROR';\n    }\n    return 'CLIENT_ERROR';\n  }\n\n  private getSeverity(error: any): ErrorReport['severity'] {\n    if (error.type === 'AUTH_ERROR' || error.status === 401) {\n      return 'high';\n    }\n    if (error.status >= 500) {\n      return 'high';\n    }\n    if (error.name === 'TypeError' || error.name === 'ReferenceError') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private getApiErrorSeverity(error: any): ErrorReport['severity'] {\n    if (error.status === 401 || error.status === 403) {\n      return 'high';\n    }\n    if (error.status >= 500) {\n      return 'critical';\n    }\n    if (error.status === 429) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private assessUserImpact(error: any): ErrorReport['userImpact'] {\n    if (error.type === 'AUTH_ERROR' || error.status === 401) {\n      return 'critical'; // User can't use the app\n    }\n    if (error.status >= 500) {\n      return 'high'; // Core functionality affected\n    }\n    if (error.status === 429) {\n      return 'medium'; // Temporary limitation\n    }\n    if (error.status >= 400) {\n      return 'low'; // Specific action failed\n    }\n    return 'none';\n  }\n\n  private getApiErrorMessage(error: any): string {\n    // Return user-friendly messages\n    const messages = ERROR_CONFIG.USER_MESSAGES;\n\n    if (error.type === 'AUTH_ERROR' || error.status === 401) {\n      return messages.AUTH_ERROR;\n    }\n    if (error.type === 'RATE_LIMIT_ERROR' || error.status === 429) {\n      return messages.RATE_LIMIT_ERROR;\n    }\n    if (error.status >= 500) {\n      return messages.SERVER_ERROR;\n    }\n    if (error.type === 'NETWORK_ERROR') {\n      return messages.NETWORK_ERROR;\n    }\n    if (error.type === 'VALIDATION_ERROR') {\n      return messages.VALIDATION_ERROR;\n    }\n\n    return error.message || messages.CLIENT_ERROR;\n  }\n\n  private showUserFeedback(errorReport: ErrorReport): void {\n    // Only show feedback for errors that impact the user\n    if (errorReport.userImpact === 'none') {\n      return;\n    }\n\n    const feedback: UserFeedback = {\n      type: 'error',\n      title: 'Something went wrong',\n      message: this.getApiErrorMessage(errorReport.error),\n      dismissible: true,\n      timeout: errorReport.severity === 'low' ? 5000 : undefined,\n    };\n\n    this.feedbackManager.showFeedback(feedback);\n  }\n\n  private async attemptRecovery(errorReport: ErrorReport): Promise<void> {\n    const errorType = this.classifyApiError(errorReport.error);\n    const recovered = await ErrorRecoveryManager.attemptRecovery(errorType);\n\n    if (recovered) {\n      errorReport.resolved = true;\n      errorReport.recoveryAction = errorType;\n\n      this.feedbackManager.showFeedback({\n        type: 'success',\n        title: 'Issue Resolved',\n        message: 'The problem has been automatically resolved.',\n        timeout: 3000,\n        dismissible: true,\n      });\n    }\n  }\n\n  private updateMetrics(errorReport: ErrorReport): void {\n    this.metrics.totalErrors++;\n    this.metrics.errorsByType[errorReport.type] =\n      (this.metrics.errorsByType[errorReport.type] || 0) + 1;\n\n    if (errorReport.context.component) {\n      this.metrics.errorsByComponent[errorReport.context.component] =\n        (this.metrics.errorsByComponent[errorReport.context.component] || 0) + 1;\n    }\n\n    if (errorReport.severity === 'critical') {\n      this.metrics.criticalErrors++;\n    }\n\n    this.metrics.lastError = errorReport.context.timestamp;\n\n    // Calculate recovery rate\n    const resolvedErrors = this.errorReports.filter(r => r.resolved).length;\n    this.metrics.recoveryRate =\n      this.errorReports.length > 0 ? resolvedErrors / this.errorReports.length : 0;\n  }\n\n  private logError(errorReport: ErrorReport): void {\n    if (isDevelopment) {\n      console.log('Error report:', errorReport);\n    }\n  }\n\n  private async sendErrorReport(errorReport: ErrorReport): Promise<void> {\n    if (!MONITORING_CONFIG.ENABLED || isDevelopment) {\n      return;\n    }\n\n    try {\n      await fetch('/api/monitoring/errors', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...errorReport,\n          // Don't send the full error object (may contain circular references)\n          error: {\n            name: errorReport.error.name,\n            message: errorReport.error.message,\n            stack: errorReport.error.stack,\n          },\n        }),\n      });\n    } catch (monitoringError) {\n      console.error('Error in monitoring setup:', monitoringError);\n    }\n  }\n\n  private trackNavigation(): void {\n    // Track route changes\n    let currentUrl = window.location.href;\n\n    const observer = new MutationObserver(() => {\n      if (window.location.href !== currentUrl) {\n        this.breadcrumbManager.addBreadcrumb({\n          category: 'navigation',\n          message: `Navigation to ${window.location.pathname}`,\n          level: 'info',\n          data: {\n            from: currentUrl,\n            to: window.location.href,\n          },\n        });\n        currentUrl = window.location.href;\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n    });\n\n    // Track history API usage\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n\n    history.pushState = function (...args) {\n      originalPushState.apply(this, args);\n      BreadcrumbManager.getInstance().addBreadcrumb({\n        category: 'navigation',\n        message: `History push: ${args[2]}`,\n        level: 'info',\n      });\n    };\n\n    history.replaceState = function (...args) {\n      originalReplaceState.apply(this, args);\n      BreadcrumbManager.getInstance().addBreadcrumb({\n        category: 'navigation',\n        message: `History replace: ${args[2]}`,\n        level: 'info',\n      });\n    };\n  }\n\n  private generateErrorId(): string {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// =============================================================================\n// SINGLETON EXPORT\n// =============================================================================\n\nexport const errorHandler = ErrorHandler.getInstance();\nexport { BreadcrumbManager, ErrorRecoveryManager, UserFeedbackManager };\nexport default errorHandler;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/payments/api.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'planId' is defined but never used.","line":63,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'planId' is defined but never used.","line":63,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'paymentMethod' is defined but never used.","line":94,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'paymentMethod' is defined but never used.","line":94,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'methodId' is defined but never used.","line":102,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'methodId' is defined but never used.","line":102,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'planId' is defined but never used.","line":114,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'planId' is defined but never used.","line":114,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'sessionId' is defined but never used.","line":122,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sessionId' is defined but never used.","line":122,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'sessionId' is defined but never used.","line":130,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sessionId' is defined but never used.","line":130,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 💳 Payments API Service\n * Location: src/shared/services/payments/api.ts\n * Purpose: Payment-related API functionality for UpSwitch platform\n */\n\n// =============================================================================\n// PAYMENT TYPES & INTERFACES\n// =============================================================================\n\nexport interface PaymentPlan {\n  id: string;\n  name: string;\n  price: number;\n  currency: string;\n  features: string[];\n  popular?: boolean;\n}\n\nexport interface PaymentMethod {\n  id: string;\n  type: 'card' | 'bank' | 'paypal';\n  last4?: string;\n  brand?: string;\n  expiryMonth?: number;\n  expiryYear?: number;\n  isDefault: boolean;\n}\n\nexport interface Subscription {\n  id: string;\n  planId: string;\n  status: 'active' | 'cancelled' | 'past_due' | 'unpaid';\n  currentPeriodStart: string;\n  currentPeriodEnd: string;\n  cancelAtPeriodEnd: boolean;\n}\n\nexport interface CheckoutSession {\n  sessionId: string;\n  url: string;\n}\n\n// =============================================================================\n// PAYMENT API SERVICE\n// =============================================================================\n\n/**\n * Payment API service for handling subscriptions and payments\n */\nexport const paymentsApi = {\n  /**\n   * Get available payment plans\n   */\n  getPlans: async (): Promise<PaymentPlan[]> => {\n    // TODO: Implement actual API call to backend\n    return [];\n  },\n\n  /**\n   * Subscribe to a payment plan\n   */\n  subscribe: async (planId: string): Promise<Subscription> => {\n    // TODO: Implement actual API call to backend\n    throw new Error('Payment subscription not implemented yet');\n  },\n\n  /**\n   * Get current user subscription\n   */\n  getSubscription: async (): Promise<Subscription | null> => {\n    // TODO: Implement actual API call to backend\n    return null;\n  },\n\n  /**\n   * Cancel current subscription\n   */\n  cancelSubscription: async (): Promise<void> => {\n    // TODO: Implement actual API call to backend\n  },\n\n  /**\n   * Get user payment methods\n   */\n  getPaymentMethods: async (): Promise<PaymentMethod[]> => {\n    // TODO: Implement actual API call to backend\n    return [];\n  },\n\n  /**\n   * Add new payment method\n   */\n  addPaymentMethod: async (paymentMethod: Omit<PaymentMethod, 'id'>): Promise<PaymentMethod> => {\n    // TODO: Implement actual API call to backend\n    throw new Error('Add payment method not implemented yet');\n  },\n\n  /**\n   * Remove payment method\n   */\n  removePaymentMethod: async (methodId: string): Promise<void> => {\n    // TODO: Implement actual API call to backend\n  },\n};\n\n// =============================================================================\n// STRIPE INTEGRATION FUNCTIONS\n// =============================================================================\n\n/**\n * Create Stripe checkout session\n */\nexport const createCheckoutSessionAPI = async (planId: string): Promise<CheckoutSession> => {\n  // TODO: Implement actual Stripe checkout session creation\n  throw new Error('Stripe checkout session creation not implemented yet');\n};\n\n/**\n * Handle successful payment\n */\nexport const handlePaymentSuccess = async (sessionId: string): Promise<Subscription> => {\n  // TODO: Implement payment success handling\n  throw new Error('Payment success handling not implemented yet');\n};\n\n/**\n * Handle payment cancellation\n */\nexport const handlePaymentCancellation = async (sessionId: string): Promise<void> => {\n  // TODO: Implement payment cancellation handling\n};\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport default paymentsApi;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/payments/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/services/urls/urlGenerator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9754,9757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9754,9757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10068,10071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10068,10071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10427,10430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10427,10430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔗 URL Generator Service - MVP Version\n// Location: src/shared/services/UrlGenerator.ts\n// Purpose: Generate consistent URLs across the MVP application\n\nexport class UrlGenerator {\n  // ==============================================================================\n  // PUBLIC PAGES\n  // ==============================================================================\n\n  static root = () => '/';\n  static search = () => '/search';\n  static browse = () => '/browse';\n  static browseByFilter = (filter: string) => `/browse/sector/${filter}`;\n  static listings = () => '/listings';\n  static listingById = (listingId: string) => `/listings/${listingId}`;\n  static about = () => '/about';\n  static contact = () => '/contact';\n  static forSellers = () => '/for-sellers';\n\n  // ==============================================================================\n  // RESOURCES landing pages\n  // ==============================================================================\n  static valuationGuide = () => '/resources/valuation-guide';\n  static dueDiligenceChecklist = () => '/resources/due-diligence';\n\n  // ==============================================================================\n  // AUTHENTICATION\n  // ==============================================================================\n\n  static login = () => '/auth/login'; // Sits in a modal\n  static signup = () => '/auth/signup'; // Sits in a modal\n  static signupComplete = () => '/signup/complete';\n  static passwordReset = () => '/auth/forgot-password';\n  static emailVerification = () => '/verify-email';\n\n  // ==============================================================================\n  // BUSINESS OWNER DOMAIN - /my-business/*\n  // For business owners managing their companies, signed up as a seller\n  // ==============================================================================\n\n  static myBusiness = () => '/my-business';\n  static myBusinessOverview = () => '/my-business/overview';\n  static businessValuations = () => '/my-business/valuations';\n  static businessAnalytics = () => '/my-business/analytics';\n  static businessDocuments = () => '/my-business/documents';\n  static businessPerformance = () => '/my-business/performance';\n  static createNewListing = () => '/my-business/listings/new';\n\n  // ==============================================================================\n  // BUSINESS BUYERS\n  // For business prospectors searching for a new company to acquire, signed up as a buyer\n  // ==============================================================================\n\n  static checkout = () => '/checkout';\n  static checkoutSuccess = () => '/checkout/success';\n  static checkoutCancel = () => '/checkout/cancel';\n  static checkoutFailed = () => '/checkout/failed';\n  static checkoutPending = () => '/checkout/pending';\n  static checkoutProcessing = () => '/checkout/processing';\n  static checkoutComplete = () => '/checkout/complete';\n  static checkoutRedirect = () => '/checkout/redirect';\n\n  // ==============================================================================\n  // UNIVERSAL USER DOMAIN - /users/*\n  // Universal account management for all user types\n  // ==============================================================================\n\n  static users = () => '/users';\n  static userProfile = () => '/users/profile';\n  static userSettings = () => '/users/profile';\n  static userBilling = () => '/users/billing';\n  static userSecurity = () => '/users/security';\n  static userNotifications = () => '/users/notifications';\n  static userSavedListings = () => '/users/saved';\n\n  // ==============================================================================\n  // UNIVERSAL COMMUNICATION - /messages/*\n  // ==============================================================================\n\n  static messages = () => '/messages';\n  static conversation = (conversationId: string) => `/messages/${conversationId}`;\n\n  // ==============================================================================\n  // TRANSACTION MANAGEMENT - /offers/*, /due-diligence/*, /transactions/*\n  // ==============================================================================\n\n  static offers = () => '/offers';\n  static offerByListing = (listingId: string) => `/offers/${listingId}`;\n  static dueDiligence = (processId: string, listingId: string) =>\n    `/due-diligence/${processId}/${listingId}`;\n  static transactionCompletion = (transactionId: string) => `/transactions/${transactionId}`;\n\n  // ==============================================================================\n  // LEGAL & SUPPORT\n  // ==============================================================================\n\n  static faq = () => '/faq';\n  static help = () => '/help';\n  static helpCenter = () => '/help';\n  static privacyPolicy = () => '/privacy-policy';\n  static termsConditions = () => '/terms-and-conditions';\n  static cookiePolicy = () => '/cookie-policy';\n  static gdprCompliance = () => '/gdpr';\n  static security = () => '/security';\n\n  // ==============================================================================\n  // SUBSCRIPTION & BILLING\n  // ==============================================================================\n  static subscription = () => '/subscription';\n  static subscriptionPlans = () => '/subscription/plans';\n  static subscriptionBilling = () => '/subscription/billing';\n  static subscriptionSuccess = () => '/subscription/success';\n\n  // ==============================================================================\n  // UTILITY METHODS - Helper functions for dynamic routing\n  // ==============================================================================\n\n  /**\n   * Generate main destination URL based on user role\n   */\n  static getDashboardForRole = (role: 'buyer' | 'seller') => {\n    switch (role) {\n      case 'seller':\n        return UrlGenerator.myBusiness(); // Business owners get /my-business/\n      case 'buyer':\n        return UrlGenerator.listings(); // Buyers browse listings\n      default:\n        return UrlGenerator.listings(); // Default to marketplace\n    }\n  };\n\n  /**\n   * Generate browse URL with filters\n   */\n  static browseWithFilters = (filters: {\n    sector?: string;\n    region?: string;\n    priceMin?: number;\n    priceMax?: number;\n    revenue?: string;\n  }) => {\n    const params = new URLSearchParams();\n\n    if (filters.sector) params.append('sector', filters.sector);\n    if (filters.region) params.append('region', filters.region);\n    if (filters.priceMin) params.append('priceMin', filters.priceMin.toString());\n    if (filters.priceMax) params.append('priceMax', filters.priceMax.toString());\n    if (filters.revenue) params.append('revenue', filters.revenue);\n\n    const queryString = params.toString();\n    return queryString ? `/browse?${queryString}` : '/browse';\n  };\n\n  /**\n   * Generate listing URL with action\n   */\n  static getListingAction = (\n    listingId: string,\n    action: 'view' | 'analytics' | 'data-room' | 'documents'\n  ) => {\n    switch (action) {\n      case 'analytics':\n        return UrlGenerator.listingById(listingId) + '/analytics';\n      case 'data-room':\n        return UrlGenerator.listingById(listingId) + '/data-room';\n      case 'documents':\n        return UrlGenerator.listingById(listingId) + '/documents';\n      default:\n        return UrlGenerator.listingById(listingId);\n    }\n  };\n\n  /**\n   * Generate user section URL\n   */\n  static getUserSection = (\n    section: 'profile' | 'settings' | 'notifications' | 'billing' | 'security'\n  ) => {\n    switch (section) {\n      case 'profile':\n        return UrlGenerator.userProfile();\n      case 'settings':\n        return UrlGenerator.userSettings();\n      case 'notifications':\n        return UrlGenerator.userNotifications();\n      case 'billing':\n        return UrlGenerator.userBilling();\n      case 'security':\n        return UrlGenerator.userSecurity();\n      default:\n        return UrlGenerator.users();\n    }\n  };\n\n  /**\n   * Generate business owner section URL\n   */\n  static getBusinessSection = (\n    section: 'overview' | 'valuations' | 'documents' | 'performance'\n  ) => {\n    switch (section) {\n      case 'valuations':\n        return UrlGenerator.businessValuations();\n      case 'documents':\n        return UrlGenerator.businessDocuments();\n      case 'performance':\n        return UrlGenerator.businessPerformance();\n      case 'overview':\n        return UrlGenerator.myBusinessOverview();\n      default:\n        return UrlGenerator.myBusiness();\n    }\n  };\n\n  /**\n   * Generate marketplace navigation\n   * Buyers don't need a dashboard, they browse listings\n   */\n  static getMarketplaceSection = (section: 'browse' | 'search' | 'advanced' | 'category') => {\n    switch (section) {\n      case 'search':\n        return UrlGenerator.listings() + '?search=true';\n      case 'category':\n        return UrlGenerator.browse();\n      default:\n        return UrlGenerator.listings();\n    }\n  };\n\n  /**\n   * Check if current path matches a route\n   */\n  static isCurrentRoute = (currentPath: string, targetRoute: string): boolean => {\n    return currentPath === targetRoute || currentPath.startsWith(targetRoute + '/');\n  };\n\n  /**\n   * Extract ID from parameterized route\n   */\n  static extractIdFromPath = (path: string, baseRoute: string): string | null => {\n    const regex = new RegExp(`^${baseRoute.replace(/:\\w+/g, '([^/]+)')}$`);\n    const match = path.match(regex);\n    return match ? match[1] || null : null;\n  };\n\n  // ==============================================================================\n  // MVP SPECIFIC UTILITIES\n  // ==============================================================================\n\n  /**\n   * Generate onboarding URL based on user role - MVP version\n   */\n  static generateOnboardingUrl = (user: any) => {\n    switch (user?.role) {\n      case 'seller':\n        return this.myBusiness();\n      case 'buyer':\n        return this.listings();\n      default:\n        return this.listings();\n    }\n  };\n\n  /**\n   * Generate dashboard URL based on user role - MVP version\n   */\n  static generateDashboardUrl = (user: any) => {\n    switch (user?.role) {\n      case 'seller':\n        return this.myBusiness();\n      case 'buyer':\n        return this.listings();\n      case 'both':\n        return this.myBusiness();\n      default:\n        return this.listings();\n    }\n  };\n\n  /**\n   * Account dashboard (alias for generateDashboardUrl)\n   */\n  static accountDashboard = (user?: any) => {\n    if (user) {\n      return this.generateDashboardUrl(user);\n    }\n    // Default to business dashboard for compatibility\n    return this.myBusiness();\n  };\n\n  /**\n   * Generate search URL with query parameters\n   */\n  static searchWithQuery = (\n    query: string,\n    filters?: {\n      sector?: string;\n      region?: string;\n      priceMin?: number;\n      priceMax?: number;\n    }\n  ) => {\n    const params = new URLSearchParams();\n    params.append('q', query);\n\n    if (filters?.sector) params.append('sector', filters.sector);\n    if (filters?.region) params.append('region', filters.region);\n    if (filters?.priceMin) params.append('priceMin', filters.priceMin.toString());\n    if (filters?.priceMax) params.append('priceMax', filters.priceMax.toString());\n\n    return `/search?${params.toString()}`;\n  };\n\n  /**\n   * Generate profile URL with tab\n   */\n  static profileWithTab = (\n    tab: 'overview' | 'business' | 'investment' | 'communication' | 'settings'\n  ) => {\n    return `/users/profile?tab=${tab}`;\n  };\n\n  /**\n   * Generate settings URL with tab\n   */\n  static settingsWithTab = (\n    tab: 'overview' | 'business' | 'investment' | 'communication' | 'settings'\n  ) => {\n    return `/users/profile?tab=${tab}`;\n  };\n\n  /**\n   * Generate business dashboard URL with tab\n   */\n  static businessWithTab = (\n    tab: 'overview' | 'listings' | 'valuations' | 'documents' | 'performance'\n  ) => {\n    return `/my-business?tab=${tab}`;\n  };\n\n  /**\n   * Generate messages URL with filters\n   */\n  static messagesWithFilter = (filter: 'all' | 'unread' | 'inquiries' | 'offers') => {\n    return `/messages?filter=${filter}`;\n  };\n\n  /**\n   * Generate listing URL with tab\n   */\n  static listingWithTab = (\n    listingId: string,\n    tab: 'overview' | 'analytics' | 'inquiries' | 'documents'\n  ) => {\n    return `/listings/${listingId}?tab=${tab}`;\n  };\n\n  /**\n   * Generate checkout URL with step\n   */\n  static checkoutWithStep = (step: 'details' | 'payment' | 'review' | 'confirmation') => {\n    return `/checkout?step=${step}`;\n  };\n\n  /**\n   * Generate business listing URL with tab\n   */\n  static businessListingWithTab = (\n    listingId: string,\n    tab: 'overview' | 'analytics' | 'inquiries' | 'documents'\n  ) => {\n    return `/my-business/listings/${listingId}?tab=${tab}`;\n  };\n\n  /**\n   * Generate saved items URL\n   */\n  static savedItems = () => '/users/saved';\n  static savedListings = () => '/users/saved';\n\n  /**\n   * Generate watchlist URL (alias for saved items)\n   */\n  static watchlist = () => '/users/saved';\n}\n\nexport default UrlGenerator;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/api-auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4073,4076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4073,4076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5024,5027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5024,5027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":301,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6044,6047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6044,6047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":311,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6225,6228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6225,6228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'credentials' is defined but never used.","line":351,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":351,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":352,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":352,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'updates' is defined but never used.","line":355,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":355,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":356,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":356,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":357,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":357,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":358,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":358,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":359,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":359,"endColumn":55},{"ruleId":"no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":360,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":360,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔐 Authentication API Types - UpSwitch MVP\n *\n * Authentication and authorization API type definitions for secure\n * user management and access control.\n *\n * @author Senior CTO\n * @version 1.0.0\n */\n\nimport { ApiResponse } from './api';\nimport { User, UserRole } from './user';\n\n// =============================================================================\n// AUTHENTICATION REQUEST TYPES\n// =============================================================================\n\n/**\n * Login Request\n */\nexport interface LoginRequest {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n  deviceInfo?: {\n    userAgent: string;\n    platform: string;\n    deviceId?: string;\n  };\n}\n\n/**\n * Registration Request\n */\nexport interface RegisterRequest {\n  email: string;\n  password: string;\n  name: string;\n  role: UserRole;\n  businessInfo?: {\n    companyName?: string;\n    industry?: string;\n    website?: string;\n  };\n  acceptTerms: boolean;\n  acceptPrivacy: boolean;\n  marketingConsent?: boolean;\n}\n\n/**\n * Password Reset Request\n */\nexport interface PasswordResetRequest {\n  email: string;\n  redirectUrl?: string;\n}\n\n/**\n * Password Update Request\n */\nexport interface PasswordUpdateRequest {\n  currentPassword?: string;\n  newPassword: string;\n  token?: string; // For reset password flow\n}\n\n/**\n * Email Verification Request\n */\nexport interface EmailVerificationRequest {\n  token: string;\n}\n\n/**\n * Resend Verification Request\n */\nexport interface ResendVerificationRequest {\n  email: string;\n}\n\n// =============================================================================\n// AUTHENTICATION RESPONSE TYPES\n// =============================================================================\n\n/**\n * Authentication Result\n */\nexport interface AuthResult {\n  success: boolean;\n  user?: User;\n  token?: string;\n  refreshToken?: string;\n  expiresAt?: string;\n  error?: string;\n  requiresVerification?: boolean;\n  requiresOnboarding?: boolean;\n}\n\n/**\n * Session Information\n */\nexport interface SessionInfo {\n  isAuthenticated: boolean;\n  user: User | null;\n  token: string | null;\n  expiresAt: string | null;\n  lastActivity: string | null;\n}\n\n/**\n * Token Refresh Result\n */\nexport interface TokenRefreshResult {\n  success: boolean;\n  token?: string;\n  refreshToken?: string;\n  expiresAt?: string;\n  error?: string;\n}\n\n// =============================================================================\n// USER PROFILE TYPES\n// =============================================================================\n\n/**\n * Profile Update Request\n */\nexport interface ProfileUpdateRequest {\n  name?: string;\n  email?: string;\n  phone?: string;\n  avatar?: string;\n  bio?: string;\n  location?: {\n    country?: string;\n    region?: string;\n    city?: string;\n  };\n  preferences?: {\n    language?: string;\n    currency?: string;\n    notifications?: {\n      email?: boolean;\n      push?: boolean;\n      sms?: boolean;\n    };\n    privacy?: {\n      showProfile?: boolean;\n      showActivity?: boolean;\n      allowMessages?: boolean;\n    };\n  };\n}\n\n/**\n * Business Profile Update Request\n */\nexport interface BusinessProfileUpdateRequest {\n  companyName?: string;\n  industry?: string;\n  website?: string;\n  description?: string;\n  logo?: string;\n  employees?: number;\n  yearEstablished?: number;\n  revenue?: number;\n  location?: {\n    address?: string;\n    city?: string;\n    region?: string;\n    country?: string;\n    postalCode?: string;\n  };\n  verification?: {\n    businessLicense?: string;\n    taxId?: string;\n    bankAccount?: string;\n  };\n}\n\n// =============================================================================\n// VERIFICATION TYPES\n// =============================================================================\n\n/**\n * Verification Status\n */\nexport type VerificationStatus = 'pending' | 'verified' | 'rejected' | 'expired';\n\n/**\n * Verification Request\n */\nexport interface VerificationRequest {\n  type: 'email' | 'phone' | 'identity' | 'business';\n  documents?: Array<{\n    type: string;\n    url: string;\n    name: string;\n  }>;\n  additionalInfo?: Record<string, any>;\n}\n\n/**\n * Verification Result\n */\nexport interface VerificationResult {\n  id: string;\n  type: VerificationRequest['type'];\n  status: VerificationStatus;\n  submittedAt: string;\n  reviewedAt?: string;\n  expiresAt?: string;\n  notes?: string;\n  documents: Array<{\n    id: string;\n    type: string;\n    status: VerificationStatus;\n    url: string;\n    name: string;\n  }>;\n}\n\n// =============================================================================\n// SECURITY TYPES\n// =============================================================================\n\n/**\n * Security Event\n */\nexport interface SecurityEvent {\n  id: string;\n  type:\n    | 'login'\n    | 'logout'\n    | 'password_change'\n    | 'email_change'\n    | 'failed_login'\n    | 'suspicious_activity';\n  timestamp: string;\n  ipAddress: string;\n  userAgent: string;\n  location?: {\n    country: string;\n    region: string;\n    city: string;\n  };\n  success: boolean;\n  details?: Record<string, any>;\n}\n\n/**\n * Two-Factor Authentication Setup\n */\nexport interface TwoFactorSetupRequest {\n  method: 'sms' | 'email' | 'authenticator';\n  phoneNumber?: string;\n  backupCodes?: boolean;\n}\n\n/**\n * Two-Factor Authentication Verification\n */\nexport interface TwoFactorVerificationRequest {\n  code: string;\n  method: 'sms' | 'email' | 'authenticator' | 'backup';\n  rememberDevice?: boolean;\n}\n\n// =============================================================================\n// PERMISSION TYPES\n// =============================================================================\n\n/**\n * Permission Entity\n */\nexport interface Permission {\n  id: string;\n  name: string;\n  description: string;\n  resource: string;\n  action: string;\n}\n\n/**\n * Role Entity\n */\nexport interface Role {\n  id: string;\n  name: string;\n  description: string;\n  permissions: Permission[];\n  isDefault: boolean;\n}\n\n/**\n * Access Control Request\n */\nexport interface AccessControlRequest {\n  resource: string;\n  action: string;\n  context?: Record<string, any>;\n}\n\n/**\n * Access Control Result\n */\nexport interface AccessControlResult {\n  allowed: boolean;\n  reason?: string;\n  requiredPermissions?: string[];\n  context?: Record<string, any>;\n}\n\n// =============================================================================\n// API RESPONSE TYPES\n// =============================================================================\n\nexport type LoginResponse = ApiResponse<AuthResult>;\nexport type RegisterResponse = ApiResponse<AuthResult>;\nexport type PasswordResetResponse = ApiResponse<{ message: string }>;\nexport type PasswordUpdateResponse = ApiResponse<{ message: string }>;\nexport type EmailVerificationResponse = ApiResponse<AuthResult>;\nexport type ProfileResponse = ApiResponse<User>;\nexport type SessionResponse = ApiResponse<SessionInfo>;\nexport type TokenRefreshResponse = ApiResponse<TokenRefreshResult>;\nexport type VerificationResponse = ApiResponse<VerificationResult>;\nexport type SecurityEventsResponse = ApiResponse<SecurityEvent[]>;\nexport type RolesResponse = ApiResponse<Role[]>;\nexport type PermissionsResponse = ApiResponse<Permission[]>;\nexport type AccessControlResponse = ApiResponse<AccessControlResult>;\n\n// =============================================================================\n// AUTHENTICATION CONTEXT TYPES\n// =============================================================================\n\n/**\n * Authentication Context State\n */\nexport interface AuthContextState {\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  user: User | null;\n  token: string | null;\n  error: string | null;\n}\n\n/**\n * Authentication Context Actions\n */\nexport interface AuthContextActions {\n  login: (credentials: LoginRequest) => Promise<AuthResult>;\n  register: (data: RegisterRequest) => Promise<AuthResult>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<TokenRefreshResult>;\n  updateProfile: (updates: ProfileUpdateRequest) => Promise<User>;\n  changePassword: (data: PasswordUpdateRequest) => Promise<void>;\n  resetPassword: (data: PasswordResetRequest) => Promise<void>;\n  verifyEmail: (data: EmailVerificationRequest) => Promise<AuthResult>;\n  resendVerification: (data: ResendVerificationRequest) => Promise<void>;\n  checkPermission: (request: AccessControlRequest) => Promise<boolean>;\n}\n\n/**\n * Authentication Context\n */\nexport interface AuthContext extends AuthContextState, AuthContextActions {}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport default AuthResult;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/api-business.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1184,1187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1184,1187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1520,1523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1520,1523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":99,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2264,2267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2264,2267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2272,2275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2272,2275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":102,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2342,2345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2342,2345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2350,2353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2350,2353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2510,2513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2510,2513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":112,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":112,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2635,2638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2635,2638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":116,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":117,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2669,2672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2669,2672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":118,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2786,2789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2786,2789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":123,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":124,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2820,2823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2820,2823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":125,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2943,2946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2943,2946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":130,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":131,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3082,3085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3082,3085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":136,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":137,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3116,3119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3116,3119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":138,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3236,3239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3236,3239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":143,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":144,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3380,3383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3380,3383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'url' is defined but never used.","line":149,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":150,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3912,3915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3912,3915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4383,4386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4383,4386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4433,4436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4433,4436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5220,5223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5220,5223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":264,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":264,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'response' is defined but never used.","line":271,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":271,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":277,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":277,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7898,7901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7898,7901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":354,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7948,7951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7948,7951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔌 API Types - UpSwitch MVP\n *\n * Comprehensive API type definitions for consistent request/response handling\n * across the entire application.\n *\n * @author Senior CTO\n * @version 1.0.0\n */\n\n// =============================================================================\n// CORE API TYPES\n// =============================================================================\n\n/**\n * Standard API Response Interface\n *\n * Provides consistent response structure across all API endpoints\n */\nexport interface ApiResponse<T = any> {\n  /** Indicates if the request was successful */\n  success: boolean;\n\n  /** Response data payload */\n  data?: T;\n\n  /** Error message if request failed */\n  error?: string;\n\n  /** Additional message or status information */\n  message?: string;\n\n  /** HTTP status code */\n  statusCode?: number;\n\n  /** Request timestamp */\n  timestamp?: string;\n\n  /** Request ID for tracking */\n  requestId?: string;\n\n  /** Pagination metadata (for list endpoints) */\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n\n  /** Additional metadata */\n  meta?: Record<string, any>;\n}\n\n/**\n * API Request Configuration\n *\n * Standardizes request configuration across all API calls\n */\nexport interface ApiRequestConfig {\n  /** HTTP method */\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';\n\n  /** Request headers */\n  headers?: Record<string, string>;\n\n  /** Request body */\n  body?: any;\n\n  /** URL parameters */\n  params?: Record<string, string | number | boolean>;\n\n  /** Query parameters */\n  query?: Record<string, string | number | boolean>;\n\n  /** Request timeout in milliseconds */\n  timeout?: number;\n\n  /** Number of retry attempts */\n  retryAttempts?: number;\n\n  /** Retry delay in milliseconds */\n  retryDelay?: number;\n\n  /** Whether to include credentials */\n  credentials?: 'include' | 'omit' | 'same-origin';\n\n  /** Cache control */\n  cache?: 'default' | 'no-cache' | 'reload' | 'force-cache' | 'only-if-cached';\n\n  /** Signal for aborting requests */\n  signal?: AbortSignal;\n\n  /** Whether to validate response */\n  validateResponse?: boolean;\n\n  /** Custom response transformer */\n  transformResponse?: (data: any) => any;\n\n  /** Custom request transformer */\n  transformRequest?: (data: any) => any;\n}\n\n/**\n * API Client Interface\n *\n * Defines the contract for API client implementations\n */\nexport interface ApiClient {\n  /** GET request */\n  get: <T = any>(url: string, config?: Omit<ApiRequestConfig, 'method'>) => Promise<ApiResponse<T>>;\n\n  /** POST request */\n  post: <T = any>(\n    url: string,\n    data?: any,\n    config?: Omit<ApiRequestConfig, 'method'>\n  ) => Promise<ApiResponse<T>>;\n\n  /** PUT request */\n  put: <T = any>(\n    url: string,\n    data?: any,\n    config?: Omit<ApiRequestConfig, 'method'>\n  ) => Promise<ApiResponse<T>>;\n\n  /** DELETE request */\n  delete: <T = any>(\n    url: string,\n    config?: Omit<ApiRequestConfig, 'method'>\n  ) => Promise<ApiResponse<T>>;\n\n  /** PATCH request */\n  patch: <T = any>(\n    url: string,\n    data?: any,\n    config?: Omit<ApiRequestConfig, 'method'>\n  ) => Promise<ApiResponse<T>>;\n\n  /** HEAD request */\n  head?: <T = any>(\n    url: string,\n    config?: Omit<ApiRequestConfig, 'method'>\n  ) => Promise<ApiResponse<T>>;\n\n  /** OPTIONS request */\n  options?: <T = any>(\n    url: string,\n    config?: Omit<ApiRequestConfig, 'method'>\n  ) => Promise<ApiResponse<T>>;\n}\n\n// =============================================================================\n// ERROR TYPES\n// =============================================================================\n\n/**\n * API Error Interface\n */\nexport interface ApiError {\n  /** Error code */\n  code: string;\n\n  /** Error message */\n  message: string;\n\n  /** HTTP status code */\n  statusCode?: number;\n\n  /** Additional error details */\n  details?: Record<string, any>;\n\n  /** Stack trace (development only) */\n  stack?: string;\n\n  /** Request ID for tracking */\n  requestId?: string;\n\n  /** Timestamp when error occurred */\n  timestamp?: string;\n}\n\n/**\n * Validation Error Interface\n */\nexport interface ValidationError {\n  /** Field that failed validation */\n  field: string;\n\n  /** Validation error message */\n  message: string;\n\n  /** Validation rule that failed */\n  rule?: string;\n\n  /** Expected value or format */\n  expected?: any;\n\n  /** Actual value received */\n  received?: any;\n}\n\n/**\n * API Error Response Interface\n */\nexport interface ApiErrorResponse extends ApiResponse<null> {\n  success: false;\n  error: string;\n  errorCode?: string;\n  validationErrors?: ValidationError[];\n  apiError?: ApiError;\n}\n\n// =============================================================================\n// PAGINATION TYPES\n// =============================================================================\n\n/**\n * Pagination Request Parameters\n */\nexport interface PaginationParams {\n  /** Page number (1-based) */\n  page?: number;\n\n  /** Number of items per page */\n  limit?: number;\n\n  /** Sort field */\n  sortBy?: string;\n\n  /** Sort direction */\n  sortOrder?: 'asc' | 'desc';\n\n  /** Search query */\n  search?: string;\n\n  /** Additional filters */\n  filters?: Record<string, any>;\n}\n\n/**\n * Paginated Response Interface\n */\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n// =============================================================================\n// REQUEST/RESPONSE INTERCEPTORS\n// =============================================================================\n\n/**\n * Request Interceptor Function\n */\nexport type RequestInterceptor = (\n  config: ApiRequestConfig\n) => ApiRequestConfig | Promise<ApiRequestConfig>;\n\n/**\n * Response Interceptor Function\n */\nexport type ResponseInterceptor = <T>(\n  response: ApiResponse<T>\n) => ApiResponse<T> | Promise<ApiResponse<T>>;\n\n/**\n * Error Interceptor Function\n */\nexport type ErrorInterceptor = (error: ApiError) => ApiError | Promise<ApiError>;\n\n// =============================================================================\n// API CLIENT CONFIGURATION\n// =============================================================================\n\n/**\n * API Client Configuration Interface\n */\nexport interface ApiClientConfig {\n  /** Base URL for all requests */\n  baseURL: string;\n\n  /** Default timeout in milliseconds */\n  timeout?: number;\n\n  /** Default headers */\n  headers?: Record<string, string>;\n\n  /** Default retry configuration */\n  retry?: {\n    attempts: number;\n    delay: number;\n    backoff?: 'linear' | 'exponential';\n  };\n\n  /** Request interceptors */\n  requestInterceptors?: RequestInterceptor[];\n\n  /** Response interceptors */\n  responseInterceptors?: ResponseInterceptor[];\n\n  /** Error interceptors */\n  errorInterceptors?: ErrorInterceptor[];\n\n  /** Whether to validate responses */\n  validateResponses?: boolean;\n\n  /** Whether to log requests (development) */\n  logRequests?: boolean;\n\n  /** Authentication configuration */\n  auth?: {\n    type: 'bearer' | 'basic' | 'custom';\n    tokenProvider?: () => string | Promise<string>;\n    refreshTokenProvider?: () => string | Promise<string>;\n  };\n}\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\n/**\n * Extract data type from API response\n */\nexport type ApiResponseData<T> = T extends ApiResponse<infer U> ? U : never;\n\n/**\n * Make API request config optional\n */\nexport type OptionalApiConfig = Partial<ApiRequestConfig>;\n\n/**\n * API endpoint definition\n */\nexport interface ApiEndpoint {\n  /** Endpoint path */\n  path: string;\n\n  /** HTTP method */\n  method: ApiRequestConfig['method'];\n\n  /** Request body schema */\n  requestSchema?: any;\n\n  /** Response schema */\n  responseSchema?: any;\n\n  /** Whether authentication is required */\n  requiresAuth?: boolean;\n\n  /** Rate limit configuration */\n  rateLimit?: {\n    requests: number;\n    window: number; // in seconds\n  };\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport default ApiResponse;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/due-diligence.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7030,7033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7030,7033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Due Diligence Types\n * Location: src/shared/types/due-diligence.ts\n * Purpose: Type definitions for due diligence process\n */\n\nexport interface DueDiligenceProcess {\n  id: string;\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n  status: 'initiated' | 'in_progress' | 'completed' | 'cancelled';\n  startDate: string;\n  endDate?: string;\n  estimatedCompletionDate: string;\n  progress: number; // 0-100\n  checklist: DueDiligenceChecklist;\n  documents: DueDiligenceDocument[];\n  communications: DueDiligenceCommunication[];\n  reports: DueDiligenceReport[];\n  team: DueDiligenceTeamMember[];\n}\n\nexport interface DueDiligenceChecklist {\n  id: string;\n  processId: string;\n  categories: DueDiligenceCategory[];\n  overallProgress: number;\n  lastUpdated: string;\n}\n\nexport interface DueDiligenceCategory {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  items: DueDiligenceItem[];\n  progress: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked';\n}\n\nexport interface DueDiligenceItem {\n  id: string;\n  categoryId: string;\n  title: string;\n  description: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'not_applicable' | 'blocked';\n  assignedTo: string;\n  dueDate: string;\n  completedDate?: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  documents: string[]; // Document IDs\n  comments: DueDiligenceComment[];\n  verificationRequired: boolean;\n  verificationStatus?: 'pending' | 'verified' | 'failed';\n}\n\nexport interface DueDiligenceDocument {\n  id: string;\n  processId: string;\n  itemId?: string; // Optional link to checklist item\n  name: string;\n  description?: string;\n  category: string;\n  type: 'financial' | 'legal' | 'operational' | 'commercial' | 'technical' | 'hr' | 'other';\n  fileType: string;\n  size: number;\n  uploadedBy: string;\n  uploadedAt: string;\n  status: 'pending' | 'reviewed' | 'approved' | 'rejected' | 'needs_revision';\n  version: number;\n  isLatest: boolean;\n  downloadUrl: string;\n  previewUrl?: string;\n  tags: string[];\n  comments: DueDiligenceComment[];\n  accessLevel: 'buyer' | 'seller' | 'both' | 'advisor';\n}\n\nexport interface DueDiligenceCommunication {\n  id: string;\n  processId: string;\n  type: 'message' | 'request' | 'response' | 'alert' | 'reminder';\n  from: string;\n  to: string[];\n  subject: string;\n  content: string;\n  timestamp: string;\n  isRead: boolean;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  attachments: string[]; // Document IDs\n  relatedItemId?: string; // Link to checklist item\n  actionRequired?: boolean;\n  actionDeadline?: string;\n}\n\nexport interface DueDiligenceReport {\n  id: string;\n  processId: string;\n  type: 'interim' | 'final' | 'summary';\n  title: string;\n  content: string;\n  generatedBy: string;\n  generatedAt: string;\n  status: 'draft' | 'review' | 'approved' | 'published';\n  findings: DueDiligenceFinding[];\n  recommendations: DueDiligenceRecommendation[];\n  riskAssessment: DueDiligenceRiskAssessment;\n  attachments: string[]; // Document IDs\n}\n\nexport interface DueDiligenceFinding {\n  id: string;\n  category: string;\n  title: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  impact: 'positive' | 'neutral' | 'negative';\n  evidence: string[];\n  recommendations: string[];\n}\n\nexport interface DueDiligenceRecommendation {\n  id: string;\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  estimatedCost?: number;\n  estimatedTimeframe?: string;\n  responsibleParty: string;\n}\n\nexport interface DueDiligenceRiskAssessment {\n  overallRisk: 'low' | 'medium' | 'high' | 'critical';\n  financialRisk: 'low' | 'medium' | 'high' | 'critical';\n  operationalRisk: 'low' | 'medium' | 'high' | 'critical';\n  legalRisk: 'low' | 'medium' | 'high' | 'critical';\n  marketRisk: 'low' | 'medium' | 'high' | 'critical';\n  risks: DueDiligenceRisk[];\n  mitigations: DueDiligenceMitigation[];\n}\n\nexport interface DueDiligenceRisk {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  probability: 'low' | 'medium' | 'high';\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface DueDiligenceMitigation {\n  id: string;\n  riskId: string;\n  title: string;\n  description: string;\n  effectiveness: 'low' | 'medium' | 'high';\n  cost: 'low' | 'medium' | 'high';\n  timeframe: string;\n}\n\nexport interface DueDiligenceTeamMember {\n  id: string;\n  processId: string;\n  userId: string;\n  name: string;\n  email: string;\n  role: 'buyer' | 'seller' | 'advisor' | 'accountant' | 'lawyer' | 'consultant';\n  permissions: DueDiligencePermissions;\n  isActive: boolean;\n  joinedAt: string;\n}\n\nexport interface DueDiligencePermissions {\n  canViewDocuments: boolean;\n  canUploadDocuments: boolean;\n  canEditChecklist: boolean;\n  canSendMessages: boolean;\n  canGenerateReports: boolean;\n  canManageTeam: boolean;\n  documentAccessLevel: 'none' | 'limited' | 'full';\n}\n\nexport interface DueDiligenceComment {\n  id: string;\n  authorId: string;\n  authorName: string;\n  content: string;\n  timestamp: string;\n  type: 'comment' | 'question' | 'concern' | 'approval' | 'rejection';\n  isResolved: boolean;\n  resolvedBy?: string;\n  resolvedAt?: string;\n}\n\nexport interface DueDiligenceTemplate {\n  id: string;\n  name: string;\n  description: string;\n  industry: string;\n  businessSize: 'small' | 'medium' | 'large';\n  categories: DueDiligenceCategory[];\n  isDefault: boolean;\n  createdBy: string;\n  createdAt: string;\n}\n\n// API Request/Response Types\nexport interface CreateDueDiligenceRequest {\n  listingId: string;\n  buyerId: string;\n  templateId?: string;\n  estimatedCompletionDate: string;\n  teamMembers: Omit<DueDiligenceTeamMember, 'id' | 'processId' | 'joinedAt'>[];\n}\n\nexport interface UpdateDueDiligenceItemRequest {\n  itemId: string;\n  status: DueDiligenceItem['status'];\n  comments?: string;\n  assignedTo?: string;\n  dueDate?: string;\n}\n\nexport interface UploadDueDiligenceDocumentRequest {\n  processId: string;\n  itemId?: string;\n  file: File;\n  category: string;\n  description?: string;\n  accessLevel: DueDiligenceDocument['accessLevel'];\n  tags?: string[];\n}\n\nexport interface SendDueDiligenceMessageRequest {\n  processId: string;\n  to: string[];\n  subject: string;\n  content: string;\n  priority: DueDiligenceCommunication['priority'];\n  relatedItemId?: string;\n  attachments?: string[];\n}\n\n// Dashboard and UI Types\nexport interface DueDiligenceDashboard {\n  process: DueDiligenceProcess;\n  recentActivity: DueDiligenceActivity[];\n  upcomingDeadlines: DueDiligenceDeadline[];\n  teamStatus: DueDiligenceTeamStatus[];\n  progressMetrics: DueDiligenceProgressMetrics;\n}\n\nexport interface DueDiligenceActivity {\n  id: string;\n  type:\n    | 'document_uploaded'\n    | 'item_completed'\n    | 'message_sent'\n    | 'report_generated'\n    | 'status_changed';\n  description: string;\n  timestamp: string;\n  userId: string;\n  userName: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface DueDiligenceDeadline {\n  id: string;\n  title: string;\n  dueDate: string;\n  type: 'item' | 'document' | 'report' | 'process';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  isOverdue: boolean;\n  assignedTo: string;\n}\n\nexport interface DueDiligenceTeamStatus {\n  userId: string;\n  name: string;\n  role: string;\n  isOnline: boolean;\n  lastActive: string;\n  pendingTasks: number;\n  completedTasks: number;\n}\n\nexport interface DueDiligenceProgressMetrics {\n  overallProgress: number;\n  categoryProgress: Record<string, number>;\n  itemsCompleted: number;\n  itemsTotal: number;\n  documentsUploaded: number;\n  documentsPending: number;\n  daysRemaining: number;\n  onTrack: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/offer-management.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3604,3607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3604,3607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3673,3676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3673,3676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3690,3693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3690,3693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Offer Management Types\n * Location: src/shared/types/offer-management.ts\n * Purpose: Type definitions for offer management and negotiation system\n */\n\nexport interface Offer {\n  id: string;\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n  status:\n    | 'draft'\n    | 'submitted'\n    | 'under_review'\n    | 'accepted'\n    | 'rejected'\n    | 'countered'\n    | 'expired'\n    | 'withdrawn';\n  type: 'initial' | 'counter' | 'final';\n  parentOfferId?: string; // For counter-offers\n\n  // Financial Terms\n  offerPrice: number;\n  currency: string;\n  paymentStructure: PaymentStructure;\n  financingDetails?: FinancingDetails;\n\n  // Terms and Conditions\n  conditions: OfferCondition[];\n  contingencies: OfferContingency[];\n  timeline: OfferTimeline;\n\n  // Additional Terms\n  additionalTerms: string;\n  specialRequests: string[];\n\n  // Metadata\n  submittedAt: string;\n  expiresAt: string;\n  lastModifiedAt: string;\n  createdBy: string;\n  version: number;\n\n  // Negotiation History\n  negotiationHistory: NegotiationEvent[];\n  comments: OfferComment[];\n\n  // Attachments\n  attachments: OfferAttachment[];\n\n  // Approval Workflow\n  approvals: OfferApproval[];\n  requiresApproval: boolean;\n}\n\nexport interface PaymentStructure {\n  type: 'cash' | 'financed' | 'mixed' | 'earnout' | 'stock';\n  cashAmount?: number;\n  financedAmount?: number;\n  earnoutDetails?: EarnoutDetails;\n  stockDetails?: StockDetails;\n  downPayment?: number;\n  paymentSchedule?: PaymentSchedule[];\n}\n\nexport interface EarnoutDetails {\n  totalAmount: number;\n  duration: number; // months\n  milestones: EarnoutMilestone[];\n  performanceMetrics: string[];\n}\n\nexport interface EarnoutMilestone {\n  id: string;\n  description: string;\n  targetValue: number;\n  targetDate: string;\n  percentage: number;\n}\n\nexport interface StockDetails {\n  stockType: 'common' | 'preferred' | 'warrants';\n  percentage: number;\n  valuation: number;\n  vestingSchedule?: VestingSchedule[];\n}\n\nexport interface VestingSchedule {\n  percentage: number;\n  vestingDate: string;\n  conditions?: string[];\n}\n\nexport interface PaymentSchedule {\n  amount: number;\n  dueDate: string;\n  description: string;\n  conditions?: string[];\n}\n\nexport interface FinancingDetails {\n  lenderName?: string;\n  loanAmount?: number;\n  interestRate?: number;\n  termLength?: number; // months\n  preApproved: boolean;\n  preApprovalDocument?: string;\n  financingContingency: boolean;\n}\n\nexport interface OfferCondition {\n  id: string;\n  type: 'due_diligence' | 'financing' | 'regulatory' | 'board_approval' | 'custom';\n  description: string;\n  isRequired: boolean;\n  deadline?: string;\n  status: 'pending' | 'satisfied' | 'waived' | 'failed';\n  documents?: string[];\n}\n\nexport interface OfferContingency {\n  id: string;\n  type: 'inspection' | 'appraisal' | 'environmental' | 'legal' | 'financial' | 'custom';\n  description: string;\n  deadline: string;\n  responsibleParty: 'buyer' | 'seller' | 'both';\n  status: 'pending' | 'satisfied' | 'waived' | 'failed';\n  estimatedCost?: number;\n  documents?: string[];\n}\n\nexport interface OfferTimeline {\n  dueDiligencePeriod: number; // days\n  financingPeriod: number; // days\n  closingDate: string;\n  inspectionPeriod?: number; // days\n  responseDeadline: string; // for seller response\n}\n\nexport interface NegotiationEvent {\n  id: string;\n  type:\n    | 'offer_submitted'\n    | 'counter_offer'\n    | 'acceptance'\n    | 'rejection'\n    | 'modification'\n    | 'withdrawal'\n    | 'expiration'\n    | 'comment';\n  timestamp: string;\n  userId: string;\n  userName: string;\n  description: string;\n  changes?: OfferChange[];\n  metadata?: Record<string, any>;\n}\n\nexport interface OfferChange {\n  field: string;\n  oldValue: any;\n  newValue: any;\n  reason?: string;\n}\n\nexport interface OfferComment {\n  id: string;\n  authorId: string;\n  authorName: string;\n  content: string;\n  timestamp: string;\n  isPrivate: boolean;\n  attachments?: string[];\n}\n\nexport interface OfferAttachment {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  uploadedBy: string;\n  uploadedAt: string;\n  downloadUrl: string;\n  category: 'financial' | 'legal' | 'inspection' | 'other';\n}\n\nexport interface OfferApproval {\n  id: string;\n  approverId: string;\n  approverName: string;\n  approverRole: string;\n  status: 'pending' | 'approved' | 'rejected';\n  comments?: string;\n  timestamp?: string;\n  required: boolean;\n}\n\n// Dashboard and UI Types\nexport interface OfferDashboard {\n  activeOffers: Offer[];\n  pendingOffers: Offer[];\n  completedOffers: Offer[];\n  statistics: OfferStatistics;\n  recentActivity: NegotiationEvent[];\n  upcomingDeadlines: OfferDeadline[];\n}\n\nexport interface OfferStatistics {\n  totalOffers: number;\n  activeOffers: number;\n  acceptedOffers: number;\n  rejectedOffers: number;\n  averageOfferValue: number;\n  averageNegotiationTime: number; // days\n  successRate: number; // percentage\n}\n\nexport interface OfferDeadline {\n  id: string;\n  offerId: string;\n  title: string;\n  deadline: string;\n  type: 'response' | 'due_diligence' | 'financing' | 'closing' | 'inspection';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  isOverdue: boolean;\n}\n\nexport interface OfferComparison {\n  offers: Offer[];\n  comparisonFields: string[];\n  summary: {\n    highestOffer: number;\n    lowestOffer: number;\n    averageOffer: number;\n    mostFavorableTerms: string;\n  };\n}\n\n// API Request/Response Types\nexport interface CreateOfferRequest {\n  listingId: string;\n  offerPrice: number;\n  currency: string;\n  paymentStructure: PaymentStructure;\n  conditions: Omit<OfferCondition, 'id' | 'status'>[];\n  contingencies: Omit<OfferContingency, 'id' | 'status'>[];\n  timeline: OfferTimeline;\n  additionalTerms?: string;\n  specialRequests?: string[];\n  financingDetails?: FinancingDetails;\n}\n\nexport interface UpdateOfferRequest {\n  offerId: string;\n  changes: Partial<Offer>;\n  reason?: string;\n}\n\nexport interface CounterOfferRequest {\n  parentOfferId: string;\n  offerPrice?: number;\n  paymentStructure?: PaymentStructure;\n  conditions?: OfferCondition[];\n  contingencies?: OfferContingency[];\n  timeline?: OfferTimeline;\n  additionalTerms?: string;\n  specialRequests?: string[];\n  reason: string;\n}\n\nexport interface AcceptOfferRequest {\n  offerId: string;\n  comments?: string;\n  conditions?: string[];\n}\n\nexport interface RejectOfferRequest {\n  offerId: string;\n  reason: string;\n  comments?: string;\n}\n\nexport interface WithdrawOfferRequest {\n  offerId: string;\n  reason: string;\n}\n\nexport interface AddOfferCommentRequest {\n  offerId: string;\n  content: string;\n  isPrivate?: boolean;\n  attachments?: string[];\n}\n\n// Notification Types\nexport interface OfferNotification {\n  id: string;\n  type:\n    | 'new_offer'\n    | 'counter_offer'\n    | 'offer_accepted'\n    | 'offer_rejected'\n    | 'offer_expired'\n    | 'deadline_reminder';\n  offerId: string;\n  userId: string;\n  title: string;\n  message: string;\n  timestamp: string;\n  isRead: boolean;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  actionRequired: boolean;\n  actionUrl?: string;\n}\n\n// Template Types\nexport interface OfferTemplate {\n  id: string;\n  name: string;\n  description: string;\n  industry: string;\n  businessSize: 'small' | 'medium' | 'large';\n  template: Partial<Offer>;\n  isDefault: boolean;\n  createdBy: string;\n  createdAt: string;\n}\n\n// Analytics Types\nexport interface OfferAnalytics {\n  timeRange: {\n    start: string;\n    end: string;\n  };\n  metrics: {\n    totalOffers: number;\n    offerVolume: number;\n    averageOfferValue: number;\n    acceptanceRate: number;\n    averageNegotiationRounds: number;\n    timeToClose: number; // days\n  };\n  trends: {\n    offerValues: { date: string; value: number }[];\n    acceptanceRates: { date: string; rate: number }[];\n    negotiationRounds: { date: string; rounds: number }[];\n  };\n  breakdown: {\n    byIndustry: Record<string, number>;\n    byBusinessSize: Record<string, number>;\n    byPaymentType: Record<string, number>;\n    byStatus: Record<string, number>;\n  };\n}\n\n// Search and Filter Types\nexport interface OfferFilters {\n  status?: Offer['status'][];\n  type?: Offer['type'][];\n  priceRange?: {\n    min: number;\n    max: number;\n  };\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n  industry?: string[];\n  businessSize?: string[];\n  paymentType?: PaymentStructure['type'][];\n  hasContingencies?: boolean;\n  requiresFinancing?: boolean;\n}\n\nexport interface OfferSearchParams {\n  query?: string;\n  filters?: OfferFilters;\n  sortBy?: 'price' | 'date' | 'status' | 'deadline';\n  sortOrder?: 'asc' | 'desc';\n  page?: number;\n  limit?: number;\n}\n\n// Workflow Types\nexport interface OfferWorkflow {\n  id: string;\n  name: string;\n  description: string;\n  steps: OfferWorkflowStep[];\n  isActive: boolean;\n  applicableRoles: string[];\n}\n\nexport interface OfferWorkflowStep {\n  id: string;\n  name: string;\n  description: string;\n  order: number;\n  requiredRole: string;\n  isRequired: boolean;\n  estimatedDuration: number; // hours\n  dependencies: string[];\n  actions: OfferWorkflowAction[];\n}\n\nexport interface OfferWorkflowAction {\n  id: string;\n  name: string;\n  type: 'approve' | 'reject' | 'modify' | 'request_info' | 'escalate';\n  required: boolean;\n  conditions?: string[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/seo.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[358,361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[358,361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SEO Types and Interfaces\n *\n * Centralized SEO type definitions for the UpSwitch platform.\n * Used across components, pages, and utilities for consistent SEO handling.\n */\n\nexport interface SEOProps {\n  title: string;\n  description: string;\n  keywords: string;\n  type?: 'website' | 'article' | 'product' | 'profile';\n  structuredData?: Record<string, any>;\n  canonical?: string;\n  openGraph?: {\n    title?: string;\n    description?: string;\n    image?: string;\n    url?: string;\n    type?: string;\n  };\n  twitter?: {\n    card?: string;\n    title?: string;\n    description?: string;\n    image?: string;\n    creator?: string;\n  };\n  noIndex?: boolean;\n  author?: string;\n  publishedTime?: string;\n  modifiedTime?: string;\n  image?: string;\n  url?: string;\n  twitterHandle?: string;\n  canonicalUrl?: string;\n}\n\nexport interface SEOValidationResult {\n  isValid: boolean;\n  warnings: string[];\n  errors: string[];\n  suggestions: string[];\n}\n\nexport interface SEOData {\n  [key: string]: SEOProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/transaction-completion.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":360,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8742,8745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8742,8745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Transaction Completion Types\n * Location: src/shared/types/transaction-completion.ts\n * Purpose: Type definitions for transaction completion and closing process\n */\n\nexport interface Transaction {\n  id: string;\n  offerId: string;\n  listingId: string;\n  buyerId: string;\n  sellerId: string;\n  status: 'pending' | 'in_progress' | 'ready_to_close' | 'closed' | 'cancelled' | 'disputed';\n  type: 'asset_purchase' | 'stock_purchase' | 'merger' | 'joint_venture';\n\n  // Financial Details\n  totalValue: number;\n  currency: string;\n  paymentStructure: TransactionPaymentStructure;\n  escrowDetails?: EscrowDetails;\n\n  // Timeline\n  closingDate: string;\n  actualClosingDate?: string;\n  createdDate: string;\n  lastUpdated: string;\n\n  // Key Dates\n  keyDates: TransactionKeyDate[];\n\n  // Parties\n  parties: TransactionParty[];\n\n  // Documents\n  documents: TransactionDocument[];\n\n  // Tasks and Checklist\n  closingChecklist: ClosingChecklistItem[];\n\n  // Payments\n  payments: TransactionPayment[];\n\n  // Post-Closing\n  postClosingItems: PostClosingItem[];\n\n  // Communication\n  communications: TransactionCommunication[];\n\n  // Metadata\n  version: number;\n  createdBy: string;\n  requiresApproval: boolean;\n  approvals: TransactionApproval[];\n}\n\nexport interface TransactionPaymentStructure {\n  type: 'cash' | 'financed' | 'mixed' | 'earnout' | 'stock';\n  cashAmount?: number;\n  financedAmount?: number;\n  earnoutDetails?: EarnoutDetails;\n  stockDetails?: StockDetails;\n  downPayment?: number;\n  paymentSchedule?: PaymentSchedule[];\n}\n\nexport interface EarnoutDetails {\n  totalAmount: number;\n  duration: number; // months\n  milestones: EarnoutMilestone[];\n  performanceMetrics: string[];\n  currentProgress: EarnoutProgress[];\n}\n\nexport interface EarnoutMilestone {\n  id: string;\n  description: string;\n  targetValue: number;\n  targetDate: string;\n  percentage: number;\n  status: 'pending' | 'achieved' | 'missed';\n  achievedDate?: string;\n  actualValue?: number;\n}\n\nexport interface EarnoutProgress {\n  milestoneId: string;\n  currentValue: number;\n  progressPercentage: number;\n  lastUpdated: string;\n  notes?: string;\n}\n\nexport interface StockDetails {\n  stockType: 'common' | 'preferred' | 'warrants';\n  percentage: number;\n  valuation: number;\n  vestingSchedule?: VestingSchedule[];\n  currentVesting?: VestingProgress[];\n}\n\nexport interface VestingSchedule {\n  percentage: number;\n  vestingDate: string;\n  conditions?: string[];\n}\n\nexport interface VestingProgress {\n  scheduleId: string;\n  vestedPercentage: number;\n  lastVestedDate: string;\n  nextVestingDate?: string;\n}\n\nexport interface PaymentSchedule {\n  id: string;\n  amount: number;\n  dueDate: string;\n  description: string;\n  status: 'pending' | 'paid' | 'overdue' | 'cancelled';\n  paidDate?: string;\n  paymentMethod?: string;\n  reference?: string;\n  conditions?: string[];\n}\n\nexport interface EscrowDetails {\n  escrowAgent: string;\n  escrowAccount: string;\n  escrowAmount: number;\n  releaseConditions: EscrowReleaseCondition[];\n  status: 'active' | 'released' | 'disputed';\n  releaseDate?: string;\n}\n\nexport interface EscrowReleaseCondition {\n  id: string;\n  description: string;\n  status: 'pending' | 'satisfied' | 'waived';\n  satisfiedDate?: string;\n  requiredBy: string;\n}\n\nexport interface TransactionKeyDate {\n  id: string;\n  name: string;\n  date: string;\n  type: 'milestone' | 'deadline' | 'deliverable' | 'payment' | 'closing';\n  status: 'upcoming' | 'completed' | 'overdue' | 'cancelled';\n  description?: string;\n  responsibleParty: string;\n  isCritical: boolean;\n}\n\nexport interface TransactionParty {\n  id: string;\n  name: string;\n  role: 'buyer' | 'seller' | 'advisor' | 'lawyer' | 'accountant' | 'banker' | 'escrow_agent';\n  contactInfo: ContactInfo;\n  responsibilities: string[];\n  isActive: boolean;\n  signedAgreement: boolean;\n  signedDate?: string;\n}\n\nexport interface ContactInfo {\n  email: string;\n  phone?: string;\n  address?: Address;\n  company?: string;\n  title?: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n}\n\nexport interface TransactionDocument {\n  id: string;\n  name: string;\n  type: 'legal' | 'financial' | 'operational' | 'regulatory' | 'closing' | 'other';\n  category: string;\n  status: 'pending' | 'draft' | 'review' | 'approved' | 'signed' | 'filed';\n  requiredBy: string;\n  dueDate: string;\n  uploadedBy?: string;\n  uploadedDate?: string;\n  fileSize?: number;\n  downloadUrl?: string;\n  version: number;\n  isLatest: boolean;\n  signatures: DocumentSignature[];\n  comments: DocumentComment[];\n}\n\nexport interface DocumentSignature {\n  id: string;\n  signatoryId: string;\n  signatoryName: string;\n  signedDate: string;\n  signatureMethod: 'electronic' | 'wet_signature' | 'digital';\n  ipAddress?: string;\n  location?: string;\n}\n\nexport interface DocumentComment {\n  id: string;\n  authorId: string;\n  authorName: string;\n  content: string;\n  timestamp: string;\n  isResolved: boolean;\n}\n\nexport interface ClosingChecklistItem {\n  id: string;\n  category: 'legal' | 'financial' | 'operational' | 'regulatory' | 'closing' | 'post_closing';\n  title: string;\n  description: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked' | 'not_applicable';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  assignedTo: string;\n  dueDate: string;\n  completedDate?: string;\n  dependencies: string[];\n  documents: string[]; // Document IDs\n  comments: ChecklistComment[];\n  isRequired: boolean;\n}\n\nexport interface ChecklistComment {\n  id: string;\n  authorId: string;\n  authorName: string;\n  content: string;\n  timestamp: string;\n  type: 'comment' | 'question' | 'concern' | 'resolution';\n}\n\nexport interface TransactionPayment {\n  id: string;\n  type: 'down_payment' | 'closing_payment' | 'earnout_payment' | 'financing_payment' | 'other';\n  amount: number;\n  currency: string;\n  dueDate: string;\n  paidDate?: string;\n  status: 'pending' | 'paid' | 'overdue' | 'cancelled';\n  paymentMethod: 'wire_transfer' | 'check' | 'ach' | 'escrow' | 'other';\n  reference?: string;\n  fromParty: string;\n  toParty: string;\n  description?: string;\n  confirmationNumber?: string;\n  bankDetails?: BankDetails;\n}\n\nexport interface BankDetails {\n  bankName: string;\n  accountNumber: string;\n  routingNumber: string;\n  swiftCode?: string;\n  accountHolder: string;\n}\n\nexport interface PostClosingItem {\n  id: string;\n  title: string;\n  description: string;\n  type: 'transition' | 'integration' | 'compliance' | 'reporting' | 'other';\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  assignedTo: string;\n  dueDate: string;\n  completedDate?: string;\n  responsibleParty: 'buyer' | 'seller' | 'both';\n  estimatedDuration: number; // days\n  actualDuration?: number;\n  dependencies: string[];\n  deliverables: string[];\n  comments: PostClosingComment[];\n}\n\nexport interface PostClosingComment {\n  id: string;\n  authorId: string;\n  authorName: string;\n  content: string;\n  timestamp: string;\n  type: 'update' | 'question' | 'issue' | 'resolution';\n}\n\nexport interface TransactionCommunication {\n  id: string;\n  type: 'email' | 'meeting' | 'call' | 'message' | 'notification';\n  subject: string;\n  content: string;\n  from: string;\n  to: string[];\n  timestamp: string;\n  isRead: boolean;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  relatedItemId?: string;\n  attachments: string[];\n  actionRequired: boolean;\n  actionDeadline?: string;\n}\n\nexport interface TransactionApproval {\n  id: string;\n  approverId: string;\n  approverName: string;\n  approverRole: string;\n  status: 'pending' | 'approved' | 'rejected';\n  comments?: string;\n  timestamp?: string;\n  required: boolean;\n  approvalType: 'legal' | 'financial' | 'operational' | 'regulatory' | 'final';\n}\n\n// Dashboard and UI Types\nexport interface TransactionDashboard {\n  transaction: Transaction;\n  progress: TransactionProgress;\n  upcomingDeadlines: TransactionKeyDate[];\n  recentActivity: TransactionActivity[];\n  teamStatus: TransactionTeamStatus[];\n  financialSummary: FinancialSummary;\n}\n\nexport interface TransactionProgress {\n  overallProgress: number;\n  categoryProgress: Record<string, number>;\n  tasksCompleted: number;\n  tasksTotal: number;\n  documentsCompleted: number;\n  documentsTotal: number;\n  paymentsCompleted: number;\n  paymentsTotal: number;\n  daysToClosing: number;\n  onTrack: boolean;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface TransactionActivity {\n  id: string;\n  type:\n    | 'task_completed'\n    | 'document_uploaded'\n    | 'payment_made'\n    | 'milestone_reached'\n    | 'communication'\n    | 'status_changed';\n  description: string;\n  timestamp: string;\n  userId: string;\n  userName: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TransactionTeamStatus {\n  userId: string;\n  name: string;\n  role: string;\n  isOnline: boolean;\n  lastActive: string;\n  pendingTasks: number;\n  completedTasks: number;\n  overdueItems: number;\n}\n\nexport interface FinancialSummary {\n  totalValue: number;\n  paidAmount: number;\n  pendingAmount: number;\n  overdueAmount: number;\n  nextPayment?: TransactionPayment;\n  escrowAmount?: number;\n  earnoutProgress?: EarnoutProgressSummary;\n}\n\nexport interface EarnoutProgressSummary {\n  totalEarnout: number;\n  earnedToDate: number;\n  remainingAmount: number;\n  nextMilestone?: EarnoutMilestone;\n  progressPercentage: number;\n}\n\n// API Request/Response Types\nexport interface CreateTransactionRequest {\n  offerId: string;\n  closingDate: string;\n  type: Transaction['type'];\n  paymentStructure: TransactionPaymentStructure;\n  parties: Omit<TransactionParty, 'id'>[];\n  keyDates: Omit<TransactionKeyDate, 'id'>[];\n}\n\nexport interface UpdateTransactionRequest {\n  transactionId: string;\n  updates: Partial<Transaction>;\n  reason?: string;\n}\n\nexport interface UpdateChecklistItemRequest {\n  itemId: string;\n  status: ClosingChecklistItem['status'];\n  comments?: string;\n  completedDate?: string;\n}\n\nexport interface ProcessPaymentRequest {\n  paymentId: string;\n  amount: number;\n  paymentMethod: TransactionPayment['paymentMethod'];\n  reference?: string;\n  confirmationNumber?: string;\n  bankDetails?: BankDetails;\n}\n\nexport interface UploadDocumentRequest {\n  transactionId: string;\n  document: File;\n  type: TransactionDocument['type'];\n  category: string;\n  requiredBy: string;\n  dueDate: string;\n}\n\nexport interface SignDocumentRequest {\n  documentId: string;\n  signatoryId: string;\n  signatureMethod: DocumentSignature['signatureMethod'];\n  location?: string;\n}\n\nexport interface AddCommunicationRequest {\n  transactionId: string;\n  type: TransactionCommunication['type'];\n  subject: string;\n  content: string;\n  to: string[];\n  priority: TransactionCommunication['priority'];\n  relatedItemId?: string;\n  attachments?: string[];\n}\n\n// Notification Types\nexport interface TransactionNotification {\n  id: string;\n  type:\n    | 'deadline_reminder'\n    | 'payment_due'\n    | 'document_required'\n    | 'milestone_reached'\n    | 'status_change'\n    | 'approval_required';\n  transactionId: string;\n  userId: string;\n  title: string;\n  message: string;\n  timestamp: string;\n  isRead: boolean;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  actionRequired: boolean;\n  actionUrl?: string;\n  relatedItemId?: string;\n}\n\n// Analytics Types\nexport interface TransactionAnalytics {\n  timeRange: {\n    start: string;\n    end: string;\n  };\n  metrics: {\n    totalTransactions: number;\n    completedTransactions: number;\n    averageClosingTime: number; // days\n    successRate: number; // percentage\n    averageValue: number;\n    paymentCompletionRate: number;\n  };\n  trends: {\n    closingTimes: { date: string; days: number }[];\n    transactionValues: { date: string; value: number }[];\n    successRates: { date: string; rate: number }[];\n  };\n  breakdown: {\n    byType: Record<string, number>;\n    byStatus: Record<string, number>;\n    byPaymentType: Record<string, number>;\n    byIndustry: Record<string, number>;\n  };\n}\n\n// Search and Filter Types\nexport interface TransactionFilters {\n  status?: Transaction['status'][];\n  type?: Transaction['type'][];\n  valueRange?: {\n    min: number;\n    max: number;\n  };\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n  assignedTo?: string[];\n  priority?: string[];\n  hasOverdueItems?: boolean;\n}\n\nexport interface TransactionSearchParams {\n  query?: string;\n  filters?: TransactionFilters;\n  sortBy?: 'closingDate' | 'value' | 'status' | 'progress';\n  sortOrder?: 'asc' | 'desc';\n  page?: number;\n  limit?: number;\n}\n\n// Workflow Types\nexport interface TransactionWorkflow {\n  id: string;\n  name: string;\n  description: string;\n  type: Transaction['type'];\n  steps: TransactionWorkflowStep[];\n  isActive: boolean;\n  applicableRoles: string[];\n}\n\nexport interface TransactionWorkflowStep {\n  id: string;\n  name: string;\n  description: string;\n  order: number;\n  requiredRole: string;\n  isRequired: boolean;\n  estimatedDuration: number; // hours\n  dependencies: string[];\n  deliverables: string[];\n  actions: TransactionWorkflowAction[];\n}\n\nexport interface TransactionWorkflowAction {\n  id: string;\n  name: string;\n  type: 'approve' | 'reject' | 'modify' | 'request_info' | 'escalate' | 'complete';\n  required: boolean;\n  conditions?: string[];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/types/user.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8438,8441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8438,8441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8476,8479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8476,8479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🔐 User Types - MVP Version\n// Location: src/shared/types/user.ts\n// Purpose: User type definitions for MVP frontend\n// Based on data room types with MVP-specific simplifications\n\n// =============================================================================\n// CORE ENUMS AND TYPES\n// =============================================================================\n\nexport type UserRole = 'buyer' | 'seller' | 'both' | 'admin';\nexport type AuthProvider = 'email' | 'google';\nexport type Language = 'en' | 'nl' | 'fr';\nexport type Country = 'BE' | 'NL' | 'FR' | 'DE' | 'US';\n\n// =============================================================================\n// CORE USER INTERFACE - MVP VERSION\n// =============================================================================\n\n/**\n * User interface - MVP version based on data room types\n * Simplified for MVP needs while maintaining compatibility\n */\nexport interface User {\n  // Core Identity\n  id: string;\n  email: string;\n  name: string;\n  phone?: string;\n\n  // Role Management\n  role: UserRole;\n\n  // Business Information (sellers only)\n  company_name?: string;\n  company_description?: string;\n\n  // Enhanced Business Data (MVP Critical Fields)\n  industry?: string;\n  business_type?: string;\n  years_in_operation?: number;\n\n  // Financial & Size Indicators\n  revenue_range?: string;\n  asking_price_range?: string;\n  employee_count_range?: string;\n\n  // Business Status & Marketing\n  business_verified?: boolean;\n  listing_status?: 'draft' | 'active' | 'under_offer' | 'sold' | 'withdrawn';\n  business_highlights?: string;\n  reason_for_selling?: string;\n\n  // Location\n  city?: string;\n  country: Country;\n\n  // Verification\n  email_verified: boolean;\n  verification_token?: string;\n  verification_token_expires_at?: string;\n\n  // Authentication\n  auth_provider: AuthProvider;\n\n  // Preferences\n  language_preference: Language;\n\n  // Audit Fields\n  created_at: string;\n  updated_at: string;\n  last_login_at?: string;\n  deleted_at?: string;\n\n  // MVP-specific fields\n  avatar?: string;\n  preferences?: UserPreferences;\n\n  // Additional fields for compatibility\n  location?: string;\n  company?: string;\n  bio?: string;\n}\n\n// =============================================================================\n// USER PREFERENCES\n// =============================================================================\n\nexport interface UserPreferences {\n  theme?: 'light' | 'dark' | 'system';\n  notifications?: {\n    email: boolean;\n    push: boolean;\n    marketing: boolean;\n  };\n  language?: string;\n  timezone?: string;\n}\n\n// =============================================================================\n// AUTHENTICATION TYPES\n// =============================================================================\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  email: string;\n  password: string;\n  name: string;\n  role?: UserRole;\n  phone?: string;\n  city?: string;\n  country?: Country;\n  company_name?: string;\n  company_description?: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  expires_in: number;\n}\n\nexport interface AuthResult {\n  isAuthenticated: boolean;\n  user?: User;\n  token?: string;\n}\n\nexport interface AuthCheckResponse {\n  isAuthenticated: boolean;\n  user?: User;\n  error?: string;\n}\n\n// =============================================================================\n// PROFILE UPDATE TYPES\n// =============================================================================\n\nexport interface UpdateProfileRequest {\n  name?: string;\n  phone?: string;\n  city?: string;\n  country?: Country;\n  language_preference?: Language;\n}\n\nexport interface UpdateBusinessInfoRequest {\n  company_name?: string;\n  company_description?: string;\n  industry?: string;\n  business_type?: string;\n  years_in_operation?: number;\n  revenue_range?: string;\n  asking_price_range?: string;\n  employee_count_range?: string;\n  business_highlights?: string;\n  reason_for_selling?: string;\n}\n\nexport interface RoleToggleRequest {\n  new_role: UserRole;\n  business_info?: {\n    company_name: string;\n    company_description?: string;\n  };\n}\n\n// =============================================================================\n// API RESPONSE TYPES\n// =============================================================================\n\nexport interface UserResponse {\n  success: boolean;\n  data?: User;\n  error?: string;\n  message?: string;\n  timestamp: string;\n}\n\nexport interface UsersListResponse {\n  success: boolean;\n  data?: User[];\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n  error?: string;\n  timestamp: string;\n}\n\n// =============================================================================\n// TYPE GUARDS AND UTILITIES\n// =============================================================================\n\n/**\n * Type guards for role checking\n */\nexport const isSellerUser = (user: User | null | undefined): boolean => {\n  if (!user?.role) return false;\n  return user.role === 'seller' || user.role === 'both';\n};\n\nexport const isBuyerUser = (user: User | null | undefined): boolean => {\n  if (!user?.role) return false;\n  return user.role === 'buyer' || user.role === 'both';\n};\n\nexport const isAdminUser = (user: User | null | undefined): boolean => {\n  if (!user?.role) return false;\n  return user.role === 'admin';\n};\n\nexport const hasBusinessInfo = (user: User | null | undefined): boolean => {\n  if (!user) return false;\n  return !!(user.company_name && user.company_description);\n};\n\nexport const isVerifiedUser = (user: User | null | undefined): boolean => {\n  if (!user) return false;\n  return user.email_verified;\n};\n\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================\n\nexport type PublicUserFields = Pick<User, 'id' | 'name' | 'city' | 'country' | 'created_at'>;\nexport type RequiredUserFields = Pick<User, 'email' | 'name' | 'role'>;\nexport type BusinessUserFields = Pick<User, 'company_name' | 'company_description'>;\n\n// =============================================================================\n// CONSTANTS\n// =============================================================================\n\nexport const USER_ROLES: UserRole[] = ['buyer', 'seller', 'both', 'admin'];\nexport const COUNTRIES: Country[] = ['BE', 'NL', 'FR', 'DE', 'US'];\nexport const LANGUAGES: Language[] = ['en', 'nl', 'fr'];\n\nexport const COUNTRY_LABELS: Record<Country, string> = {\n  BE: 'Belgium',\n  NL: 'Netherlands',\n  FR: 'France',\n  DE: 'Germany',\n  US: 'United States',\n};\n\nexport const LANGUAGE_LABELS: Record<Language, string> = {\n  en: 'English',\n  nl: 'Nederlands',\n  fr: 'Français',\n};\n\nexport const DEFAULT_USER_VALUES = {\n  role: 'buyer' as UserRole,\n  country: 'BE' as Country,\n  language_preference: 'en' as Language,\n  email_verified: false,\n  auth_provider: 'email' as AuthProvider,\n} as const;\n\n// =============================================================================\n// BUSINESS CONSTANTS\n// =============================================================================\n\nexport const INDUSTRIES = [\n  'Technology',\n  'Manufacturing',\n  'Business Consulting',\n  'Food & Beverage',\n  'E-commerce',\n  'Healthcare',\n  'Education',\n  'Real Estate',\n  'Financial Services',\n  'Transportation',\n  'Other',\n] as const;\n\nexport const REVENUE_RANGES = ['<€100K', '€100K-€500K', '€500K-€1M', '€1M-€5M', '€5M+'] as const;\n\nexport const ASKING_PRICE_RANGES = [\n  '<€100K',\n  '€100K-€500K',\n  '€500K-€1M',\n  '€1M-€5M',\n  '€5M+',\n] as const;\n\nexport const EMPLOYEE_COUNT_RANGES = ['1-5', '6-20', '21-50', '51-100', '100+'] as const;\n\nexport const BUSINESS_TYPES = [\n  'Sole Proprietorship',\n  'Partnership',\n  'LLC',\n  'Corporation',\n  'Other',\n] as const;\n\nexport const LISTING_STATUSES = ['draft', 'active', 'under_offer', 'sold', 'withdrawn'] as const;\n\n// =============================================================================\n// SUPABASE AUTH TYPES\n// =============================================================================\n\n/**\n * Supabase Auth User (from auth.users table)\n */\nexport interface SupabaseAuthUser {\n  id: string;\n  email?: string;\n  phone?: string;\n  created_at: string;\n  updated_at?: string;\n  email_confirmed_at?: string;\n  phone_confirmed_at?: string;\n  last_sign_in_at?: string;\n  app_metadata: Record<string, any>;\n  user_metadata: Record<string, any>;\n  aud: string;\n  confirmation_sent_at?: string;\n  recovery_sent_at?: string;\n  email_change_sent_at?: string;\n  new_email?: string;\n  new_phone?: string;\n  invited_at?: string;\n  action_link?: string;\n  email_change?: string;\n  phone_change?: string;\n  reauthentication_sent_at?: string;\n  reauthentication_token?: string;\n}\n\n/**\n * Supabase Session\n */\nexport interface SupabaseSession {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  expires_at?: number;\n  token_type: string;\n  user: SupabaseAuthUser;\n}\n\n/**\n * Supabase Auth Response\n */\nexport interface SupabaseAuthResponse {\n  data: {\n    user: SupabaseAuthUser | null;\n    session: SupabaseSession | null;\n  };\n  error: Error | null;\n}\n\n/**\n * Supabase User Metadata (stored in user_metadata)\n */\nexport interface SupabaseUserMetadata {\n  name?: string;\n  role?: UserRole;\n  company_name?: string;\n  company_description?: string;\n  industry?: string;\n  business_type?: string;\n  years_in_operation?: number;\n  revenue_range?: string;\n  asking_price_range?: string;\n  employee_count_range?: string;\n  business_verified?: boolean;\n  listing_status?: 'draft' | 'active' | 'under_offer' | 'sold' | 'withdrawn';\n  business_highlights?: string;\n  reason_for_selling?: string;\n  city?: string;\n  country?: Country;\n  language_preference?: Language;\n  avatar_url?: string;\n}\n\n/**\n * Convert Supabase Auth User to our User interface\n */\nexport const convertSupabaseUserToUser = (\n  supabaseUser: SupabaseAuthUser,\n  publicUserData?: Partial<User>\n): User => {\n  const metadata = supabaseUser.user_metadata as SupabaseUserMetadata;\n\n  return {\n    id: supabaseUser.id,\n    email: supabaseUser.email || '',\n    name: metadata.name || supabaseUser.email || 'Unknown User',\n    phone: supabaseUser.phone || undefined,\n    role: metadata.role || 'buyer',\n    company_name: metadata.company_name || undefined,\n    company_description: metadata.company_description || undefined,\n    industry: metadata.industry || undefined,\n    business_type: metadata.business_type || undefined,\n    years_in_operation: metadata.years_in_operation || undefined,\n    revenue_range: metadata.revenue_range || undefined,\n    asking_price_range: metadata.asking_price_range || undefined,\n    employee_count_range: metadata.employee_count_range || undefined,\n    business_verified: metadata.business_verified || false,\n    listing_status: metadata.listing_status || 'draft',\n    business_highlights: metadata.business_highlights || undefined,\n    reason_for_selling: metadata.reason_for_selling || undefined,\n    city: metadata.city || undefined,\n    country: metadata.country || 'BE',\n    email_verified: !!supabaseUser.email_confirmed_at,\n    verification_token: undefined, // Not stored in Supabase Auth\n    verification_token_expires_at: undefined, // Not stored in Supabase Auth\n    auth_provider: 'email', // Default for email auth\n    language_preference: metadata.language_preference || 'en',\n    created_at: supabaseUser.created_at,\n    updated_at: supabaseUser.updated_at || supabaseUser.created_at,\n    last_login_at: supabaseUser.last_sign_in_at || undefined,\n    deleted_at: undefined,\n    avatar: metadata.avatar_url || undefined,\n    preferences: undefined,\n\n    // Override with public user data if available\n    ...publicUserData,\n  };\n};\n\n/**\n * Convert our User interface to Supabase User Metadata\n */\nexport const convertUserToSupabaseMetadata = (user: Partial<User>): SupabaseUserMetadata => {\n  return {\n    name: user.name || undefined,\n    role: user.role || undefined,\n    company_name: user.company_name || undefined,\n    company_description: user.company_description || undefined,\n    industry: user.industry || undefined,\n    business_type: user.business_type || undefined,\n    years_in_operation: user.years_in_operation || undefined,\n    revenue_range: user.revenue_range || undefined,\n    asking_price_range: user.asking_price_range || undefined,\n    employee_count_range: user.employee_count_range || undefined,\n    business_verified: user.business_verified || undefined,\n    listing_status: user.listing_status || undefined,\n    business_highlights: user.business_highlights || undefined,\n    reason_for_selling: user.reason_for_selling || undefined,\n    city: user.city || undefined,\n    country: user.country || undefined,\n    language_preference: user.language_preference || undefined,\n    avatar_url: user.avatar || undefined,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/api/APISendRequest.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2014,2017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2014,2017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2223,2226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2223,2226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔌 API Request Utility - Enhanced with Type Safety\n *\n * Centralized API request handling with proper TypeScript support\n */\n\nimport { ApiClient, ApiResponse, ApiRequestConfig } from '../../types/api';\nimport { getApiConfig, getAuthHeader, requiresAuth } from '../../../config/api';\n\nconst apiConfig = getApiConfig();\nconst baseURL = apiConfig.baseURL;\n\nconst request = async <T>(\n  endpoint: string,\n  config: ApiRequestConfig = {}\n): Promise<ApiResponse<T>> => {\n  try {\n    // Add authentication headers if required\n    const authHeaders = requiresAuth(endpoint) ? getAuthHeader() : {};\n\n    // Prepare request configuration\n    const requestConfig: RequestInit = {\n      method: config.method || 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...authHeaders,\n        ...config.headers,\n      },\n      body: config.body ? JSON.stringify(config.body) : undefined,\n      credentials: config.credentials || 'include',\n      cache: config.cache || 'default',\n      signal: config.signal,\n    };\n\n    // Make the request\n    const response = await fetch(`${baseURL}${endpoint}`, requestConfig);\n\n    // Parse response\n    const data = await response.json();\n\n    // Return standardized response\n    if (response.ok) {\n      return {\n        success: true,\n        data,\n        statusCode: response.status,\n        timestamp: new Date().toISOString(),\n      };\n    } else {\n      return {\n        success: false,\n        error: data.error || data.message || 'Request failed',\n        statusCode: response.status,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      timestamp: new Date().toISOString(),\n    };\n  }\n};\n\nconst apiClient: ApiClient = {\n  get: async <T>(url: string, config: Omit<ApiRequestConfig, 'method'> = {}) => {\n    return request<T>(url, { ...config, method: 'GET' });\n  },\n  post: async <T>(url: string, data?: any, config: Omit<ApiRequestConfig, 'method'> = {}) => {\n    return request<T>(url, {\n      ...config,\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  },\n  put: async <T>(url: string, data?: any, config: Omit<ApiRequestConfig, 'method'> = {}) => {\n    return request<T>(url, {\n      ...config,\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  },\n  delete: async <T>(url: string, config: Omit<ApiRequestConfig, 'method'> = {}) => {\n    return request<T>(url, { ...config, method: 'DELETE' });\n  },\n  patch: async <T>(url: string, data?: any, config: Omit<ApiRequestConfig, 'method'> = {}) => {\n    return request<T>(url, {\n      ...config,\n      method: 'PATCH',\n      body: JSON.stringify(data),\n    });\n  },\n};\n\nexport default apiClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/dev/devBypass.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3537,3540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3537,3540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3597,3600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3597,3600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3958,3961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3958,3961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4009,4012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4009,4012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4699,4702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4699,4702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4772,4810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4905,4908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4905,4908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4954,4993],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5088,5091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5088,5091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5137,5178],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5551,5596],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 🚨 Development Bypass Utilities\n// Location: src/shared/utils/devBypass.ts\n// Purpose: Development environment bypass for authentication and testing\n\nimport type { User, UserRole } from '@/shared/types';\n\n// =============================================================================\n// DEVELOPMENT BYPASS CONFIGURATION\n// =============================================================================\n\n/**\n * Check if development bypass is enabled\n */\nexport const isDevBypassEnabled = (): boolean => {\n  const DEV_BYPASS_AUTH = import.meta.env.VITE_DEV_BYPASS_AUTH === 'true';\n  const isDevelopment = import.meta.env.DEV === true;\n\n  return DEV_BYPASS_AUTH && isDevelopment;\n};\n\n/**\n * Check if we're in development mode\n */\nexport const isDevelopmentMode = (): boolean => {\n  return import.meta.env.DEV === true;\n};\n\n/**\n * Check if debug mode is enabled\n */\nexport const isDebugModeEnabled = (): boolean => {\n  return import.meta.env.VITE_DEV_ENABLE_DEBUG_MODE === 'true';\n};\n\n// =============================================================================\n// MOCK USER DATA FOR DEVELOPMENT\n// =============================================================================\n\n/**\n * Determine user role based on email address for development\n */\nexport const determineUserRoleFromEmail = (email: string): UserRole => {\n  if (email.includes('buyer@')) {\n    return 'buyer';\n  } else if (email.includes('seller@')) {\n    return 'seller';\n  } else if (email.includes('admin@')) {\n    return 'admin';\n  }\n  // Default to seller for backward compatibility\n  return 'seller';\n};\n\n/**\n * Create a mock user for development bypass\n */\nexport const createMockUser = (email?: string, role?: UserRole): User => {\n  // Determine role from email if not provided\n  const userRole = role || (email ? determineUserRoleFromEmail(email) : 'seller');\n\n  // Generate appropriate user data based on role\n  const getRoleSpecificData = (role: UserRole) => {\n    switch (role) {\n      case 'buyer':\n        return {\n          name: 'Development Buyer',\n          email: email || 'buyer@test.com',\n        };\n      case 'seller':\n        return {\n          name: 'Development Seller',\n          email: email || 'seller@test.com',\n        };\n      case 'admin':\n        return {\n          name: 'Development Admin',\n          email: email || 'admin@test.com',\n        };\n      default:\n        return {\n          name: 'Development User',\n          email: email || 'dev@upswitch.com',\n        };\n    }\n  };\n\n  const roleData = getRoleSpecificData(userRole);\n\n  const mockUser: User = {\n    id: `dev-${userRole}-123`,\n    email: roleData.email,\n    name: roleData.name,\n    role: userRole,\n    email_verified: true,\n    country: 'BE',\n    auth_provider: 'email',\n    language_preference: 'en',\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    preferences: {\n      language: 'en',\n      timezone: 'UTC',\n    },\n  };\n\n  return mockUser;\n};\n\n/**\n * Create mock authentication result for development\n */\nexport const createMockAuthResult = (email?: string, role?: UserRole) => {\n  return {\n    isAuthenticated: true,\n    user: createMockUser(email, role),\n    token: 'dev-mock-token',\n  };\n};\n\n// =============================================================================\n// DEVELOPMENT BYPASS FUNCTIONS\n// =============================================================================\n\n/**\n * Check authentication with development bypass\n */\nexport const checkAuthWithBypass = async (\n  originalCheckAuth: () => Promise<any>,\n  email?: string,\n  defaultRole?: UserRole\n): Promise<any> => {\n  // 🚨 DEVELOPMENT BYPASS: Check if dev bypass is enabled\n  if (isDevBypassEnabled()) {\n    return createMockAuthResult(email, defaultRole);\n  }\n\n  // Normal authentication check\n  return await originalCheckAuth();\n};\n\n/**\n * Get authenticated user with development bypass\n */\nexport const getAuthenticatedUserWithBypass = (\n  originalGetUser: () => any,\n  email?: string,\n  defaultRole?: UserRole\n): any => {\n  // 🚨 DEVELOPMENT BYPASS: Check if dev bypass is enabled\n  if (isDevBypassEnabled()) {\n    return createMockUser(email, defaultRole);\n  }\n\n  // Normal user retrieval\n  return originalGetUser();\n};\n\n/**\n * Protected route bypass for development\n */\nexport const shouldBypassProtectedRoute = (): boolean => {\n  if (isDevBypassEnabled()) {\n    return true;\n  }\n\n  return false;\n};\n\n// =============================================================================\n// DEVELOPMENT LOGGING UTILITIES\n// =============================================================================\n\n/**\n * Development logger that only logs in dev mode\n */\nexport const devLog = (message: string, data?: any): void => {\n  if (isDevelopmentMode() && isDebugModeEnabled()) {\n    console.log(`[DEV] ${message}`, data);\n  }\n};\n\n/**\n * Development warning logger\n */\nexport const devWarn = (message: string, data?: any): void => {\n  if (isDevelopmentMode()) {\n    console.warn(`[DEV] ${message}`, data);\n  }\n};\n\n/**\n * Development error logger\n */\nexport const devError = (message: string, error?: any): void => {\n  if (isDevelopmentMode()) {\n    console.error(`[DEV] ${message}`, error);\n  }\n};\n\n// =============================================================================\n// DEVELOPMENT ENVIRONMENT INFO\n// =============================================================================\n\n/**\n * Log development environment information\n */\nexport const logDevEnvironmentInfo = (): void => {\n  if (isDevelopmentMode()) {\n    if (isDevBypassEnabled()) {\n      console.log('Development bypass is enabled');\n    }\n  }\n};\n\n// =============================================================================\n// DEVELOPMENT UTILITIES EXPORT\n// =============================================================================\n\nexport const devUtils = {\n  isDevBypassEnabled,\n  isDevelopmentMode,\n  isDebugModeEnabled,\n  createMockUser,\n  createMockAuthResult,\n  checkAuthWithBypass,\n  getAuthenticatedUserWithBypass,\n  shouldBypassProtectedRoute,\n  devLog,\n  devWarn,\n  devError,\n  logDevEnvironmentInfo,\n};\n\n// Auto-log environment info on import in development\nif (isDevelopmentMode()) {\n  logDevEnvironmentInfo();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[806,837],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[453,495],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[652,697],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1027,1072],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1272,1317],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1517,1564],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🪵 Logger Utility - Upswitch MVP\n *\n * Centralized logging utility that can be easily controlled\n * for development vs production environments.\n */\n\nconst isDevelopment = import.meta.env?.DEV || import.meta.env?.NODE_ENV === 'development';\n\nexport const logger = {\n  /**\n   * Log info messages (development only)\n   */\n  info: (message: string, ...args: unknown[]) => {\n    if (isDevelopment) {\n      // eslint-disable-next-line no-console\n      console.log(`[INFO] ${message}`, ...args);\n    }\n  },\n\n  /**\n   * Log error messages (always)\n   */\n  error: (message: string, ...args: unknown[]) => {\n    // eslint-disable-next-line no-console\n    console.error(`[ERROR] ${message}`, ...args);\n  },\n\n  /**\n   * Log warning messages (always)\n   */\n  warn: (message: string, ...args: unknown[]) => {\n    console.warn(message, ...args);\n  },\n\n  /**\n   * Log debug messages (development only)\n   */\n  debug: (message: string, ...args: unknown[]) => {\n    if (isDevelopment) {\n      // eslint-disable-next-line no-console\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  },\n\n  /**\n   * Log success messages (development only)\n   */\n  success: (message: string, ...args: unknown[]) => {\n    if (isDevelopment) {\n      // eslint-disable-next-line no-console\n      console.log(`[SUCCESS] ${message}`, ...args);\n    }\n  },\n\n  /**\n   * Log failure messages (development only)\n   */\n  failure: (message: string, ...args: unknown[]) => {\n    if (isDevelopment) {\n      // eslint-disable-next-line no-console\n      console.error(`[FAILURE] ${message}`, ...args);\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/seo/seoData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/seo/seoValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/ux/ScrollToTop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/shared/utils/ux/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/types/user.consolidated.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/matthiasmandiau/Downloads/flyp/apps/flyp-frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
ESLint found too many warnings (maximum: 0).
